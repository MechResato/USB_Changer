   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "e_eeprom_xmc1.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_FLASH_ReadWord,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_FLASH_ReadWord:
  23              	.LFB42:
  24              	 .file 1 "C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc/xmc1_flash.h"
   1:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
   2:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @file xmc1_flash.h
   3:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @date 2019-12-02
   4:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
   5:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @cond
   6:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
   9:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  12:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  14:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  21:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * a source language processor.
  27:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  28:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  36:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  41:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Change History
  42:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * --------------
  43:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  44:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2014-12-10:
  45:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2015-02-20:
  47:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Updated for Documentation related changes<br>
  48:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2015-06-20:
  49:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  50:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2019-05-04:
  51:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Moved definitions of XMC_FLASH_ProgramPage() and XMC_FLASH_EraseSector() from xmc_flash.h
  52:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Changed XMC_FLASH_ProgramPage() and XMC_FLASH_EraseSector() to return status of operation
  53:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Changed XMC_FLASH_ErasePages(), XMC_FLASH_ErasePage(), XMC_FLASH_ProgramVerifyPage() to re
  54:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2019-12-02:
  55:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Fix including XMC1000_RomFunctionTable.h following the convention: angle brackets are used
  56:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  57:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @endcond
  58:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  59:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
  60:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  61:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #ifndef XMC1_FLASH_H
  62:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC1_FLASH_H
  63:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  64:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  65:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * HEADER FILES
  66:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  67:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  68:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #include "xmc_common.h"
  69:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  70:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #if UC_FAMILY == XMC1
  71:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  72:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #include "XMC1000_RomFunctionTable.h"
  73:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  74:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
  75:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @addtogroup XMClib XMC Peripheral Library
  76:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @{
  77:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** */
  78:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  79:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
  80:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @addtogroup FLASH
  81:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @{
  82:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** */
  83:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  84:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  85:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * MACROS
  86:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  87:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  88:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_PAGES_PER_SECTOR (16U)    /**< Number of pages in a sector. A page consists of 16
  89:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BLOCKS_PER_PAGE  (16U)    /**< Number of blocks in a page. A block consists of 4 
  90:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  91:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_SECTOR (4096U)  /**< Number of bytes in a sector. (16 pages * 256 bytes
  92:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_PAGE   (256U)   /**< Number of bytes in a page. (16 blocks * 16 bytes =
  93:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_BLOCK  (16U)    /**< Number of bytes in a block. (128 bits = 16 bytes)*
  94:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  95:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_SECTOR (1024U)  /**< Number of words in a sector. (16 pages * 64 words 
  96:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_PAGE   (64U)    /**< Number of words in a page. (16 blocks * 4 words = 
  97:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_BLOCK  (4U)     /**< Number of words in a block. (128 bit / 32 bit = 4 
  98:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  99:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_BLOCK_ADDR_MASK      (15U)    /*   Bitwise AND with block address is done to check th
 100:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_WriteBlocks() and XMC_FLAS
 101:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  APIs.*/
 102:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_PAGE_ADDR_MASK       (255U)   /*   Bitwise AND with page address is done to check the
 103:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_ErasePages() API.*/
 104:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_SECTOR_ADDR_MASK     (4095U)  /*   Bitwise AND with sector address is done to check t
 105:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_EraseSector API.*/
 106:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 107:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BASE             (0x10001000U) /**< Starting address of flash for XMC1 family of 
 108:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 109:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
 110:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * ENUMS
 111:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
 112:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 113:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines the status of flash, to verify the flash related API calls. Use type \a XMC_FLASH_STATU
 114:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  The members defines the respective masked status bits of \a NVMSTATUS register.
 115:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 116:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_STATUS
 117:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 118:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_OK                   = 0U,                          /**< Flash related operation
 119:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             completed*/
 120:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_BUSY                 = NVM_NVMSTATUS_BUSY_Msk,  /**< Cannot execute the flash re
 121:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             another operation is in
 122:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_SLEEP_MODE           = NVM_NVMSTATUS_SLEEP_Msk,     /**< Flash is in sleep mode*
 123:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_VERIFY_ERROR         = NVM_NVMSTATUS_VERR_Msk,      /**< Flash reported a verifi
 124:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_ECC1_READ_ERROR      = NVM_NVMSTATUS_ECC1READ_Msk,  /**< Flash reports a single 
 125:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             is automatically correc
 126:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_ECC2_READ_ERROR      = NVM_NVMSTATUS_ECC2READ_Msk,  /**< Flash reported at least
 127:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTOCOL_ERROR = NVM_NVMSTATUS_WRPERR_Msk,  /**< Write/Verify operation on
 128:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             failed due to protocol 
 129:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             protected sectors*/
 130:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_STATUS_t;
 131:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 132:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 133:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines NVM ready interrupt event. Use type \a XMC_FLASH_EVENT_t for this enum.
 134:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 135:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_EVENT
 136:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 137:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_EVENT_READY = NVM_NVMCONF_INT_ON_Msk  /**< Generates the NVM ready interrupts on flash 
 138:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_EVENT_t;
 139:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 140:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 141:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines hard read levels for strict data verification. Use type \a XMC_FLASH_HARDREAD_LEVEL_t f
 142:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  These \a hardread levels provide some margin to ensure that the data is really programmed with 
 143:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  levels for written and erased bits.
 144:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 145:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_HARDREAD_LEVEL
 146:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 147:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_NORMAL  = (uint16_t)0x0, /**< No \a hardread level verification enabled 
 148:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_WRITTEN = (uint16_t)0x1, /**< Enables strict margin compare for written 
 149:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_ERASED  = (uint16_t)0x2  /**< Enables strict margin compare for erased d
 150:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_HARDREAD_LEVEL_t;
 151:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 152:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
 153:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * API PROTOTYPES
 154:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
 155:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 156:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #ifdef __cplusplus
 157:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** extern "C" {
 158:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #endif
 159:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 160:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 161:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 162:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 163:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data is located.
 164:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 165:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 166:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 167:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 168:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Programs a single flash page associated with the specified \a address.\n\n XMC1000 Flash can be 
 169:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * page (256 bytes) using this API. It calls the Flash Firmware routine \a XMC1000_NvmProgVerify(un
 170:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * to perform the programming. Refer XMC1000 reference manual of for more details on flash firmware
 171:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * (Section 25.3). Call XMC_FLASH_GetStatus() API after calling this API, to verify the programming
 172:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 173:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note:</b><br>
 174:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 175:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 176:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 177:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 178:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 179:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 180:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data);
 181:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 182:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 183:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 184:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the starting address of the page to be erased.
 185:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 186:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 187:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 188:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 189:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a complete sector starting from the \a address specified.\n\n  XMC1000 Flash can be erase
 190:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls XMC_FLASH_Er
 191:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * times starting from the first page of the sector.. Call XMC_FLASH_GetStatus() API after calling 
 192:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * to verify the erase operation.\n
 193:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 194:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 195:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ErasePages() \n\n\n
 196:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 197:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_EraseSector(uint32_t *address);
 198:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 199:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 200:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 201:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address   Pointer to the starting address of the flash page from where the erase starts
 202:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_pages Number of pages to be erased.<BR> Range: [1 to (flash size / 256)]
 203:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 204:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 205:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 206:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><BR>
 207:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a set of flash memory pages.<BR><BR>
 208:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erase starts from the  specified \a address.
 209:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * It erases a maximum number of \a num_pages flash pages. The maximum erasable pages are limited t
 210:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * microcontroller flash size. It sets NVMPROG register to continuous page erase mode before erase 
 211:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * it action back to normal state on completion. Call XMC_FLASH_GetStatus() after calling this API 
 212:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * operation.\n
 213:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 214:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note:</b><BR>
 215:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be in busy state during erase operation. Hence no operations on flash are allowed unt
 216:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 217:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 218:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EraseSector(), XMC_FLASH_ErasePage() \n\n\n
 219:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 220:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 222:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 223:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 224:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages);
 225:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 226:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 227:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 228:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash block from where the write starts.
 229:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 230:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_blocks Maximum number of flash block writes needed.<BR> Range:  [1 to (flash size / 1
 231:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param verify     If \a true, hardware verification after block write is enabled else disabled.
 232:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 233:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 234:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 235:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 236:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Writes a set of data blocks into the flash.\n\n Minimum possible writable area is 16 byte block.
 237:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * register to continuous block write mode before write and resets it action back to normal state o
 238:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Call XMC_FLASH_GetStatus() API after calling this API to verify the erase operation.
 239:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 240:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note</b><br>
 241:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 242:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 243:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 244:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 245:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 246:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 247:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verif
 248:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 249:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 250:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 251:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash block from where the verification sta
 252:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 253:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_blocks Maximum number of flash blocks writes needed.<BR> Range:  [1 to (flash size / 
 254:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 255:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 256:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 257:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 258:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Performs verification of written data blocks.\n\n After calling XMC_FLASH_WriteBlocks() API, cal
 259:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * verify the correctness of written blocks. It sets the \a NVMPROG register into continuous block 
 260:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * write and resets it action back to normal state on completion. It reads back the written data bl
 261:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * and verify the values against the internal buffer values. Calling XMC_FLASH_GetStatus() API afte
 262:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * validates the result of verification.
 263:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 264:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 265:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 266:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 267:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 268:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_VerifyBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks);
 269:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 270:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 271:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 272:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 273:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  address    Pointer to the starting address of flash block from where the read starts.
 274:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  data       Pointer to the destination address, where the read data blocks to be stored.
 275:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  num_blocks Number of blocks to be read.<BR> Range:  [1 to (flash size / 16)]
 276:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 277:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 278:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 279:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 280:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Reads multiple blocks from flash in one shot, starting from the \a address specified.\n\n The re
 281:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * into the locations starting from the \a data address. Calling XMC_FLASH_GetStatus() API after ca
 282:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * verifies the read operation.
 283:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 284:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 285:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 286:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 287:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 288:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks);
 289:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 290:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 291:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 292:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 293:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the flash word address from where the read is expected
 294:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 295:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return <BR>
 296:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *   a 32bit data word stored in the specified \a address.
 297:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 298:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 299:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Reads a single word from the specified flash\a address.\n\n Calling XMC_FLASH_GetStatus() API af
 300:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * API returns the read status.
 301:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 302:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 303:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ReadBlocks()
 304:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 305:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 306:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE uint32_t XMC_FLASH_ReadWord(const uint32_t *const address)
 307:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
  25              	 .loc 1 307 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 308:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   return *address;
  39              	 .loc 1 308 0
  40 0008 7B68     	 ldr r3,[r7,#4]
  41 000a 1B68     	 ldr r3,[r3]
 309:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
  42              	 .loc 1 309 0
  43 000c 181C     	 mov r0,r3
  44 000e BD46     	 mov sp,r7
  45 0010 02B0     	 add sp,sp,#8
  46              	 
  47 0012 80BD     	 pop {r7,pc}
  48              	 .cfi_endproc
  49              	.LFE42:
  51              	 .section .text.XMC_FLASH_SetHardReadLevel,"ax",%progbits
  52              	 .align 2
  53              	 .code 16
  54              	 .thumb_func
  56              	XMC_FLASH_SetHardReadLevel:
  57              	.LFB47:
 310:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 311:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 312:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 313:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the starting address of the page to be erased
 314:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 315:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 316:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 317:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 318:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a single flash page associated to the specified \a address.\n\n XMC1000 Flash can be eras
 319:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls the Flash Fi
 320:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \a XMC1000_NvmErasePage(unsigned long pageAddr) to perform the erase operation. Refer XMC1000 re
 321:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * for more details on flash firmware routines (Section 25.3). Call XMC_FLASH_GetStatus() API after
 322:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * to verify the erase operation.\n
 323:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 324:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 325:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ErasePages() \n\n\n
 326:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 327:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ErasePage(uint32_t *address);
 328:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 329:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 330:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 331:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 332:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 333:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 334:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 335:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 336:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 337:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases, programs and verifies a single flash page starting from the \a address specified.\n\n XM
 338:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * programmed with granularity of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It i
 339:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash Firmware routine \a XMC1000_NvmProgVerify(unsigned long pageAddr) to perform the programmi
 340:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * reference manual of for more details on flash firmware routines (Section 25.3). Call XMC_FLASH_G
 341:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * calling this API, to verify the erase operation.
 342:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 343:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 344:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 345:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 346:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 347:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data);
 348:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 349:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 350:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 351:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param None
 352:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 353:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 354:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 355:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 356:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Enables the flash to enter into sleep mode by resetting the NVMCONF register NVM_ON bit.\n\n Fla
 357:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * sleep mode on any flash operation completion ready event trigger. To disable the sleep mode any 
 358:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * call the API XMC_FLASH_ExitSleepMode().\n
 359:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 360:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 361:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ExitSleepMode()\n\n\n
 362:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 363:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 364:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_EnterSleepMode(void)
 365:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 366:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (uint16_t)(~(uint32_t)NVM_NVMCONF_NVM_ON_Msk);
 367:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 368:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 369:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 370:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 371:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param None
 372:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 373:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 374:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 375:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 376:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Enables the flash to exit from sleep mode by setting the NVMCONF register NVM_ON bit.\n\n Callin
 377:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EnterSleepMode() allows the flash to renter into sleep mode.\n
 378:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 379:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 380:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EnterSleepMode()\n\n\n
 381:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 382:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 383:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_ExitSleepMode(void)
 384:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 385:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)NVM_NVMCONF_NVM_ON_Msk;
 386:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 387:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 388:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 389:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 390:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 391:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param sector Flash sector number for which the address extraction is needed<BR> Range:  [0 to 5
 392:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 393:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return uint32_t Starting address of the sector specified<BR> Range:  [0x10001000 to 0x10032000]
 394:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 395:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 396:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Finds the starting address of the specified \a sector number.\n\n
 397:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 398:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 399:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 400:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 401:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 402:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE uint32_t XMC_FLASH_GetSectorAddress(uint32_t sector)
 403:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 404:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   return (XMC_FLASH_BASE + (XMC_FLASH_BYTES_PER_SECTOR * sector));
 405:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 406:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 407:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 408:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 409:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 410:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_sectors    Number of sectors to be protected<BR> Range:  [0 to 51]
 411:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 412:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 413:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 414:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 415:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Protect the flash sectors starting from 0th sector to the specified \a num_sectors.\n\n It sets 
 416:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * SECPROT field with the value specified in \a num_sectors. Changing the protection limit can be a
 417:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * this API at runtime with a different value of \a num_sectors.\n\n
 418:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 419:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 420:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 421:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 422:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 423:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_SetSectorProtection(uint32_t num_sectors)
 424:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 425:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (~(uint16_t)NVM_NVMCONF_SECPROT_Msk);
 426:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)((uint16_t)num_sectors << NVM_NVMCONF_SECPROT_Pos);
 427:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 428:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 429:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 430:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 431:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 432:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param level Hard read levels specified in \a XMC_FLASH_HARDREAD_LEVEL_t.
 433:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 434:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 435:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 436:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 437:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Sets the hard read level for verification process.\n\n It insists the flash to do a strict margi
 438:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * with the written/erased data against the internal buffer. Sets the NVMCONF register HRLEV field 
 439:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * value. This hardread level is used until the end of the verification sequence and, may not be ch
 440:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 441:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 442:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 443:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 444:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 445:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_t level)
 446:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
  58              	 .loc 1 446 0
  59              	 .cfi_startproc
  60 0000 80B5     	 push {r7,lr}
  61              	.LCFI3:
  62              	 .cfi_def_cfa_offset 8
  63              	 .cfi_offset 7,-8
  64              	 .cfi_offset 14,-4
  65 0002 82B0     	 sub sp,sp,#8
  66              	.LCFI4:
  67              	 .cfi_def_cfa_offset 16
  68 0004 00AF     	 add r7,sp,#0
  69              	.LCFI5:
  70              	 .cfi_def_cfa_register 7
  71 0006 021C     	 mov r2,r0
  72 0008 FB1D     	 add r3,r7,#7
  73 000a 1A70     	 strb r2,[r3]
 447:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (uint16_t)(~(uint16_t)NVM_NVMCONF_HRLEV_Msk);
  74              	 .loc 1 447 0
  75 000c 0B4A     	 ldr r2,.L4
  76 000e 0B4B     	 ldr r3,.L4
  77 0010 1B89     	 ldrh r3,[r3,#8]
  78 0012 9BB2     	 uxth r3,r3
  79 0014 0621     	 mov r1,#6
  80 0016 8B43     	 bic r3,r1
  81 0018 9BB2     	 uxth r3,r3
  82 001a 1381     	 strh r3,[r2,#8]
 448:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)(level << (uint16_t)NVM_NVMCONF_HRLEV_Pos);
  83              	 .loc 1 448 0
  84 001c 0749     	 ldr r1,.L4
  85 001e 074B     	 ldr r3,.L4
  86 0020 1B89     	 ldrh r3,[r3,#8]
  87 0022 9AB2     	 uxth r2,r3
  88 0024 FB1D     	 add r3,r7,#7
  89 0026 1B78     	 ldrb r3,[r3]
  90 0028 9BB2     	 uxth r3,r3
  91 002a DB18     	 add r3,r3,r3
  92 002c 9BB2     	 uxth r3,r3
  93 002e 1343     	 orr r3,r2
  94 0030 9BB2     	 uxth r3,r3
  95 0032 0B81     	 strh r3,[r1,#8]
 449:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
  96              	 .loc 1 449 0
  97 0034 BD46     	 mov sp,r7
  98 0036 02B0     	 add sp,sp,#8
  99              	 
 100 0038 80BD     	 pop {r7,pc}
 101              	.L5:
 102 003a C046     	 .align 2
 103              	.L4:
 104 003c 00000540 	 .word 1074069504
 105              	 .cfi_endproc
 106              	.LFE47:
 108              	 .section .text.E_EEPROM_XMC1_GetAppVersion,"ax",%progbits
 109              	 .align 2
 110              	 .global E_EEPROM_XMC1_GetAppVersion
 111              	 .code 16
 112              	 .thumb_func
 114              	E_EEPROM_XMC1_GetAppVersion:
 115              	.LFB49:
 116              	 .file 2 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c"
   1:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**
   2:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @file e_eeprom_xmc1.c
   3:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @date 2018-08-08
   4:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
   5:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * NOTE:
   6:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
   8:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @cond
   9:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  10:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * E_EEPROM_XMC1 v4.1.14 - Emulates a portion of flash as an EEPROM for data storage.
  11:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  12:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * All rights reserved.
  14:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  15:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * following conditions are met:
  17:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  18:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   disclaimer.
  20:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  21:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  24:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  27:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  35:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  38:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  39:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Change History
  40:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * --------------
  41:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  42:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2015-02-16:
  43:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Initial version<br>
  44:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  45:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2015-04-24:
  46:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - E_EEPROM_XMC1_ReadBlockWithCRC API renamed to E_EEPROM_XMC1_VerifyBlockCrcStatus<br>
  47:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - E_EEPROM_XMC1_OPERATION_STATUS_t enumeration parameter names changed and additional status
  48:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *       E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN added.
  49:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  50:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2016-07-08:
  51:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Fixed incorrect case for an included header.<br>
  52:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  53:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2018-08-08:
  54:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Fixed issue E_EEPROM_XMC1_lGetPrevData() function to avoid that it can search beyond the e
  55:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  56:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @endcond
  57:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  58:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
  59:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  60:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
  61:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * HEADER FILES
  62:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  63:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  64:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #include "e_eeprom_xmc1.h"
  65:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  66:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
  67:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * MACROS
  68:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  69:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  70:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Define WEAK attribute */
  71:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #if !defined(__WEAK)
  72:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #if defined ( __CC_ARM )
  73:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  74:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __ICCARM__ )
  75:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __weak
  76:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __GNUC__ )
  77:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  78:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __TASKING__ )
  79:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  80:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
  81:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
  82:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  83:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Garbage Collection procedure States */
  84:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_UNINT             (0x0U)
  85:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_START        (0x1U)
  86:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_READ_NXTBLOCK     (0x2U)
  87:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_ERASE_PREV_BANK   (0x3U)
  88:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_REQUESTED         (0x4U)
  89:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_WRITE        (0x5U)
  90:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_END          (0x6U)
  91:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_NEXT_BANK_VALID   (0x7U)
  92:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_MARK_END_ERASE1   (0x8U)
  93:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_FAIL              (0x9U)
  94:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_IDLE              (0xAU)
  95:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  96:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Prepare DFLASH states states */
  97:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_FF         (0x1U)
  98:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_2F         (0x4U)
  99:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_2E         (0x5U)
 100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Cache Update states */ 
 103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_IDLE           (0U)
 104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_EMPTY_BLOCK    (1U)
 105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_NEXT_BLK       (2U)
 106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_UPDATE_DONE    (4U)
 107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Bank BLOCK values, used to store current status of the DFLASH */
 109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_ALL_ONES             ((uint32_t)0xFFFFFFFFU)
 110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_ALL_ZEROS            ((uint32_t)0x00000000U)
 111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_START_BIT            (0x80U)
 112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_BIT            (0x40U)
 113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_BIT              (0x10U)
 114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_MASK           ((uint32_t)(0x00004000U))
 115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_MASK             ((uint32_t)(0x00001000U))
 116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Internal Block status macros for implementation*/
 118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK1_DATA_SIZE     (12U)
 119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK2_DATA_SIZE     (14U)
 120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_8BIT_ALL_ONE         (0xFFU)
 121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND  ((uint32_t)(0xFFU))
 122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_SHIFT            (16U)
 123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_DUMMY_CRC            (0xA5A50000U)
 124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MASK_CRC             (0xFFFF0000U)
 125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Bank BLOCK offsets */
 127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_NEXT_VALID_OFFSET    (0U)
 128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BEGIN_OFFSET         (E_EEPROM_XMC1_FLASH_BLOCK_SIZE)
 129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_END_OF_COPY_OFFSET   (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 2U)
 130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_END_ERASE_OFFSET     (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 3U)
 131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_DATA_BLOCK_OFFSET    (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 16U)
 132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK1_DATA_OFFSET   (4U)
 133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK2_DATA_OFFSET   (2U)
 134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK_WRITE_IDLE     (0U)
 136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_FIRST_BLOCK_WRITE    (1U)
 137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_NEXT_BLOCK_WRITE     (2U)
 138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_LAST_BLOCK_WRITE     (3U)
 139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* States to monitor Garbage Collection completion, if it was interrupted earlier due to reset */
 141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NORMAL1         (0x2EU) /* Bank0 = VALID        BANK 1 = ERASED */
 142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_DATA_COPY1      (0x2AU) /* Bank0 = VALID        BANK 1 = COPY ON-GOING *
 143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_COPY_DONE2      (0x0AU) /* Bank0 = COPY COMPLETED  BANK 1 = COPY ON-GOIN
 144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NEXT_VALID2     (0x02U) /* Bank0 = COPY COMPLETED  BANK 1 = VALID */
 145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_END_ERASE2      (0xF2U) /* Bank0 = ERASE ON-GOING  BANK 1 = VALID */
 146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NORMAL2         (0xE2U) /* Bank1 = VALID        BANK 0 = ERASED */
 148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_DATA_COPY2      (0xA2U) /* Bank1 = VALID        BANK 0 = COPY ON-GOING *
 149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_COPY_DONE1      (0xA0U) /* Bank1 = COPY COMPLETED  BANK 0 = COPY ON-GOIN
 150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NEXT_VALID1     (0x20U) /* Bank1 = COPY COMPLETED  BANK 0 = VALID */
 151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_END_ERASE1      (0x2FU) /* Bank1 = ERASE ON-GOING  BANK 0 = VALID */
 152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_ALL_ERASED      (0xFFU)
 154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_2D        (0x2DU)
 156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_D2        (0xD2U)
 157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_AD        (0xADU)
 158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_DA        (0xDAU)
 159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_0D        (0x0DU)
 160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_D0        (0xD0U)
 161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_AF        (0xAFU)
 162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_FA        (0xFAU)
 163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_0F        (0x0FU)
 164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_F0        (0xF0U)
 165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_STATE          ((uint32_t)(0x20U))
 167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_COPY_COMPLETED       ((uint32_t)(0x00U))
 168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MARKER_MAX_SHIFT     ((uint32_t)(4U))
 170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK   ((uint32_t)(4U))
 171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PAGE1_EXTRA_WORDS    ((uint8_t)(48U))
 172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MARKER_POSITION      ((uint32_t)0x80U)
 173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /** Marker states on Init GC operation */
 175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_0                 ((uint32_t)0x00U)
 176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_1                 ((uint32_t)0x01U)
 177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_WRITTEN           ((uint32_t)0x00U)
 178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_ERASED            ((uint32_t)0x0FU)
 179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_DIRTY             ((uint32_t)0xDDU)
 180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BOTH_BANKS_VALID     ((uint32_t)0U) /* Both banks have clean markers */
 182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BANK0_INVALID        ((uint32_t)1U) /* Bank 0 is having dirty marker */
 183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BANK1_INVALID        ((uint32_t)2U) /* Bank 1 is having dirty marker */
 184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BOTH_BANKS_INVALID   ((uint32_t)3U) /* Both banks are having dirty markers */
 185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_TWO_BYTES            ((uint32_t)0x02U)
 187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_TWO_BIT_POS          ((uint32_t)0x02U)
 188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_FOUR_BYTES           ((uint32_t)0x04U)
 189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EIGHT_BYTES          ((uint32_t)0x08U)
 190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EIGHT_BIT_POS        ((uint32_t)0x08U)
 191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE (0x0U)
 193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_PREP_FLASH   (0x1U)
 194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_GC_STATE     (0x2U)
 195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * LOCAL DATA
 198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
 199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * LOCAL ROUTINES
 202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
 203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data);
 205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data);
 206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data);
 207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address);
 208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadSingleWord(uint32_t const address);
 209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void);
 210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitDirtyStateMachine(void);
 212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitNormalStateMachine(void);
 213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitllegalStateMachine(void);
 214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void);
 215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void);
 216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void);
 217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGc(const uint32_t  marker_dirty_state);
 218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process);
 219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset);
 220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPrepareDFlash(void);
 222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lGarbageCollection(void);
 223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void);
 224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state);
 225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block);
 226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset);
 227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void);
 228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery(uint32_t current_state ,
 229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                          uint32_t NextState,
 230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                          uint32_t page_addr_select);
 231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCache(void);
 233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEvalBlockStatus(void);
 234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void);
 235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void);
 236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr);
 237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void);
 239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number);
 240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size);
 241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address);
 242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address);
 243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcStartCopy(void);
 245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcRequested(void);
 246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void);
 247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcCopyWrite(void);
 248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state);
 249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void);
 250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t user_block_index);
 251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr);
 252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lLocalWrite(uint8_t block_number,
 253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                           uint8_t* data_buffer_ptr,
 254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                           uint32_t invalidate);
 255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateNextBlock(uint8_t block_number,
 256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                              uint8_t* const user_data_buffer_ptr ,
 257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                              uint32_t block_size);
 258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number, uint8_t* user_data_buffer_ptr, 
 259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_lReadBlockCrcStatus(uint8_t block_number,
 261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                           uint8_t* data_buffer_ptr,
 262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                           uint32_t block_size);
 263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *data_buffer_ptr, uint32_t length, uint32_
 265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetPrevData(uint8_t block_number);
 266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lSearchBlockCopy(uint8_t required_block_number,
 267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t read_addr ,
 268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t data_sec_start_addr);
 269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *  These are global functions used only for internal testing purpose.
 271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *  Application code shall not use these variables by enabling E_EEPROM_XMC1_TEST_HOOK_ENABLE macro
 272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
 274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(uint32_t const address, const uint32_t *const 
 275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(uint32_t const address, uint32_t *const data)
 278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(uint32_t const address, const uint32_t *const d
 281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(uint32_t const address)
 284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK uint32_t E_EEPROM_XMC1_TEST_HOOK_ReadSingleWord(uint32_t const address)
 287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** return (0U);
 289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK uint32_t E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus(void)
 291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** return (0U);
 293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * API IMPLEMENTATION
 298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** ***************************************************************************************************
 299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : DAVE_APP_VERSION_t
 304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Reads the APP implementation version.
 306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** DAVE_APP_VERSION_t E_EEPROM_XMC1_GetAppVersion(void)
 308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 117              	 .loc 2 308 0
 118              	 .cfi_startproc
 119 0000 80B5     	 push {r7,lr}
 120              	.LCFI6:
 121              	 .cfi_def_cfa_offset 8
 122              	 .cfi_offset 7,-8
 123              	 .cfi_offset 14,-4
 124 0002 82B0     	 sub sp,sp,#8
 125              	.LCFI7:
 126              	 .cfi_def_cfa_offset 16
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI8:
 129              	 .cfi_def_cfa_register 7
 309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   DAVE_APP_VERSION_t version;
 310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.major = E_EEPROM_XMC1_MAJOR_VERSION;
 130              	 .loc 2 311 0
 131 0006 3B1C     	 mov r3,r7
 132 0008 0422     	 mov r2,#4
 133 000a 1A70     	 strb r2,[r3]
 312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.minor = E_EEPROM_XMC1_MINOR_VERSION;
 134              	 .loc 2 312 0
 135 000c 3B1C     	 mov r3,r7
 136 000e 0122     	 mov r2,#1
 137 0010 5A70     	 strb r2,[r3,#1]
 313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.patch = E_EEPROM_XMC1_PATCH_VERSION;
 138              	 .loc 2 313 0
 139 0012 3B1C     	 mov r3,r7
 140 0014 0E22     	 mov r2,#14
 141 0016 9A70     	 strb r2,[r3,#2]
 314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return version;
 142              	 .loc 2 315 0
 143 0018 3B1D     	 add r3,r7,#4
 144 001a 3A1C     	 mov r2,r7
 145 001c 1188     	 ldrh r1,[r2]
 146 001e 1980     	 strh r1,[r3]
 147 0020 9278     	 ldrb r2,[r2,#2]
 148 0022 9A70     	 strb r2,[r3,#2]
 149 0024 3A1D     	 add r2,r7,#4
 150 0026 0023     	 mov r3,#0
 151 0028 1178     	 ldrb r1,[r2]
 152 002a FF20     	 mov r0,#255
 153 002c 0140     	 and r1,r0
 154 002e FF20     	 mov r0,#255
 155 0030 8343     	 bic r3,r0
 156 0032 0B43     	 orr r3,r1
 157 0034 5178     	 ldrb r1,[r2,#1]
 158 0036 FF20     	 mov r0,#255
 159 0038 0140     	 and r1,r0
 160 003a 0902     	 lsl r1,r1,#8
 161 003c 0648     	 ldr r0,.L8
 162 003e 0340     	 and r3,r0
 163 0040 0B43     	 orr r3,r1
 164 0042 9278     	 ldrb r2,[r2,#2]
 165 0044 FF21     	 mov r1,#255
 166 0046 0A40     	 and r2,r1
 167 0048 1204     	 lsl r2,r2,#16
 168 004a 0449     	 ldr r1,.L8+4
 169 004c 0B40     	 and r3,r1
 170 004e 1343     	 orr r3,r2
 316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 171              	 .loc 2 316 0
 172 0050 181C     	 mov r0,r3
 173 0052 BD46     	 mov sp,r7
 174 0054 02B0     	 add sp,sp,#8
 175              	 
 176 0056 80BD     	 pop {r7,pc}
 177              	.L9:
 178              	 .align 2
 179              	.L8:
 180 0058 FF00FFFF 	 .word -65281
 181 005c FFFF00FF 	 .word -16711681
 182              	 .cfi_endproc
 183              	.LFE49:
 185              	 .section .text.E_EEPROM_XMC1_Init,"ax",%progbits
 186              	 .align 2
 187              	 .global E_EEPROM_XMC1_Init
 188              	 .code 16
 189              	 .thumb_func
 191              	E_EEPROM_XMC1_Init:
 192              	.LFB50:
 317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : handle_ptr
 320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Driver Module Initialization function. This service shall initialize the Flash
 324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   module using the values provided by configuration set.
 325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_Init(E_EEPROM_XMC1_t *const handle_ptr)
 327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 193              	 .loc 2 327 0
 194              	 .cfi_startproc
 195 0000 80B5     	 push {r7,lr}
 196              	.LCFI9:
 197              	 .cfi_def_cfa_offset 8
 198              	 .cfi_offset 7,-8
 199              	 .cfi_offset 14,-4
 200 0002 86B0     	 sub sp,sp,#24
 201              	.LCFI10:
 202              	 .cfi_def_cfa_offset 32
 203 0004 00AF     	 add r7,sp,#0
 204              	.LCFI11:
 205              	 .cfi_def_cfa_register 7
 206 0006 7860     	 str r0,[r7,#4]
 328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
 329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_state;
 330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (handle_ptr != NULL));
 332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the E_EEPROM_XMC1_Init API is called once*/
 334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
 207              	 .loc 2 334 0
 208 0008 7B68     	 ldr r3,[r7,#4]
 209 000a 1B7A     	 ldrb r3,[r3,#8]
 210 000c 002B     	 cmp r3,#0
 211 000e 00D1     	 bne .LCB174
 212 0010 84E0     	 b .L11
 213              	.LCB174:
 335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     handle_ptr->state = (E_EEPROM_XMC1_STATUS_t)CRC_SW_Init(handle_ptr->crc_handle_ptr);
 338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
 339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
 341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     #endif
 344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Initialize the cache variables for the User defined Block configuration list */
 346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       indx = 0U;
 214              	 .loc 2 346 0
 215 0012 0023     	 mov r3,#0
 216 0014 7B61     	 str r3,[r7,#20]
 217              	.L12:
 218              	.LBB2:
 347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       do
 348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_CACHE_t * block_ptr;
 350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr = &(handle_ptr->data_ptr->block_info[indx]);
 219              	 .loc 2 350 0 discriminator 1
 220 0016 7B68     	 ldr r3,[r7,#4]
 221 0018 5A68     	 ldr r2,[r3,#4]
 222 001a 7B69     	 ldr r3,[r7,#20]
 223 001c DB00     	 lsl r3,r3,#3
 224 001e D318     	 add r3,r2,r3
 225 0020 3B61     	 str r3,[r7,#16]
 351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->address = 0U;
 226              	 .loc 2 352 0 discriminator 1
 227 0022 3B69     	 ldr r3,[r7,#16]
 228 0024 0022     	 mov r2,#0
 229 0026 1A60     	 str r2,[r3]
 353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.consistent = 0U;
 230              	 .loc 2 353 0 discriminator 1
 231 0028 3B69     	 ldr r3,[r7,#16]
 232 002a 1A79     	 ldrb r2,[r3,#4]
 233 002c 0221     	 mov r1,#2
 234 002e 8A43     	 bic r2,r1
 235 0030 1A71     	 strb r2,[r3,#4]
 354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.valid = 1U;
 236              	 .loc 2 354 0 discriminator 1
 237 0032 3B69     	 ldr r3,[r7,#16]
 238 0034 1A79     	 ldrb r2,[r3,#4]
 239 0036 0121     	 mov r1,#1
 240 0038 0A43     	 orr r2,r1
 241 003a 1A71     	 strb r2,[r3,#4]
 355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.copied = 0U;
 242              	 .loc 2 355 0 discriminator 1
 243 003c 3B69     	 ldr r3,[r7,#16]
 244 003e 1A79     	 ldrb r2,[r3,#4]
 245 0040 0421     	 mov r1,#4
 246 0042 8A43     	 bic r2,r1
 247 0044 1A71     	 strb r2,[r3,#4]
 356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.crc = 0U;
 248              	 .loc 2 356 0 discriminator 1
 249 0046 3B69     	 ldr r3,[r7,#16]
 250 0048 1A79     	 ldrb r2,[r3,#4]
 251 004a 0821     	 mov r1,#8
 252 004c 8A43     	 bic r2,r1
 253 004e 1A71     	 strb r2,[r3,#4]
 357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         indx++;
 254              	 .loc 2 357 0 discriminator 1
 255 0050 7B69     	 ldr r3,[r7,#20]
 256 0052 0133     	 add r3,r3,#1
 257 0054 7B61     	 str r3,[r7,#20]
 258              	.LBE2:
 358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       } while (indx < handle_ptr->block_count);
 259              	 .loc 2 358 0 discriminator 1
 260 0056 7B68     	 ldr r3,[r7,#4]
 261 0058 5B7A     	 ldrb r3,[r3,#9]
 262 005a 1A1E     	 sub r2,r3,#0
 263 005c 7B69     	 ldr r3,[r7,#20]
 264 005e 9A42     	 cmp r2,r3
 265 0060 D9D8     	 bhi .L12
 359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /********* Initialize all global variables *****************/
 361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->updated_cache_index = 0U;
 266              	 .loc 2 361 0
 267 0062 7B68     	 ldr r3,[r7,#4]
 268 0064 5A68     	 ldr r2,[r3,#4]
 269 0066 B623     	 mov r3,#182
 270 0068 5B00     	 lsl r3,r3,#1
 271 006a 0021     	 mov r1,#0
 272 006c D150     	 str r1,[r2,r3]
 362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->cache_state = E_EEPROM_XMC1_CACHE_IDLE;
 273              	 .loc 2 362 0
 274 006e 7B68     	 ldr r3,[r7,#4]
 275 0070 5A68     	 ldr r2,[r3,#4]
 276 0072 B423     	 mov r3,#180
 277 0074 5B00     	 lsl r3,r3,#1
 278 0076 0021     	 mov r1,#0
 279 0078 D150     	 str r1,[r2,r3]
 363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_state = E_EEPROM_XMC1_GC_UNINT;
 280              	 .loc 2 363 0
 281 007a 7B68     	 ldr r3,[r7,#4]
 282 007c 5A68     	 ldr r2,[r3,#4]
 283 007e AE23     	 mov r3,#174
 284 0080 5B00     	 lsl r3,r3,#1
 285 0082 0021     	 mov r1,#0
 286 0084 D150     	 str r1,[r2,r3]
 364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->init_gc_state = 0U;
 287              	 .loc 2 364 0
 288 0086 7B68     	 ldr r3,[r7,#4]
 289 0088 5A68     	 ldr r2,[r3,#4]
 290 008a B023     	 mov r3,#176
 291 008c 5B00     	 lsl r3,r3,#1
 292 008e 0021     	 mov r1,#0
 293 0090 D150     	 str r1,[r2,r3]
 365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_log_block_count = 0U;
 294              	 .loc 2 365 0
 295 0092 7B68     	 ldr r3,[r7,#4]
 296 0094 5A68     	 ldr r2,[r3,#4]
 297 0096 B223     	 mov r3,#178
 298 0098 5B00     	 lsl r3,r3,#1
 299 009a 0021     	 mov r1,#0
 300 009c D150     	 str r1,[r2,r3]
 366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->crc_buffer = 0U;
 301              	 .loc 2 366 0
 302 009e 7B68     	 ldr r3,[r7,#4]
 303 00a0 5B68     	 ldr r3,[r3,#4]
 304 00a2 0022     	 mov r2,#0
 305 00a4 5A65     	 str r2,[r3,#84]
 367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->written_block_counter = (uint32_t)0;
 306              	 .loc 2 368 0
 307 00a6 7B68     	 ldr r3,[r7,#4]
 308 00a8 5B68     	 ldr r3,[r3,#4]
 309 00aa 0022     	 mov r2,#0
 310 00ac 1A64     	 str r2,[r3,#64]
 369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->curr_bank_src_addr = 0U;
 311              	 .loc 2 369 0
 312 00ae 7B68     	 ldr r3,[r7,#4]
 313 00b0 5B68     	 ldr r3,[r3,#4]
 314 00b2 0022     	 mov r2,#0
 315 00b4 9A63     	 str r2,[r3,#56]
 370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_src_addr = 0U;
 316              	 .loc 2 370 0
 317 00b6 7B68     	 ldr r3,[r7,#4]
 318 00b8 5B68     	 ldr r3,[r3,#4]
 319 00ba 0022     	 mov r2,#0
 320 00bc 9A62     	 str r2,[r3,#40]
 371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_dest_addr = 0U;
 321              	 .loc 2 371 0
 322 00be 7B68     	 ldr r3,[r7,#4]
 323 00c0 5B68     	 ldr r3,[r3,#4]
 324 00c2 0022     	 mov r2,#0
 325 00c4 5A62     	 str r2,[r3,#36]
 372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->next_free_block_addr = 0U;
 326              	 .loc 2 372 0
 327 00c6 7B68     	 ldr r3,[r7,#4]
 328 00c8 5B68     	 ldr r3,[r3,#4]
 329 00ca 0022     	 mov r2,#0
 330 00cc 5A63     	 str r2,[r3,#52]
 373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_block_counter = (uint32_t)0;
 331              	 .loc 2 373 0
 332 00ce 7B68     	 ldr r3,[r7,#4]
 333 00d0 5B68     	 ldr r3,[r3,#4]
 334 00d2 0022     	 mov r2,#0
 335 00d4 DA63     	 str r2,[r3,#60]
 374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->user_write_bytes_count = 0U;
 336              	 .loc 2 374 0
 337 00d6 7B68     	 ldr r3,[r7,#4]
 338 00d8 5A68     	 ldr r2,[r3,#4]
 339 00da AC23     	 mov r3,#172
 340 00dc 5B00     	 lsl r3,r3,#1
 341 00de 0021     	 mov r1,#0
 342 00e0 D150     	 str r1,[r2,r3]
 375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->current_bank = 0U;
 343              	 .loc 2 376 0
 344 00e2 7B68     	 ldr r3,[r7,#4]
 345 00e4 5B68     	 ldr r3,[r3,#4]
 346 00e6 0022     	 mov r2,#0
 347 00e8 1A62     	 str r2,[r3,#32]
 377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_WRITTEN);
 348              	 .loc 2 378 0
 349 00ea 0120     	 mov r0,#1
 350 00ec FFF7FEFF 	 bl XMC_FLASH_SetHardReadLevel
 379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Read the marker blocks from flash and decide the MARKER STATES */
 381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       marker_state = E_EEPROM_XMC1_lReadMarkerBlocks();
 351              	 .loc 2 381 0
 352 00f0 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadMarkerBlocks
 353 00f4 031C     	 mov r3,r0
 354 00f6 FB60     	 str r3,[r7,#12]
 382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*
 385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * Call INIT-GC state machine function to take decision on current MARKER STATE available.
 386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * Progress to GC state machine or PrepareDFLASH State machine after completing  the Cache up
 387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        */
 388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGc(marker_state);
 355              	 .loc 2 388 0
 356 00f8 FB68     	 ldr r3,[r7,#12]
 357 00fa 181C     	 mov r0,r3
 358 00fc FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGc
 389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If Initialization is done without any errors, set the INIT API called state into Initializ
 391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (handle_ptr->data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 359              	 .loc 2 391 0
 360 0100 7B68     	 ldr r3,[r7,#4]
 361 0102 5A68     	 ldr r2,[r3,#4]
 362 0104 AE23     	 mov r3,#174
 363 0106 5B00     	 lsl r3,r3,#1
 364 0108 D358     	 ldr r3,[r2,r3]
 365 010a 0A2B     	 cmp r3,#10
 366 010c 03D1     	 bne .L13
 392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         handle_ptr->state = E_EEPROM_XMC1_STATUS_SUCCESS;
 367              	 .loc 2 393 0
 368 010e 7B68     	 ldr r3,[r7,#4]
 369 0110 0022     	 mov r2,#0
 370 0112 1A72     	 strb r2,[r3,#8]
 371 0114 02E0     	 b .L11
 372              	.L13:
 394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
 373              	 .loc 2 397 0
 374 0116 7B68     	 ldr r3,[r7,#4]
 375 0118 0122     	 mov r2,#1
 376 011a 1A72     	 strb r2,[r3,#8]
 377              	.L11:
 398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (handle_ptr->state);
 378              	 .loc 2 401 0
 379 011c 7B68     	 ldr r3,[r7,#4]
 380 011e 1B7A     	 ldrb r3,[r3,#8]
 402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 381              	 .loc 2 402 0
 382 0120 181C     	 mov r0,r3
 383 0122 BD46     	 mov sp,r7
 384 0124 06B0     	 add sp,sp,#24
 385              	 
 386 0126 80BD     	 pop {r7,pc}
 387              	 .cfi_endproc
 388              	.LFE50:
 390              	 .section .text.E_EEPROM_XMC1_Write,"ax",%progbits
 391              	 .align 2
 392              	 .global E_EEPROM_XMC1_Write
 393              	 .code 16
 394              	 .thumb_func
 396              	E_EEPROM_XMC1_Write:
 397              	.LFB51:
 403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block (Block-ID)
 406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Pointer to user data buffer
 407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : E_EEPROM_XMC1_OPERATION_STATUS_t
 409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function shall write user data block into flash.
 411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Write(uint8_t block_number, uint8_t *data_buffer_ptr
 413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 398              	 .loc 2 413 0
 399              	 .cfi_startproc
 400 0000 80B5     	 push {r7,lr}
 401              	.LCFI12:
 402              	 .cfi_def_cfa_offset 8
 403              	 .cfi_offset 7,-8
 404              	 .cfi_offset 14,-4
 405 0002 84B0     	 sub sp,sp,#16
 406              	.LCFI13:
 407              	 .cfi_def_cfa_offset 24
 408 0004 00AF     	 add r7,sp,#0
 409              	.LCFI14:
 410              	 .cfi_def_cfa_register 7
 411 0006 021C     	 mov r2,r0
 412 0008 3960     	 str r1,[r7]
 413 000a FB1D     	 add r3,r7,#7
 414 000c 1A70     	 strb r2,[r3]
 414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 415              	 .loc 2 417 0
 416 000e 104B     	 ldr r3,.L18
 417 0010 5B68     	 ldr r3,[r3,#4]
 418 0012 BB60     	 str r3,[r7,#8]
 418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(block_numbe
 420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                         E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND));
 421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 419              	 .loc 2 423 0
 420 0014 0F23     	 mov r3,#15
 421 0016 FB18     	 add r3,r7,r3
 422 0018 0522     	 mov r2,#5
 423 001a 1A70     	 strb r2,[r3]
 424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute only if there is no previous pending request and the GC process is in IDLE state */
 426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 424              	 .loc 2 426 0
 425 001c BA68     	 ldr r2,[r7,#8]
 426 001e AE23     	 mov r3,#174
 427 0020 5B00     	 lsl r3,r3,#1
 428 0022 D358     	 ldr r3,[r2,r3]
 429 0024 0A2B     	 cmp r3,#10
 430 0026 0BD1     	 bne .L16
 427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to write the specified block of data into flash */
 429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite(block_number, data_buffer_
 431              	 .loc 2 429 0
 432 0028 FB1D     	 add r3,r7,#7
 433 002a 1A78     	 ldrb r2,[r3]
 434 002c 3B68     	 ldr r3,[r7]
 435 002e 101C     	 mov r0,r2
 436 0030 191C     	 mov r1,r3
 437 0032 0022     	 mov r2,#0
 438 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lLocalWrite
 439 0038 021C     	 mov r2,r0
 440 003a 0F23     	 mov r3,#15
 441 003c FB18     	 add r3,r7,r3
 442 003e 1A70     	 strb r2,[r3]
 443              	.L16:
 430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 444              	 .loc 2 432 0
 445 0040 0F23     	 mov r3,#15
 446 0042 FB18     	 add r3,r7,r3
 447 0044 1B78     	 ldrb r3,[r3]
 433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 448              	 .loc 2 433 0
 449 0046 181C     	 mov r0,r3
 450 0048 BD46     	 mov sp,r7
 451 004a 04B0     	 add sp,sp,#16
 452              	 
 453 004c 80BD     	 pop {r7,pc}
 454              	.L19:
 455 004e C046     	 .align 2
 456              	.L18:
 457 0050 00000000 	 .word E_EEPROM_XMC1_0
 458              	 .cfi_endproc
 459              	.LFE51:
 461              	 .section .text.E_EEPROM_XMC1_InvalidateBlock,"ax",%progbits
 462              	 .align 2
 463              	 .global E_EEPROM_XMC1_InvalidateBlock
 464              	 .code 16
 465              	 .thumb_func
 467              	E_EEPROM_XMC1_InvalidateBlock:
 468              	.LFB52:
 434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : block_number  - Number of logical block (Block-ID)
 437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
 438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * 
 440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : This function shall invalidate user data block.
 441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
 442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_InvalidateBlock(uint8_t block_number)
 443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 469              	 .loc 2 443 0
 470              	 .cfi_startproc
 471 0000 80B5     	 push {r7,lr}
 472              	.LCFI15:
 473              	 .cfi_def_cfa_offset 8
 474              	 .cfi_offset 7,-8
 475              	 .cfi_offset 14,-4
 476 0002 86B0     	 sub sp,sp,#24
 477              	.LCFI16:
 478              	 .cfi_def_cfa_offset 32
 479 0004 00AF     	 add r7,sp,#0
 480              	.LCFI17:
 481              	 .cfi_def_cfa_register 7
 482 0006 021C     	 mov r2,r0
 483 0008 FB1D     	 add r3,r7,#7
 484 000a 1A70     	 strb r2,[r3]
 444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* data_buffer_ptr;
 445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 485              	 .loc 2 448 0
 486 000c 114B     	 ldr r3,.L23
 487 000e 5B68     	 ldr r3,[r3,#4]
 488 0010 3B61     	 str r3,[r7,#16]
 449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_InvalidateBlock:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(b
 450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                   E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND
 451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_buffer_ptr =  data_ptr->read_write_buffer;
 489              	 .loc 2 451 0
 490 0012 3B69     	 ldr r3,[r7,#16]
 491 0014 4433     	 add r3,r3,#68
 492 0016 FB60     	 str r3,[r7,#12]
 452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 493              	 .loc 2 452 0
 494 0018 1723     	 mov r3,#23
 495 001a FB18     	 add r3,r7,r3
 496 001c 0522     	 mov r2,#5
 497 001e 1A70     	 strb r2,[r3]
 453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute only if there is no previous pending request and the GC process is in IDLE state */
 455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 498              	 .loc 2 455 0
 499 0020 3A69     	 ldr r2,[r7,#16]
 500 0022 AE23     	 mov r3,#174
 501 0024 5B00     	 lsl r3,r3,#1
 502 0026 D358     	 ldr r3,[r2,r3]
 503 0028 0A2B     	 cmp r3,#10
 504 002a 0BD1     	 bne .L21
 456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to write the specified block of data into flash */
 458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite( block_number, data_buffer
 505              	 .loc 2 458 0
 506 002c FB1D     	 add r3,r7,#7
 507 002e 1A78     	 ldrb r2,[r3]
 508 0030 FB68     	 ldr r3,[r7,#12]
 509 0032 101C     	 mov r0,r2
 510 0034 191C     	 mov r1,r3
 511 0036 0122     	 mov r2,#1
 512 0038 FFF7FEFF 	 bl E_EEPROM_XMC1_lLocalWrite
 513 003c 021C     	 mov r2,r0
 514 003e 1723     	 mov r3,#23
 515 0040 FB18     	 add r3,r7,r3
 516 0042 1A70     	 strb r2,[r3]
 517              	.L21:
 459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 518              	 .loc 2 461 0
 519 0044 1723     	 mov r3,#23
 520 0046 FB18     	 add r3,r7,r3
 521 0048 1B78     	 ldrb r3,[r3]
 462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 522              	 .loc 2 462 0
 523 004a 181C     	 mov r0,r3
 524 004c BD46     	 mov sp,r7
 525 004e 06B0     	 add sp,sp,#24
 526              	 
 527 0050 80BD     	 pop {r7,pc}
 528              	.L24:
 529 0052 C046     	 .align 2
 530              	.L23:
 531 0054 00000000 	 .word E_EEPROM_XMC1_0
 532              	 .cfi_endproc
 533              	.LFE52:
 535              	 .section .text.E_EEPROM_XMC1_Read,"ax",%progbits
 536              	 .align 2
 537              	 .global E_EEPROM_XMC1_Read
 538              	 .code 16
 539              	 .thumb_func
 541              	E_EEPROM_XMC1_Read:
 542              	.LFB53:
 463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block
 466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset      - Start Location for Read start
 467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length      - End Location for read completion
 469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                                                                   
 472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall read user data blocks from flash.
 473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Read(uint8_t block_number,
 475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint32_t offset,
 476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint8_t *data_buffer_ptr,
 477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint32_t length)
 478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 543              	 .loc 2 478 0
 544              	 .cfi_startproc
 545 0000 80B5     	 push {r7,lr}
 546              	.LCFI18:
 547              	 .cfi_def_cfa_offset 8
 548              	 .cfi_offset 7,-8
 549              	 .cfi_offset 14,-4
 550 0002 88B0     	 sub sp,sp,#32
 551              	.LCFI19:
 552              	 .cfi_def_cfa_offset 40
 553 0004 00AF     	 add r7,sp,#0
 554              	.LCFI20:
 555              	 .cfi_def_cfa_register 7
 556 0006 B960     	 str r1,[r7,#8]
 557 0008 7A60     	 str r2,[r7,#4]
 558 000a 3B60     	 str r3,[r7]
 559 000c 0F23     	 mov r3,#15
 560 000e FB18     	 add r3,r7,r3
 561 0010 021C     	 add r2,r0,#0
 562 0012 1A70     	 strb r2,[r3]
 479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 563              	 .loc 2 484 0
 564 0014 314B     	 ldr r3,.L30
 565 0016 5B68     	 ldr r3,[r3,#4]
 566 0018 BB61     	 str r3,[r7,#24]
 485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 567              	 .loc 2 485 0
 568 001a 0F23     	 mov r3,#15
 569 001c FB18     	 add r3,r7,r3
 570 001e 1B78     	 ldrb r3,[r3]
 571 0020 181C     	 mov r0,r3
 572 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 573 0026 031C     	 mov r3,r0
 574 0028 7B61     	 str r3,[r7,#20]
 486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 575              	 .loc 2 486 0
 576 002a 2C4B     	 ldr r3,.L30
 577 002c 1A68     	 ldr r2,[r3]
 578 002e 7B69     	 ldr r3,[r7,#20]
 579 0030 DB00     	 lsl r3,r3,#3
 580 0032 D318     	 add r3,r2,r3
 581 0034 5B68     	 ldr r3,[r3,#4]
 582 0036 3B61     	 str r3,[r7,#16]
 487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Read:Wrong Block Number", (user_block_index  != E_EEPROM_XMC1_LOG_BLOCK
 489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Read:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 583              	 .loc 2 491 0
 584 0038 1F23     	 mov r3,#31
 585 003a FB18     	 add r3,r7,r3
 586 003c 0522     	 mov r2,#5
 587 003e 1A70     	 strb r2,[r3]
 492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
 588              	 .loc 2 494 0
 589 0040 BA69     	 ldr r2,[r7,#24]
 590 0042 AE23     	 mov r3,#174
 591 0044 5B00     	 lsl r3,r3,#1
 592 0046 D358     	 ldr r3,[r2,r3]
 593 0048 0A2B     	 cmp r3,#10
 594 004a 40D1     	 bne .L26
 595              	 .loc 2 494 0 is_stmt 0 discriminator 1
 596 004c BA68     	 ldr r2,[r7,#8]
 597 004e 3B68     	 ldr r3,[r7]
 598 0050 D218     	 add r2,r2,r3
 599 0052 3B69     	 ldr r3,[r7,#16]
 600 0054 9A42     	 cmp r2,r3
 601 0056 3AD8     	 bhi .L26
 495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
 602              	 .loc 2 496 0 is_stmt 1
 603 0058 BA69     	 ldr r2,[r7,#24]
 604 005a 7B69     	 ldr r3,[r7,#20]
 605 005c DB00     	 lsl r3,r3,#3
 606 005e D318     	 add r3,r2,r3
 607 0060 1B79     	 ldrb r3,[r3,#4]
 608 0062 DB07     	 lsl r3,r3,#31
 609 0064 DB0F     	 lsr r3,r3,#31
 610 0066 DBB2     	 uxtb r3,r3
 611 0068 002B     	 cmp r3,#0
 612 006a 04D1     	 bne .L27
 497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
 613              	 .loc 2 498 0
 614 006c 1F23     	 mov r3,#31
 615 006e FB18     	 add r3,r7,r3
 616 0070 0322     	 mov r2,#3
 617 0072 1A70     	 strb r2,[r3]
 618 0074 2BE0     	 b .L26
 619              	.L27:
 499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Inval
 620              	 .loc 2 500 0
 621 0076 BA69     	 ldr r2,[r7,#24]
 622 0078 7B69     	 ldr r3,[r7,#20]
 623 007a DB00     	 lsl r3,r3,#3
 624 007c D318     	 add r3,r2,r3
 625 007e 1B79     	 ldrb r3,[r3,#4]
 626 0080 9B07     	 lsl r3,r3,#30
 627 0082 DB0F     	 lsr r3,r3,#31
 628 0084 DBB2     	 uxtb r3,r3
 629 0086 002B     	 cmp r3,#0
 630 0088 04D1     	 bne .L28
 501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 631              	 .loc 2 502 0
 632 008a 1F23     	 mov r3,#31
 633 008c FB18     	 add r3,r7,r3
 634 008e 0222     	 mov r2,#2
 635 0090 1A70     	 strb r2,[r3]
 636 0092 1CE0     	 b .L26
 637              	.L28:
 503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address = data_ptr->block_info[user_block_index].address;
 638              	 .loc 2 506 0
 639 0094 BB69     	 ldr r3,[r7,#24]
 640 0096 7A69     	 ldr r2,[r7,#20]
 641 0098 D200     	 lsl r2,r2,#3
 642 009a D158     	 ldr r1,[r2,r3]
 643 009c BA69     	 ldr r2,[r7,#24]
 644 009e BA23     	 mov r3,#186
 645 00a0 5B00     	 lsl r3,r3,#1
 646 00a2 D150     	 str r1,[r2,r3]
 507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr ,
 647              	 .loc 2 507 0
 648 00a4 7968     	 ldr r1,[r7,#4]
 649 00a6 3A68     	 ldr r2,[r7]
 650 00a8 BB68     	 ldr r3,[r7,#8]
 651 00aa 081C     	 mov r0,r1
 652 00ac 111C     	 mov r1,r2
 653 00ae 1A1C     	 mov r2,r3
 654 00b0 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadBlockContents
 655 00b4 021C     	 mov r2,r0
 656 00b6 1F23     	 mov r3,#31
 657 00b8 FB18     	 add r3,r7,r3
 658 00ba 1A70     	 strb r2,[r3]
 508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((uint32_t)status != 0U)
 659              	 .loc 2 509 0
 660 00bc 1F23     	 mov r3,#31
 661 00be FB18     	 add r3,r7,r3
 662 00c0 1B78     	 ldrb r3,[r3]
 663 00c2 002B     	 cmp r3,#0
 664 00c4 03D0     	 beq .L26
 510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****          status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 665              	 .loc 2 511 0
 666 00c6 1F23     	 mov r3,#31
 667 00c8 FB18     	 add r3,r7,r3
 668 00ca 0122     	 mov r2,#1
 669 00cc 1A70     	 strb r2,[r3]
 670              	.L26:
 512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 671              	 .loc 2 515 0
 672 00ce 1F23     	 mov r3,#31
 673 00d0 FB18     	 add r3,r7,r3
 674 00d2 1B78     	 ldrb r3,[r3]
 516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 675              	 .loc 2 516 0
 676 00d4 181C     	 mov r0,r3
 677 00d6 BD46     	 mov sp,r7
 678 00d8 08B0     	 add sp,sp,#32
 679              	 
 680 00da 80BD     	 pop {r7,pc}
 681              	.L31:
 682              	 .align 2
 683              	.L30:
 684 00dc 00000000 	 .word E_EEPROM_XMC1_0
 685              	 .cfi_endproc
 686              	.LFE53:
 688              	 .section .text.E_EEPROM_XMC1_StartGarbageCollection,"ax",%progbits
 689              	 .align 2
 690              	 .global E_EEPROM_XMC1_StartGarbageCollection
 691              	 .code 16
 692              	 .thumb_func
 694              	E_EEPROM_XMC1_StartGarbageCollection:
 695              	.LFB54:
 517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall start Garbage collection.
 524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_StartGarbageCollection(void)
 526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 696              	 .loc 2 526 0
 697              	 .cfi_startproc
 698 0000 80B5     	 push {r7,lr}
 699              	.LCFI21:
 700              	 .cfi_def_cfa_offset 8
 701              	 .cfi_offset 7,-8
 702              	 .cfi_offset 14,-4
 703 0002 82B0     	 sub sp,sp,#8
 704              	.LCFI22:
 705              	 .cfi_def_cfa_offset 16
 706 0004 00AF     	 add r7,sp,#0
 707              	.LCFI23:
 708              	 .cfi_def_cfa_register 7
 527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 709              	 .loc 2 530 0
 710 0006 134B     	 ldr r3,.L36
 711 0008 5B68     	 ldr r3,[r3,#4]
 712 000a 3B60     	 str r3,[r7]
 531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 713              	 .loc 2 532 0
 714 000c FB1D     	 add r3,r7,#7
 715 000e 0522     	 mov r2,#5
 716 0010 1A70     	 strb r2,[r3]
 533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the E_EEPROM_XMC1_Init API is called */
 535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 717              	 .loc 2 535 0
 718 0012 3A68     	 ldr r2,[r7]
 719 0014 AE23     	 mov r3,#174
 720 0016 5B00     	 lsl r3,r3,#1
 721 0018 D358     	 ldr r3,[r2,r3]
 722 001a 0A2B     	 cmp r3,#10
 723 001c 13D1     	 bne .L33
 536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
 724              	 .loc 2 537 0
 725 001e 3A68     	 ldr r2,[r7]
 726 0020 AE23     	 mov r3,#174
 727 0022 5B00     	 lsl r3,r3,#1
 728 0024 0421     	 mov r1,#4
 729 0026 D150     	 str r1,[r2,r3]
 538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to start garbage collection process from scratch */
 540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 730              	 .loc 2 540 0
 731 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
 732              	 .loc 2 542 0
 733 002c 3A68     	 ldr r2,[r7]
 734 002e AE23     	 mov r3,#174
 735 0030 5B00     	 lsl r3,r3,#1
 736 0032 D358     	 ldr r3,[r2,r3]
 737 0034 092B     	 cmp r3,#9
 738 0036 03D1     	 bne .L34
 543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 739              	 .loc 2 544 0
 740 0038 FB1D     	 add r3,r7,#7
 741 003a 0122     	 mov r2,#1
 742 003c 1A70     	 strb r2,[r3]
 743 003e 02E0     	 b .L33
 744              	.L34:
 545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS;
 745              	 .loc 2 548 0
 746 0040 FB1D     	 add r3,r7,#7
 747 0042 0022     	 mov r2,#0
 748 0044 1A70     	 strb r2,[r3]
 749              	.L33:
 549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 750              	 .loc 2 552 0
 751 0046 FB1D     	 add r3,r7,#7
 752 0048 1B78     	 ldrb r3,[r3]
 553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 753              	 .loc 2 553 0
 754 004a 181C     	 mov r0,r3
 755 004c BD46     	 mov sp,r7
 756 004e 02B0     	 add sp,sp,#8
 757              	 
 758 0050 80BD     	 pop {r7,pc}
 759              	.L37:
 760 0052 C046     	 .align 2
 761              	.L36:
 762 0054 00000000 	 .word E_EEPROM_XMC1_0
 763              	 .cfi_endproc
 764              	.LFE54:
 766              	 .section .text.E_EEPROM_XMC1_GetStatus,"ax",%progbits
 767              	 .align 2
 768              	 .global E_EEPROM_XMC1_GetStatus
 769              	 .code 16
 770              	 .thumb_func
 772              	E_EEPROM_XMC1_GetStatus:
 773              	.LFB55:
 554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall return the status of the APP
 561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_GetStatus(void)
 563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 774              	 .loc 2 563 0
 775              	 .cfi_startproc
 776 0000 80B5     	 push {r7,lr}
 777              	.LCFI24:
 778              	 .cfi_def_cfa_offset 8
 779              	 .cfi_offset 7,-8
 780              	 .cfi_offset 14,-4
 781 0002 82B0     	 sub sp,sp,#8
 782              	.LCFI25:
 783              	 .cfi_def_cfa_offset 16
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI26:
 786              	 .cfi_def_cfa_register 7
 564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_STATUS_t status;
 565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 787              	 .loc 2 566 0
 788 0006 104B     	 ldr r3,.L43
 789 0008 5B68     	 ldr r3,[r3,#4]
 790 000a 3B60     	 str r3,[r7]
 567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If the GC/InitGC has failed */
 569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 791              	 .loc 2 569 0
 792 000c 3A68     	 ldr r2,[r7]
 793 000e AE23     	 mov r3,#174
 794 0010 5B00     	 lsl r3,r3,#1
 795 0012 D358     	 ldr r3,[r2,r3]
 796 0014 0A2B     	 cmp r3,#10
 797 0016 03D1     	 bne .L39
 570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_IDLE;
 798              	 .loc 2 571 0
 799 0018 FB1D     	 add r3,r7,#7
 800 001a 0322     	 mov r2,#3
 801 001c 1A70     	 strb r2,[r3]
 802 001e 0CE0     	 b .L40
 803              	.L39:
 572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
 804              	 .loc 2 573 0
 805 0020 3A68     	 ldr r2,[r7]
 806 0022 AE23     	 mov r3,#174
 807 0024 5B00     	 lsl r3,r3,#1
 808 0026 D358     	 ldr r3,[r2,r3]
 809 0028 092B     	 cmp r3,#9
 810 002a 03D1     	 bne .L41
 574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_FAILURE;
 811              	 .loc 2 575 0
 812 002c FB1D     	 add r3,r7,#7
 813 002e 0122     	 mov r2,#1
 814 0030 1A70     	 strb r2,[r3]
 815 0032 02E0     	 b .L40
 816              	.L41:
 576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_BUSY;
 817              	 .loc 2 579 0
 818 0034 FB1D     	 add r3,r7,#7
 819 0036 0422     	 mov r2,#4
 820 0038 1A70     	 strb r2,[r3]
 821              	.L40:
 580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 822              	 .loc 2 582 0
 823 003a FB1D     	 add r3,r7,#7
 824 003c 1B78     	 ldrb r3,[r3]
 583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 825              	 .loc 2 583 0
 826 003e 181C     	 mov r0,r3
 827 0040 BD46     	 mov sp,r7
 828 0042 02B0     	 add sp,sp,#8
 829              	 
 830 0044 80BD     	 pop {r7,pc}
 831              	.L44:
 832 0046 C046     	 .align 2
 833              	.L43:
 834 0048 00000000 	 .word E_EEPROM_XMC1_0
 835              	 .cfi_endproc
 836              	.LFE55:
 838              	 .section .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded,"ax",%progbits
 839              	 .align 2
 840              	 .global E_EEPROM_XMC1_IsGarbageCollectionNeeded
 841              	 .code 16
 842              	 .thumb_func
 844              	E_EEPROM_XMC1_IsGarbageCollectionNeeded:
 845              	.LFB56:
 584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*This function returns the whether the block can be fit inside the bank or it needs a garbage coll
 586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** bool E_EEPROM_XMC1_IsGarbageCollectionNeeded(uint8_t block_number)
 587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 846              	 .loc 2 587 0
 847              	 .cfi_startproc
 848 0000 80B5     	 push {r7,lr}
 849              	.LCFI27:
 850              	 .cfi_def_cfa_offset 8
 851              	 .cfi_offset 7,-8
 852              	 .cfi_offset 14,-4
 853 0002 88B0     	 sub sp,sp,#32
 854              	.LCFI28:
 855              	 .cfi_def_cfa_offset 40
 856 0004 00AF     	 add r7,sp,#0
 857              	.LCFI29:
 858              	 .cfi_def_cfa_register 7
 859 0006 021C     	 mov r2,r0
 860 0008 FB1D     	 add r3,r7,#7
 861 000a 1A70     	 strb r2,[r3]
 588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   bool status;
 589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_blocks;
 590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_blocks;
 592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
 593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = false;
 862              	 .loc 2 594 0
 863 000c 1F23     	 mov r3,#31
 864 000e FB18     	 add r3,r7,r3
 865 0010 0022     	 mov r2,#0
 866 0012 1A70     	 strb r2,[r3]
 595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 867              	 .loc 2 595 0
 868 0014 FB1D     	 add r3,r7,#7
 869 0016 1B78     	 ldrb r3,[r3]
 870 0018 181C     	 mov r0,r3
 871 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 872 001e 031C     	 mov r3,r0
 873 0020 BB61     	 str r3,[r7,#24]
 596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 874              	 .loc 2 596 0
 875 0022 104B     	 ldr r3,.L48
 876 0024 1A68     	 ldr r2,[r3]
 877 0026 BB69     	 ldr r3,[r7,#24]
 878 0028 DB00     	 lsl r3,r3,#3
 879 002a D318     	 add r3,r2,r3
 880 002c 7B61     	 str r3,[r7,#20]
 597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_IsGarbageCollectionNeeded:Wrong Block Number", (user_block_index  !=
 599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                             E_EEPROM_XMC1_LOG_BLOCK
 600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 881              	 .loc 2 601 0
 882 002e 7B69     	 ldr r3,[r7,#20]
 883 0030 5B68     	 ldr r3,[r3,#4]
 884 0032 181C     	 mov r0,r3
 885 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 886 0038 031C     	 mov r3,r0
 887 003a 3B61     	 str r3,[r7,#16]
 602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 888              	 .loc 2 602 0
 889 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 890 0040 031C     	 mov r3,r0
 891 0042 FB60     	 str r3,[r7,#12]
 603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (remaining_blocks < flash_blocks)
 892              	 .loc 2 604 0
 893 0044 FA68     	 ldr r2,[r7,#12]
 894 0046 3B69     	 ldr r3,[r7,#16]
 895 0048 9A42     	 cmp r2,r3
 896 004a 03D2     	 bcs .L46
 605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = true;
 897              	 .loc 2 606 0
 898 004c 1F23     	 mov r3,#31
 899 004e FB18     	 add r3,r7,r3
 900 0050 0122     	 mov r2,#1
 901 0052 1A70     	 strb r2,[r3]
 902              	.L46:
 607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 903              	 .loc 2 609 0
 904 0054 1F23     	 mov r3,#31
 905 0056 FB18     	 add r3,r7,r3
 906 0058 1B78     	 ldrb r3,[r3]
 610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 907              	 .loc 2 610 0
 908 005a 181C     	 mov r0,r3
 909 005c BD46     	 mov sp,r7
 910 005e 08B0     	 add sp,sp,#32
 911              	 
 912 0060 80BD     	 pop {r7,pc}
 913              	.L49:
 914 0062 C046     	 .align 2
 915              	.L48:
 916 0064 00000000 	 .word E_EEPROM_XMC1_0
 917              	 .cfi_endproc
 918              	.LFE56:
 920              	 .section .text.E_EEPROM_XMC1_GetPreviousData,"ax",%progbits
 921              	 .align 2
 922              	 .global E_EEPROM_XMC1_GetPreviousData
 923              	 .code 16
 924              	 .thumb_func
 926              	E_EEPROM_XMC1_GetPreviousData:
 927              	.LFB57:
 611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block
 616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : It reads the complete data block from the flash and compare the CRC from heade
 621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   with the computed CRC using CRC_SW APP. Read from arbitrary location and limit
 622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   possible under this API.
 623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_VerifyBlockCrcStatus(uint8_t block_number, uint8_t *
 625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = (uint32_t)E_EEPROM_XMC1_lGetUsrBlockIndex( block_number);
 633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_ReadBlockWithCRC:Wrong Block Number", (user_block_index  !=
 636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                    E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUN
 637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_ReadBlockWithCRC:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state) == E_EEPROM_XMC1_GC_IDLE)
 643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
 645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
 647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Inval
 649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address = data_ptr->block_info[user_block_index].address ;
 655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Call local function to read the specified block of data from flash */
 656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr,
 657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                                   block_size , 0U);
 658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS)
 660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Call local function to cross check the CRC, No ECC check done again for the CRC read fun
 662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockCrcStatus(block_number, 
 663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                                      block_size);
 664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  :
 677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   block_number   - Number of logical block
 678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset       - Start Location for Read start
 679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length       - End Location for read completion
 681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall read the just previous copy of the particular block when r
 685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   function is used commonly when the latest copy gets corrupted.
 686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_GetPreviousData(uint8_t block_number,
 688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint32_t offset,
 689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint8_t *data_buffer_ptr,
 690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint32_t length)
 691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 928              	 .loc 2 691 0
 929              	 .cfi_startproc
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI30:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 8AB0     	 sub sp,sp,#40
 936              	.LCFI31:
 937              	 .cfi_def_cfa_offset 48
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI32:
 940              	 .cfi_def_cfa_register 7
 941 0006 B960     	 str r1,[r7,#8]
 942 0008 7A60     	 str r2,[r7,#4]
 943 000a 3B60     	 str r3,[r7]
 944 000c 0F23     	 mov r3,#15
 945 000e FB18     	 add r3,r7,r3
 946 0010 021C     	 add r2,r0,#0
 947 0012 1A70     	 strb r2,[r3]
 692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_start_addr;
 694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 948              	 .loc 2 698 0
 949 0014 2A4B     	 ldr r3,.L57
 950 0016 5B68     	 ldr r3,[r3,#4]
 951 0018 3B62     	 str r3,[r7,#32]
 699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 952              	 .loc 2 699 0
 953 001a 0F23     	 mov r3,#15
 954 001c FB18     	 add r3,r7,r3
 955 001e 1B78     	 ldrb r3,[r3]
 956 0020 181C     	 mov r0,r3
 957 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 958 0026 031C     	 mov r3,r0
 959 0028 FB61     	 str r3,[r7,#28]
 700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 960              	 .loc 2 700 0
 961 002a 254B     	 ldr r3,.L57
 962 002c 1A68     	 ldr r2,[r3]
 963 002e FB69     	 ldr r3,[r7,#28]
 964 0030 DB00     	 lsl r3,r3,#3
 965 0032 D318     	 add r3,r2,r3
 966 0034 5B68     	 ldr r3,[r3,#4]
 967 0036 BB61     	 str r3,[r7,#24]
 701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_GetPreviousData:Wrong Block Number", (user_block_index  !=
 703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                   E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND
 704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_GetPreviousData:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
 968              	 .loc 2 707 0
 969 0038 3A6A     	 ldr r2,[r7,#32]
 970 003a AE23     	 mov r3,#174
 971 003c 5B00     	 lsl r3,r3,#1
 972 003e D358     	 ldr r3,[r2,r3]
 973 0040 0A2B     	 cmp r3,#10
 974 0042 31D1     	 bne .L51
 975              	 .loc 2 707 0 is_stmt 0 discriminator 1
 976 0044 BA68     	 ldr r2,[r7,#8]
 977 0046 3B68     	 ldr r3,[r7]
 978 0048 D218     	 add r2,r2,r3
 979 004a BB69     	 ldr r3,[r7,#24]
 980 004c 9A42     	 cmp r2,r3
 981 004e 2BD8     	 bhi .L51
 708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_start_addr = E_EEPROM_XMC1_lGetPrevData(block_number);
 982              	 .loc 2 710 0 is_stmt 1
 983 0050 0F23     	 mov r3,#15
 984 0052 FB18     	 add r3,r7,r3
 985 0054 1B78     	 ldrb r3,[r3]
 986 0056 181C     	 mov r0,r3
 987 0058 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetPrevData
 988 005c 031C     	 mov r3,r0
 989 005e 7B61     	 str r3,[r7,#20]
 711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (read_start_addr != 0U )
 990              	 .loc 2 712 0
 991 0060 7B69     	 ldr r3,[r7,#20]
 992 0062 002B     	 cmp r3,#0
 993 0064 1AD0     	 beq .L52
 713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address =  read_start_addr;
 994              	 .loc 2 714 0
 995 0066 3A6A     	 ldr r2,[r7,#32]
 996 0068 BA23     	 mov r3,#186
 997 006a 5B00     	 lsl r3,r3,#1
 998 006c 7969     	 ldr r1,[r7,#20]
 999 006e D150     	 str r1,[r2,r3]
 715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
 716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Call local function to read the specified block of data from flash */
 717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr, 
 1000              	 .loc 2 717 0
 1001 0070 7968     	 ldr r1,[r7,#4]
 1002 0072 3A68     	 ldr r2,[r7]
 1003 0074 BB68     	 ldr r3,[r7,#8]
 1004 0076 081C     	 mov r0,r1
 1005 0078 111C     	 mov r1,r2
 1006 007a 1A1C     	 mov r2,r3
 1007 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadBlockContents
 1008 0080 021C     	 mov r2,r0
 1009 0082 2723     	 mov r3,#39
 1010 0084 FB18     	 add r3,r7,r3
 1011 0086 1A70     	 strb r2,[r3]
 718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((uint32_t)status != 0U)
 1012              	 .loc 2 718 0
 1013 0088 2723     	 mov r3,#39
 1014 008a FB18     	 add r3,r7,r3
 1015 008c 1B78     	 ldrb r3,[r3]
 1016 008e 002B     	 cmp r3,#0
 1017 0090 09D0     	 beq .L54
 719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****          status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 1018              	 .loc 2 720 0
 1019 0092 2723     	 mov r3,#39
 1020 0094 FB18     	 add r3,r7,r3
 1021 0096 0122     	 mov r2,#1
 1022 0098 1A70     	 strb r2,[r3]
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1023              	 .loc 2 712 0
 1024 009a 09E0     	 b .L55
 1025              	.L52:
 721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 1026              	 .loc 2 725 0
 1027 009c 2723     	 mov r3,#39
 1028 009e FB18     	 add r3,r7,r3
 1029 00a0 0222     	 mov r2,#2
 1030 00a2 1A70     	 strb r2,[r3]
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1031              	 .loc 2 712 0
 1032 00a4 04E0     	 b .L55
 1033              	.L54:
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1034              	 .loc 2 712 0 is_stmt 0 discriminator 1
 1035 00a6 03E0     	 b .L55
 1036              	.L51:
 726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 1037              	 .loc 2 730 0 is_stmt 1
 1038 00a8 2723     	 mov r3,#39
 1039 00aa FB18     	 add r3,r7,r3
 1040 00ac 0522     	 mov r2,#5
 1041 00ae 1A70     	 strb r2,[r3]
 1042              	.L55:
 731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 1043              	 .loc 2 733 0
 1044 00b0 2723     	 mov r3,#39
 1045 00b2 FB18     	 add r3,r7,r3
 1046 00b4 1B78     	 ldrb r3,[r3]
 734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1047              	 .loc 2 734 0
 1048 00b6 181C     	 mov r0,r3
 1049 00b8 BD46     	 mov sp,r7
 1050 00ba 0AB0     	 add sp,sp,#40
 1051              	 
 1052 00bc 80BD     	 pop {r7,pc}
 1053              	.L58:
 1054 00be C046     	 .align 2
 1055              	.L57:
 1056 00c0 00000000 	 .word E_EEPROM_XMC1_0
 1057              	 .cfi_endproc
 1058              	.LFE57:
 1060              	 .section .text.E_EEPROM_XMC1_lGetPrevData,"ax",%progbits
 1061              	 .align 2
 1062              	 .code 16
 1063              	 .thumb_func
 1065              	E_EEPROM_XMC1_lGetPrevData:
 1066              	.LFB58:
 735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  ***********************************  Private Function Definitions  *******************************
 739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User block number / ID
 744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
 746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will traverse through the bank and find the previous copy of the
 748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetPrevData(uint8_t block_number)
 750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1067              	 .loc 2 750 0
 1068              	 .cfi_startproc
 1069 0000 80B5     	 push {r7,lr}
 1070              	.LCFI33:
 1071              	 .cfi_def_cfa_offset 8
 1072              	 .cfi_offset 7,-8
 1073              	 .cfi_offset 14,-4
 1074 0002 88B0     	 sub sp,sp,#32
 1075              	.LCFI34:
 1076              	 .cfi_def_cfa_offset 40
 1077 0004 00AF     	 add r7,sp,#0
 1078              	.LCFI35:
 1079              	 .cfi_def_cfa_register 7
 1080 0006 021C     	 mov r2,r0
 1081 0008 FB1D     	 add r3,r7,#7
 1082 000a 1A70     	 strb r2,[r3]
 751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_index;
 753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_sec_start_addr;
 754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t expected_block_count;
 755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_read_start_addr;
 756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1083              	 .loc 2 758 0
 1084 000c 2C4B     	 ldr r3,.L67
 1085 000e 5B68     	 ldr r3,[r3,#4]
 1086 0010 7B61     	 str r3,[r7,#20]
 759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Get the block details */
 761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_index = (uint32_t)E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 1087              	 .loc 2 761 0
 1088 0012 FB1D     	 add r3,r7,#7
 1089 0014 1B78     	 ldrb r3,[r3]
 1090 0016 181C     	 mov r0,r3
 1091 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 1092 001c 031C     	 mov r3,r0
 1093 001e 3B61     	 str r3,[r7,#16]
 762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_index].size;
 1094              	 .loc 2 762 0
 1095 0020 274B     	 ldr r3,.L67
 1096 0022 1A68     	 ldr r2,[r3]
 1097 0024 3B69     	 ldr r3,[r7,#16]
 1098 0026 DB00     	 lsl r3,r3,#3
 1099 0028 D318     	 add r3,r2,r3
 1100 002a 5B68     	 ldr r3,[r3,#4]
 1101 002c FB60     	 str r3,[r7,#12]
 763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   expected_block_count = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_size);
 1102              	 .loc 2 763 0
 1103 002e FB68     	 ldr r3,[r7,#12]
 1104 0030 181C     	 mov r0,r3
 1105 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 1106 0036 031C     	 mov r3,r0
 1107 0038 BB60     	 str r3,[r7,#8]
 764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Find the data bank starting address from current Bank to decide when to stop reading of blocks
 766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 1108              	 .loc 2 766 0
 1109 003a 7B69     	 ldr r3,[r7,#20]
 1110 003c 1B6A     	 ldr r3,[r3,#32]
 1111 003e 002B     	 cmp r3,#0
 1112 0040 02D1     	 bne .L60
 767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_sec_start_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 1113              	 .loc 2 768 0
 1114 0042 204B     	 ldr r3,.L67+4
 1115 0044 FB61     	 str r3,[r7,#28]
 1116 0046 01E0     	 b .L61
 1117              	.L60:
 769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_sec_start_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 1118              	 .loc 2 772 0
 1119 0048 1F4B     	 ldr r3,.L67+8
 1120 004a FB61     	 str r3,[r7,#28]
 1121              	.L61:
 773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_read_start_addr = data_ptr->block_info[block_index].address;
 1122              	 .loc 2 775 0
 1123 004c 7B69     	 ldr r3,[r7,#20]
 1124 004e 3A69     	 ldr r2,[r7,#16]
 1125 0050 D200     	 lsl r2,r2,#3
 1126 0052 D358     	 ldr r3,[r2,r3]
 1127 0054 BB61     	 str r3,[r7,#24]
 776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (block_read_start_addr >= (data_sec_start_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE))
 1128              	 .loc 2 777 0
 1129 0056 FB69     	 ldr r3,[r7,#28]
 1130 0058 1033     	 add r3,r3,#16
 1131 005a 1A1E     	 sub r2,r3,#0
 1132 005c BB69     	 ldr r3,[r7,#24]
 1133 005e 9A42     	 cmp r2,r3
 1134 0060 26D8     	 bhi .L62
 778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_read_start_addr = E_EEPROM_XMC1_lSearchBlockCopy(block_number,
 1135              	 .loc 2 779 0
 1136 0062 BB69     	 ldr r3,[r7,#24]
 1137 0064 103B     	 sub r3,r3,#16
 1138 0066 1A1C     	 mov r2,r3
 1139 0068 FB1D     	 add r3,r7,#7
 1140 006a 1978     	 ldrb r1,[r3]
 1141 006c FB69     	 ldr r3,[r7,#28]
 1142 006e 081C     	 mov r0,r1
 1143 0070 111C     	 mov r1,r2
 1144 0072 1A1C     	 mov r2,r3
 1145 0074 FFF7FEFF 	 bl E_EEPROM_XMC1_lSearchBlockCopy
 1146 0078 031C     	 mov r3,r0
 1147 007a BB61     	 str r3,[r7,#24]
 780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                            block_read_start_addr - E_EEPROM_XMC1_FL
 781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                            data_sec_start_addr);
 782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ((block_read_start_addr < data_sec_start_addr) ||
 1148              	 .loc 2 784 0
 1149 007c BA69     	 ldr r2,[r7,#24]
 1150 007e FB69     	 ldr r3,[r7,#28]
 1151 0080 9A42     	 cmp r2,r3
 1152 0082 12D3     	 bcc .L63
 785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->block_result.status.consistent != 1U) ||
 1153              	 .loc 2 785 0 discriminator 1
 1154 0084 7B69     	 ldr r3,[r7,#20]
 1155 0086 1B7F     	 ldrb r3,[r3,#28]
 1156 0088 0222     	 mov r2,#2
 1157 008a 1340     	 and r3,r2
 1158 008c DBB2     	 uxtb r3,r3
 784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->block_result.status.consistent != 1U) ||
 1159              	 .loc 2 784 0 discriminator 1
 1160 008e 002B     	 cmp r3,#0
 1161 0090 0BD0     	 beq .L63
 786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             (data_ptr->block_result.block_count != expected_block_count) ||
 1162              	 .loc 2 786 0
 1163 0092 7B69     	 ldr r3,[r7,#20]
 1164 0094 9A69     	 ldr r2,[r3,#24]
 785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->block_result.status.consistent != 1U) ||
 1165              	 .loc 2 785 0
 1166 0096 BB68     	 ldr r3,[r7,#8]
 1167 0098 9A42     	 cmp r2,r3
 1168 009a 06D1     	 bne .L63
 787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             (data_ptr->block_result.status.valid != 1U))
 1169              	 .loc 2 787 0
 1170 009c 7B69     	 ldr r3,[r7,#20]
 1171 009e 1B7F     	 ldrb r3,[r3,#28]
 1172 00a0 0122     	 mov r2,#1
 1173 00a2 1340     	 and r3,r2
 1174 00a4 DBB2     	 uxtb r3,r3
 786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             (data_ptr->block_result.block_count != expected_block_count) ||
 1175              	 .loc 2 786 0
 1176 00a6 002B     	 cmp r3,#0
 1177 00a8 04D1     	 bne .L65
 1178              	.L63:
 788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_read_start_addr = 0U;  /* No Previous copy of block exist*/
 1179              	 .loc 2 789 0
 1180 00aa 0023     	 mov r3,#0
 1181 00ac BB61     	 str r3,[r7,#24]
 1182 00ae 01E0     	 b .L65
 1183              	.L62:
 790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_read_start_addr = 0U;  /* No Previous copy of block can exist*/
 1184              	 .loc 2 794 0
 1185 00b0 0023     	 mov r3,#0
 1186 00b2 BB61     	 str r3,[r7,#24]
 1187              	.L65:
 795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (block_read_start_addr);
 1188              	 .loc 2 797 0
 1189 00b4 BB69     	 ldr r3,[r7,#24]
 798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1190              	 .loc 2 798 0
 1191 00b6 181C     	 mov r0,r3
 1192 00b8 BD46     	 mov sp,r7
 1193 00ba 08B0     	 add sp,sp,#32
 1194              	 
 1195 00bc 80BD     	 pop {r7,pc}
 1196              	.L68:
 1197 00be C046     	 .align 2
 1198              	.L67:
 1199 00c0 00000000 	 .word E_EEPROM_XMC1_0
 1200 00c4 008D0010 	 .word 268471552
 1201 00c8 008F0010 	 .word 268472064
 1202              	 .cfi_endproc
 1203              	.LFE58:
 1205              	 .section .text.E_EEPROM_XMC1_lSearchBlockCopy,"ax",%progbits
 1206              	 .align 2
 1207              	 .code 16
 1208              	 .thumb_func
 1210              	E_EEPROM_XMC1_lSearchBlockCopy:
 1211              	.LFB59:
 799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User block number / ID
 802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
 804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function reads the block header bytes and compare the block number to fin
 806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lSearchBlockCopy(uint8_t required_block_number,
 808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t read_addr,
 809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t data_sec_start_addr)
 810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1212              	 .loc 2 810 0
 1213              	 .cfi_startproc
 1214 0000 80B5     	 push {r7,lr}
 1215              	.LCFI36:
 1216              	 .cfi_def_cfa_offset 8
 1217              	 .cfi_offset 7,-8
 1218              	 .cfi_offset 14,-4
 1219 0002 8CB0     	 sub sp,sp,#48
 1220              	.LCFI37:
 1221              	 .cfi_def_cfa_offset 56
 1222 0004 00AF     	 add r7,sp,#0
 1223              	.LCFI38:
 1224              	 .cfi_def_cfa_register 7
 1225 0006 B960     	 str r1,[r7,#8]
 1226 0008 7A60     	 str r2,[r7,#4]
 1227 000a 0F23     	 mov r3,#15
 1228 000c FB18     	 add r3,r7,r3
 1229 000e 021C     	 add r2,r0,#0
 1230 0010 1A70     	 strb r2,[r3]
 811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t header_word;
 812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
 813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t block_status;
 814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t read_block_number;
 815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_start_address;
 816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t is_all_blocks_clean;
 817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_HEADER_t* block_header_ptr;
 819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1231              	 .loc 2 820 0
 1232 0012 384B     	 ldr r3,.L80
 1233 0014 5B68     	 ldr r3,[r3,#4]
 1234 0016 3B62     	 str r3,[r7,#32]
 821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = 0U;
 1235              	 .loc 2 822 0
 1236 0018 0023     	 mov r3,#0
 1237 001a FB62     	 str r3,[r7,#44]
 823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_start_address = 0U;
 1238              	 .loc 2 823 0
 1239 001c 0023     	 mov r3,#0
 1240 001e BB62     	 str r3,[r7,#40]
 824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   is_all_blocks_clean = 1U;
 1241              	 .loc 2 824 0
 1242 0020 0123     	 mov r3,#1
 1243 0022 7B62     	 str r3,[r7,#36]
 825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.status.consistent = 0U;
 1244              	 .loc 2 825 0
 1245 0024 3B6A     	 ldr r3,[r7,#32]
 1246 0026 1A7F     	 ldrb r2,[r3,#28]
 1247 0028 0221     	 mov r1,#2
 1248 002a 8A43     	 bic r2,r1
 1249 002c 1A77     	 strb r2,[r3,#28]
 826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.status.valid = 0U;
 1250              	 .loc 2 826 0
 1251 002e 3B6A     	 ldr r3,[r7,#32]
 1252 0030 1A7F     	 ldrb r2,[r3,#28]
 1253 0032 0121     	 mov r1,#1
 1254 0034 8A43     	 bic r2,r1
 1255 0036 1A77     	 strb r2,[r3,#28]
 827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.block_count = 0U;
 1256              	 .loc 2 827 0
 1257 0038 3B6A     	 ldr r3,[r7,#32]
 1258 003a 0022     	 mov r2,#0
 1259 003c 9A61     	 str r2,[r3,#24]
 828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Loop until the first block address and check if any block number is matching the required bloc
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ((data_sec_start_addr <= read_addr) && (block_start_address == 0U))
 1260              	 .loc 2 830 0
 1261 003e 4DE0     	 b .L70
 1262              	.L78:
 831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
 833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();      
 1263              	 .loc 2 833 0
 1264 0040 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Read the header word */
 836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     header_word = E_EEPROM_XMC1_lReadSingleWord(read_addr);
 1265              	 .loc 2 836 0
 1266 0044 BB68     	 ldr r3,[r7,#8]
 1267 0046 181C     	 mov r0,r3
 1268 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleWord
 1269 004c 031C     	 mov r3,r0
 1270 004e 7B61     	 str r3,[r7,#20]
 837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_header_ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t*)(void *)(&header_word);
 1271              	 .loc 2 838 0
 1272 0050 1423     	 mov r3,#20
 1273 0052 FB18     	 add r3,r7,r3
 1274 0054 FB61     	 str r3,[r7,#28]
 839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_block_number = block_header_ptr->block_number;
 1275              	 .loc 2 839 0
 1276 0056 1B23     	 mov r3,#27
 1277 0058 FB18     	 add r3,r7,r3
 1278 005a FA69     	 ldr r2,[r7,#28]
 1279 005c 1278     	 ldrb r2,[r2]
 1280 005e 1A70     	 strb r2,[r3]
 840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_status = block_header_ptr->status;
 1281              	 .loc 2 840 0
 1282 0060 1A23     	 mov r3,#26
 1283 0062 FB18     	 add r3,r7,r3
 1284 0064 FA69     	 ldr r2,[r7,#28]
 1285 0066 5278     	 ldrb r2,[r2,#1]
 1286 0068 1A70     	 strb r2,[r3]
 841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*Check whether the block number is matching the required block number*/
 843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (read_block_number == required_block_number)
 1287              	 .loc 2 843 0
 1288 006a 1B23     	 mov r3,#27
 1289 006c FA18     	 add r2,r7,r3
 1290 006e 0F23     	 mov r3,#15
 1291 0070 FB18     	 add r3,r7,r3
 1292 0072 1278     	 ldrb r2,[r2]
 1293 0074 1B78     	 ldrb r3,[r3]
 1294 0076 9A42     	 cmp r2,r3
 1295 0078 2DD1     	 bne .L71
 844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 1296              	 .loc 2 845 0
 1297 007a FB6A     	 ldr r3,[r7,#44]
 1298 007c 0133     	 add r3,r3,#1
 1299 007e FB62     	 str r3,[r7,#44]
 846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
 847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if any ECC error in the header */
 848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( ( E_EEPROM_XMC1_lGetFlashStatus() & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR ) != 0U )
 1300              	 .loc 2 848 0
 1301 0080 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 1302 0084 021C     	 mov r2,r0
 1303 0086 2023     	 mov r3,#32
 1304 0088 1340     	 and r3,r2
 1305 008a 01D0     	 beq .L72
 849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         is_all_blocks_clean = 0U;
 1306              	 .loc 2 850 0
 1307 008c 0023     	 mov r3,#0
 1308 008e 7B62     	 str r3,[r7,#36]
 1309              	.L72:
 851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if block header is of the starting block */
 853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (block_status & E_EEPROM_XMC1_START_BIT)
 1310              	 .loc 2 853 0
 1311 0090 1A23     	 mov r3,#26
 1312 0092 FB18     	 add r3,r7,r3
 1313 0094 1B78     	 ldrb r3,[r3]
 1314 0096 5BB2     	 sxtb r3,r3
 1315 0098 002B     	 cmp r3,#0
 1316 009a 18DA     	 bge .L73
 854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ( is_all_blocks_clean == 1U )
 1317              	 .loc 2 855 0
 1318 009c 7B6A     	 ldr r3,[r7,#36]
 1319 009e 012B     	 cmp r3,#1
 1320 00a0 04D1     	 bne .L74
 856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
 857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_result.status.consistent = 1U;
 1321              	 .loc 2 857 0
 1322 00a2 3B6A     	 ldr r3,[r7,#32]
 1323 00a4 1A7F     	 ldrb r2,[r3,#28]
 1324 00a6 0221     	 mov r1,#2
 1325 00a8 0A43     	 orr r2,r1
 1326 00aa 1A77     	 strb r2,[r3,#28]
 1327              	.L74:
 858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (block_status & (uint8_t)E_EEPROM_XMC1_VALID_BIT)
 1328              	 .loc 2 860 0
 1329 00ac 1A23     	 mov r3,#26
 1330 00ae FB18     	 add r3,r7,r3
 1331 00b0 1B78     	 ldrb r3,[r3]
 1332 00b2 4022     	 mov r2,#64
 1333 00b4 1340     	 and r3,r2
 1334 00b6 04D0     	 beq .L75
 861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
 862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_result.status.valid = 1U;
 1335              	 .loc 2 862 0
 1336 00b8 3B6A     	 ldr r3,[r7,#32]
 1337 00ba 1A7F     	 ldrb r2,[r3,#28]
 1338 00bc 0121     	 mov r1,#1
 1339 00be 0A43     	 orr r2,r1
 1340 00c0 1A77     	 strb r2,[r3,#28]
 1341              	.L75:
 863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_result.block_count = block_count;
 1342              	 .loc 2 865 0
 1343 00c2 3B6A     	 ldr r3,[r7,#32]
 1344 00c4 FA6A     	 ldr r2,[r7,#44]
 1345 00c6 9A61     	 str r2,[r3,#24]
 866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_start_address = read_addr;
 1346              	 .loc 2 866 0
 1347 00c8 BB68     	 ldr r3,[r7,#8]
 1348 00ca BB62     	 str r3,[r7,#40]
 1349 00cc 06E0     	 b .L70
 1350              	.L73:
 867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         read_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 1351              	 .loc 2 870 0
 1352 00ce BB68     	 ldr r3,[r7,#8]
 1353 00d0 103B     	 sub r3,r3,#16
 1354 00d2 BB60     	 str r3,[r7,#8]
 1355 00d4 02E0     	 b .L70
 1356              	.L71:
 871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 1357              	 .loc 2 875 0
 1358 00d6 BB68     	 ldr r3,[r7,#8]
 1359 00d8 103B     	 sub r3,r3,#16
 1360 00da BB60     	 str r3,[r7,#8]
 1361              	.L70:
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 1362              	 .loc 2 830 0
 1363 00dc 7A68     	 ldr r2,[r7,#4]
 1364 00de BB68     	 ldr r3,[r7,#8]
 1365 00e0 9A42     	 cmp r2,r3
 1366 00e2 02D8     	 bhi .L77
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 1367              	 .loc 2 830 0 is_stmt 0 discriminator 1
 1368 00e4 BB6A     	 ldr r3,[r7,#40]
 1369 00e6 002B     	 cmp r3,#0
 1370 00e8 AAD0     	 beq .L78
 1371              	.L77:
 876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return(block_start_address);
 1372              	 .loc 2 878 0 is_stmt 1
 1373 00ea BB6A     	 ldr r3,[r7,#40]
 879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1374              	 .loc 2 879 0
 1375 00ec 181C     	 mov r0,r3
 1376 00ee BD46     	 mov sp,r7
 1377 00f0 0CB0     	 add sp,sp,#48
 1378              	 
 1379 00f2 80BD     	 pop {r7,pc}
 1380              	.L81:
 1381              	 .align 2
 1382              	.L80:
 1383 00f4 00000000 	 .word E_EEPROM_XMC1_0
 1384              	 .cfi_endproc
 1385              	.LFE59:
 1387              	 .section .text.E_EEPROM_XMC1_lInitGc,"ax",%progbits
 1388              	 .align 2
 1389              	 .code 16
 1390              	 .thumb_func
 1392              	E_EEPROM_XMC1_lInitGc:
 1393              	.LFB60:
 880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : marker_dirty_state  - Dirty state
 883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
 885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall detect if there was any interruption in the ongoing runnin
 887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   (Read/Write/GC). If yes, then this routine shall decide to run a state machine
 888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   emulation to normal state
 889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGc(const uint32_t marker_dirty_state)
 891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1394              	 .loc 2 891 0
 1395              	 .cfi_startproc
 1396 0000 80B5     	 push {r7,lr}
 1397              	.LCFI39:
 1398              	 .cfi_def_cfa_offset 8
 1399              	 .cfi_offset 7,-8
 1400              	 .cfi_offset 14,-4
 1401 0002 84B0     	 sub sp,sp,#16
 1402              	.LCFI40:
 1403              	 .cfi_def_cfa_offset 24
 1404 0004 00AF     	 add r7,sp,#0
 1405              	.LCFI41:
 1406              	 .cfi_def_cfa_register 7
 1407 0006 7860     	 str r0,[r7,#4]
 892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1408              	 .loc 2 893 0
 1409 0008 254B     	 ldr r3,.L87
 1410 000a 5B68     	 ldr r3,[r3,#4]
 1411 000c FB60     	 str r3,[r7,#12]
 894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( marker_dirty_state == E_EEPROM_XMC1_BOTH_BANKS_INVALID )  /* If both Bank state markers are 
 1412              	 .loc 2 895 0
 1413 000e 7B68     	 ldr r3,[r7,#4]
 1414 0010 032B     	 cmp r3,#3
 1415 0012 07D1     	 bne .L83
 896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state = E_EEPROM_XMC1_MB_DIRTY;
 1416              	 .loc 2 897 0
 1417 0014 FA68     	 ldr r2,[r7,#12]
 1418 0016 B023     	 mov r3,#176
 1419 0018 5B00     	 lsl r3,r3,#1
 1420 001a DD21     	 mov r1,#221
 1421 001c D150     	 str r1,[r2,r3]
 898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitllegalStateMachine();
 1422              	 .loc 2 898 0
 1423 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
 1424 0022 39E0     	 b .L82
 1425              	.L83:
 899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if ( marker_dirty_state == E_EEPROM_XMC1_BANK0_INVALID )  /* If Only Bank0 state marker is i
 1426              	 .loc 2 900 0
 1427 0024 7B68     	 ldr r3,[r7,#4]
 1428 0026 012B     	 cmp r3,#1
 1429 0028 18D1     	 bne .L85
 901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_0F;
 1430              	 .loc 2 902 0
 1431 002a FA68     	 ldr r2,[r7,#12]
 1432 002c B023     	 mov r3,#176
 1433 002e 5B00     	 lsl r3,r3,#1
 1434 0030 D358     	 ldr r3,[r2,r3]
 1435 0032 0F22     	 mov r2,#15
 1436 0034 1340     	 and r3,r2
 1437 0036 191C     	 mov r1,r3
 1438 0038 FA68     	 ldr r2,[r7,#12]
 1439 003a B023     	 mov r3,#176
 1440 003c 5B00     	 lsl r3,r3,#1
 1441 003e D150     	 str r1,[r2,r3]
 903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_D0;
 1442              	 .loc 2 903 0
 1443 0040 FA68     	 ldr r2,[r7,#12]
 1444 0042 B023     	 mov r3,#176
 1445 0044 5B00     	 lsl r3,r3,#1
 1446 0046 D358     	 ldr r3,[r2,r3]
 1447 0048 D022     	 mov r2,#208
 1448 004a 1A43     	 orr r2,r3
 1449 004c 111C     	 mov r1,r2
 1450 004e FA68     	 ldr r2,[r7,#12]
 1451 0050 B023     	 mov r3,#176
 1452 0052 5B00     	 lsl r3,r3,#1
 1453 0054 D150     	 str r1,[r2,r3]
 904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitDirtyStateMachine();
 1454              	 .loc 2 904 0
 1455 0056 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitDirtyStateMachine
 1456 005a 1DE0     	 b .L82
 1457              	.L85:
 905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if ( marker_dirty_state == E_EEPROM_XMC1_BANK1_INVALID )  /* If Only Bank1 state marker is i
 1458              	 .loc 2 906 0
 1459 005c 7B68     	 ldr r3,[r7,#4]
 1460 005e 022B     	 cmp r3,#2
 1461 0060 18D1     	 bne .L86
 907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_F0;
 1462              	 .loc 2 908 0
 1463 0062 FA68     	 ldr r2,[r7,#12]
 1464 0064 B023     	 mov r3,#176
 1465 0066 5B00     	 lsl r3,r3,#1
 1466 0068 D358     	 ldr r3,[r2,r3]
 1467 006a F022     	 mov r2,#240
 1468 006c 1340     	 and r3,r2
 1469 006e 191C     	 mov r1,r3
 1470 0070 FA68     	 ldr r2,[r7,#12]
 1471 0072 B023     	 mov r3,#176
 1472 0074 5B00     	 lsl r3,r3,#1
 1473 0076 D150     	 str r1,[r2,r3]
 909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_0D;
 1474              	 .loc 2 909 0
 1475 0078 FA68     	 ldr r2,[r7,#12]
 1476 007a B023     	 mov r3,#176
 1477 007c 5B00     	 lsl r3,r3,#1
 1478 007e D358     	 ldr r3,[r2,r3]
 1479 0080 0D22     	 mov r2,#13
 1480 0082 1A43     	 orr r2,r3
 1481 0084 111C     	 mov r1,r2
 1482 0086 FA68     	 ldr r2,[r7,#12]
 1483 0088 B023     	 mov r3,#176
 1484 008a 5B00     	 lsl r3,r3,#1
 1485 008c D150     	 str r1,[r2,r3]
 910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitDirtyStateMachine();
 1486              	 .loc 2 910 0
 1487 008e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitDirtyStateMachine
 1488 0092 01E0     	 b .L82
 1489              	.L86:
 911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else                                      /* If both Bank state markers have valid state */
 913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitNormalStateMachine();
 1490              	 .loc 2 914 0
 1491 0094 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitNormalStateMachine
 1492              	.L82:
 915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1493              	 .loc 2 916 0
 1494 0098 BD46     	 mov sp,r7
 1495 009a 04B0     	 add sp,sp,#16
 1496              	 
 1497 009c 80BD     	 pop {r7,pc}
 1498              	.L88:
 1499 009e C046     	 .align 2
 1500              	.L87:
 1501 00a0 00000000 	 .word E_EEPROM_XMC1_0
 1502              	 .cfi_endproc
 1503              	.LFE60:
 1505              	 .section .text.E_EEPROM_XMC1_lInitllegalStateMachine,"ax",%progbits
 1506              	 .align 2
 1507              	 .code 16
 1508              	 .thumb_func
 1510              	E_EEPROM_XMC1_lInitllegalStateMachine:
 1511              	.LFB61:
 917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
 922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall erase all flash and start from fresh depending upon the us
 924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitllegalStateMachine(void)
 926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1512              	 .loc 2 926 0
 1513              	 .cfi_startproc
 1514 0000 80B5     	 push {r7,lr}
 1515              	.LCFI42:
 1516              	 .cfi_def_cfa_offset 8
 1517              	 .cfi_offset 7,-8
 1518              	 .cfi_offset 14,-4
 1519 0002 82B0     	 sub sp,sp,#8
 1520              	.LCFI43:
 1521              	 .cfi_def_cfa_offset 16
 1522 0004 00AF     	 add r7,sp,#0
 1523              	.LCFI44:
 1524              	 .cfi_def_cfa_register 7
 927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1525              	 .loc 2 928 0
 1526 0006 0B4B     	 ldr r3,.L92
 1527 0008 5B68     	 ldr r3,[r3,#4]
 1528 000a 7B60     	 str r3,[r7,#4]
 929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
 931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Any state apart from the normal states is considered as Illegal state. Next operation = Start 
 932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * (Only if the configuration option Erase all is 1U) IF Configuration Option is 0U, Next Operati
 933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
 934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_HANDLE_PTR->erase_all_auto_recovery == 1U)
 1529              	 .loc 2 934 0
 1530 000c 094B     	 ldr r3,.L92
 1531 000e 9B7A     	 ldrb r3,[r3,#10]
 1532 0010 012B     	 cmp r3,#1
 1533 0012 07D1     	 bne .L90
 935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Change the current Bank to Bank0 */
 937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = 0U;
 1534              	 .loc 2 937 0
 1535 0014 7B68     	 ldr r3,[r7,#4]
 1536 0016 0022     	 mov r2,#0
 1537 0018 1A62     	 str r2,[r3,#32]
 938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, 1U);
 1538              	 .loc 2 938 0
 1539 001a 0120     	 mov r0,#1
 1540 001c 0121     	 mov r1,#1
 1541 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
 1542 0022 04E0     	 b .L89
 1543              	.L90:
 939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 1544              	 .loc 2 942 0
 1545 0024 7A68     	 ldr r2,[r7,#4]
 1546 0026 AE23     	 mov r3,#174
 1547 0028 5B00     	 lsl r3,r3,#1
 1548 002a 0921     	 mov r1,#9
 1549 002c D150     	 str r1,[r2,r3]
 1550              	.L89:
 943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1551              	 .loc 2 944 0
 1552 002e BD46     	 mov sp,r7
 1553 0030 02B0     	 add sp,sp,#8
 1554              	 
 1555 0032 80BD     	 pop {r7,pc}
 1556              	.L93:
 1557              	 .align 2
 1558              	.L92:
 1559 0034 00000000 	 .word E_EEPROM_XMC1_0
 1560              	 .cfi_endproc
 1561              	.LFE61:
 1563              	 .section .text.E_EEPROM_XMC1_lInitDirtyStateMachine,"ax",%progbits
 1564              	 .align 2
 1565              	 .code 16
 1566              	 .thumb_func
 1568              	E_EEPROM_XMC1_lInitDirtyStateMachine:
 1569              	.LFB62:
 945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
 950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function shall address the dirty state recovery mechanism by erasing and r
 952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitDirtyStateMachine(void)
 954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1570              	 .loc 2 954 0
 1571              	 .cfi_startproc
 1572 0000 80B5     	 push {r7,lr}
 1573              	.LCFI45:
 1574              	 .cfi_def_cfa_offset 8
 1575              	 .cfi_offset 7,-8
 1576              	 .cfi_offset 14,-4
 1577 0002 82B0     	 sub sp,sp,#8
 1578              	.LCFI46:
 1579              	 .cfi_def_cfa_offset 16
 1580 0004 00AF     	 add r7,sp,#0
 1581              	.LCFI47:
 1582              	 .cfi_def_cfa_register 7
 955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1583              	 .loc 2 956 0
 1584 0006 274B     	 ldr r3,.L104
 1585 0008 5B68     	 ldr r3,[r3,#4]
 1586 000a 7B60     	 str r3,[r7,#4]
 957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1587              	 .loc 2 957 0
 1588 000c 7A68     	 ldr r2,[r7,#4]
 1589 000e B023     	 mov r3,#176
 1590 0010 5B00     	 lsl r3,r3,#1
 1591 0012 D358     	 ldr r3,[r2,r3]
 1592 0014 AD2B     	 cmp r3,#173
 1593 0016 1AD0     	 beq .L96
 1594 0018 04D8     	 bhi .L97
 1595 001a 0D2B     	 cmp r3,#13
 1596 001c 29D0     	 beq .L98
 1597 001e 2D2B     	 cmp r3,#45
 1598 0020 07D0     	 beq .L99
 1599 0022 38E0     	 b .L95
 1600              	.L97:
 1601 0024 D22B     	 cmp r3,#210
 1602 0026 0BD0     	 beq .L100
 1603 0028 DA2B     	 cmp r3,#218
 1604 002a 19D0     	 beq .L101
 1605 002c D02B     	 cmp r3,#208
 1606 002e 29D0     	 beq .L102
 1607 0030 31E0     	 b .L95
 1608              	.L99:
 958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_2D:
 960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E  */
 961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1609              	 .loc 2 961 0
 1610 0032 7B68     	 ldr r3,[r7,#4]
 1611 0034 0022     	 mov r2,#0
 1612 0036 1A62     	 str r2,[r3,#32]
 962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : 2D -> 2F -> 2E */
 963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
 1613              	 .loc 2 963 0
 1614 0038 3020     	 mov r0,#48
 1615 003a FFF7FEFF 	 bl E_EEPROM_XMC1_lErasedDirtyStateRecovery
 964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1616              	 .loc 2 964 0
 1617 003e 2DE0     	 b .L94
 1618              	.L100:
 965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_D2:
 966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
 967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1619              	 .loc 2 967 0
 1620 0040 7B68     	 ldr r3,[r7,#4]
 1621 0042 0122     	 mov r2,#1
 1622 0044 1A62     	 str r2,[r3,#32]
 968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D2 -> F2 -> E2 */
 969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
 1623              	 .loc 2 969 0
 1624 0046 3020     	 mov r0,#48
 1625 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lErasedDirtyStateRecovery
 970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1626              	 .loc 2 970 0
 1627 004c 26E0     	 b .L94
 1628              	.L96:
 971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_AD:
 972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
 973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1629              	 .loc 2 973 0
 1630 004e 7B68     	 ldr r3,[r7,#4]
 1631 0050 0022     	 mov r2,#0
 1632 0052 1A62     	 str r2,[r3,#32]
 974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : AD -> A0 -> GC PROCESS -> 2E */
 975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 1633              	 .loc 2 975 0
 1634 0054 0020     	 mov r0,#0
 1635 0056 0721     	 mov r1,#7
 1636 0058 0122     	 mov r2,#1
 1637 005a FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
 977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1638              	 .loc 2 977 0
 1639 005e 1DE0     	 b .L94
 1640              	.L101:
 978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_DA:
 979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1  and recover from the dirty state to E2*/
 980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1641              	 .loc 2 980 0
 1642 0060 7B68     	 ldr r3,[r7,#4]
 1643 0062 0122     	 mov r2,#1
 1644 0064 1A62     	 str r2,[r3,#32]
 981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : DA -> 0A -> GC PROCESS -> E2 */
 982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 1645              	 .loc 2 982 0
 1646 0066 0020     	 mov r0,#0
 1647 0068 0721     	 mov r1,#7
 1648 006a 0122     	 mov r2,#1
 1649 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
 984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1650              	 .loc 2 984 0
 1651 0070 14E0     	 b .L94
 1652              	.L98:
 985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_0D:
 986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
 987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1653              	 .loc 2 987 0
 1654 0072 7B68     	 ldr r3,[r7,#4]
 1655 0074 0122     	 mov r2,#1
 1656 0076 1A62     	 str r2,[r3,#32]
 988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : 0D -> 02 -> GC PROCESS -> E2 */
 989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 1657              	 .loc 2 989 0
 1658 0078 2020     	 mov r0,#32
 1659 007a 0321     	 mov r1,#3
 1660 007c 0022     	 mov r2,#0
 1661 007e FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
 991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1662              	 .loc 2 991 0
 1663 0082 0BE0     	 b .L94
 1664              	.L102:
 992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_D0:
 993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
 994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1665              	 .loc 2 994 0
 1666 0084 7B68     	 ldr r3,[r7,#4]
 1667 0086 0022     	 mov r2,#0
 1668 0088 1A62     	 str r2,[r3,#32]
 995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
 996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 1669              	 .loc 2 996 0
 1670 008a 2020     	 mov r0,#32
 1671 008c 0321     	 mov r1,#3
 1672 008e 0022     	 mov r2,#0
 1673 0090 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
 998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1674              	 .loc 2 998 0
 1675 0094 02E0     	 b .L94
 1676              	.L95:
 999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Any state apart from the normal states is considered as Illegal state */
1001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : Illegal -> PREPARE DFLASH -> 2E */
1002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitllegalStateMachine();
 1677              	 .loc 2 1002 0
 1678 0096 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
1003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1679              	 .loc 2 1003 0
 1680 009a C046     	 mov r8,r8
 1681              	.L94:
1004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1682              	 .loc 2 1005 0
 1683 009c BD46     	 mov sp,r7
 1684 009e 02B0     	 add sp,sp,#8
 1685              	 
 1686 00a0 80BD     	 pop {r7,pc}
 1687              	.L105:
 1688 00a2 C046     	 .align 2
 1689              	.L104:
 1690 00a4 00000000 	 .word E_EEPROM_XMC1_0
 1691              	 .cfi_endproc
 1692              	.LFE62:
 1694              	 .section .text.E_EEPROM_XMC1_lInitNormalStateMachine,"ax",%progbits
 1695              	 .align 2
 1696              	 .code 16
 1697              	 .thumb_func
 1699              	E_EEPROM_XMC1_lInitNormalStateMachine:
 1700              	.LFB63:
1006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value   : void
1011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description    : Check which normal bank state machine process has executed.
1013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitNormalStateMachine(void)
1015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1701              	 .loc 2 1015 0
 1702              	 .cfi_startproc
 1703 0000 80B5     	 push {r7,lr}
 1704              	.LCFI48:
 1705              	 .cfi_def_cfa_offset 8
 1706              	 .cfi_offset 7,-8
 1707              	 .cfi_offset 14,-4
 1708 0002 00AF     	 add r7,sp,#0
 1709              	.LCFI49:
 1710              	 .cfi_def_cfa_register 7
1016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the state matches with any of the normal marker states with active bank as bank-0*/
1017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_lInitBank0NormalStateMachine() == 0U)
 1711              	 .loc 2 1017 0
 1712 0004 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitBank0NormalStateMachine
 1713 0008 031E     	 sub r3,r0,#0
 1714 000a 09D1     	 bne .L106
1018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the state matches with any of the normal marker states with active bank as bank-1*/
1020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (E_EEPROM_XMC1_lInitBank1NormalStateMachine() == 0U)
 1715              	 .loc 2 1020 0
 1716 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitBank1NormalStateMachine
 1717 0010 031E     	 sub r3,r0,#0
 1718 0012 05D1     	 bne .L106
1021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if the state matches with any other intermediate states from where a recover is poss
1023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (E_EEPROM_XMC1_lInitOtherNormalStateMachine() == 0U)
 1719              	 .loc 2 1023 0
 1720 0014 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitOtherNormalStateMachine
 1721 0018 031E     	 sub r3,r0,#0
 1722 001a 01D1     	 bne .L106
1024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* If no matches found then go to illegal state and try to recover by erasing complete DFLA
1026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lInitllegalStateMachine();
 1723              	 .loc 2 1026 0
 1724 001c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
 1725              	.L106:
1027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1726              	 .loc 2 1030 0
 1727 0020 BD46     	 mov sp,r7
 1728              	 
 1729 0022 80BD     	 pop {r7,pc}
 1730              	 .cfi_endproc
 1731              	.LFE63:
 1733              	 .section .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine,"ax",%progbits
 1734              	 .align 2
 1735              	 .code 16
 1736              	 .thumb_func
 1738              	E_EEPROM_XMC1_lInitBank0NormalStateMachine:
 1739              	.LFB64:
1031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute bank 0 state machine process and return the found states.
1038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void)
1040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1740              	 .loc 2 1040 0
 1741              	 .cfi_startproc
 1742 0000 80B5     	 push {r7,lr}
 1743              	.LCFI50:
 1744              	 .cfi_def_cfa_offset 8
 1745              	 .cfi_offset 7,-8
 1746              	 .cfi_offset 14,-4
 1747 0002 82B0     	 sub sp,sp,#8
 1748              	.LCFI51:
 1749              	 .cfi_def_cfa_offset 16
 1750 0004 00AF     	 add r7,sp,#0
 1751              	.LCFI52:
 1752              	 .cfi_def_cfa_register 7
1041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1753              	 .loc 2 1043 0
 1754 0006 234B     	 ldr r3,.L118
 1755 0008 5B68     	 ldr r3,[r3,#4]
 1756 000a 3B60     	 str r3,[r7]
1044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 1757              	 .loc 2 1045 0
 1758 000c 0123     	 mov r3,#1
 1759 000e 7B60     	 str r3,[r7,#4]
1046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1760              	 .loc 2 1047 0
 1761 0010 3A68     	 ldr r2,[r7]
 1762 0012 B023     	 mov r3,#176
 1763 0014 5B00     	 lsl r3,r3,#1
 1764 0016 D358     	 ldr r3,[r2,r3]
 1765 0018 2E2B     	 cmp r3,#46
 1766 001a 0AD0     	 beq .L110
 1767 001c 04D8     	 bhi .L111
 1768 001e 202B     	 cmp r3,#32
 1769 0020 1FD0     	 beq .L112
 1770 0022 2A2B     	 cmp r3,#42
 1771 0024 0DD0     	 beq .L113
 1772 0026 2CE0     	 b .L109
 1773              	.L111:
 1774 0028 2F2B     	 cmp r3,#47
 1775 002a 22D0     	 beq .L114
 1776 002c A02B     	 cmp r3,#160
 1777 002e 10D0     	 beq .L115
 1778 0030 27E0     	 b .L109
 1779              	.L110:
1048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Normal Data write in Bank-0 interrupted (2E), Next step = Cache Update and get ready to acce
1051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : Nothing
1052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NORMAL1:
1054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = 0U;
 1780              	 .loc 2 1054 0
 1781 0032 3B68     	 ldr r3,[r7]
 1782 0034 0022     	 mov r2,#0
 1783 0036 1A62     	 str r2,[r3,#32]
1055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE)
 1784              	 .loc 2 1055 0
 1785 0038 0A20     	 mov r0,#10
 1786 003a 0021     	 mov r1,#0
 1787 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1788              	 .loc 2 1056 0
 1789 0040 22E0     	 b .L116
 1790              	.L113:
1057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Data copy from Bank0 to Bank1 interrupted (2A), Next step = Erasing Bank-1 and restart copy 
1060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (2A) -> ERASE_BANK0 (2F) -> 2E -> GC_PROCESS (2A -> 0A -> 20 -> F2 -> E2
1061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_DATA_COPY1:
1063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1791              	 .loc 2 1063 0
 1792 0042 3B68     	 ldr r3,[r7]
 1793 0044 0022     	 mov r2,#0
 1794 0046 1A62     	 str r2,[r3,#32]
1064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSE
 1795              	 .loc 2 1064 0
 1796 0048 0420     	 mov r0,#4
 1797 004a 3021     	 mov r1,#48
 1798 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcDataCopyState
1065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1799              	 .loc 2 1065 0
 1800 0050 1AE0     	 b .L116
 1801              	.L115:
1066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after copy completion from Bank1 to Bank0 (A0),Next step = Writing Valid state i
1069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (A0) -> (20) -> GC_PROCESS (2F -> 2E)
1070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_COPY_DONE1:
1072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1802              	 .loc 2 1072 0
 1803 0052 3B68     	 ldr r3,[r7]
 1804 0054 0022     	 mov r2,#0
 1805 0056 1A62     	 str r2,[r3,#32]
1073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC
 1806              	 .loc 2 1073 0
 1807 0058 0720     	 mov r0,#7
 1808 005a 0221     	 mov r1,#2
 1809 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1810              	 .loc 2 1074 0
 1811 0060 12E0     	 b .L116
 1812              	.L112:
1075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after writing valid state to Bank0 (20), Next step = Erase of old redundant Bank
1078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (20) -> (2F) -> GC_PROCESS (2E)
1079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NEXT_VALID1:
1081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1813              	 .loc 2 1081 0
 1814 0062 3B68     	 ldr r3,[r7]
 1815 0064 0022     	 mov r2,#0
 1816 0066 1A62     	 str r2,[r3,#32]
1082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC
 1817              	 .loc 2 1082 0
 1818 0068 0320     	 mov r0,#3
 1819 006a 0221     	 mov r1,#2
 1820 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1821              	 .loc 2 1083 0
 1822 0070 0AE0     	 b .L116
 1823              	.L114:
1084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of old bank completed(2F), Next step = Mark erased Bank-1 with Forma
1087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (2F) -> GC_PROCESS (2E)
1088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_END_ERASE1:
1090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1824              	 .loc 2 1090 0
 1825 0072 3B68     	 ldr r3,[r7]
 1826 0074 0022     	 mov r2,#0
 1827 0076 1A62     	 str r2,[r3,#32]
1091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC
 1828              	 .loc 2 1091 0
 1829 0078 0820     	 mov r0,#8
 1830 007a 0221     	 mov r1,#2
 1831 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1832              	 .loc 2 1092 0
 1833 0080 02E0     	 b .L116
 1834              	.L109:
1093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 1835              	 .loc 2 1095 0
 1836 0082 0023     	 mov r3,#0
 1837 0084 7B60     	 str r3,[r7,#4]
1096:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1838              	 .loc 2 1096 0
 1839 0086 C046     	 mov r8,r8
 1840              	.L116:
1097:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1098:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 1841              	 .loc 2 1098 0
 1842 0088 7B68     	 ldr r3,[r7,#4]
1099:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1843              	 .loc 2 1099 0
 1844 008a 181C     	 mov r0,r3
 1845 008c BD46     	 mov sp,r7
 1846 008e 02B0     	 add sp,sp,#8
 1847              	 
 1848 0090 80BD     	 pop {r7,pc}
 1849              	.L119:
 1850 0092 C046     	 .align 2
 1851              	.L118:
 1852 0094 00000000 	 .word E_EEPROM_XMC1_0
 1853              	 .cfi_endproc
 1854              	.LFE64:
 1856              	 .section .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine,"ax",%progbits
 1857              	 .align 2
 1858              	 .code 16
 1859              	 .thumb_func
 1861              	E_EEPROM_XMC1_lInitBank1NormalStateMachine:
 1862              	.LFB65:
1100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute bank 1 state machine process and return the found states.
1107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void)
1109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1863              	 .loc 2 1109 0
 1864              	 .cfi_startproc
 1865 0000 80B5     	 push {r7,lr}
 1866              	.LCFI53:
 1867              	 .cfi_def_cfa_offset 8
 1868              	 .cfi_offset 7,-8
 1869              	 .cfi_offset 14,-4
 1870 0002 82B0     	 sub sp,sp,#8
 1871              	.LCFI54:
 1872              	 .cfi_def_cfa_offset 16
 1873 0004 00AF     	 add r7,sp,#0
 1874              	.LCFI55:
 1875              	 .cfi_def_cfa_register 7
1110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1876              	 .loc 2 1112 0
 1877 0006 234B     	 ldr r3,.L130
 1878 0008 5B68     	 ldr r3,[r3,#4]
 1879 000a 3B60     	 str r3,[r7]
1113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 1880              	 .loc 2 1114 0
 1881 000c 0123     	 mov r3,#1
 1882 000e 7B60     	 str r3,[r7,#4]
1115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1883              	 .loc 2 1116 0
 1884 0010 3A68     	 ldr r2,[r7]
 1885 0012 B023     	 mov r3,#176
 1886 0014 5B00     	 lsl r3,r3,#1
 1887 0016 D358     	 ldr r3,[r2,r3]
 1888 0018 A22B     	 cmp r3,#162
 1889 001a 12D0     	 beq .L122
 1890 001c 04D8     	 bhi .L123
 1891 001e 022B     	 cmp r3,#2
 1892 0020 1FD0     	 beq .L124
 1893 0022 0A2B     	 cmp r3,#10
 1894 0024 15D0     	 beq .L125
 1895 0026 2CE0     	 b .L121
 1896              	.L123:
 1897 0028 E22B     	 cmp r3,#226
 1898 002a 02D0     	 beq .L126
 1899 002c F22B     	 cmp r3,#242
 1900 002e 20D0     	 beq .L127
 1901 0030 27E0     	 b .L121
 1902              	.L126:
1117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Normal Data write in Bank-1 interrupted (E2), Next step = Cache Update and get ready to acce
1120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : Nothing
1121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NORMAL2:
1123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1903              	 .loc 2 1123 0
 1904 0032 3B68     	 ldr r3,[r7]
 1905 0034 0122     	 mov r2,#1
 1906 0036 1A62     	 str r2,[r3,#32]
1124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE)
 1907              	 .loc 2 1124 0
 1908 0038 0A20     	 mov r0,#10
 1909 003a 0021     	 mov r1,#0
 1910 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1911              	 .loc 2 1125 0
 1912 0040 22E0     	 b .L128
 1913              	.L122:
1126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Data copy from Bank1 to Bank0 interrupted (A2), Next step = Erasing Bank-0 and restart copy 
1129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (A2) -> ERASE_BANK0 (F2) -> E2 -> GC_PROCESS (A2 -> A0 -> 20 -> 2F -> 2E
1130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_DATA_COPY2:
1132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1914              	 .loc 2 1132 0
 1915 0042 3B68     	 ldr r3,[r7]
 1916 0044 0122     	 mov r2,#1
 1917 0046 1A62     	 str r2,[r3,#32]
1133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSE
 1918              	 .loc 2 1133 0
 1919 0048 0420     	 mov r0,#4
 1920 004a 3021     	 mov r1,#48
 1921 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcDataCopyState
1134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1922              	 .loc 2 1134 0
 1923 0050 1AE0     	 b .L128
 1924              	.L125:
1135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after copy completion from Bank0 to Bank1 (0A),Next step = Writing Valid state i
1138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (0A) -> (02) -> GC_PROCESS (F2 -> E2)
1139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_COPY_DONE2:
1141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1925              	 .loc 2 1141 0
 1926 0052 3B68     	 ldr r3,[r7]
 1927 0054 0122     	 mov r2,#1
 1928 0056 1A62     	 str r2,[r3,#32]
1142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC
 1929              	 .loc 2 1142 0
 1930 0058 0720     	 mov r0,#7
 1931 005a 0221     	 mov r1,#2
 1932 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1933              	 .loc 2 1143 0
 1934 0060 12E0     	 b .L128
 1935              	.L124:
1144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after writing valid state to Bank1 (02), Next step = Erase of old redundant Bank
1147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (02) -> (F2) -> GC_PROCESS (E2)
1148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NEXT_VALID2:
1150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1936              	 .loc 2 1150 0
 1937 0062 3B68     	 ldr r3,[r7]
 1938 0064 0122     	 mov r2,#1
 1939 0066 1A62     	 str r2,[r3,#32]
1151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC
 1940              	 .loc 2 1151 0
 1941 0068 0320     	 mov r0,#3
 1942 006a 0221     	 mov r1,#2
 1943 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1944              	 .loc 2 1152 0
 1945 0070 0AE0     	 b .L128
 1946              	.L127:
1153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of old bank completed(F2), Next step = Mark erased Bank-0 with Forma
1156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (F2) -> GC_PROCESS (E2)
1157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_END_ERASE2:
1159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1947              	 .loc 2 1159 0
 1948 0072 3B68     	 ldr r3,[r7]
 1949 0074 0122     	 mov r2,#1
 1950 0076 1A62     	 str r2,[r3,#32]
1160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC
 1951              	 .loc 2 1160 0
 1952 0078 0820     	 mov r0,#8
 1953 007a 0221     	 mov r1,#2
 1954 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1955              	 .loc 2 1161 0
 1956 0080 02E0     	 b .L128
 1957              	.L121:
1162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 1958              	 .loc 2 1164 0
 1959 0082 0023     	 mov r3,#0
 1960 0084 7B60     	 str r3,[r7,#4]
1165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1961              	 .loc 2 1165 0
 1962 0086 C046     	 mov r8,r8
 1963              	.L128:
1166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 1964              	 .loc 2 1167 0
 1965 0088 7B68     	 ldr r3,[r7,#4]
1168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1966              	 .loc 2 1168 0
 1967 008a 181C     	 mov r0,r3
 1968 008c BD46     	 mov sp,r7
 1969 008e 02B0     	 add sp,sp,#8
 1970              	 
 1971 0090 80BD     	 pop {r7,pc}
 1972              	.L131:
 1973 0092 C046     	 .align 2
 1974              	.L130:
 1975 0094 00000000 	 .word E_EEPROM_XMC1_0
 1976              	 .cfi_endproc
 1977              	.LFE65:
 1979              	 .section .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine,"ax",%progbits
 1980              	 .align 2
 1981              	 .code 16
 1982              	 .thumb_func
 1984              	E_EEPROM_XMC1_lInitOtherNormalStateMachine:
 1985              	.LFB66:
1169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute other state machine process and return the found states.
1176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void)
1178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1986              	 .loc 2 1178 0
 1987              	 .cfi_startproc
 1988 0000 80B5     	 push {r7,lr}
 1989              	.LCFI56:
 1990              	 .cfi_def_cfa_offset 8
 1991              	 .cfi_offset 7,-8
 1992              	 .cfi_offset 14,-4
 1993 0002 82B0     	 sub sp,sp,#8
 1994              	.LCFI57:
 1995              	 .cfi_def_cfa_offset 16
 1996 0004 00AF     	 add r7,sp,#0
 1997              	.LCFI58:
 1998              	 .cfi_def_cfa_register 7
1179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1999              	 .loc 2 1181 0
 2000 0006 244B     	 ldr r3,.L142
 2001 0008 5B68     	 ldr r3,[r3,#4]
 2002 000a 3B60     	 str r3,[r7]
1182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 2003              	 .loc 2 1183 0
 2004 000c 0123     	 mov r3,#1
 2005 000e 7B60     	 str r3,[r7,#4]
1184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 2006              	 .loc 2 1185 0
 2007 0010 3A68     	 ldr r2,[r7]
 2008 0012 B023     	 mov r3,#176
 2009 0014 5B00     	 lsl r3,r3,#1
 2010 0016 D358     	 ldr r3,[r2,r3]
 2011 0018 F02B     	 cmp r3,#240
 2012 001a 2CD0     	 beq .L134
 2013 001c 04D8     	 bhi .L135
 2014 001e 0F2B     	 cmp r3,#15
 2015 0020 20D0     	 beq .L136
 2016 0022 AF2B     	 cmp r3,#175
 2017 0024 0CD0     	 beq .L137
 2018 0026 2FE0     	 b .L133
 2019              	.L135:
 2020 0028 FA2B     	 cmp r3,#250
 2021 002a 12D0     	 beq .L138
 2022 002c FF2B     	 cmp r3,#255
 2023 002e 2BD1     	 bne .L133
1186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Interrupted after erase of both banks completed (FF), Next step = Start Prepare DFlash  */
1188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_ALL_ERASED:
1189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 */
1190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2024              	 .loc 2 1190 0
 2025 0030 3B68     	 ldr r3,[r7]
 2026 0032 0022     	 mov r2,#0
 2027 0034 1A62     	 str r2,[r3,#32]
1191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : FF ->  PREPARE_DFLASH (2F) -> 2E */
1192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, E_EEPROM_XMC1_EXECUTE_PREP_FLA
 2028              	 .loc 2 1192 0
 2029 0036 0120     	 mov r0,#1
 2030 0038 0121     	 mov r1,#1
 2031 003a FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2032              	 .loc 2 1193 0
 2033 003e 26E0     	 b .L140
 2034              	.L137:
1194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recovery(AF), Next step = Bank0 marker Page
1197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : AF -> A0 -> GC PROCESS -> 20 -> 2F -> 2E
1198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_AF:
1200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 */
1201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2035              	 .loc 2 1201 0
 2036 0040 3B68     	 ldr r3,[r7]
 2037 0042 0022     	 mov r2,#0
 2038 0044 1A62     	 str r2,[r3,#32]
1202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 2039              	 .loc 2 1203 0
 2040 0046 0020     	 mov r0,#0
 2041 0048 0721     	 mov r1,#7
 2042 004a 0122     	 mov r2,#1
 2043 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
1205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2044              	 .loc 2 1205 0
 2045 0050 1DE0     	 b .L140
 2046              	.L138:
1206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank0 during previous recovery(FA), Next step = Bank1 marker Page
1209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : FA -> 0A -> GC PROCESS -> 02 -> F2 -> E2
1210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_FA:
1212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 2047              	 .loc 2 1212 0
 2048 0052 3B68     	 ldr r3,[r7]
 2049 0054 0122     	 mov r2,#1
 2050 0056 1A62     	 str r2,[r3,#32]
1213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 2051              	 .loc 2 1213 0
 2052 0058 0020     	 mov r0,#0
 2053 005a 0721     	 mov r1,#7
 2054 005c 0122     	 mov r2,#1
 2055 005e FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
1215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2056              	 .loc 2 1215 0
 2057 0062 14E0     	 b .L140
 2058              	.L136:
1216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recover(0F), Next step = Bank1 marker Page 
1219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : 0F -> 02 -> GC PROCESS -> F2 -> E2
1220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_0F:
1222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 2059              	 .loc 2 1222 0
 2060 0064 3B68     	 ldr r3,[r7]
 2061 0066 0122     	 mov r2,#1
 2062 0068 1A62     	 str r2,[r3,#32]
1223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 2063              	 .loc 2 1223 0
 2064 006a 2020     	 mov r0,#32
 2065 006c 0321     	 mov r1,#3
 2066 006e 0022     	 mov r2,#0
 2067 0070 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
1225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2068              	 .loc 2 1225 0
 2069 0074 0BE0     	 b .L140
 2070              	.L134:
1226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recover(F0), Next step = Bank1 marker Page 
1229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : F0 -> 20 -> GC PROCESS -> 2F -> 2E
1230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_F0:
1232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 */
1233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2071              	 .loc 2 1233 0
 2072 0076 3B68     	 ldr r3,[r7]
 2073 0078 0022     	 mov r2,#0
 2074 007a 1A62     	 str r2,[r3,#32]
1234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
1235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 2075              	 .loc 2 1235 0
 2076 007c 2020     	 mov r0,#32
 2077 007e 0321     	 mov r1,#3
 2078 0080 0022     	 mov r2,#0
 2079 0082 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
1237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2080              	 .loc 2 1237 0
 2081 0086 02E0     	 b .L140
 2082              	.L133:
1238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 2083              	 .loc 2 1240 0
 2084 0088 0023     	 mov r3,#0
 2085 008a 7B60     	 str r3,[r7,#4]
1241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2086              	 .loc 2 1241 0
 2087 008c C046     	 mov r8,r8
 2088              	.L140:
1242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 2089              	 .loc 2 1243 0
 2090 008e 7B68     	 ldr r3,[r7,#4]
1244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2091              	 .loc 2 1244 0
 2092 0090 181C     	 mov r0,r3
 2093 0092 BD46     	 mov sp,r7
 2094 0094 02B0     	 add sp,sp,#8
 2095              	 
 2096 0096 80BD     	 pop {r7,pc}
 2097              	.L143:
 2098              	 .align 2
 2099              	.L142:
 2100 0098 00000000 	 .word E_EEPROM_XMC1_0
 2101              	 .cfi_endproc
 2102              	.LFE66:
 2104              	 .section .text.E_EEPROM_XMC1_lInitGcNormalStates,"ax",%progbits
 2105              	 .align 2
 2106              	 .code 16
 2107              	 .thumb_func
 2109              	E_EEPROM_XMC1_lInitGcNormalStates:
 2110              	.LFB67:
1245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : current_state  - Current GC state
1247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *                   next_process  - Number of logical block
1248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : void
1250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Executes normal Garbage collection state machine sub process
1252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process)
1254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2111              	 .loc 2 1254 0
 2112              	 .cfi_startproc
 2113 0000 80B5     	 push {r7,lr}
 2114              	.LCFI59:
 2115              	 .cfi_def_cfa_offset 8
 2116              	 .cfi_offset 7,-8
 2117              	 .cfi_offset 14,-4
 2118 0002 84B0     	 sub sp,sp,#16
 2119              	.LCFI60:
 2120              	 .cfi_def_cfa_offset 24
 2121 0004 00AF     	 add r7,sp,#0
 2122              	.LCFI61:
 2123              	 .cfi_def_cfa_register 7
 2124 0006 7860     	 str r0,[r7,#4]
 2125 0008 3960     	 str r1,[r7]
1255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2126              	 .loc 2 1256 0
 2127 000a 144B     	 ldr r3,.L148
 2128 000c 5B68     	 ldr r3,[r3,#4]
 2129 000e FB60     	 str r3,[r7,#12]
1257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2130              	 .loc 2 1259 0
 2131 0010 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (next_process == E_EEPROM_XMC1_EXECUTE_PREP_FLASH)
 2132              	 .loc 2 1261 0
 2133 0014 3B68     	 ldr r3,[r7]
 2134 0016 012B     	 cmp r3,#1
 2135 0018 09D1     	 bne .L145
1262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state*/
1264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2136              	 .loc 2 1264 0
 2137 001a FA68     	 ldr r2,[r7,#12]
 2138 001c AE23     	 mov r3,#174
 2139 001e 5B00     	 lsl r3,r3,#1
 2140 0020 7968     	 ldr r1,[r7,#4]
 2141 0022 D150     	 str r1,[r2,r3]
1265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Prepare DFlash routine to build FEE base  */
1266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lPrepareDFlash();
 2142              	 .loc 2 1266 0
 2143 0024 FFF7FEFF 	 bl E_EEPROM_XMC1_lPrepareDFlash
1267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2144              	 .loc 2 1268 0
 2145 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
 2146 002c 13E0     	 b .L144
 2147              	.L145:
1269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }  
1270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (next_process == E_EEPROM_XMC1_EXECUTE_GC_STATE)
 2148              	 .loc 2 1270 0
 2149 002e 3B68     	 ldr r3,[r7]
 2150 0030 022B     	 cmp r3,#2
 2151 0032 09D1     	 bne .L147
1271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state */
1273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2152              	 .loc 2 1273 0
 2153 0034 FA68     	 ldr r2,[r7,#12]
 2154 0036 AE23     	 mov r3,#174
 2155 0038 5B00     	 lsl r3,r3,#1
 2156 003a 7968     	 ldr r1,[r7,#4]
 2157 003c D150     	 str r1,[r2,r3]
1274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2158              	 .loc 2 1275 0
 2159 003e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Garbage Collection */
1277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 2160              	 .loc 2 1277 0
 2161 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2162 0046 06E0     	 b .L144
 2163              	.L147:
1278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else /* if ( next_process == E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE ) */
1280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2164              	 .loc 2 1282 0
 2165 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state as Bank-0 Erase Completed state */
1284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2166              	 .loc 2 1284 0
 2167 004c FA68     	 ldr r2,[r7,#12]
 2168 004e AE23     	 mov r3,#174
 2169 0050 5B00     	 lsl r3,r3,#1
 2170 0052 7968     	 ldr r1,[r7,#4]
 2171 0054 D150     	 str r1,[r2,r3]
 2172              	.L144:
1285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2173              	 .loc 2 1286 0
 2174 0056 BD46     	 mov sp,r7
 2175 0058 04B0     	 add sp,sp,#16
 2176              	 
 2177 005a 80BD     	 pop {r7,pc}
 2178              	.L149:
 2179              	 .align 2
 2180              	.L148:
 2181 005c 00000000 	 .word E_EEPROM_XMC1_0
 2182              	 .cfi_endproc
 2183              	.LFE67:
 2185              	 .section .text.E_EEPROM_XMC1_lInitGcDataCopyState,"ax",%progbits
 2186              	 .align 2
 2187              	 .code 16
 2188              	 .thumb_func
 2190              	E_EEPROM_XMC1_lInitGcDataCopyState:
 2191              	.LFB68:
1287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : current_state  - Current GC state
1290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *                   marker_offset  - Marker block offset
1291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : void
1293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Executes data copy state GC state machine sub process.
1295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset)
1297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2192              	 .loc 2 1297 0
 2193              	 .cfi_startproc
 2194 0000 80B5     	 push {r7,lr}
 2195              	.LCFI62:
 2196              	 .cfi_def_cfa_offset 8
 2197              	 .cfi_offset 7,-8
 2198              	 .cfi_offset 14,-4
 2199 0002 84B0     	 sub sp,sp,#16
 2200              	.LCFI63:
 2201              	 .cfi_def_cfa_offset 24
 2202 0004 00AF     	 add r7,sp,#0
 2203              	.LCFI64:
 2204              	 .cfi_def_cfa_register 7
 2205 0006 7860     	 str r0,[r7,#4]
 2206 0008 3960     	 str r1,[r7]
1298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2207              	 .loc 2 1300 0
 2208 000a 1A4B     	 ldr r3,.L155
 2209 000c 5B68     	 ldr r3,[r3,#4]
 2210 000e FB60     	 str r3,[r7,#12]
1301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2211              	 .loc 2 1303 0
 2212 0010 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the GC state as restart copy process */
1306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_state = current_state ;
 2213              	 .loc 2 1306 0
 2214 0014 FA68     	 ldr r2,[r7,#12]
 2215 0016 AE23     	 mov r3,#174
 2216 0018 5B00     	 lsl r3,r3,#1
 2217 001a 7968     	 ldr r1,[r7,#4]
 2218 001c D150     	 str r1,[r2,r3]
1307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the RAM Cache Table with */
1309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCache();
 2219              	 .loc 2 1309 0
 2220 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Erase the previous redundant bank */
1312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 2221              	 .loc 2 1312 0
 2222 0022 FB68     	 ldr r3,[r7,#12]
 2223 0024 1B6B     	 ldr r3,[r3,#48]
 2224 0026 181C     	 mov r0,r3
 2225 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 2226 002c 031C     	 mov r3,r0
 2227 002e BB60     	 str r3,[r7,#8]
1313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2228              	 .loc 2 1314 0
 2229 0030 BB68     	 ldr r3,[r7,#8]
 2230 0032 002B     	 cmp r3,#0
 2231 0034 16D1     	 bne .L151
1315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2232              	 .loc 2 1316 0
 2233 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the erased bank (2E)  */
1319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
 2234              	 .loc 2 1319 0
 2235 003a FB68     	 ldr r3,[r7,#12]
 2236 003c 5A6A     	 ldr r2,[r3,#36]
 2237 003e 3B68     	 ldr r3,[r7]
 2238 0040 D318     	 add r3,r2,r3
 2239 0042 181C     	 mov r0,r3
 2240 0044 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2241 0048 031C     	 mov r3,r0
 2242 004a BB60     	 str r3,[r7,#8]
1320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status == 0U)
 2243              	 .loc 2 1321 0
 2244 004c BB68     	 ldr r3,[r7,#8]
 2245 004e 002B     	 cmp r3,#0
 2246 0050 02D1     	 bne .L152
1322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Start Garbage Collection */
1324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lGarbageCollection();
 2247              	 .loc 2 1324 0
 2248 0052 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2249 0056 0AE0     	 b .L150
 2250              	.L152:
1325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2251              	 .loc 2 1328 0
 2252 0058 FA68     	 ldr r2,[r7,#12]
 2253 005a AE23     	 mov r3,#174
 2254 005c 5B00     	 lsl r3,r3,#1
 2255 005e 0921     	 mov r1,#9
 2256 0060 D150     	 str r1,[r2,r3]
 2257 0062 04E0     	 b .L150
 2258              	.L151:
1329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2259              	 .loc 2 1334 0
 2260 0064 FA68     	 ldr r2,[r7,#12]
 2261 0066 AE23     	 mov r3,#174
 2262 0068 5B00     	 lsl r3,r3,#1
 2263 006a 0921     	 mov r1,#9
 2264 006c D150     	 str r1,[r2,r3]
 2265              	.L150:
1335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2266              	 .loc 2 1337 0
 2267 006e BD46     	 mov sp,r7
 2268 0070 04B0     	 add sp,sp,#16
 2269              	 
 2270 0072 80BD     	 pop {r7,pc}
 2271              	.L156:
 2272              	 .align 2
 2273              	.L155:
 2274 0074 00000000 	 .word E_EEPROM_XMC1_0
 2275              	 .cfi_endproc
 2276              	.LFE68:
 2278              	 .section .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery,"ax",%progbits
 2279              	 .align 2
 2280              	 .code 16
 2281              	 .thumb_func
 2283              	E_EEPROM_XMC1_lErasedDirtyStateRecovery:
 2284              	.LFB69:
1338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : marker_offset  - Marker block offset
1341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Executes state machine sub process for erase dirty states to recover.
1345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset)
1347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2285              	 .loc 2 1347 0
 2286              	 .cfi_startproc
 2287 0000 80B5     	 push {r7,lr}
 2288              	.LCFI65:
 2289              	 .cfi_def_cfa_offset 8
 2290              	 .cfi_offset 7,-8
 2291              	 .cfi_offset 14,-4
 2292 0002 84B0     	 sub sp,sp,#16
 2293              	.LCFI66:
 2294              	 .cfi_def_cfa_offset 24
 2295 0004 00AF     	 add r7,sp,#0
 2296              	.LCFI67:
 2297              	 .cfi_def_cfa_register 7
 2298 0006 7860     	 str r0,[r7,#4]
1348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2299              	 .loc 2 1350 0
 2300 0008 194B     	 ldr r3,.L162
 2301 000a 5B68     	 ldr r3,[r3,#4]
 2302 000c FB60     	 str r3,[r7,#12]
1351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2303              	 .loc 2 1353 0
 2304 000e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Erase the previous redundant bank */
1356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 2305              	 .loc 2 1356 0
 2306 0012 FB68     	 ldr r3,[r7,#12]
 2307 0014 1B6B     	 ldr r3,[r3,#48]
 2308 0016 181C     	 mov r0,r3
 2309 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 2310 001c 031C     	 mov r3,r0
 2311 001e BB60     	 str r3,[r7,#8]
1357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2312              	 .loc 2 1358 0
 2313 0020 BB68     	 ldr r3,[r7,#8]
 2314 0022 002B     	 cmp r3,#0
 2315 0024 1BD1     	 bne .L158
1359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2316              	 .loc 2 1360 0
 2317 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the erased bank */
1363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
 2318              	 .loc 2 1363 0
 2319 002a FB68     	 ldr r3,[r7,#12]
 2320 002c 5A6A     	 ldr r2,[r3,#36]
 2321 002e 7B68     	 ldr r3,[r7,#4]
 2322 0030 D318     	 add r3,r2,r3
 2323 0032 181C     	 mov r0,r3
 2324 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2325 0038 031C     	 mov r3,r0
 2326 003a BB60     	 str r3,[r7,#8]
1364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status == 0U)
 2327              	 .loc 2 1364 0
 2328 003c BB68     	 ldr r3,[r7,#8]
 2329 003e 002B     	 cmp r3,#0
 2330 0040 07D1     	 bne .L159
1365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Update the RAM Cache Table with the written blocks of data.*/
1367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lUpdateCache();
 2331              	 .loc 2 1367 0
 2332 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
 2333              	 .loc 2 1369 0
 2334 0046 FA68     	 ldr r2,[r7,#12]
 2335 0048 AE23     	 mov r3,#174
 2336 004a 5B00     	 lsl r3,r3,#1
 2337 004c 0A21     	 mov r1,#10
 2338 004e D150     	 str r1,[r2,r3]
 2339 0050 0AE0     	 b .L157
 2340              	.L159:
1370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2341              	 .loc 2 1373 0
 2342 0052 FA68     	 ldr r2,[r7,#12]
 2343 0054 AE23     	 mov r3,#174
 2344 0056 5B00     	 lsl r3,r3,#1
 2345 0058 0921     	 mov r1,#9
 2346 005a D150     	 str r1,[r2,r3]
 2347 005c 04E0     	 b .L157
 2348              	.L158:
1374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2349              	 .loc 2 1378 0
 2350 005e FA68     	 ldr r2,[r7,#12]
 2351 0060 AE23     	 mov r3,#174
 2352 0062 5B00     	 lsl r3,r3,#1
 2353 0064 0921     	 mov r1,#9
 2354 0066 D150     	 str r1,[r2,r3]
 2355              	.L157:
1379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2356              	 .loc 2 1380 0
 2357 0068 BD46     	 mov sp,r7
 2358 006a 04B0     	 add sp,sp,#16
 2359              	 
 2360 006c 80BD     	 pop {r7,pc}
 2361              	.L163:
 2362 006e C046     	 .align 2
 2363              	.L162:
 2364 0070 00000000 	 .word E_EEPROM_XMC1_0
 2365              	 .cfi_endproc
 2366              	.LFE69:
 2368              	 .section .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery,"ax",%progbits
 2369              	 .align 2
 2370              	 .code 16
 2371              	 .thumb_func
 2373              	E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:
 2374              	.LFB70:
1381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : current_state   - Current GC state
1384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   NextState      - Next GC state
1385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   page_addr_select - Page address from which bank to be written
1386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Recovers from any copy process dirty state.
1390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( uint32_t current_state,
1392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                           uint32_t next_state,
1393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                           uint32_t page_addr_select)
1394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2375              	 .loc 2 1394 0
 2376              	 .cfi_startproc
 2377 0000 80B5     	 push {r7,lr}
 2378              	.LCFI68:
 2379              	 .cfi_def_cfa_offset 8
 2380              	 .cfi_offset 7,-8
 2381              	 .cfi_offset 14,-4
 2382 0002 86B0     	 sub sp,sp,#24
 2383              	.LCFI69:
 2384              	 .cfi_def_cfa_offset 32
 2385 0004 00AF     	 add r7,sp,#0
 2386              	.LCFI70:
 2387              	 .cfi_def_cfa_register 7
 2388 0006 F860     	 str r0,[r7,#12]
 2389 0008 B960     	 str r1,[r7,#8]
 2390 000a 7A60     	 str r2,[r7,#4]
1395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2391              	 .loc 2 1397 0
 2392 000c 1B4B     	 ldr r3,.L169
 2393 000e 5B68     	 ldr r3,[r3,#4]
 2394 0010 7B61     	 str r3,[r7,#20]
1398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2395              	 .loc 2 1400 0
 2396 0012 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Set the marker blocks with copy completed state */
1403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerPageBuffer(current_state);
 2397              	 .loc 2 1403 0
 2398 0016 FB68     	 ldr r3,[r7,#12]
 2399 0018 181C     	 mov r0,r3
 2400 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerPageBuffer
1404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
1406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 2401              	 .loc 2 1406 0
 2402 001e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Decide the bank from page_addr_select and Erase the marker page + Program with the current sta
1409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (page_addr_select == 1U)
 2403              	 .loc 2 1409 0
 2404 0022 7B68     	 ldr r3,[r7,#4]
 2405 0024 012B     	 cmp r3,#1
 2406 0026 08D1     	 bne .L165
1410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_dest_addr, (uint32_t*)(void*)data_ptr->page_write_b
 2407              	 .loc 2 1411 0
 2408 0028 7B69     	 ldr r3,[r7,#20]
 2409 002a 5A6A     	 ldr r2,[r3,#36]
 2410 002c 7B69     	 ldr r3,[r7,#20]
 2411 002e 5833     	 add r3,r3,#88
 2412 0030 101C     	 mov r0,r2
 2413 0032 191C     	 mov r1,r3
 2414 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
 2415 0038 07E0     	 b .L166
 2416              	.L165:
1412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_src_addr, (uint32_t*)(void*)data_ptr->page_write_bu
 2417              	 .loc 2 1415 0
 2418 003a 7B69     	 ldr r3,[r7,#20]
 2419 003c 9A6A     	 ldr r2,[r3,#40]
 2420 003e 7B69     	 ldr r3,[r7,#20]
 2421 0040 5833     	 add r3,r3,#88
 2422 0042 101C     	 mov r0,r2
 2423 0044 191C     	 mov r1,r3
 2424 0046 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
 2425              	.L166:
1416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 2426              	 .loc 2 1418 0
 2427 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 2428 004e 031C     	 mov r3,r0
 2429 0050 3B61     	 str r3,[r7,#16]
1419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2430              	 .loc 2 1420 0
 2431 0052 3B69     	 ldr r3,[r7,#16]
 2432 0054 002B     	 cmp r3,#0
 2433 0056 09D1     	 bne .L167
1421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state as write next bank valid */
1423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = next_state ;
 2434              	 .loc 2 1423 0
 2435 0058 7A69     	 ldr r2,[r7,#20]
 2436 005a AE23     	 mov r3,#174
 2437 005c 5B00     	 lsl r3,r3,#1
 2438 005e B968     	 ldr r1,[r7,#8]
 2439 0060 D150     	 str r1,[r2,r3]
1424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2440              	 .loc 2 1425 0
 2441 0062 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Garbage Collection */
1427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 2442              	 .loc 2 1427 0
 2443 0066 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2444 006a 04E0     	 b .L164
 2445              	.L167:
1428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2446              	 .loc 2 1431 0
 2447 006c 7A69     	 ldr r2,[r7,#20]
 2448 006e AE23     	 mov r3,#174
 2449 0070 5B00     	 lsl r3,r3,#1
 2450 0072 0921     	 mov r1,#9
 2451 0074 D150     	 str r1,[r2,r3]
 2452              	.L164:
1432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2453              	 .loc 2 1433 0
 2454 0076 BD46     	 mov sp,r7
 2455 0078 06B0     	 add sp,sp,#24
 2456              	 
 2457 007a 80BD     	 pop {r7,pc}
 2458              	.L170:
 2459              	 .align 2
 2460              	.L169:
 2461 007c 00000000 	 .word E_EEPROM_XMC1_0
 2462              	 .cfi_endproc
 2463              	.LFE70:
 2465              	 .section .text.E_EEPROM_XMC1_lGarbageCollection,"ax",%progbits
 2466              	 .align 2
 2467              	 .code 16
 2468              	 .thumb_func
 2470              	E_EEPROM_XMC1_lGarbageCollection:
 2471              	.LFB71:
1434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function execute's the garbage collection state machine.
1441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lGarbageCollection(void)
1443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2472              	 .loc 2 1443 0
 2473              	 .cfi_startproc
 2474 0000 80B5     	 push {r7,lr}
 2475              	.LCFI71:
 2476              	 .cfi_def_cfa_offset 8
 2477              	 .cfi_offset 7,-8
 2478              	 .cfi_offset 14,-4
 2479 0002 82B0     	 sub sp,sp,#8
 2480              	.LCFI72:
 2481              	 .cfi_def_cfa_offset 16
 2482 0004 00AF     	 add r7,sp,#0
 2483              	.LCFI73:
 2484              	 .cfi_def_cfa_register 7
1444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2485              	 .loc 2 1445 0
 2486 0006 244B     	 ldr r3,.L184
 2487 0008 5B68     	 ldr r3,[r3,#4]
 2488 000a 7B60     	 str r3,[r7,#4]
 2489              	.L183:
1446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
1448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->gc_state)
 2490              	 .loc 2 1449 0
 2491 000c 7A68     	 ldr r2,[r7,#4]
 2492 000e AE23     	 mov r3,#174
 2493 0010 5B00     	 lsl r3,r3,#1
 2494 0012 D358     	 ldr r3,[r2,r3]
 2495 0014 082B     	 cmp r3,#8
 2496 0016 2CD8     	 bhi .L172
 2497 0018 9A00     	 lsl r2,r3,#2
 2498 001a 204B     	 ldr r3,.L184+4
 2499 001c D318     	 add r3,r2,r3
 2500 001e 1B68     	 ldr r3,[r3]
 2501 0020 9F46     	 mov pc,r3
 2502              	 .section .rodata.E_EEPROM_XMC1_lGarbageCollection,"a",%progbits
 2503              	 .align 2
 2504              	.L174:
 2505 0000 72000000 	 .word .L172
 2506 0004 22000000 	 .word .L173
 2507 0008 2E000000 	 .word .L175
 2508 000c 5E000000 	 .word .L176
 2509 0010 72000000 	 .word .L172
 2510 0014 28000000 	 .word .L177
 2511 0018 4E000000 	 .word .L178
 2512 001c 54000000 	 .word .L179
 2513 0020 68000000 	 .word .L180
 2514              	 .section .text.E_EEPROM_XMC1_lGarbageCollection
 2515              	.L173:
1450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_START:
1452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcStartCopy();
 2516              	 .loc 2 1452 0
 2517 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcStartCopy
1453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2518              	 .loc 2 1453 0
 2519 0026 27E0     	 b .L181
 2520              	.L177:
1454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_WRITE:
1456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcCopyWrite();
 2521              	 .loc 2 1456 0
 2522 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcCopyWrite
1457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2523              	 .loc 2 1457 0
 2524 002c 24E0     	 b .L181
 2525              	.L175:
1458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_READ_NXTBLOCK:
1460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         XMC_FLASH_ClearStatus();
 2526              	 .loc 2 1460 0
 2527 002e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr ,(uint32_t*)(void*)data_ptr->read_writ
 2528              	 .loc 2 1461 0
 2529 0032 7B68     	 ldr r3,[r7,#4]
 2530 0034 9A6A     	 ldr r2,[r3,#40]
 2531 0036 7B68     	 ldr r3,[r7,#4]
 2532 0038 4433     	 add r3,r3,#68
 2533 003a 101C     	 mov r0,r2
 2534 003c 191C     	 mov r1,r3
 2535 003e FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
 2536              	 .loc 2 1462 0
 2537 0042 7A68     	 ldr r2,[r7,#4]
 2538 0044 AE23     	 mov r3,#174
 2539 0046 5B00     	 lsl r3,r3,#1
 2540 0048 0521     	 mov r1,#5
 2541 004a D150     	 str r1,[r2,r3]
1463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2542              	 .loc 2 1463 0
 2543 004c 14E0     	 b .L181
 2544              	.L178:
1464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_END:
1466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcEndOfCopy();
 2545              	 .loc 2 1466 0
 2546 004e FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcEndOfCopy
1467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2547              	 .loc 2 1467 0
 2548 0052 11E0     	 b .L181
 2549              	.L179:
1468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_NEXT_BANK_VALID:
1470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_GC_ERASE
 2550              	 .loc 2 1470 0
 2551 0054 0720     	 mov r0,#7
 2552 0056 0321     	 mov r1,#3
 2553 0058 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2554              	 .loc 2 1471 0
 2555 005c 0CE0     	 b .L181
 2556              	.L176:
1472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_ERASE_PREV_BANK:
1474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_GC_MARK
 2557              	 .loc 2 1474 0
 2558 005e 0320     	 mov r0,#3
 2559 0060 0821     	 mov r1,#8
 2560 0062 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2561              	 .loc 2 1475 0
 2562 0066 07E0     	 b .L181
 2563              	.L180:
1476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_MARK_END_ERASE1:
1478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_GC_IDLE)
 2564              	 .loc 2 1478 0
 2565 0068 0820     	 mov r0,#8
 2566 006a 0A21     	 mov r1,#10
 2567 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2568              	 .loc 2 1479 0
 2569 0070 02E0     	 b .L181
 2570              	.L172:
1480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:
1482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
 2571              	 .loc 2 1482 0
 2572 0072 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcRequested
1483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2573              	 .loc 2 1483 0
 2574 0076 C046     	 mov r8,r8
 2575              	.L181:
1484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
 2576              	 .loc 2 1486 0
 2577 0078 7A68     	 ldr r2,[r7,#4]
 2578 007a AE23     	 mov r3,#174
 2579 007c 5B00     	 lsl r3,r3,#1
 2580 007e D358     	 ldr r3,[r2,r3]
1487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 2581              	 .loc 2 1487 0
 2582 0080 0A2B     	 cmp r3,#10
 2583 0082 05D0     	 beq .L171
 2584              	 .loc 2 1487 0 is_stmt 0 discriminator 1
 2585 0084 7A68     	 ldr r2,[r7,#4]
 2586 0086 AE23     	 mov r3,#174
 2587 0088 5B00     	 lsl r3,r3,#1
 2588 008a D358     	 ldr r3,[r2,r3]
1486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 2589              	 .loc 2 1486 0 is_stmt 1 discriminator 1
 2590 008c 092B     	 cmp r3,#9
 2591 008e BDD1     	 bne .L183
 2592              	.L171:
1488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2593              	 .loc 2 1488 0
 2594 0090 BD46     	 mov sp,r7
 2595 0092 02B0     	 add sp,sp,#8
 2596              	 
 2597 0094 80BD     	 pop {r7,pc}
 2598              	.L185:
 2599 0096 C046     	 .align 2
 2600              	.L184:
 2601 0098 00000000 	 .word E_EEPROM_XMC1_0
 2602 009c 00000000 	 .word .L174
 2603              	 .cfi_endproc
 2604              	.LFE71:
 2606              	 .section .text.E_EEPROM_XMC1_lHandleGcRequested,"ax",%progbits
 2607              	 .align 2
 2608              	 .code 16
 2609              	 .thumb_func
 2611              	E_EEPROM_XMC1_lHandleGcRequested:
 2612              	.LFB72:
1489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC REQUESTED state
1496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcRequested(void)
1498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2613              	 .loc 2 1498 0
 2614              	 .cfi_startproc
 2615 0000 80B5     	 push {r7,lr}
 2616              	.LCFI74:
 2617              	 .cfi_def_cfa_offset 8
 2618              	 .cfi_offset 7,-8
 2619              	 .cfi_offset 14,-4
 2620 0002 84B0     	 sub sp,sp,#16
 2621              	.LCFI75:
 2622              	 .cfi_def_cfa_offset 24
 2623 0004 00AF     	 add r7,sp,#0
 2624              	.LCFI76:
 2625              	 .cfi_def_cfa_register 7
1499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2626              	 .loc 2 1504 0
 2627 0006 1F4B     	 ldr r3,.L190
 2628 0008 5B68     	 ldr r3,[r3,#4]
 2629 000a 7B60     	 str r3,[r7,#4]
1505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2630              	 .loc 2 1506 0
 2631 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write Copy start state to new bank  (2A) or (A2) */
1508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_BEGIN_OFFSET));
 2632              	 .loc 2 1508 0
 2633 0010 7B68     	 ldr r3,[r7,#4]
 2634 0012 5B6A     	 ldr r3,[r3,#36]
 2635 0014 1033     	 add r3,r3,#16
 2636 0016 181C     	 mov r0,r3
 2637 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2638 001c 031C     	 mov r3,r0
 2639 001e 3B60     	 str r3,[r7]
1509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2640              	 .loc 2 1509 0
 2641 0020 3B68     	 ldr r3,[r7]
 2642 0022 002B     	 cmp r3,#0
 2643 0024 25D1     	 bne .L187
1510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Initialize the copied status for all the logical blocks */
1512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     cache_ptr = data_ptr->block_info;
 2644              	 .loc 2 1512 0
 2645 0026 7B68     	 ldr r3,[r7,#4]
 2646 0028 BB60     	 str r3,[r7,#8]
1513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count = 0U;
 2647              	 .loc 2 1513 0
 2648 002a 0023     	 mov r3,#0
 2649 002c FB60     	 str r3,[r7,#12]
 2650              	.L188:
1514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     do
1515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->status.copied = 0U;
 2651              	 .loc 2 1516 0 discriminator 1
 2652 002e BB68     	 ldr r3,[r7,#8]
 2653 0030 1A79     	 ldrb r2,[r3,#4]
 2654 0032 0421     	 mov r1,#4
 2655 0034 8A43     	 bic r2,r1
 2656 0036 1A71     	 strb r2,[r3,#4]
1517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2657              	 .loc 2 1517 0 discriminator 1
 2658 0038 FB68     	 ldr r3,[r7,#12]
 2659 003a 0133     	 add r3,r3,#1
 2660 003c FB60     	 str r3,[r7,#12]
1518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr++;
 2661              	 .loc 2 1518 0 discriminator 1
 2662 003e BB68     	 ldr r3,[r7,#8]
 2663 0040 0833     	 add r3,r3,#8
 2664 0042 BB60     	 str r3,[r7,#8]
1519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     } while (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count);
 2665              	 .loc 2 1519 0 discriminator 1
 2666 0044 0F4B     	 ldr r3,.L190
 2667 0046 5B7A     	 ldrb r3,[r3,#9]
 2668 0048 1A1E     	 sub r2,r3,#0
 2669 004a FB68     	 ldr r3,[r7,#12]
 2670 004c 9A42     	 cmp r2,r3
 2671 004e EED1     	 bne .L188
1520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_log_block_count = 0U;
 2672              	 .loc 2 1521 0
 2673 0050 7A68     	 ldr r2,[r7,#4]
 2674 0052 B223     	 mov r3,#178
 2675 0054 5B00     	 lsl r3,r3,#1
 2676 0056 0021     	 mov r1,#0
 2677 0058 D150     	 str r1,[r2,r3]
1522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
 2678              	 .loc 2 1522 0
 2679 005a 7A68     	 ldr r2,[r7,#4]
 2680 005c AE23     	 mov r3,#174
 2681 005e 5B00     	 lsl r3,r3,#1
 2682 0060 0121     	 mov r1,#1
 2683 0062 D150     	 str r1,[r2,r3]
1523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 2684              	 .loc 2 1523 0
 2685 0064 7B68     	 ldr r3,[r7,#4]
 2686 0066 5B6A     	 ldr r3,[r3,#36]
 2687 0068 5A1C     	 add r2,r3,#1
 2688 006a FF32     	 add r2,r2,#255
 2689 006c 7B68     	 ldr r3,[r7,#4]
 2690 006e 5A62     	 str r2,[r3,#36]
 2691 0070 04E0     	 b .L186
 2692              	.L187:
1524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2693              	 .loc 2 1527 0
 2694 0072 7A68     	 ldr r2,[r7,#4]
 2695 0074 AE23     	 mov r3,#174
 2696 0076 5B00     	 lsl r3,r3,#1
 2697 0078 0921     	 mov r1,#9
 2698 007a D150     	 str r1,[r2,r3]
 2699              	.L186:
1528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2700              	 .loc 2 1529 0
 2701 007c BD46     	 mov sp,r7
 2702 007e 04B0     	 add sp,sp,#16
 2703              	 
 2704 0080 80BD     	 pop {r7,pc}
 2705              	.L191:
 2706 0082 C046     	 .align 2
 2707              	.L190:
 2708 0084 00000000 	 .word E_EEPROM_XMC1_0
 2709              	 .cfi_endproc
 2710              	.LFE72:
 2712              	 .section .text.E_EEPROM_XMC1_lHandleGcStartCopy,"ax",%progbits
 2713              	 .align 2
 2714              	 .code 16
 2715              	 .thumb_func
 2717              	E_EEPROM_XMC1_lHandleGcStartCopy:
 2718              	.LFB73:
1530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC START COPY state
1536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcStartCopy(void)
1538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2719              	 .loc 2 1538 0
 2720              	 .cfi_startproc
 2721 0000 80B5     	 push {r7,lr}
 2722              	.LCFI77:
 2723              	 .cfi_def_cfa_offset 8
 2724              	 .cfi_offset 7,-8
 2725              	 .cfi_offset 14,-4
 2726 0002 84B0     	 sub sp,sp,#16
 2727              	.LCFI78:
 2728              	 .cfi_def_cfa_offset 24
 2729 0004 00AF     	 add r7,sp,#0
 2730              	.LCFI79:
 2731              	 .cfi_def_cfa_register 7
1539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_flag;
1540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2732              	 .loc 2 1544 0
 2733 0006 324B     	 ldr r3,.L199
 2734 0008 5B68     	 ldr r3,[r3,#4]
 2735 000a 3B60     	 str r3,[r7]
1545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_flag = 0U;
 2736              	 .loc 2 1546 0
 2737 000c 0023     	 mov r3,#0
 2738 000e FB60     	 str r3,[r7,#12]
1547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* initialize the copied status for all the logical blocks */
1548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = data_ptr->gc_log_block_count;
 2739              	 .loc 2 1548 0
 2740 0010 3A68     	 ldr r2,[r7]
 2741 0012 B223     	 mov r3,#178
 2742 0014 5B00     	 lsl r3,r3,#1
 2743 0016 D358     	 ldr r3,[r2,r3]
 2744 0018 BB60     	 str r3,[r7,#8]
1549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info + block_count;
 2745              	 .loc 2 1549 0
 2746 001a BB68     	 ldr r3,[r7,#8]
 2747 001c DB00     	 lsl r3,r3,#3
 2748 001e 3A68     	 ldr r2,[r7]
 2749 0020 D318     	 add r3,r2,r3
 2750 0022 7B60     	 str r3,[r7,#4]
1550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
1551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Check all available blocks in cache table for Copy process. Condition breaks on either the cur
1552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * consistent or all blocks check for consistency is finished
1553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
 2751              	 .loc 2 1554 0
 2752 0024 1AE0     	 b .L193
 2753              	.L196:
1555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If block is consistent set state flag for copy enable*/
1557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (((cache_ptr->address != 0U) && (cache_ptr->status.consistent == 1U)) && (cache_ptr->status.
 2754              	 .loc 2 1557 0
 2755 0026 7B68     	 ldr r3,[r7,#4]
 2756 0028 1B68     	 ldr r3,[r3]
 2757 002a 002B     	 cmp r3,#0
 2758 002c 10D0     	 beq .L194
 2759              	 .loc 2 1557 0 is_stmt 0 discriminator 1
 2760 002e 7B68     	 ldr r3,[r7,#4]
 2761 0030 1B79     	 ldrb r3,[r3,#4]
 2762 0032 0222     	 mov r2,#2
 2763 0034 1340     	 and r3,r2
 2764 0036 DBB2     	 uxtb r3,r3
 2765 0038 002B     	 cmp r3,#0
 2766 003a 09D0     	 beq .L194
 2767              	 .loc 2 1557 0 discriminator 2
 2768 003c 7B68     	 ldr r3,[r7,#4]
 2769 003e 1B79     	 ldrb r3,[r3,#4]
 2770 0040 0422     	 mov r2,#4
 2771 0042 1340     	 and r3,r2
 2772 0044 DBB2     	 uxtb r3,r3
 2773 0046 002B     	 cmp r3,#0
 2774 0048 02D1     	 bne .L194
1558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_flag = 1U;
 2775              	 .loc 2 1559 0 is_stmt 1
 2776 004a 0123     	 mov r3,#1
 2777 004c FB60     	 str r3,[r7,#12]
 2778 004e 05E0     	 b .L193
 2779              	.L194:
1560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If block is inconsistent ignore the block from copy and try next block*/
1562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2780              	 .loc 2 1564 0
 2781 0050 BB68     	 ldr r3,[r7,#8]
 2782 0052 0133     	 add r3,r3,#1
 2783 0054 BB60     	 str r3,[r7,#8]
1565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr++;
 2784              	 .loc 2 1565 0
 2785 0056 7B68     	 ldr r3,[r7,#4]
 2786 0058 0833     	 add r3,r3,#8
 2787 005a 7B60     	 str r3,[r7,#4]
 2788              	.L193:
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 2789              	 .loc 2 1554 0
 2790 005c FB68     	 ldr r3,[r7,#12]
 2791 005e 002B     	 cmp r3,#0
 2792 0060 05D1     	 bne .L195
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 2793              	 .loc 2 1554 0 is_stmt 0 discriminator 1
 2794 0062 1B4B     	 ldr r3,.L199
 2795 0064 5B7A     	 ldrb r3,[r3,#9]
 2796 0066 1A1E     	 sub r2,r3,#0
 2797 0068 BB68     	 ldr r3,[r7,#8]
 2798 006a 9A42     	 cmp r2,r3
 2799 006c DBD1     	 bne .L196
 2800              	.L195:
1566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } /* end of while */
1568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If block is consistent */
1570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (state_flag == 1U)
 2801              	 .loc 2 1570 0 is_stmt 1
 2802 006e FB68     	 ldr r3,[r7,#12]
 2803 0070 012B     	 cmp r3,#1
 2804 0072 16D1     	 bne .L197
1571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = cache_ptr->address;
 2805              	 .loc 2 1572 0
 2806 0074 7B68     	 ldr r3,[r7,#4]
 2807 0076 1A68     	 ldr r2,[r3]
 2808 0078 3B68     	 ldr r3,[r7]
 2809 007a 9A62     	 str r2,[r3,#40]
1573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_block_counter = 0U;
 2810              	 .loc 2 1573 0
 2811 007c 3B68     	 ldr r3,[r7]
 2812 007e 0022     	 mov r2,#0
 2813 0080 DA63     	 str r2,[r3,#60]
1574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
1576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 2814              	 .loc 2 1576 0
 2815 0082 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr,(uint32_t*)(void*)data_ptr->read_write_buf
 2816              	 .loc 2 1578 0
 2817 0086 3B68     	 ldr r3,[r7]
 2818 0088 9A6A     	 ldr r2,[r3,#40]
 2819 008a 3B68     	 ldr r3,[r7]
 2820 008c 4433     	 add r3,r3,#68
 2821 008e 101C     	 mov r0,r2
 2822 0090 191C     	 mov r1,r3
 2823 0092 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Return value above is ignored as parameters passed from FEE are correct */
1581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
 2824              	 .loc 2 1581 0
 2825 0096 3A68     	 ldr r2,[r7]
 2826 0098 AE23     	 mov r3,#174
 2827 009a 5B00     	 lsl r3,r3,#1
 2828 009c 0521     	 mov r1,#5
 2829 009e D150     	 str r1,[r2,r3]
 2830 00a0 0EE0     	 b .L198
 2831              	.L197:
1582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Finished copying all the logical blocks */
1584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the next free block pointer */
1587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->next_free_block_addr = data_ptr->gc_dest_addr;
 2832              	 .loc 2 1587 0
 2833 00a2 3B68     	 ldr r3,[r7]
 2834 00a4 5A6A     	 ldr r2,[r3,#36]
 2835 00a6 3B68     	 ldr r3,[r7]
 2836 00a8 5A63     	 str r2,[r3,#52]
1588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = data_ptr->curr_bank_src_addr;
 2837              	 .loc 2 1588 0
 2838 00aa 3B68     	 ldr r3,[r7]
 2839 00ac 9A6B     	 ldr r2,[r3,#56]
 2840 00ae 3B68     	 ldr r3,[r7]
 2841 00b0 9A62     	 str r2,[r3,#40]
1589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2842              	 .loc 2 1589 0
 2843 00b2 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_END;
 2844              	 .loc 2 1590 0
 2845 00b6 3A68     	 ldr r2,[r7]
 2846 00b8 AE23     	 mov r3,#174
 2847 00ba 5B00     	 lsl r3,r3,#1
 2848 00bc 0621     	 mov r1,#6
 2849 00be D150     	 str r1,[r2,r3]
 2850              	.L198:
1591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_log_block_count = block_count;
 2851              	 .loc 2 1592 0
 2852 00c0 3A68     	 ldr r2,[r7]
 2853 00c2 B223     	 mov r3,#178
 2854 00c4 5B00     	 lsl r3,r3,#1
 2855 00c6 B968     	 ldr r1,[r7,#8]
 2856 00c8 D150     	 str r1,[r2,r3]
1593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2857              	 .loc 2 1593 0
 2858 00ca BD46     	 mov sp,r7
 2859 00cc 04B0     	 add sp,sp,#16
 2860              	 
 2861 00ce 80BD     	 pop {r7,pc}
 2862              	.L200:
 2863              	 .align 2
 2864              	.L199:
 2865 00d0 00000000 	 .word E_EEPROM_XMC1_0
 2866              	 .cfi_endproc
 2867              	.LFE73:
 2869              	 .section .text.E_EEPROM_XMC1_lHandleGcCopyWrite,"ax",%progbits
 2870              	 .align 2
 2871              	 .code 16
 2872              	 .thumb_func
 2874              	E_EEPROM_XMC1_lHandleGcCopyWrite:
 2875              	.LFB74:
1594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC START COPY WRITE state.
1601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcCopyWrite(void)
1603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2876              	 .loc 2 1603 0
 2877              	 .cfi_startproc
 2878 0000 80B5     	 push {r7,lr}
 2879              	.LCFI80:
 2880              	 .cfi_def_cfa_offset 8
 2881              	 .cfi_offset 7,-8
 2882              	 .cfi_offset 14,-4
 2883 0002 86B0     	 sub sp,sp,#24
 2884              	.LCFI81:
 2885              	 .cfi_def_cfa_offset 32
 2886 0004 00AF     	 add r7,sp,#0
 2887              	.LCFI82:
 2888              	 .cfi_def_cfa_register 7
1604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t size;
1605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_physical_blocks;
1608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2889              	 .loc 2 1611 0
 2890 0006 384B     	 ldr r3,.L207
 2891 0008 5B68     	 ldr r3,[r3,#4]
 2892 000a 3B61     	 str r3,[r7,#16]
1612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* initialize the copied status for all the logical blocks */
1614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = data_ptr->gc_log_block_count;
 2893              	 .loc 2 1614 0
 2894 000c 3A69     	 ldr r2,[r7,#16]
 2895 000e B223     	 mov r3,#178
 2896 0010 5B00     	 lsl r3,r3,#1
 2897 0012 D358     	 ldr r3,[r2,r3]
 2898 0014 7B61     	 str r3,[r7,#20]
1615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info + block_count;
 2899              	 .loc 2 1615 0
 2900 0016 7B69     	 ldr r3,[r7,#20]
 2901 0018 DB00     	 lsl r3,r3,#3
 2902 001a 3A69     	 ldr r2,[r7,#16]
 2903 001c D318     	 add r3,r2,r3
 2904 001e FB60     	 str r3,[r7,#12]
1616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr));
 2905              	 .loc 2 1617 0
 2906 0020 3B69     	 ldr r3,[r7,#16]
 2907 0022 5B6A     	 ldr r3,[r3,#36]
 2908 0024 181C     	 mov r0,r3
 2909 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2910 002a 031C     	 mov r3,r0
 2911 002c BB60     	 str r3,[r7,#8]
1618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2912              	 .loc 2 1618 0
 2913 002e BB68     	 ldr r3,[r7,#8]
 2914 0030 002B     	 cmp r3,#0
 2915 0032 4BD1     	 bne .L202
1619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {      
1620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     (data_ptr->gc_block_counter)++;
 2916              	 .loc 2 1620 0
 2917 0034 3B69     	 ldr r3,[r7,#16]
 2918 0036 DB6B     	 ldr r3,[r3,#60]
 2919 0038 5A1C     	 add r2,r3,#1
 2920 003a 3B69     	 ldr r3,[r7,#16]
 2921 003c DA63     	 str r2,[r3,#60]
1621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     size = (E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_count].size);
 2922              	 .loc 2 1621 0
 2923 003e 2A4B     	 ldr r3,.L207
 2924 0040 1A68     	 ldr r2,[r3]
 2925 0042 7B69     	 ldr r3,[r7,#20]
 2926 0044 DB00     	 lsl r3,r3,#3
 2927 0046 D318     	 add r3,r2,r3
 2928 0048 5B68     	 ldr r3,[r3,#4]
 2929 004a 7B60     	 str r3,[r7,#4]
1622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     flash_physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
 2930              	 .loc 2 1622 0
 2931 004c 7B68     	 ldr r3,[r7,#4]
 2932 004e 181C     	 mov r0,r3
 2933 0050 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 2934 0054 031C     	 mov r3,r0
 2935 0056 3B60     	 str r3,[r7]
1623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If all the blocks of the logical block are copied */
1624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ((data_ptr->gc_block_counter == flash_physical_blocks) || (cache_ptr->status.valid == 0U))
 2936              	 .loc 2 1624 0
 2937 0058 3B69     	 ldr r3,[r7,#16]
 2938 005a DA6B     	 ldr r2,[r3,#60]
 2939 005c 3B68     	 ldr r3,[r7]
 2940 005e 9A42     	 cmp r2,r3
 2941 0060 06D0     	 beq .L203
 2942              	 .loc 2 1624 0 is_stmt 0 discriminator 1
 2943 0062 FB68     	 ldr r3,[r7,#12]
 2944 0064 1B79     	 ldrb r3,[r3,#4]
 2945 0066 0122     	 mov r2,#1
 2946 0068 1340     	 and r3,r2
 2947 006a DBB2     	 uxtb r3,r3
 2948 006c 002B     	 cmp r3,#0
 2949 006e 1BD1     	 bne .L204
 2950              	.L203:
1625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->status.copied = 1U;
 2951              	 .loc 2 1626 0 is_stmt 1
 2952 0070 FB68     	 ldr r3,[r7,#12]
 2953 0072 1A79     	 ldrb r2,[r3,#4]
 2954 0074 0421     	 mov r1,#4
 2955 0076 0A43     	 orr r2,r1
 2956 0078 1A71     	 strb r2,[r3,#4]
1627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2957              	 .loc 2 1627 0
 2958 007a 7B69     	 ldr r3,[r7,#20]
 2959 007c 0133     	 add r3,r3,#1
 2960 007e 7B61     	 str r3,[r7,#20]
1628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
 2961              	 .loc 2 1628 0
 2962 0080 3A69     	 ldr r2,[r7,#16]
 2963 0082 AE23     	 mov r3,#174
 2964 0084 5B00     	 lsl r3,r3,#1
 2965 0086 0121     	 mov r1,#1
 2966 0088 D150     	 str r1,[r2,r3]
1629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_dest_addr += E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2967              	 .loc 2 1629 0
 2968 008a 3B69     	 ldr r3,[r7,#16]
 2969 008c 5B6A     	 ldr r3,[r3,#36]
 2970 008e 1033     	 add r3,r3,#16
 2971 0090 1A1C     	 mov r2,r3
 2972 0092 3B69     	 ldr r3,[r7,#16]
 2973 0094 5A62     	 str r2,[r3,#36]
1630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->address = data_ptr->gc_dest_addr - (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * data_ptr->gc_
 2974              	 .loc 2 1630 0
 2975 0096 3B69     	 ldr r3,[r7,#16]
 2976 0098 5A6A     	 ldr r2,[r3,#36]
 2977 009a 3B69     	 ldr r3,[r7,#16]
 2978 009c DB6B     	 ldr r3,[r3,#60]
 2979 009e 1B01     	 lsl r3,r3,#4
 2980 00a0 D21A     	 sub r2,r2,r3
 2981 00a2 FB68     	 ldr r3,[r7,#12]
 2982 00a4 1A60     	 str r2,[r3]
 2983 00a6 16E0     	 b .L206
 2984              	.L204:
1631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_src_addr = data_ptr->gc_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2985              	 .loc 2 1634 0
 2986 00a8 3B69     	 ldr r3,[r7,#16]
 2987 00aa 9B6A     	 ldr r3,[r3,#40]
 2988 00ac 1033     	 add r3,r3,#16
 2989 00ae 1A1C     	 mov r2,r3
 2990 00b0 3B69     	 ldr r3,[r7,#16]
 2991 00b2 9A62     	 str r2,[r3,#40]
1635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2992              	 .loc 2 1635 0
 2993 00b4 3B69     	 ldr r3,[r7,#16]
 2994 00b6 5B6A     	 ldr r3,[r3,#36]
 2995 00b8 1033     	 add r3,r3,#16
 2996 00ba 1A1C     	 mov r2,r3
 2997 00bc 3B69     	 ldr r3,[r7,#16]
 2998 00be 5A62     	 str r2,[r3,#36]
1636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_READ_NXTBLOCK;
 2999              	 .loc 2 1636 0
 3000 00c0 3A69     	 ldr r2,[r7,#16]
 3001 00c2 AE23     	 mov r3,#174
 3002 00c4 5B00     	 lsl r3,r3,#1
 3003 00c6 0221     	 mov r1,#2
 3004 00c8 D150     	 str r1,[r2,r3]
 3005 00ca 04E0     	 b .L206
 3006              	.L202:
1637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3007              	 .loc 2 1641 0
 3008 00cc 3A69     	 ldr r2,[r7,#16]
 3009 00ce AE23     	 mov r3,#174
 3010 00d0 5B00     	 lsl r3,r3,#1
 3011 00d2 0921     	 mov r1,#9
 3012 00d4 D150     	 str r1,[r2,r3]
 3013              	.L206:
1642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_log_block_count = block_count;
 3014              	 .loc 2 1643 0
 3015 00d6 3A69     	 ldr r2,[r7,#16]
 3016 00d8 B223     	 mov r3,#178
 3017 00da 5B00     	 lsl r3,r3,#1
 3018 00dc 7969     	 ldr r1,[r7,#20]
 3019 00de D150     	 str r1,[r2,r3]
1644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3020              	 .loc 2 1644 0
 3021 00e0 BD46     	 mov sp,r7
 3022 00e2 06B0     	 add sp,sp,#24
 3023              	 
 3024 00e4 80BD     	 pop {r7,pc}
 3025              	.L208:
 3026 00e6 C046     	 .align 2
 3027              	.L207:
 3028 00e8 00000000 	 .word E_EEPROM_XMC1_0
 3029              	 .cfi_endproc
 3030              	.LFE74:
 3032              	 .section .text.E_EEPROM_XMC1_lHandleGcEndOfCopy,"ax",%progbits
 3033              	 .align 2
 3034              	 .code 16
 3035              	 .thumb_func
 3037              	E_EEPROM_XMC1_lHandleGcEndOfCopy:
 3038              	.LFB75:
1645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC END OF COPY state
1652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void)
1654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3039              	 .loc 2 1654 0
 3040              	 .cfi_startproc
 3041 0000 80B5     	 push {r7,lr}
 3042              	.LCFI83:
 3043              	 .cfi_def_cfa_offset 8
 3044              	 .cfi_offset 7,-8
 3045              	 .cfi_offset 14,-4
 3046 0002 82B0     	 sub sp,sp,#8
 3047              	.LCFI84:
 3048              	 .cfi_def_cfa_offset 16
 3049 0004 00AF     	 add r7,sp,#0
 3050              	.LCFI85:
 3051              	 .cfi_def_cfa_register 7
1655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3052              	 .loc 2 1657 0
 3053 0006 134B     	 ldr r3,.L212
 3054 0008 5B68     	 ldr r3,[r3,#4]
 3055 000a 7B60     	 str r3,[r7,#4]
1658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3056              	 .loc 2 1659 0
 3057 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write Copy completed state to old bank (0A) or (A0) */
1661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_END_OF_COPY_OFFS
 3058              	 .loc 2 1661 0
 3059 0010 7B68     	 ldr r3,[r7,#4]
 3060 0012 9B6A     	 ldr r3,[r3,#40]
 3061 0014 2033     	 add r3,r3,#32
 3062 0016 181C     	 mov r0,r3
 3063 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3064 001c 031C     	 mov r3,r0
 3065 001e 3B60     	 str r3,[r7]
1662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 3066              	 .loc 2 1662 0
 3067 0020 3B68     	 ldr r3,[r7]
 3068 0022 002B     	 cmp r3,#0
 3069 0024 0DD1     	 bne .L210
1663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the current bank to next bank */
1665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = data_ptr->current_bank ^ 1U;
 3070              	 .loc 2 1665 0
 3071 0026 7B68     	 ldr r3,[r7,#4]
 3072 0028 1B6A     	 ldr r3,[r3,#32]
 3073 002a 0122     	 mov r2,#1
 3074 002c 5A40     	 eor r2,r3
 3075 002e 7B68     	 ldr r3,[r7,#4]
 3076 0030 1A62     	 str r2,[r3,#32]
1666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the Bank related global variables */
1668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCurrBankInfo();
 3077              	 .loc 2 1668 0
 3078 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_NEXT_BANK_VALID;
 3079              	 .loc 2 1669 0
 3080 0036 7A68     	 ldr r2,[r7,#4]
 3081 0038 AE23     	 mov r3,#174
 3082 003a 5B00     	 lsl r3,r3,#1
 3083 003c 0721     	 mov r1,#7
 3084 003e D150     	 str r1,[r2,r3]
 3085 0040 04E0     	 b .L209
 3086              	.L210:
1670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3087              	 .loc 2 1673 0
 3088 0042 7A68     	 ldr r2,[r7,#4]
 3089 0044 AE23     	 mov r3,#174
 3090 0046 5B00     	 lsl r3,r3,#1
 3091 0048 0921     	 mov r1,#9
 3092 004a D150     	 str r1,[r2,r3]
 3093              	.L209:
1674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3094              	 .loc 2 1675 0
 3095 004c BD46     	 mov sp,r7
 3096 004e 02B0     	 add sp,sp,#8
 3097              	 
 3098 0050 80BD     	 pop {r7,pc}
 3099              	.L213:
 3100 0052 C046     	 .align 2
 3101              	.L212:
 3102 0054 00000000 	 .word E_EEPROM_XMC1_0
 3103              	 .cfi_endproc
 3104              	.LFE75:
 3106              	 .section .text.E_EEPROM_XMC1_lHandleGcOtherStates,"ax",%progbits
 3107              	 .align 2
 3108              	 .code 16
 3109              	 .thumb_func
 3111              	E_EEPROM_XMC1_lHandleGcOtherStates:
 3112              	.LFB76:
1676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : current_state - current state machine status
1679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   next_state - next state of the state machine
1680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC NEXT BANk VALID, ERASE PREV BANK a
1684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   state
1685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state)
1687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3113              	 .loc 2 1687 0
 3114              	 .cfi_startproc
 3115 0000 80B5     	 push {r7,lr}
 3116              	.LCFI86:
 3117              	 .cfi_def_cfa_offset 8
 3118              	 .cfi_offset 7,-8
 3119              	 .cfi_offset 14,-4
 3120 0002 84B0     	 sub sp,sp,#16
 3121              	.LCFI87:
 3122              	 .cfi_def_cfa_offset 24
 3123 0004 00AF     	 add r7,sp,#0
 3124              	.LCFI88:
 3125              	 .cfi_def_cfa_register 7
 3126 0006 7860     	 str r0,[r7,#4]
 3127 0008 3960     	 str r1,[r7]
1688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3128              	 .loc 2 1690 0
 3129 000a 1B4B     	 ldr r3,.L220
 3130 000c 5B68     	 ldr r3,[r3,#4]
 3131 000e BB60     	 str r3,[r7,#8]
1691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (current_state == E_EEPROM_XMC1_GC_NEXT_BANK_VALID)
 3132              	 .loc 2 1692 0
 3133 0010 7B68     	 ldr r3,[r7,#4]
 3134 0012 072B     	 cmp r3,#7
 3135 0014 09D1     	 bne .L215
1693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3136              	 .loc 2 1694 0
 3137 0016 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write next bank to valid state  (02) or (20) */
1696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_NEXT_VALID_OFF
 3138              	 .loc 2 1696 0
 3139 001a BB68     	 ldr r3,[r7,#8]
 3140 001c 9B6A     	 ldr r3,[r3,#40]
 3141 001e 181C     	 mov r0,r3
 3142 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3143 0024 031C     	 mov r3,r0
 3144 0026 FB60     	 str r3,[r7,#12]
 3145 0028 14E0     	 b .L216
 3146              	.L215:
1697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (current_state == E_EEPROM_XMC1_GC_ERASE_PREV_BANK)
 3147              	 .loc 2 1698 0
 3148 002a 7B68     	 ldr r3,[r7,#4]
 3149 002c 032B     	 cmp r3,#3
 3150 002e 07D1     	 bne .L217
1699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Erase the previous redundant bank (F2) or (2F) */
1701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 3151              	 .loc 2 1701 0
 3152 0030 BB68     	 ldr r3,[r7,#8]
 3153 0032 1B6B     	 ldr r3,[r3,#48]
 3154 0034 181C     	 mov r0,r3
 3155 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3156 003a 031C     	 mov r3,r0
 3157 003c FB60     	 str r3,[r7,#12]
 3158 003e 09E0     	 b .L216
 3159              	.L217:
1702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3160              	 .loc 2 1705 0
 3161 0040 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the old erased bank (E2) or (2E) */
1707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_END_ERASE_OFF
 3162              	 .loc 2 1707 0
 3163 0044 BB68     	 ldr r3,[r7,#8]
 3164 0046 5B6A     	 ldr r3,[r3,#36]
 3165 0048 3033     	 add r3,r3,#48
 3166 004a 181C     	 mov r0,r3
 3167 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3168 0050 031C     	 mov r3,r0
 3169 0052 FB60     	 str r3,[r7,#12]
 3170              	.L216:
1708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 3171              	 .loc 2 1710 0
 3172 0054 FB68     	 ldr r3,[r7,#12]
 3173 0056 002B     	 cmp r3,#0
 3174 0058 05D1     	 bne .L218
1711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = next_state;
 3175              	 .loc 2 1712 0
 3176 005a BA68     	 ldr r2,[r7,#8]
 3177 005c AE23     	 mov r3,#174
 3178 005e 5B00     	 lsl r3,r3,#1
 3179 0060 3968     	 ldr r1,[r7]
 3180 0062 D150     	 str r1,[r2,r3]
 3181 0064 04E0     	 b .L214
 3182              	.L218:
1713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3183              	 .loc 2 1716 0
 3184 0066 BA68     	 ldr r2,[r7,#8]
 3185 0068 AE23     	 mov r3,#174
 3186 006a 5B00     	 lsl r3,r3,#1
 3187 006c 0921     	 mov r1,#9
 3188 006e D150     	 str r1,[r2,r3]
 3189              	.L214:
1717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3190              	 .loc 2 1718 0
 3191 0070 BD46     	 mov sp,r7
 3192 0072 04B0     	 add sp,sp,#16
 3193              	 
 3194 0074 80BD     	 pop {r7,pc}
 3195              	.L221:
 3196 0076 C046     	 .align 2
 3197              	.L220:
 3198 0078 00000000 	 .word E_EEPROM_XMC1_0
 3199              	 .cfi_endproc
 3200              	.LFE76:
 3202              	 .section .text.E_EEPROM_XMC1_lPrepareDFlash,"ax",%progbits
 3203              	 .align 2
 3204              	 .code 16
 3205              	 .thumb_func
 3207              	E_EEPROM_XMC1_lPrepareDFlash:
 3208              	.LFB77:
1719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
1724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function executes the prepare data flash to bring the state machine to def
1726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPrepareDFlash(void)
1728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3209              	 .loc 2 1728 0
 3210              	 .cfi_startproc
 3211 0000 80B5     	 push {r7,lr}
 3212              	.LCFI89:
 3213              	 .cfi_def_cfa_offset 8
 3214              	 .cfi_offset 7,-8
 3215              	 .cfi_offset 14,-4
 3216 0002 82B0     	 sub sp,sp,#8
 3217              	.LCFI90:
 3218              	 .cfi_def_cfa_offset 16
 3219 0004 00AF     	 add r7,sp,#0
 3220              	.LCFI91:
 3221              	 .cfi_def_cfa_register 7
1729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3222              	 .loc 2 1731 0
 3223 0006 3B4B     	 ldr r3,.L239
 3224 0008 5B68     	 ldr r3,[r3,#4]
 3225 000a 7B60     	 str r3,[r7,#4]
 3226              	.L236:
1732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
1734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->gc_state)
 3227              	 .loc 2 1735 0
 3228 000c 7A68     	 ldr r2,[r7,#4]
 3229 000e AE23     	 mov r3,#174
 3230 0010 5B00     	 lsl r3,r3,#1
 3231 0012 D358     	 ldr r3,[r2,r3]
 3232 0014 042B     	 cmp r3,#4
 3233 0016 02D0     	 beq .L224
 3234 0018 052B     	 cmp r3,#5
 3235 001a 1FD0     	 beq .L225
 3236 001c 35E0     	 b .L237
 3237              	.L224:
1736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_PREPFLASH_2F:
1738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Set the marker blocks with copy completed state */
1740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lSetMarkerPageBuffer(E_EEPROM_XMC1_VALID_STATE);
 3238              	 .loc 2 1740 0
 3239 001e 2020     	 mov r0,#32
 3240 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerPageBuffer
1741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Clear all error status flags before flash operation*/
1743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       XMC_FLASH_ClearStatus();
 3241              	 .loc 2 1743 0
 3242 0024 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lWriteSinglePage(E_EEPROM_XMC1_FLASH_BANK0_BASE , (uint32_t*)(void*)data_ptr->p
 3243              	 .loc 2 1745 0
 3244 0028 7B68     	 ldr r3,[r7,#4]
 3245 002a 5833     	 add r3,r3,#88
 3246 002c 324A     	 ldr r2,.L239+4
 3247 002e 101C     	 mov r0,r2
 3248 0030 191C     	 mov r1,r3
 3249 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
1746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lGetFlashStatus();
 3250              	 .loc 2 1747 0
 3251 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3252 003a 031C     	 mov r3,r0
 3253 003c 3B60     	 str r3,[r7]
1748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3254              	 .loc 2 1749 0
 3255 003e 3B68     	 ldr r3,[r7]
 3256 0040 002B     	 cmp r3,#0
 3257 0042 05D1     	 bne .L226
1750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
 3258              	 .loc 2 1751 0
 3259 0044 7A68     	 ldr r2,[r7,#4]
 3260 0046 AE23     	 mov r3,#174
 3261 0048 5B00     	 lsl r3,r3,#1
 3262 004a 0521     	 mov r1,#5
 3263 004c D150     	 str r1,[r2,r3]
1752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3264              	 .loc 2 1757 0
 3265 004e 42E0     	 b .L228
 3266              	.L226:
1755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3267              	 .loc 2 1755 0
 3268 0050 7A68     	 ldr r2,[r7,#4]
 3269 0052 AE23     	 mov r3,#174
 3270 0054 5B00     	 lsl r3,r3,#1
 3271 0056 0921     	 mov r1,#9
 3272 0058 D150     	 str r1,[r2,r3]
 3273              	 .loc 2 1757 0
 3274 005a 3CE0     	 b .L228
 3275              	.L225:
1758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_PREPFLASH_2E:
1760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
1761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3276              	 .loc 2 1761 0
 3277 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Write Bank1 to formatted state  (2E) */
1764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lGCWrite((uint32_t)E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_END_
 3278              	 .loc 2 1764 0
 3279 0060 264B     	 ldr r3,.L239+8
 3280 0062 181C     	 mov r0,r3
 3281 0064 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3282 0068 031C     	 mov r3,r0
 3283 006a 3B60     	 str r3,[r7]
1765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3284              	 .loc 2 1766 0
 3285 006c 3B68     	 ldr r3,[r7]
 3286 006e 002B     	 cmp r3,#0
 3287 0070 05D1     	 bne .L229
1767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
 3288              	 .loc 2 1768 0
 3289 0072 7A68     	 ldr r2,[r7,#4]
 3290 0074 AE23     	 mov r3,#174
 3291 0076 5B00     	 lsl r3,r3,#1
 3292 0078 0A21     	 mov r1,#10
 3293 007a D150     	 str r1,[r2,r3]
1769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3294              	 .loc 2 1774 0
 3295 007c 2BE0     	 b .L228
 3296              	.L229:
1772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3297              	 .loc 2 1772 0
 3298 007e 7A68     	 ldr r2,[r7,#4]
 3299 0080 AE23     	 mov r3,#174
 3300 0082 5B00     	 lsl r3,r3,#1
 3301 0084 0921     	 mov r1,#9
 3302 0086 D150     	 str r1,[r2,r3]
 3303              	 .loc 2 1774 0
 3304 0088 25E0     	 b .L228
 3305              	.L237:
1775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:  /* gc_state : E_EEPROM_XMC1_PREPFLASH_FF*/
1777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Erase the previous redundant bank */
1779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lEraseBank(data_ptr->curr_bank_end_addr);
 3306              	 .loc 2 1779 0
 3307 008a 7B68     	 ldr r3,[r7,#4]
 3308 008c DB6A     	 ldr r3,[r3,#44]
 3309 008e 181C     	 mov r0,r3
 3310 0090 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3311 0094 031C     	 mov r3,r0
 3312 0096 3B60     	 str r3,[r7]
1780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Erase the previous redundant bank */
1782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3313              	 .loc 2 1782 0
 3314 0098 3B68     	 ldr r3,[r7]
 3315 009a 002B     	 cmp r3,#0
 3316 009c 15D1     	 bne .L231
1783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 3317              	 .loc 2 1784 0
 3318 009e 7B68     	 ldr r3,[r7,#4]
 3319 00a0 1B6B     	 ldr r3,[r3,#48]
 3320 00a2 181C     	 mov r0,r3
 3321 00a4 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3322 00a8 031C     	 mov r3,r0
 3323 00aa 3B60     	 str r3,[r7]
1785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
1786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (status == 0U)
 3324              	 .loc 2 1786 0
 3325 00ac 3B68     	 ldr r3,[r7]
 3326 00ae 002B     	 cmp r3,#0
 3327 00b0 05D1     	 bne .L232
1787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
1788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
 3328              	 .loc 2 1788 0
 3329 00b2 7A68     	 ldr r2,[r7,#4]
 3330 00b4 AE23     	 mov r3,#174
 3331 00b6 5B00     	 lsl r3,r3,#1
 3332 00b8 0421     	 mov r1,#4
 3333 00ba D150     	 str r1,[r2,r3]
1789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
1790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
1791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
1792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
1794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3334              	 .loc 2 1799 0
 3335 00bc 0AE0     	 b .L238
 3336              	.L232:
1792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 3337              	 .loc 2 1792 0
 3338 00be 7A68     	 ldr r2,[r7,#4]
 3339 00c0 AE23     	 mov r3,#174
 3340 00c2 5B00     	 lsl r3,r3,#1
 3341 00c4 0921     	 mov r1,#9
 3342 00c6 D150     	 str r1,[r2,r3]
 3343              	 .loc 2 1799 0
 3344 00c8 04E0     	 b .L238
 3345              	.L231:
1797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3346              	 .loc 2 1797 0
 3347 00ca 7A68     	 ldr r2,[r7,#4]
 3348 00cc AE23     	 mov r3,#174
 3349 00ce 5B00     	 lsl r3,r3,#1
 3350 00d0 0921     	 mov r1,#9
 3351 00d2 D150     	 str r1,[r2,r3]
 3352              	.L238:
 3353              	 .loc 2 1799 0
 3354 00d4 C046     	 mov r8,r8
 3355              	.L228:
1800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
 3356              	 .loc 2 1801 0
 3357 00d6 7A68     	 ldr r2,[r7,#4]
 3358 00d8 AE23     	 mov r3,#174
 3359 00da 5B00     	 lsl r3,r3,#1
 3360 00dc D358     	 ldr r3,[r2,r3]
1802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 3361              	 .loc 2 1802 0
 3362 00de 0A2B     	 cmp r3,#10
 3363 00e0 05D0     	 beq .L222
 3364              	 .loc 2 1802 0 is_stmt 0 discriminator 1
 3365 00e2 7A68     	 ldr r2,[r7,#4]
 3366 00e4 AE23     	 mov r3,#174
 3367 00e6 5B00     	 lsl r3,r3,#1
 3368 00e8 D358     	 ldr r3,[r2,r3]
1801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 3369              	 .loc 2 1801 0 is_stmt 1 discriminator 1
 3370 00ea 092B     	 cmp r3,#9
 3371 00ec 8ED1     	 bne .L236
 3372              	.L222:
1803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3373              	 .loc 2 1803 0
 3374 00ee BD46     	 mov sp,r7
 3375 00f0 02B0     	 add sp,sp,#8
 3376              	 
 3377 00f2 80BD     	 pop {r7,pc}
 3378              	.L240:
 3379              	 .align 2
 3380              	.L239:
 3381 00f4 00000000 	 .word E_EEPROM_XMC1_0
 3382 00f8 008C0010 	 .word 268471296
 3383 00fc 308E0010 	 .word 268471856
 3384              	 .cfi_endproc
 3385              	.LFE77:
 3387              	 .section .text.E_EEPROM_XMC1_lUpdateCache,"ax",%progbits
 3388              	 .align 2
 3389              	 .code 16
 3390              	 .thumb_func
 3392              	E_EEPROM_XMC1_lUpdateCache:
 3393              	.LFB78:
1804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This utility function update's the cache table which contains the latest infor
1811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   FLASH contents.
1812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCache(void)
1814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3394              	 .loc 2 1814 0
 3395              	 .cfi_startproc
 3396 0000 80B5     	 push {r7,lr}
 3397              	.LCFI92:
 3398              	 .cfi_def_cfa_offset 8
 3399              	 .cfi_offset 7,-8
 3400              	 .cfi_offset 14,-4
 3401 0002 84B0     	 sub sp,sp,#16
 3402              	.LCFI93:
 3403              	 .cfi_def_cfa_offset 24
 3404 0004 00AF     	 add r7,sp,#0
 3405              	.LCFI94:
 3406              	 .cfi_def_cfa_register 7
1815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t end_addr;
1816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_status;
1817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3407              	 .loc 2 1820 0
 3408 0006 394B     	 ldr r3,.L252
 3409 0008 5B68     	 ldr r3,[r3,#4]
 3410 000a 7B60     	 str r3,[r7,#4]
1821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Evaluate the end address of the bank to start reading blocks for cache update */
1823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 3411              	 .loc 2 1823 0
 3412 000c 7B68     	 ldr r3,[r7,#4]
 3413 000e 1B6A     	 ldr r3,[r3,#32]
 3414 0010 002B     	 cmp r3,#0
 3415 0012 02D1     	 bne .L242
1824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     end_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 3416              	 .loc 2 1825 0
 3417 0014 364B     	 ldr r3,.L252+4
 3418 0016 FB60     	 str r3,[r7,#12]
 3419 0018 01E0     	 b .L243
 3420              	.L242:
1826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     end_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 3421              	 .loc 2 1829 0
 3422 001a 364B     	 ldr r3,.L252+8
 3423 001c FB60     	 str r3,[r7,#12]
 3424              	.L243:
1830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Reset the read number of blocks count variable and reset cache update index */
1833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->written_block_counter = 0U;
 3425              	 .loc 2 1833 0
 3426 001e 7B68     	 ldr r3,[r7,#4]
 3427 0020 0022     	 mov r2,#0
 3428 0022 1A64     	 str r2,[r3,#64]
1834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3429              	 .loc 2 1834 0
 3430 0024 7A68     	 ldr r2,[r7,#4]
 3431 0026 B623     	 mov r3,#182
 3432 0028 5B00     	 lsl r3,r3,#1
 3433 002a FF21     	 mov r1,#255
 3434 002c D150     	 str r1,[r2,r3]
1835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Start the Cache Update state machine */
1837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->cache_state = E_EEPROM_XMC1_CACHE_EMPTY_BLOCK;
 3435              	 .loc 2 1837 0
 3436 002e 7A68     	 ldr r2,[r7,#4]
 3437 0030 B423     	 mov r3,#180
 3438 0032 5B00     	 lsl r3,r3,#1
 3439 0034 0121     	 mov r1,#1
 3440 0036 D150     	 str r1,[r2,r3]
1838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Point to starting address of last data block of the bank */
1840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->curr_bank_src_addr += ( E_EEPROM_XMC1_FLASH_BANK_SIZE - E_EEPROM_XMC1_FLASH_BLOCK_SIZE)
 3441              	 .loc 2 1840 0
 3442 0038 7B68     	 ldr r3,[r7,#4]
 3443 003a 9B6B     	 ldr r3,[r3,#56]
 3444 003c F133     	 add r3,r3,#241
 3445 003e FF33     	 add r3,r3,#255
 3446 0040 1A1C     	 mov r2,r3
 3447 0042 7B68     	 ldr r3,[r7,#4]
 3448 0044 9A63     	 str r2,[r3,#56]
 3449              	.L244:
1841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Search for the first entry of a non empty block inside the valid bank starting from bottom */
1842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do{
1843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_status = E_EEPROM_XMC1_lCacheEmptyBlkEval(end_addr);
 3450              	 .loc 2 1843 0 discriminator 1
 3451 0046 FB68     	 ldr r3,[r7,#12]
 3452 0048 181C     	 mov r0,r3
 3453 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lCacheEmptyBlkEval
 3454 004e 031C     	 mov r3,r0
 3455 0050 BB60     	 str r3,[r7,#8]
1844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (data_ptr->cache_state == E_EEPROM_XMC1_CACHE_EMPTY_BLOCK);
 3456              	 .loc 2 1844 0 discriminator 1
 3457 0052 7A68     	 ldr r2,[r7,#4]
 3458 0054 B423     	 mov r3,#180
 3459 0056 5B00     	 lsl r3,r3,#1
 3460 0058 D358     	 ldr r3,[r2,r3]
 3461 005a 012B     	 cmp r3,#1
 3462 005c F3D0     	 beq .L244
1845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    /* Update the next free block location only if it is not done by the previous function call  */
1847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->next_free_block_addr == 0U)
 3463              	 .loc 2 1847 0
 3464 005e 7B68     	 ldr r3,[r7,#4]
 3465 0060 5B6B     	 ldr r3,[r3,#52]
 3466 0062 002B     	 cmp r3,#0
 3467 0064 05D1     	 bne .L245
1848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 3468              	 .loc 2 1849 0
 3469 0066 7B68     	 ldr r3,[r7,#4]
 3470 0068 9B6B     	 ldr r3,[r3,#56]
 3471 006a 1033     	 add r3,r3,#16
 3472 006c 1A1C     	 mov r2,r3
 3473 006e 7B68     	 ldr r3,[r7,#4]
 3474 0070 5A63     	 str r2,[r3,#52]
 3475              	.L245:
1850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute the Cache update state machine until the Start address of bank is reached traversing f
1853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
 3476              	 .loc 2 1853 0
 3477 0072 31E0     	 b .L246
 3478              	.L251:
1854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check If the previous read had an ECC error or not */
1856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (!(read_status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR))
 3479              	 .loc 2 1856 0
 3480 0074 BB68     	 ldr r3,[r7,#8]
 3481 0076 2022     	 mov r2,#32
 3482 0078 1340     	 and r3,r2
 3483 007a 02D1     	 bne .L247
1857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Evaluate the Block status since no error found */
1859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lEvalBlockStatus();
 3484              	 .loc 2 1859 0
 3485 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lEvalBlockStatus
 3486 0080 1BE0     	 b .L248
 3487              	.L247:
1860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If previous read block of the block had correct block number then mark the block as incons
1864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( data_ptr->updated_cache_index != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND )
 3488              	 .loc 2 1864 0
 3489 0082 7A68     	 ldr r2,[r7,#4]
 3490 0084 B623     	 mov r3,#182
 3491 0086 5B00     	 lsl r3,r3,#1
 3492 0088 D358     	 ldr r3,[r2,r3]
 3493 008a FF2B     	 cmp r3,#255
 3494 008c 0DD0     	 beq .L249
1865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Goto the cache table entry for the given block */
1867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr = data_ptr->block_info;
 3495              	 .loc 2 1867 0
 3496 008e 7B68     	 ldr r3,[r7,#4]
 3497 0090 3B60     	 str r3,[r7]
1868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr = cache_ptr + data_ptr->updated_cache_index;
 3498              	 .loc 2 1868 0
 3499 0092 7A68     	 ldr r2,[r7,#4]
 3500 0094 B623     	 mov r3,#182
 3501 0096 5B00     	 lsl r3,r3,#1
 3502 0098 D358     	 ldr r3,[r2,r3]
 3503 009a DB00     	 lsl r3,r3,#3
 3504 009c 3A68     	 ldr r2,[r7]
 3505 009e D318     	 add r3,r2,r3
 3506 00a0 3B60     	 str r3,[r7]
1869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Since CacheUpdateIndex contains valid block the  previous read block must belong to this
1870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr->address = E_EEPROM_XMC1_ALL_ONES;
 3507              	 .loc 2 1870 0
 3508 00a2 3B68     	 ldr r3,[r7]
 3509 00a4 0122     	 mov r2,#1
 3510 00a6 5242     	 neg r2,r2
 3511 00a8 1A60     	 str r2,[r3]
 3512              	.L249:
1871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Prepare for the next block */
1873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3513              	 .loc 2 1873 0
 3514 00aa 7A68     	 ldr r2,[r7,#4]
 3515 00ac B623     	 mov r3,#182
 3516 00ae 5B00     	 lsl r3,r3,#1
 3517 00b0 FF21     	 mov r1,#255
 3518 00b2 D150     	 str r1,[r2,r3]
1874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = 0U;
 3519              	 .loc 2 1874 0
 3520 00b4 7B68     	 ldr r3,[r7,#4]
 3521 00b6 0022     	 mov r2,#0
 3522 00b8 1A64     	 str r2,[r3,#64]
 3523              	.L248:
1875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if all blocks have been read */
1877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( data_ptr->curr_bank_src_addr == end_addr )
 3524              	 .loc 2 1877 0
 3525 00ba 7B68     	 ldr r3,[r7,#4]
 3526 00bc 9A6B     	 ldr r2,[r3,#56]
 3527 00be FB68     	 ldr r3,[r7,#12]
 3528 00c0 9A42     	 cmp r2,r3
 3529 00c2 05D1     	 bne .L250
1878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Goto the next state */
1880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3530              	 .loc 2 1880 0
 3531 00c4 7A68     	 ldr r2,[r7,#4]
 3532 00c6 B423     	 mov r3,#180
 3533 00c8 5B00     	 lsl r3,r3,#1
 3534 00ca 0421     	 mov r1,#4
 3535 00cc D150     	 str r1,[r2,r3]
 3536 00ce 03E0     	 b .L246
 3537              	.L250:
1881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
 3538              	 .loc 2 1884 0
 3539 00d0 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCacheBlockRead
 3540 00d4 031C     	 mov r3,r0
 3541 00d6 BB60     	 str r3,[r7,#8]
 3542              	.L246:
1853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 3543              	 .loc 2 1853 0
 3544 00d8 7A68     	 ldr r2,[r7,#4]
 3545 00da B423     	 mov r3,#180
 3546 00dc 5B00     	 lsl r3,r3,#1
 3547 00de D358     	 ldr r3,[r2,r3]
 3548 00e0 042B     	 cmp r3,#4
 3549 00e2 C7D1     	 bne .L251
1885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3550              	 .loc 2 1887 0
 3551 00e4 BD46     	 mov sp,r7
 3552 00e6 04B0     	 add sp,sp,#16
 3553              	 
 3554 00e8 80BD     	 pop {r7,pc}
 3555              	.L253:
 3556 00ea C046     	 .align 2
 3557              	.L252:
 3558 00ec 00000000 	 .word E_EEPROM_XMC1_0
 3559 00f0 008D0010 	 .word 268471552
 3560 00f4 008F0010 	 .word 268472064
 3561              	 .cfi_endproc
 3562              	.LFE78:
 3564              	 .section .text.E_EEPROM_XMC1_lCacheEmptyBlkEval,"ax",%progbits
 3565              	 .align 2
 3566              	 .code 16
 3567              	 .thumb_func
 3569              	E_EEPROM_XMC1_lCacheEmptyBlkEval:
 3570              	.LFB79:
1888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : end_addr - Last address to stop reading the block data
1891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t
1893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This utility function  will search through the FLASH from the bottom of the ba
1895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   readable data block is found.
1896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr)
1898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3571              	 .loc 2 1898 0
 3572              	 .cfi_startproc
 3573 0000 80B5     	 push {r7,lr}
 3574              	.LCFI95:
 3575              	 .cfi_def_cfa_offset 8
 3576              	 .cfi_offset 7,-8
 3577              	 .cfi_offset 14,-4
 3578 0002 86B0     	 sub sp,sp,#24
 3579              	.LCFI96:
 3580              	 .cfi_def_cfa_offset 32
 3581 0004 00AF     	 add r7,sp,#0
 3582              	.LCFI97:
 3583              	 .cfi_def_cfa_register 7
 3584 0006 7860     	 str r0,[r7,#4]
1899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *read_word_ptr;
1901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3585              	 .loc 2 1903 0
 3586 0008 2B4B     	 ldr r3,.L263
 3587 000a 5B68     	 ldr r3,[r3,#4]
 3588 000c 7B61     	 str r3,[r7,#20]
1904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 3589              	 .loc 2 1905 0
 3590 000e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read the complete block */
1908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr, (uint32_t*)(void*)data_ptr->read_wri
 3591              	 .loc 2 1908 0
 3592 0012 7B69     	 ldr r3,[r7,#20]
 3593 0014 9A6B     	 ldr r2,[r3,#56]
 3594 0016 7B69     	 ldr r3,[r7,#20]
 3595 0018 4433     	 add r3,r3,#68
 3596 001a 101C     	 mov r0,r2
 3597 001c 191C     	 mov r1,r3
 3598 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 3599              	 .loc 2 1910 0
 3600 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3601 0026 031C     	 mov r3,r0
 3602 0028 3B61     	 str r3,[r7,#16]
1911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If ECC error exists because of any previous interruptions or power failures during Flash opera
1913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR)
 3603              	 .loc 2 1913 0
 3604 002a 3B69     	 ldr r3,[r7,#16]
 3605 002c 2022     	 mov r2,#32
 3606 002e 1340     	 and r3,r2
 3607 0030 1BD0     	 beq .L255
1914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the free block location of the valid bank once and for ever until new write happens*/
1916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->next_free_block_addr == 0U)
 3608              	 .loc 2 1916 0
 3609 0032 7B69     	 ldr r3,[r7,#20]
 3610 0034 5B6B     	 ldr r3,[r3,#52]
 3611 0036 002B     	 cmp r3,#0
 3612 0038 05D1     	 bne .L256
1917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SI
 3613              	 .loc 2 1918 0
 3614 003a 7B69     	 ldr r3,[r7,#20]
 3615 003c 9B6B     	 ldr r3,[r3,#56]
 3616 003e 1033     	 add r3,r3,#16
 3617 0040 1A1C     	 mov r2,r3
 3618 0042 7B69     	 ldr r3,[r7,#20]
 3619 0044 5A63     	 str r2,[r3,#52]
 3620              	.L256:
1919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if all blocks have been read? If yes go to cache update complete state else move to th
1922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( data_ptr->curr_bank_src_addr == end_addr )
 3621              	 .loc 2 1922 0
 3622 0046 7B69     	 ldr r3,[r7,#20]
 3623 0048 9A6B     	 ldr r2,[r3,#56]
 3624 004a 7B68     	 ldr r3,[r7,#4]
 3625 004c 9A42     	 cmp r2,r3
 3626 004e 05D1     	 bne .L257
1923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3627              	 .loc 2 1924 0
 3628 0050 7A69     	 ldr r2,[r7,#20]
 3629 0052 B423     	 mov r3,#180
 3630 0054 5B00     	 lsl r3,r3,#1
 3631 0056 0421     	 mov r1,#4
 3632 0058 D150     	 str r1,[r2,r3]
 3633 005a 28E0     	 b .L259
 3634              	.L257:
1925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3635              	 .loc 2 1928 0
 3636 005c 7B69     	 ldr r3,[r7,#20]
 3637 005e 9B6B     	 ldr r3,[r3,#56]
 3638 0060 103B     	 sub r3,r3,#16
 3639 0062 1A1C     	 mov r2,r3
 3640 0064 7B69     	 ldr r3,[r7,#20]
 3641 0066 9A63     	 str r2,[r3,#56]
 3642 0068 21E0     	 b .L259
 3643              	.L255:
1929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* No ECC Error */
1932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word_ptr = ((uint32_t*)(void*)data_ptr->read_write_buffer);
 3644              	 .loc 2 1934 0
 3645 006a 7B69     	 ldr r3,[r7,#20]
 3646 006c 4433     	 add r3,r3,#68
 3647 006e FB60     	 str r3,[r7,#12]
1935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the first word of the block is having some data written on it */
1936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (*read_word_ptr != E_EEPROM_XMC1_ALL_ONES)
 3648              	 .loc 2 1936 0
 3649 0070 FB68     	 ldr r3,[r7,#12]
 3650 0072 1B68     	 ldr r3,[r3]
 3651 0074 0133     	 add r3,r3,#1
 3652 0076 0AD0     	 beq .L260
1937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Increment the data block count and go to the next block read state */
1939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
 3653              	 .loc 2 1939 0
 3654 0078 7B69     	 ldr r3,[r7,#20]
 3655 007a 1B6C     	 ldr r3,[r3,#64]
 3656 007c 5A1C     	 add r2,r3,#1
 3657 007e 7B69     	 ldr r3,[r7,#20]
 3658 0080 1A64     	 str r2,[r3,#64]
1940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_NEXT_BLK;
 3659              	 .loc 2 1940 0
 3660 0082 7A69     	 ldr r2,[r7,#20]
 3661 0084 B423     	 mov r3,#180
 3662 0086 5B00     	 lsl r3,r3,#1
 3663 0088 0221     	 mov r1,#2
 3664 008a D150     	 str r1,[r2,r3]
 3665 008c 0FE0     	 b .L259
 3666              	.L260:
1941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if all blocks have been read? If yes go to cache update complete state else move to 
1945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( data_ptr->curr_bank_src_addr == end_addr )
 3667              	 .loc 2 1945 0
 3668 008e 7B69     	 ldr r3,[r7,#20]
 3669 0090 9A6B     	 ldr r2,[r3,#56]
 3670 0092 7B68     	 ldr r3,[r7,#4]
 3671 0094 9A42     	 cmp r2,r3
 3672 0096 04D1     	 bne .L261
1946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3673              	 .loc 2 1947 0
 3674 0098 7A69     	 ldr r2,[r7,#20]
 3675 009a B423     	 mov r3,#180
 3676 009c 5B00     	 lsl r3,r3,#1
 3677 009e 0421     	 mov r1,#4
 3678 00a0 D150     	 str r1,[r2,r3]
 3679              	.L261:
1948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3680              	 .loc 2 1949 0
 3681 00a2 7B69     	 ldr r3,[r7,#20]
 3682 00a4 9B6B     	 ldr r3,[r3,#56]
 3683 00a6 103B     	 sub r3,r3,#16
 3684 00a8 1A1C     	 mov r2,r3
 3685 00aa 7B69     	 ldr r3,[r7,#20]
 3686 00ac 9A63     	 str r2,[r3,#56]
 3687              	.L259:
1950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 3688              	 .loc 2 1952 0
 3689 00ae 3B69     	 ldr r3,[r7,#16]
1953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3690              	 .loc 2 1953 0
 3691 00b0 181C     	 mov r0,r3
 3692 00b2 BD46     	 mov sp,r7
 3693 00b4 06B0     	 add sp,sp,#24
 3694              	 
 3695 00b6 80BD     	 pop {r7,pc}
 3696              	.L264:
 3697              	 .align 2
 3698              	.L263:
 3699 00b8 00000000 	 .word E_EEPROM_XMC1_0
 3700              	 .cfi_endproc
 3701              	.LFE79:
 3703              	 .section .text.E_EEPROM_XMC1_lEvalBlockStatus,"ax",%progbits
 3704              	 .align 2
 3705              	 .code 16
 3706              	 .thumb_func
 3708              	E_EEPROM_XMC1_lEvalBlockStatus:
 3709              	.LFB80:
1954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function evaluates the block status and updates the cache (if required).
1961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    Entry Criteria:                          
1962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    1) No ECC error                        
1963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    2) Block number is non zero             
1964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    Possible results:                         
1965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    1) cache updated: consistent            
1966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    2) cache updated: inconsistent           
1967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    3) cache already updated (no actions done)   
1968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    4) cannot evaluate - requires more blocks to be read          
1969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEvalBlockStatus(void)
1971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3710              	 .loc 2 1971 0
 3711              	 .cfi_startproc
 3712 0000 80B5     	 push {r7,lr}
 3713              	.LCFI98:
 3714              	 .cfi_def_cfa_offset 8
 3715              	 .cfi_offset 7,-8
 3716              	 .cfi_offset 14,-4
 3717 0002 88B0     	 sub sp,sp,#32
 3718              	.LCFI99:
 3719              	 .cfi_def_cfa_offset 40
 3720 0004 00AF     	 add r7,sp,#0
 3721              	.LCFI100:
 3722              	 .cfi_def_cfa_register 7
1972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t size;
1973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
1974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status_byte;
1975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t  block_number;
1976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t physical_blocks;
1977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_HEADER_t *Ptr;
1980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3723              	 .loc 2 1981 0
 3724 0006 4B4B     	 ldr r3,.L278
 3725 0008 5B68     	 ldr r3,[r3,#4]
 3726 000a FB61     	 str r3,[r7,#28]
1982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   Ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t *)(void *)data_ptr->read_write_buffer;
 3727              	 .loc 2 1982 0
 3728 000c FB69     	 ldr r3,[r7,#28]
 3729 000e 4433     	 add r3,r3,#68
 3730 0010 BB61     	 str r3,[r7,#24]
1983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_number = Ptr->block_number;
 3731              	 .loc 2 1983 0
 3732 0012 1723     	 mov r3,#23
 3733 0014 FB18     	 add r3,r7,r3
 3734 0016 BA69     	 ldr r2,[r7,#24]
 3735 0018 1278     	 ldrb r2,[r2]
 3736 001a 1A70     	 strb r2,[r3]
1984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status_byte = Ptr->status;
 3737              	 .loc 2 1984 0
 3738 001c BB69     	 ldr r3,[r7,#24]
 3739 001e 5B78     	 ldrb r3,[r3,#1]
 3740 0020 3B61     	 str r3,[r7,#16]
1985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info;
 3741              	 .loc 2 1986 0
 3742 0022 FB69     	 ldr r3,[r7,#28]
 3743 0024 FB60     	 str r3,[r7,#12]
1987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Get the Index of the read block from the user configuration */
1989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 3744              	 .loc 2 1989 0
 3745 0026 1723     	 mov r3,#23
 3746 0028 FB18     	 add r3,r7,r3
 3747 002a 1B78     	 ldrb r3,[r3]
 3748 002c 181C     	 mov r0,r3
 3749 002e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 3750 0032 031C     	 mov r3,r0
 3751 0034 BB60     	 str r3,[r7,#8]
1990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If the block is found */
1992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( (indx != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND) )
 3752              	 .loc 2 1992 0
 3753 0036 BB68     	 ldr r3,[r7,#8]
 3754 0038 FF2B     	 cmp r3,#255
 3755 003a 00D1     	 bne .LCB3397
 3756 003c 6FE0     	 b .L266
 3757              	.LCB3397:
1993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Point to the cache table entry for the block to be evaluated */
1995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     cache_ptr = cache_ptr + indx;
 3758              	 .loc 2 1995 0
 3759 003e BB68     	 ldr r3,[r7,#8]
 3760 0040 DB00     	 lsl r3,r3,#3
 3761 0042 FA68     	 ldr r2,[r7,#12]
 3762 0044 D318     	 add r3,r2,r3
 3763 0046 FB60     	 str r3,[r7,#12]
1996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Store Index of current block */
1998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->updated_cache_index = indx;
 3764              	 .loc 2 1998 0
 3765 0048 FA69     	 ldr r2,[r7,#28]
 3766 004a B623     	 mov r3,#182
 3767 004c 5B00     	 lsl r3,r3,#1
 3768 004e B968     	 ldr r1,[r7,#8]
 3769 0050 D150     	 str r1,[r2,r3]
1999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if cache table is updated for the given block : address = 0U => cache table not yet up
2001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (cache_ptr->address == 0U)
 3770              	 .loc 2 2001 0
 3771 0052 FB68     	 ldr r3,[r7,#12]
 3772 0054 1B68     	 ldr r3,[r3]
 3773 0056 002B     	 cmp r3,#0
 3774 0058 58D1     	 bne .L267
2002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If the starting block of the block found */
2004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((status_byte & E_EEPROM_XMC1_START_BIT ) != 0U)
 3775              	 .loc 2 2004 0
 3776 005a 3B69     	 ldr r3,[r7,#16]
 3777 005c 8022     	 mov r2,#128
 3778 005e 1340     	 and r3,r2
 3779 0060 65D0     	 beq .L265
2005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Update the cache with block address */
2007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr->address = data_ptr->curr_bank_src_addr;
 3780              	 .loc 2 2007 0
 3781 0062 FB69     	 ldr r3,[r7,#28]
 3782 0064 9A6B     	 ldr r2,[r3,#56]
 3783 0066 FB68     	 ldr r3,[r7,#12]
 3784 0068 1A60     	 str r2,[r3]
2008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* if the Valid bit for the logical block is set */
2010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ((status_byte & (E_EEPROM_XMC1_VALID_BIT) ) != 0U)
 3785              	 .loc 2 2010 0
 3786 006a 3B69     	 ldr r3,[r7,#16]
 3787 006c 4022     	 mov r2,#64
 3788 006e 1340     	 and r3,r2
 3789 0070 14D0     	 beq .L269
2011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.valid = 1U;
 3790              	 .loc 2 2012 0
 3791 0072 FB68     	 ldr r3,[r7,#12]
 3792 0074 1A79     	 ldrb r2,[r3,#4]
 3793 0076 0121     	 mov r1,#1
 3794 0078 0A43     	 orr r2,r1
 3795 007a 1A71     	 strb r2,[r3,#4]
2013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           
2014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* if the CRC bit for the logical block is set */
2015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           if ((status_byte & (E_EEPROM_XMC1_CRC_BIT) ) != 0U)
 3796              	 .loc 2 2015 0
 3797 007c 3B69     	 ldr r3,[r7,#16]
 3798 007e 1022     	 mov r2,#16
 3799 0080 1340     	 and r3,r2
 3800 0082 05D0     	 beq .L270
2016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.crc = 1U;
 3801              	 .loc 2 2017 0
 3802 0084 FB68     	 ldr r3,[r7,#12]
 3803 0086 1A79     	 ldrb r2,[r3,#4]
 3804 0088 0821     	 mov r1,#8
 3805 008a 0A43     	 orr r2,r1
 3806 008c 1A71     	 strb r2,[r3,#4]
 3807 008e 0AE0     	 b .L272
 3808              	.L270:
2018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           else
2020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.crc = 0U;
 3809              	 .loc 2 2021 0
 3810 0090 FB68     	 ldr r3,[r7,#12]
 3811 0092 1A79     	 ldrb r2,[r3,#4]
 3812 0094 0821     	 mov r1,#8
 3813 0096 8A43     	 bic r2,r1
 3814 0098 1A71     	 strb r2,[r3,#4]
 3815 009a 04E0     	 b .L272
 3816              	.L269:
2022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.valid = 0U;
 3817              	 .loc 2 2026 0
 3818 009c FB68     	 ldr r3,[r7,#12]
 3819 009e 1A79     	 ldrb r2,[r3,#4]
 3820 00a0 0121     	 mov r1,#1
 3821 00a2 8A43     	 bic r2,r1
 3822 00a4 1A71     	 strb r2,[r3,#4]
 3823              	.L272:
2027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Check If number of Flash blocks used for this data block is same in size */
2030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         size = (uint32_t)(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx].size);
 3824              	 .loc 2 2030 0
 3825 00a6 234B     	 ldr r3,.L278
 3826 00a8 1A68     	 ldr r2,[r3]
 3827 00aa BB68     	 ldr r3,[r7,#8]
 3828 00ac DB00     	 lsl r3,r3,#3
 3829 00ae D318     	 add r3,r2,r3
 3830 00b0 5B68     	 ldr r3,[r3,#4]
 3831 00b2 7B60     	 str r3,[r7,#4]
2031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
 3832              	 .loc 2 2031 0
 3833 00b4 7B68     	 ldr r3,[r7,#4]
 3834 00b6 181C     	 mov r0,r3
 3835 00b8 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 3836 00bc 031C     	 mov r3,r0
 3837 00be 3B60     	 str r3,[r7]
2032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ( data_ptr->written_block_counter == physical_blocks)
 3838              	 .loc 2 2033 0
 3839 00c0 FB69     	 ldr r3,[r7,#28]
 3840 00c2 1A6C     	 ldr r2,[r3,#64]
 3841 00c4 3B68     	 ldr r3,[r7]
 3842 00c6 9A42     	 cmp r2,r3
 3843 00c8 05D1     	 bne .L273
2034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.consistent = 1U;  /* EVALUATION RESULT : BLOCK CONSISTENT*/
 3844              	 .loc 2 2035 0
 3845 00ca FB68     	 ldr r3,[r7,#12]
 3846 00cc 1A79     	 ldrb r2,[r3,#4]
 3847 00ce 0221     	 mov r1,#2
 3848 00d0 0A43     	 orr r2,r1
 3849 00d2 1A71     	 strb r2,[r3,#4]
 3850 00d4 11E0     	 b .L274
 3851              	.L273:
2036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           if (cache_ptr->status.valid == 1U)
 3852              	 .loc 2 2039 0
 3853 00d6 FB68     	 ldr r3,[r7,#12]
 3854 00d8 1B79     	 ldrb r3,[r3,#4]
 3855 00da 0122     	 mov r2,#1
 3856 00dc 1340     	 and r3,r2
 3857 00de DBB2     	 uxtb r3,r3
 3858 00e0 002B     	 cmp r3,#0
 3859 00e2 05D0     	 beq .L275
2040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.consistent = 0U;  /* EVALUATION RESULT : BLOCK INCONSISTENT */
 3860              	 .loc 2 2041 0
 3861 00e4 FB68     	 ldr r3,[r7,#12]
 3862 00e6 1A79     	 ldrb r2,[r3,#4]
 3863 00e8 0221     	 mov r1,#2
 3864 00ea 8A43     	 bic r2,r1
 3865 00ec 1A71     	 strb r2,[r3,#4]
 3866 00ee 04E0     	 b .L274
 3867              	.L275:
2042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           else
2044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.consistent = 1U; /* If the block is invalid, then mark : BLOCK INCONS
 3868              	 .loc 2 2045 0
 3869 00f0 FB68     	 ldr r3,[r7,#12]
 3870 00f2 1A79     	 ldrb r2,[r3,#4]
 3871 00f4 0221     	 mov r1,#2
 3872 00f6 0A43     	 orr r2,r1
 3873 00f8 1A71     	 strb r2,[r3,#4]
 3874              	.L274:
2046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Initialize the Index, block block count for the next read */
2049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3875              	 .loc 2 2049 0
 3876 00fa FA69     	 ldr r2,[r7,#28]
 3877 00fc B623     	 mov r3,#182
 3878 00fe 5B00     	 lsl r3,r3,#1
 3879 0100 FF21     	 mov r1,#255
 3880 0102 D150     	 str r1,[r2,r3]
2050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->written_block_counter = 0U;
 3881              	 .loc 2 2050 0
 3882 0104 FB69     	 ldr r3,[r7,#28]
 3883 0106 0022     	 mov r2,#0
 3884 0108 1A64     	 str r2,[r3,#64]
 3885 010a 10E0     	 b .L265
 3886              	.L267:
2051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*
2057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * EVALUATION RESULT : CACHE ALREADY UPDATED
2058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * If cache table is already updated for the block, no need to evaluate the block
2059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        */
2060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3887              	 .loc 2 2060 0
 3888 010c FA69     	 ldr r2,[r7,#28]
 3889 010e B623     	 mov r3,#182
 3890 0110 5B00     	 lsl r3,r3,#1
 3891 0112 FF21     	 mov r1,#255
 3892 0114 D150     	 str r1,[r2,r3]
2061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = 0U;
 3893              	 .loc 2 2061 0
 3894 0116 FB69     	 ldr r3,[r7,#28]
 3895 0118 0022     	 mov r2,#0
 3896 011a 1A64     	 str r2,[r3,#64]
 3897 011c 07E0     	 b .L265
 3898              	.L266:
2062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {    
2066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3899              	 .loc 2 2066 0
 3900 011e FA69     	 ldr r2,[r7,#28]
 3901 0120 B623     	 mov r3,#182
 3902 0122 5B00     	 lsl r3,r3,#1
 3903 0124 FF21     	 mov r1,#255
 3904 0126 D150     	 str r1,[r2,r3]
2067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->written_block_counter = 0U;
 3905              	 .loc 2 2067 0
 3906 0128 FB69     	 ldr r3,[r7,#28]
 3907 012a 0022     	 mov r2,#0
 3908 012c 1A64     	 str r2,[r3,#64]
 3909              	.L265:
2068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3910              	 .loc 2 2069 0
 3911 012e BD46     	 mov sp,r7
 3912 0130 08B0     	 add sp,sp,#32
 3913              	 
 3914 0132 80BD     	 pop {r7,pc}
 3915              	.L279:
 3916              	 .align 2
 3917              	.L278:
 3918 0134 00000000 	 .word E_EEPROM_XMC1_0
 3919              	 .cfi_endproc
 3920              	.LFE80:
 3922              	 .section .text.E_EEPROM_XMC1_lUpdateCacheBlockRead,"ax",%progbits
 3923              	 .align 2
 3924              	 .code 16
 3925              	 .thumb_func
 3927              	E_EEPROM_XMC1_lUpdateCacheBlockRead:
 3928              	.LFB81:
2070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t
2075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Utility function to read data block from flash for cache update function.
2077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void)
2079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3929              	 .loc 2 2079 0
 3930              	 .cfi_startproc
 3931 0000 80B5     	 push {r7,lr}
 3932              	.LCFI101:
 3933              	 .cfi_def_cfa_offset 8
 3934              	 .cfi_offset 7,-8
 3935              	 .cfi_offset 14,-4
 3936 0002 82B0     	 sub sp,sp,#8
 3937              	.LCFI102:
 3938              	 .cfi_def_cfa_offset 16
 3939 0004 00AF     	 add r7,sp,#0
 3940              	.LCFI103:
 3941              	 .cfi_def_cfa_register 7
2080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3942              	 .loc 2 2081 0
 3943 0006 0F4B     	 ldr r3,.L282
 3944 0008 5B68     	 ldr r3,[r3,#4]
 3945 000a 7B60     	 str r3,[r7,#4]
2082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Set the Write Source pointer to the next block */
2084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->curr_bank_src_addr = data_ptr->curr_bank_src_addr -  E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3946              	 .loc 2 2084 0
 3947 000c 7B68     	 ldr r3,[r7,#4]
 3948 000e 9B6B     	 ldr r3,[r3,#56]
 3949 0010 103B     	 sub r3,r3,#16
 3950 0012 1A1C     	 mov r2,r3
 3951 0014 7B68     	 ldr r3,[r7,#4]
 3952 0016 9A63     	 str r2,[r3,#56]
2085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 3953              	 .loc 2 2087 0
 3954 0018 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr,  (uint32_t*)(void*)data_ptr->read_wr
 3955              	 .loc 2 2089 0
 3956 001c 7B68     	 ldr r3,[r7,#4]
 3957 001e 9A6B     	 ldr r2,[r3,#56]
 3958 0020 7B68     	 ldr r3,[r7,#4]
 3959 0022 4433     	 add r3,r3,#68
 3960 0024 101C     	 mov r0,r2
 3961 0026 191C     	 mov r1,r3
 3962 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Increment number of read block counter  */
2092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
 3963              	 .loc 2 2092 0
 3964 002c 7B68     	 ldr r3,[r7,#4]
 3965 002e 1B6C     	 ldr r3,[r3,#64]
 3966 0030 5A1C     	 add r2,r3,#1
 3967 0032 7B68     	 ldr r3,[r7,#4]
 3968 0034 1A64     	 str r2,[r3,#64]
2093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (E_EEPROM_XMC1_lGetFlashStatus());
 3969              	 .loc 2 2094 0
 3970 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3971 003a 031C     	 mov r3,r0
2095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3972              	 .loc 2 2095 0
 3973 003c 181C     	 mov r0,r3
 3974 003e BD46     	 mov sp,r7
 3975 0040 02B0     	 add sp,sp,#8
 3976              	 
 3977 0042 80BD     	 pop {r7,pc}
 3978              	.L283:
 3979              	 .align 2
 3980              	.L282:
 3981 0044 00000000 	 .word E_EEPROM_XMC1_0
 3982              	 .cfi_endproc
 3983              	.LFE81:
 3985              	 .section .text.E_EEPROM_XMC1_lGetUsrBlockIndex,"ax",%progbits
 3986              	 .align 2
 3987              	 .code 16
 3988              	 .thumb_func
 3990              	E_EEPROM_XMC1_lGetUsrBlockIndex:
 3991              	.LFB82:
2096:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2097:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2098:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User data block number / ID
2099:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t : returns array index pointer of block configuration
2101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This utility function will return the Index (location) of the block in the user
2103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number)
2105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3992              	 .loc 2 2105 0
 3993              	 .cfi_startproc
 3994 0000 80B5     	 push {r7,lr}
 3995              	.LCFI104:
 3996              	 .cfi_def_cfa_offset 8
 3997              	 .cfi_offset 7,-8
 3998              	 .cfi_offset 14,-4
 3999 0002 84B0     	 sub sp,sp,#16
 4000              	.LCFI105:
 4001              	 .cfi_def_cfa_offset 24
 4002 0004 00AF     	 add r7,sp,#0
 4003              	.LCFI106:
 4004              	 .cfi_def_cfa_register 7
 4005 0006 021C     	 mov r2,r0
 4006 0008 FB1D     	 add r3,r7,#7
 4007 000a 1A70     	 strb r2,[r3]
2106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t  *block_ptr;
2108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 4008              	 .loc 2 2109 0
 4009 000c 0023     	 mov r3,#0
 4010 000e FB60     	 str r3,[r7,#12]
2110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
 4011              	 .loc 2 2110 0
 4012 0010 124B     	 ldr r3,.L290
 4013 0012 1A68     	 ldr r2,[r3]
 4014 0014 FB68     	 ldr r3,[r7,#12]
 4015 0016 DB00     	 lsl r3,r3,#3
 4016 0018 D318     	 add r3,r2,r3
 4017 001a BB60     	 str r3,[r7,#8]
2111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check for max configured block count reached and block number is matched against the configure
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_numbe
 4018              	 .loc 2 2113 0
 4019 001c 05E0     	 b .L285
 4020              	.L287:
2114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx++;
 4021              	 .loc 2 2115 0
 4022 001e FB68     	 ldr r3,[r7,#12]
 4023 0020 0133     	 add r3,r3,#1
 4024 0022 FB60     	 str r3,[r7,#12]
2116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_ptr++;
 4025              	 .loc 2 2116 0
 4026 0024 BB68     	 ldr r3,[r7,#8]
 4027 0026 0833     	 add r3,r3,#8
 4028 0028 BB60     	 str r3,[r7,#8]
 4029              	.L285:
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4030              	 .loc 2 2113 0
 4031 002a 0C4B     	 ldr r3,.L290
 4032 002c 5B7A     	 ldrb r3,[r3,#9]
 4033 002e 1A1E     	 sub r2,r3,#0
 4034 0030 FB68     	 ldr r3,[r7,#12]
 4035 0032 9A42     	 cmp r2,r3
 4036 0034 05D9     	 bls .L286
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4037              	 .loc 2 2113 0 is_stmt 0 discriminator 1
 4038 0036 BB68     	 ldr r3,[r7,#8]
 4039 0038 1B78     	 ldrb r3,[r3]
 4040 003a FA1D     	 add r2,r7,#7
 4041 003c 1278     	 ldrb r2,[r2]
 4042 003e 9A42     	 cmp r2,r3
 4043 0040 EDD1     	 bne .L287
 4044              	.L286:
2117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( indx == E_EEPROM_XMC1_HANDLE_PTR->block_count )
 4045              	 .loc 2 2119 0 is_stmt 1
 4046 0042 064B     	 ldr r3,.L290
 4047 0044 5B7A     	 ldrb r3,[r3,#9]
 4048 0046 1A1E     	 sub r2,r3,#0
 4049 0048 FB68     	 ldr r3,[r7,#12]
 4050 004a 9A42     	 cmp r2,r3
 4051 004c 01D1     	 bne .L288
2120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 4052              	 .loc 2 2121 0
 4053 004e FF23     	 mov r3,#255
 4054 0050 FB60     	 str r3,[r7,#12]
 4055              	.L288:
2122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (indx);
 4056              	 .loc 2 2123 0
 4057 0052 FB68     	 ldr r3,[r7,#12]
2124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4058              	 .loc 2 2124 0
 4059 0054 181C     	 mov r0,r3
 4060 0056 BD46     	 mov sp,r7
 4061 0058 04B0     	 add sp,sp,#16
 4062              	 
 4063 005a 80BD     	 pop {r7,pc}
 4064              	.L291:
 4065              	 .align 2
 4066              	.L290:
 4067 005c 00000000 	 .word E_EEPROM_XMC1_0
 4068              	 .cfi_endproc
 4069              	.LFE82:
 4071              	 .section .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks,"ax",%progbits
 4072              	 .align 2
 4073              	 .code 16
 4074              	 .thumb_func
 4076              	E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:
 4077              	.LFB83:
2125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : size - size of user data block
2128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t - returns maximum physical flash blocks required to store the data.
2130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Calculates and return the number of FLASH blocks required for a user data block
2132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size)
2134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4078              	 .loc 2 2134 0
 4079              	 .cfi_startproc
 4080 0000 80B5     	 push {r7,lr}
 4081              	.LCFI107:
 4082              	 .cfi_def_cfa_offset 8
 4083              	 .cfi_offset 7,-8
 4084              	 .cfi_offset 14,-4
 4085 0002 84B0     	 sub sp,sp,#16
 4086              	.LCFI108:
 4087              	 .cfi_def_cfa_offset 24
 4088 0004 00AF     	 add r7,sp,#0
 4089              	.LCFI109:
 4090              	 .cfi_def_cfa_register 7
 4091 0006 7860     	 str r0,[r7,#4]
2135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t physical_blocks;
2136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   physical_blocks = 1U;
 4092              	 .loc 2 2137 0
 4093 0008 0123     	 mov r3,#1
 4094 000a FB60     	 str r3,[r7,#12]
2138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If size is greater than the  */
2139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
 4095              	 .loc 2 2139 0
 4096 000c 7B68     	 ldr r3,[r7,#4]
 4097 000e 0C2B     	 cmp r3,#12
 4098 0010 0FD9     	 bls .L293
2140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
 4099              	 .loc 2 2141 0
 4100 0012 7B68     	 ldr r3,[r7,#4]
 4101 0014 0C3B     	 sub r3,r3,#12
 4102 0016 7B60     	 str r3,[r7,#4]
2142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     physical_blocks++;
 4103              	 .loc 2 2142 0
 4104 0018 FB68     	 ldr r3,[r7,#12]
 4105 001a 0133     	 add r3,r3,#1
 4106 001c FB60     	 str r3,[r7,#12]
2143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
 4107              	 .loc 2 2144 0
 4108 001e 05E0     	 b .L294
 4109              	.L295:
2145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       physical_blocks++;
 4110              	 .loc 2 2146 0
 4111 0020 FB68     	 ldr r3,[r7,#12]
 4112 0022 0133     	 add r3,r3,#1
 4113 0024 FB60     	 str r3,[r7,#12]
2147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
 4114              	 .loc 2 2147 0
 4115 0026 7B68     	 ldr r3,[r7,#4]
 4116 0028 0E3B     	 sub r3,r3,#14
 4117 002a 7B60     	 str r3,[r7,#4]
 4118              	.L294:
2144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4119              	 .loc 2 2144 0
 4120 002c 7B68     	 ldr r3,[r7,#4]
 4121 002e 0E2B     	 cmp r3,#14
 4122 0030 F6D8     	 bhi .L295
 4123              	.L293:
2148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return(physical_blocks);
 4124              	 .loc 2 2150 0
 4125 0032 FB68     	 ldr r3,[r7,#12]
2151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4126              	 .loc 2 2151 0
 4127 0034 181C     	 mov r0,r3
 4128 0036 BD46     	 mov sp,r7
 4129 0038 04B0     	 add sp,sp,#16
 4130              	 
 4131 003a 80BD     	 pop {r7,pc}
 4132              	 .cfi_endproc
 4133              	.LFE83:
 4135              	 .section .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks,"ax",%progbits
 4136              	 .align 2
 4137              	 .code 16
 4138              	 .thumb_func
 4140              	E_EEPROM_XMC1_lGetFreeDFLASHBlocks:
 4141              	.LFB84:
2152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t : Number of physical blocks left in the bank for writing data.
2157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This routine will calculate the number of empty DFLASH blocks remaining in the
2159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void)
2161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4142              	 .loc 2 2161 0
 4143              	 .cfi_startproc
 4144 0000 80B5     	 push {r7,lr}
 4145              	.LCFI110:
 4146              	 .cfi_def_cfa_offset 8
 4147              	 .cfi_offset 7,-8
 4148              	 .cfi_offset 14,-4
 4149 0002 84B0     	 sub sp,sp,#16
 4150              	.LCFI111:
 4151              	 .cfi_def_cfa_offset 24
 4152 0004 00AF     	 add r7,sp,#0
 4153              	.LCFI112:
 4154              	 .cfi_def_cfa_register 7
2162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t base_addr;
2163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t free_blocks;
2164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4155              	 .loc 2 2166 0
 4156 0006 0D4B     	 ldr r3,.L301
 4157 0008 5B68     	 ldr r3,[r3,#4]
 4158 000a BB60     	 str r3,[r7,#8]
2167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 4159              	 .loc 2 2168 0
 4160 000c BB68     	 ldr r3,[r7,#8]
 4161 000e 1B6A     	 ldr r3,[r3,#32]
 4162 0010 002B     	 cmp r3,#0
 4163 0012 02D1     	 bne .L298
2169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     base_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4164              	 .loc 2 2170 0
 4165 0014 0A4B     	 ldr r3,.L301+4
 4166 0016 FB60     	 str r3,[r7,#12]
 4167 0018 01E0     	 b .L299
 4168              	.L298:
2171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     base_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4169              	 .loc 2 2174 0
 4170 001a 0A4B     	 ldr r3,.L301+8
 4171 001c FB60     	 str r3,[r7,#12]
 4172              	.L299:
2175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   free_blocks = (uint32_t)( ( (base_addr + E_EEPROM_XMC1_FLASH_BANK_SIZE) - (data_ptr->next_free_bl
 4173              	 .loc 2 2176 0
 4174 001e BB68     	 ldr r3,[r7,#8]
 4175 0020 5B6B     	 ldr r3,[r3,#52]
 4176 0022 FA68     	 ldr r2,[r7,#12]
 4177 0024 D31A     	 sub r3,r2,r3
 4178 0026 8022     	 mov r2,#128
 4179 0028 9200     	 lsl r2,r2,#2
 4180 002a 9446     	 mov ip,r2
 4181 002c 6344     	 add r3,r3,ip
 4182 002e 1B09     	 lsr r3,r3,#4
 4183 0030 7B60     	 str r3,[r7,#4]
2177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                 /  E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
2178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (free_blocks);
 4184              	 .loc 2 2178 0
 4185 0032 7B68     	 ldr r3,[r7,#4]
2179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4186              	 .loc 2 2179 0
 4187 0034 181C     	 mov r0,r3
 4188 0036 BD46     	 mov sp,r7
 4189 0038 04B0     	 add sp,sp,#16
 4190              	 
 4191 003a 80BD     	 pop {r7,pc}
 4192              	.L302:
 4193              	 .align 2
 4194              	.L301:
 4195 003c 00000000 	 .word E_EEPROM_XMC1_0
 4196 0040 008C0010 	 .word 268471296
 4197 0044 008E0010 	 .word 268471808
 4198              	 .cfi_endproc
 4199              	.LFE84:
 4201              	 .section .text.E_EEPROM_XMC1_lUpdateCurrBankInfo,"ax",%progbits
 4202              	 .align 2
 4203              	 .code 16
 4204              	 .thumb_func
 4206              	E_EEPROM_XMC1_lUpdateCurrBankInfo:
 4207              	.LFB85:
2180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Updates global addresses to keep track of writing and reading operations respe
2187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void)
2189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4208              	 .loc 2 2189 0
 4209              	 .cfi_startproc
 4210 0000 80B5     	 push {r7,lr}
 4211              	.LCFI113:
 4212              	 .cfi_def_cfa_offset 8
 4213              	 .cfi_offset 7,-8
 4214              	 .cfi_offset 14,-4
 4215 0002 82B0     	 sub sp,sp,#8
 4216              	.LCFI114:
 4217              	 .cfi_def_cfa_offset 16
 4218 0004 00AF     	 add r7,sp,#0
 4219              	.LCFI115:
 4220              	 .cfi_def_cfa_register 7
2190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4221              	 .loc 2 2191 0
 4222 0006 144B     	 ldr r3,.L306
 4223 0008 5B68     	 ldr r3,[r3,#4]
 4224 000a 7B60     	 str r3,[r7,#4]
2192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 4225              	 .loc 2 2193 0
 4226 000c 7B68     	 ldr r3,[r7,#4]
 4227 000e 1B6A     	 ldr r3,[r3,#32]
 4228 0010 002B     	 cmp r3,#0
 4229 0012 0FD1     	 bne .L304
2194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4230              	 .loc 2 2195 0
 4231 0014 7B68     	 ldr r3,[r7,#4]
 4232 0016 114A     	 ldr r2,.L306+4
 4233 0018 9A63     	 str r2,[r3,#56]
2196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4234              	 .loc 2 2196 0
 4235 001a 7B68     	 ldr r3,[r7,#4]
 4236 001c 0F4A     	 ldr r2,.L306+4
 4237 001e 9A62     	 str r2,[r3,#40]
2197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4238              	 .loc 2 2197 0
 4239 0020 7B68     	 ldr r3,[r7,#4]
 4240 0022 0F4A     	 ldr r2,.L306+8
 4241 0024 5A62     	 str r2,[r3,#36]
2198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
 4242              	 .loc 2 2198 0
 4243 0026 7B68     	 ldr r3,[r7,#4]
 4244 0028 0E4A     	 ldr r2,.L306+12
 4245 002a DA62     	 str r2,[r3,#44]
2199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
 4246              	 .loc 2 2199 0
 4247 002c 7B68     	 ldr r3,[r7,#4]
 4248 002e 0E4A     	 ldr r2,.L306+16
 4249 0030 1A63     	 str r2,[r3,#48]
 4250 0032 0EE0     	 b .L303
 4251              	.L304:
2200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4252              	 .loc 2 2203 0
 4253 0034 7B68     	 ldr r3,[r7,#4]
 4254 0036 0A4A     	 ldr r2,.L306+8
 4255 0038 9A63     	 str r2,[r3,#56]
2204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4256              	 .loc 2 2204 0
 4257 003a 7B68     	 ldr r3,[r7,#4]
 4258 003c 084A     	 ldr r2,.L306+8
 4259 003e 9A62     	 str r2,[r3,#40]
2205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4260              	 .loc 2 2205 0
 4261 0040 7B68     	 ldr r3,[r7,#4]
 4262 0042 064A     	 ldr r2,.L306+4
 4263 0044 5A62     	 str r2,[r3,#36]
2206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
 4264              	 .loc 2 2206 0
 4265 0046 7B68     	 ldr r3,[r7,#4]
 4266 0048 074A     	 ldr r2,.L306+16
 4267 004a DA62     	 str r2,[r3,#44]
2207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
 4268              	 .loc 2 2207 0
 4269 004c 7B68     	 ldr r3,[r7,#4]
 4270 004e 054A     	 ldr r2,.L306+12
 4271 0050 1A63     	 str r2,[r3,#48]
 4272              	.L303:
2208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4273              	 .loc 2 2209 0
 4274 0052 BD46     	 mov sp,r7
 4275 0054 02B0     	 add sp,sp,#8
 4276              	 
 4277 0056 80BD     	 pop {r7,pc}
 4278              	.L307:
 4279              	 .align 2
 4280              	.L306:
 4281 0058 00000000 	 .word E_EEPROM_XMC1_0
 4282 005c 008C0010 	 .word 268471296
 4283 0060 008E0010 	 .word 268471808
 4284 0064 FF8D0010 	 .word 268471807
 4285 0068 FF8F0010 	 .word 268472319
 4286              	 .cfi_endproc
 4287              	.LFE85:
 4289              	 .section .text.E_EEPROM_XMC1_lReadMarkerBlocks,"ax",%progbits
 4290              	 .align 2
 4291              	 .code 16
 4292              	 .thumb_func
 4294              	E_EEPROM_XMC1_lReadMarkerBlocks:
 4295              	.LFB86:
2210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  :
2213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t : marker_dirty_state
2215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will read the Block marker contents
2217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void)
2219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4296              	 .loc 2 2219 0
 4297              	 .cfi_startproc
 4298 0000 80B5     	 push {r7,lr}
 4299              	.LCFI116:
 4300              	 .cfi_def_cfa_offset 8
 4301              	 .cfi_offset 7,-8
 4302              	 .cfi_offset 14,-4
 4303 0002 88B0     	 sub sp,sp,#32
 4304              	.LCFI117:
 4305              	 .cfi_def_cfa_offset 40
 4306 0004 00AF     	 add r7,sp,#0
 4307              	.LCFI118:
 4308              	 .cfi_def_cfa_register 7
2220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t bank;
2222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block;
2223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t temp_bank_state;
2224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_marker_cnt;
2225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t temp_state_marker;
2226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_dirty_state;
2227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4309              	 .loc 2 2229 0
 4310 0006 204B     	 ldr r3,.L314
 4311 0008 5B68     	 ldr r3,[r3,#4]
 4312 000a 3B61     	 str r3,[r7,#16]
2230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Initialize Local variables */
2232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   temp_bank_state = 0U;
 4313              	 .loc 2 2232 0
 4314 000c 0023     	 mov r3,#0
 4315 000e FB61     	 str r3,[r7,#28]
2233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_dirty_state = 0U;
 4316              	 .loc 2 2233 0
 4317 0010 0023     	 mov r3,#0
 4318 0012 7B61     	 str r3,[r7,#20]
2234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_marker_cnt = 0U;
 4319              	 .loc 2 2234 0
 4320 0014 0023     	 mov r3,#0
 4321 0016 BB61     	 str r3,[r7,#24]
 4322              	.L312:
2235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Prepare the variables for state block update */
2238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     temp_bank_state = (uint32_t)((uint32_t)temp_bank_state << (uint32_t)1U);
 4323              	 .loc 2 2238 0
 4324 0018 FB69     	 ldr r3,[r7,#28]
 4325 001a 5B00     	 lsl r3,r3,#1
 4326 001c FB61     	 str r3,[r7,#28]
2239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     bank  = (uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS;
 4327              	 .loc 2 2240 0
 4328 001e BB69     	 ldr r3,[r7,#24]
 4329 0020 9B08     	 lsr r3,r3,#2
 4330 0022 FB60     	 str r3,[r7,#12]
2241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block = (uint32_t)state_marker_cnt - ((uint32_t)bank << E_EEPROM_XMC1_TWO_BIT_POS);
 4331              	 .loc 2 2241 0
 4332 0024 FB68     	 ldr r3,[r7,#12]
 4333 0026 9B00     	 lsl r3,r3,#2
 4334 0028 BA69     	 ldr r2,[r7,#24]
 4335 002a D31A     	 sub r3,r2,r3
 4336 002c BB60     	 str r3,[r7,#8]
2242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Read the state block of bank*/
2244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     temp_state_marker = E_EEPROM_XMC1_lReadVerifyMarker(bank , block);
 4337              	 .loc 2 2244 0
 4338 002e FA68     	 ldr r2,[r7,#12]
 4339 0030 BB68     	 ldr r3,[r7,#8]
 4340 0032 101C     	 mov r0,r2
 4341 0034 191C     	 mov r1,r3
 4342 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadVerifyMarker
 4343 003a 031C     	 mov r3,r0
 4344 003c 7B60     	 str r3,[r7,#4]
2245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (temp_state_marker == E_EEPROM_XMC1_ALL_ONES)
 4345              	 .loc 2 2246 0
 4346 003e 7B68     	 ldr r3,[r7,#4]
 4347 0040 0133     	 add r3,r3,#1
 4348 0042 04D1     	 bne .L309
2247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      temp_bank_state |= 1U;
 4349              	 .loc 2 2248 0
 4350 0044 FB69     	 ldr r3,[r7,#28]
 4351 0046 0122     	 mov r2,#1
 4352 0048 1343     	 orr r3,r2
 4353 004a FB61     	 str r3,[r7,#28]
 4354 004c 0CE0     	 b .L310
 4355              	.L309:
2249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (temp_state_marker == E_EEPROM_XMC1_ALL_ZEROS)
 4356              	 .loc 2 2250 0
 4357 004e 7B68     	 ldr r3,[r7,#4]
 4358 0050 002B     	 cmp r3,#0
 4359 0052 09D0     	 beq .L310
2251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      temp_bank_state |= 0U;
2253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      indx = (uint32_t)((uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS);
 4360              	 .loc 2 2256 0
 4361 0054 BB69     	 ldr r3,[r7,#24]
 4362 0056 9B08     	 lsr r3,r3,#2
 4363 0058 3B60     	 str r3,[r7]
2257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      marker_dirty_state |= (uint32_t)((uint32_t)1U << (uint32_t)indx);
 4364              	 .loc 2 2257 0
 4365 005a 3B68     	 ldr r3,[r7]
 4366 005c 0122     	 mov r2,#1
 4367 005e 9A40     	 lsl r2,r2,r3
 4368 0060 131C     	 mov r3,r2
 4369 0062 7A69     	 ldr r2,[r7,#20]
 4370 0064 1343     	 orr r3,r2
 4371 0066 7B61     	 str r3,[r7,#20]
 4372              	.L310:
2258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the counter "StateBlockCnt" */
2260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     state_marker_cnt++;
 4373              	 .loc 2 2260 0
 4374 0068 BB69     	 ldr r3,[r7,#24]
 4375 006a 0133     	 add r3,r3,#1
 4376 006c BB61     	 str r3,[r7,#24]
2261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (state_marker_cnt < E_EEPROM_XMC1_EIGHT_BYTES);
 4377              	 .loc 2 2261 0
 4378 006e BB69     	 ldr r3,[r7,#24]
 4379 0070 072B     	 cmp r3,#7
 4380 0072 D1D9     	 bls .L312
2262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update Global variables */
2264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->init_gc_state = temp_bank_state;
 4381              	 .loc 2 2264 0
 4382 0074 3A69     	 ldr r2,[r7,#16]
 4383 0076 B023     	 mov r3,#176
 4384 0078 5B00     	 lsl r3,r3,#1
 4385 007a F969     	 ldr r1,[r7,#28]
 4386 007c D150     	 str r1,[r2,r3]
2265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (marker_dirty_state);
 4387              	 .loc 2 2266 0
 4388 007e 7B69     	 ldr r3,[r7,#20]
2267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4389              	 .loc 2 2267 0
 4390 0080 181C     	 mov r0,r3
 4391 0082 BD46     	 mov sp,r7
 4392 0084 08B0     	 add sp,sp,#32
 4393              	 
 4394 0086 80BD     	 pop {r7,pc}
 4395              	.L315:
 4396              	 .align 2
 4397              	.L314:
 4398 0088 00000000 	 .word E_EEPROM_XMC1_0
 4399              	 .cfi_endproc
 4400              	.LFE86:
 4402              	 .section .text.E_EEPROM_XMC1_lReadVerifyMarker,"ax",%progbits
 4403              	 .align 2
 4404              	 .code 16
 4405              	 .thumb_func
 4407              	E_EEPROM_XMC1_lReadVerifyMarker:
 4408              	.LFB87:
2268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : Bank  - Bank Number ( 0 / 1 )
2271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             Block - Block position
2272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t : E_EEPROM_XMC1_ALL_ONES
2274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    E_EEPROM_XMC1_ALL_ZEROS
2275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    E_EEPROM_XMC1_MB_DIRTY
2276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function will verify the marker contents read out from state page.
2278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block)
2280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4409              	 .loc 2 2280 0
 4410              	 .cfi_startproc
 4411 0000 80B5     	 push {r7,lr}
 4412              	.LCFI119:
 4413              	 .cfi_def_cfa_offset 8
 4414              	 .cfi_offset 7,-8
 4415              	 .cfi_offset 14,-4
 4416 0002 8AB0     	 sub sp,sp,#40
 4417              	.LCFI120:
 4418              	 .cfi_def_cfa_offset 48
 4419 0004 00AF     	 add r7,sp,#0
 4420              	.LCFI121:
 4421              	 .cfi_def_cfa_register 7
 4422 0006 7860     	 str r0,[r7,#4]
 4423 0008 3960     	 str r1,[r7]
2281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t return_val;
2283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t ones_counter;
2284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t zeros_counter;
2285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_block_addr;
2286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *marker_array_ptr;
2287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4424              	 .loc 2 2289 0
 4425 000a 294B     	 ldr r3,.L326
 4426 000c 5B68     	 ldr r3,[r3,#4]
 4427 000e 7B61     	 str r3,[r7,#20]
2290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   ones_counter = 0U;
 4428              	 .loc 2 2291 0
 4429 0010 0023     	 mov r3,#0
 4430 0012 FB61     	 str r3,[r7,#28]
2292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   zeros_counter = 0U;
 4431              	 .loc 2 2292 0
 4432 0014 0023     	 mov r3,#0
 4433 0016 BB61     	 str r3,[r7,#24]
2293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
 4434              	 .loc 2 2293 0
 4435 0018 7B69     	 ldr r3,[r7,#20]
 4436 001a 4433     	 add r3,r3,#68
 4437 001c 3B61     	 str r3,[r7,#16]
2294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Calculate the Marker Block address from bank and Block size*/
2296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
2297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
 4438              	 .loc 2 2297 0
 4439 001e 7B68     	 ldr r3,[r7,#4]
 4440 0020 244A     	 ldr r2,.L326+4
 4441 0022 9446     	 mov ip,r2
 4442 0024 6344     	 add r3,r3,ip
 4443 0026 5A01     	 lsl r2,r3,#5
 4444 0028 3B68     	 ldr r3,[r7]
 4445 002a D318     	 add r3,r2,r3
2296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
 4446              	 .loc 2 2296 0
 4447 002c 1B01     	 lsl r3,r3,#4
 4448 002e FB60     	 str r3,[r7,#12]
2298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)block * (uint32_t)E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
2299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 4449              	 .loc 2 2301 0
 4450 0030 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read one complete block of data (4 Words = 128 bit) from the targeted Marker Block */
2304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(marker_block_addr, (uint32_t*)(void*)marker_array_ptr);
 4451              	 .loc 2 2304 0
 4452 0034 FA68     	 ldr r2,[r7,#12]
 4453 0036 3B69     	 ldr r3,[r7,#16]
 4454 0038 101C     	 mov r0,r2
 4455 003a 191C     	 mov r1,r3
 4456 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check for any flash hardware errors*/
2307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_lGetFlashStatus())
 4457              	 .loc 2 2307 0
 4458 0040 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4459 0044 031E     	 sub r3,r0,#0
 4460 0046 02D0     	 beq .L317
2308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Any Hardware errors will result in Dirty state*/
2310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     return_val = E_EEPROM_XMC1_MB_DIRTY;
 4461              	 .loc 2 2310 0
 4462 0048 DD23     	 mov r3,#221
 4463 004a 3B62     	 str r3,[r7,#32]
 4464 004c 2BE0     	 b .L318
 4465              	.L317:
2311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
 4466              	 .loc 2 2314 0
 4467 004e 0023     	 mov r3,#0
 4468 0050 7B62     	 str r3,[r7,#36]
 4469 0052 16E0     	 b .L319
 4470              	.L322:
2315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check for the Marker field and verify Marker either 0 or 1*/
2317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ZEROS)
 4471              	 .loc 2 2317 0
 4472 0054 7B6A     	 ldr r3,[r7,#36]
 4473 0056 9B00     	 lsl r3,r3,#2
 4474 0058 3A69     	 ldr r2,[r7,#16]
 4475 005a D318     	 add r3,r2,r3
 4476 005c 1B68     	 ldr r3,[r3]
 4477 005e 002B     	 cmp r3,#0
 4478 0060 02D1     	 bne .L320
2318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         zeros_counter++;
 4479              	 .loc 2 2319 0
 4480 0062 BB69     	 ldr r3,[r7,#24]
 4481 0064 0133     	 add r3,r3,#1
 4482 0066 BB61     	 str r3,[r7,#24]
 4483              	.L320:
2320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
 4484              	 .loc 2 2322 0
 4485 0068 7B6A     	 ldr r3,[r7,#36]
 4486 006a 9B00     	 lsl r3,r3,#2
 4487 006c 3A69     	 ldr r2,[r7,#16]
 4488 006e D318     	 add r3,r2,r3
 4489 0070 1B68     	 ldr r3,[r3]
 4490 0072 0133     	 add r3,r3,#1
 4491 0074 02D1     	 bne .L321
2323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         ones_counter++;
 4492              	 .loc 2 2324 0
 4493 0076 FB69     	 ldr r3,[r7,#28]
 4494 0078 0133     	 add r3,r3,#1
 4495 007a FB61     	 str r3,[r7,#28]
 4496              	.L321:
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4497              	 .loc 2 2314 0 discriminator 2
 4498 007c 7B6A     	 ldr r3,[r7,#36]
 4499 007e 0133     	 add r3,r3,#1
 4500 0080 7B62     	 str r3,[r7,#36]
 4501              	.L319:
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4502              	 .loc 2 2314 0 is_stmt 0 discriminator 1
 4503 0082 7B6A     	 ldr r3,[r7,#36]
 4504 0084 032B     	 cmp r3,#3
 4505 0086 E5D9     	 bls .L322
2325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (ones_counter == E_EEPROM_XMC1_FOUR_BYTES)
 4506              	 .loc 2 2327 0 is_stmt 1
 4507 0088 FB69     	 ldr r3,[r7,#28]
 4508 008a 042B     	 cmp r3,#4
 4509 008c 03D1     	 bne .L323
2328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_ALL_ONES;
 4510              	 .loc 2 2329 0
 4511 008e 0123     	 mov r3,#1
 4512 0090 5B42     	 neg r3,r3
 4513 0092 3B62     	 str r3,[r7,#32]
 4514 0094 07E0     	 b .L318
 4515              	.L323:
2330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (zeros_counter == E_EEPROM_XMC1_FOUR_BYTES)
 4516              	 .loc 2 2331 0
 4517 0096 BB69     	 ldr r3,[r7,#24]
 4518 0098 042B     	 cmp r3,#4
 4519 009a 02D1     	 bne .L324
2332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_ALL_ZEROS;
 4520              	 .loc 2 2333 0
 4521 009c 0023     	 mov r3,#0
 4522 009e 3B62     	 str r3,[r7,#32]
 4523 00a0 01E0     	 b .L318
 4524              	.L324:
2334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_MB_DIRTY;
 4525              	 .loc 2 2337 0
 4526 00a2 DD23     	 mov r3,#221
 4527 00a4 3B62     	 str r3,[r7,#32]
 4528              	.L318:
2338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (return_val);
 4529              	 .loc 2 2340 0
 4530 00a6 3B6A     	 ldr r3,[r7,#32]
2341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4531              	 .loc 2 2341 0
 4532 00a8 181C     	 mov r0,r3
 4533 00aa BD46     	 mov sp,r7
 4534 00ac 0AB0     	 add sp,sp,#40
 4535              	 
 4536 00ae 80BD     	 pop {r7,pc}
 4537              	.L327:
 4538              	 .align 2
 4539              	.L326:
 4540 00b0 00000000 	 .word E_EEPROM_XMC1_0
 4541 00b4 46000800 	 .word 524358
 4542              	 .cfi_endproc
 4543              	.LFE87:
 4545              	 .section .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer,"ax",%progbits
 4546              	 .align 2
 4547              	 .code 16
 4548              	 .thumb_func
 4550              	E_EEPROM_XMC1_lSetMarkerBlockBuffer:
 4551              	.LFB88:
2342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will update the write buffer for a particular bank marker state
2349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void)
2351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4552              	 .loc 2 2351 0
 4553              	 .cfi_startproc
 4554 0000 80B5     	 push {r7,lr}
 4555              	.LCFI122:
 4556              	 .cfi_def_cfa_offset 8
 4557              	 .cfi_offset 7,-8
 4558              	 .cfi_offset 14,-4
 4559 0002 84B0     	 sub sp,sp,#16
 4560              	.LCFI123:
 4561              	 .cfi_def_cfa_offset 24
 4562 0004 00AF     	 add r7,sp,#0
 4563              	.LCFI124:
 4564              	 .cfi_def_cfa_register 7
2352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *array_ptr;
2353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4565              	 .loc 2 2355 0
 4566 0006 0C4B     	 ldr r3,.L331
 4567 0008 5B68     	 ldr r3,[r3,#4]
 4568 000a BB60     	 str r3,[r7,#8]
2356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
 4569              	 .loc 2 2357 0
 4570 000c BB68     	 ldr r3,[r7,#8]
 4571 000e 4433     	 add r3,r3,#68
 4572 0010 7B60     	 str r3,[r7,#4]
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4573              	 .loc 2 2358 0
 4574 0012 0023     	 mov r3,#0
 4575 0014 FB60     	 str r3,[r7,#12]
 4576 0016 08E0     	 b .L329
 4577              	.L330:
2359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
 4578              	 .loc 2 2360 0 discriminator 3
 4579 0018 FB68     	 ldr r3,[r7,#12]
 4580 001a 9B00     	 lsl r3,r3,#2
 4581 001c 7A68     	 ldr r2,[r7,#4]
 4582 001e D318     	 add r3,r2,r3
 4583 0020 0022     	 mov r2,#0
 4584 0022 1A60     	 str r2,[r3]
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4585              	 .loc 2 2358 0 discriminator 3
 4586 0024 FB68     	 ldr r3,[r7,#12]
 4587 0026 0133     	 add r3,r3,#1
 4588 0028 FB60     	 str r3,[r7,#12]
 4589              	.L329:
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4590              	 .loc 2 2358 0 is_stmt 0 discriminator 1
 4591 002a FB68     	 ldr r3,[r7,#12]
 4592 002c 032B     	 cmp r3,#3
 4593 002e F3D9     	 bls .L330
2361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4594              	 .loc 2 2363 0 is_stmt 1
 4595 0030 BD46     	 mov sp,r7
 4596 0032 04B0     	 add sp,sp,#16
 4597              	 
 4598 0034 80BD     	 pop {r7,pc}
 4599              	.L332:
 4600 0036 C046     	 .align 2
 4601              	.L331:
 4602 0038 00000000 	 .word E_EEPROM_XMC1_0
 4603              	 .cfi_endproc
 4604              	.LFE88:
 4606              	 .section .text.E_EEPROM_XMC1_lSetMarkerPageBuffer,"ax",%progbits
 4607              	 .align 2
 4608              	 .code 16
 4609              	 .thumb_func
 4611              	E_EEPROM_XMC1_lSetMarkerPageBuffer:
 4612              	.LFB89:
2364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : State - Marker State
2367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Fill complete Marker PAGE as per the below defined format.
2371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                                  WORD - 0      WORD - 1      WORD - 2     WORD - 3
2373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK0 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK1 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK2 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK3 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK4 -  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK5 -  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     ----------------------------------------------------------------------
2381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     ----------------------------------------------------------------------
2382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK16-  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state)
2385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4613              	 .loc 2 2385 0
 4614              	 .cfi_startproc
 4615 0000 80B5     	 push {r7,lr}
 4616              	.LCFI125:
 4617              	 .cfi_def_cfa_offset 8
 4618              	 .cfi_offset 7,-8
 4619              	 .cfi_offset 14,-4
 4620 0002 88B0     	 sub sp,sp,#32
 4621              	.LCFI126:
 4622              	 .cfi_def_cfa_offset 40
 4623 0004 00AF     	 add r7,sp,#0
 4624              	.LCFI127:
 4625              	 .cfi_def_cfa_register 7
 4626 0006 7860     	 str r0,[r7,#4]
2386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t bit_mask;
2388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t word_data;
2389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *array_ptr;
2390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4627              	 .loc 2 2392 0
 4628 0008 1E4B     	 ldr r3,.L342
 4629 000a 5B68     	 ldr r3,[r3,#4]
 4630 000c FB60     	 str r3,[r7,#12]
2393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   array_ptr = (uint32_t*)(void*)data_ptr->page_write_buffer;
 4631              	 .loc 2 2394 0
 4632 000e FB68     	 ldr r3,[r7,#12]
 4633 0010 5833     	 add r3,r3,#88
 4634 0012 3B61     	 str r3,[r7,#16]
2395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
2396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Depending upon the state received check the bit positions where a state marker has to be updat
2397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * get the actual state. Fill the first four blocks of the page with the state marker information
2398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
2399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Fill the first rest 4 blocks of the page with marker data  */
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
 4635              	 .loc 2 2401 0
 4636 0014 0023     	 mov r3,#0
 4637 0016 BB61     	 str r3,[r7,#24]
 4638 0018 1EE0     	 b .L334
 4639              	.L339:
2402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( (state & (E_EEPROM_XMC1_MARKER_POSITION >> bit_mask )) == 0U )
 4640              	 .loc 2 2403 0
 4641 001a BB69     	 ldr r3,[r7,#24]
 4642 001c 8022     	 mov r2,#128
 4643 001e DA40     	 lsr r2,r2,r3
 4644 0020 131C     	 mov r3,r2
 4645 0022 7A68     	 ldr r2,[r7,#4]
 4646 0024 1340     	 and r3,r2
 4647 0026 02D1     	 bne .L335
2404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        word_data = E_EEPROM_XMC1_ALL_ZEROS;
 4648              	 .loc 2 2405 0
 4649 0028 0023     	 mov r3,#0
 4650 002a 7B61     	 str r3,[r7,#20]
 4651 002c 02E0     	 b .L336
 4652              	.L335:
2406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        word_data = E_EEPROM_XMC1_ALL_ONES;
 4653              	 .loc 2 2409 0
 4654 002e 0123     	 mov r3,#1
 4655 0030 5B42     	 neg r3,r3
 4656 0032 7B61     	 str r3,[r7,#20]
 4657              	.L336:
2410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
 4658              	 .loc 2 2411 0
 4659 0034 0023     	 mov r3,#0
 4660 0036 FB61     	 str r3,[r7,#28]
 4661 0038 08E0     	 b .L337
 4662              	.L338:
2412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        *array_ptr = word_data;
 4663              	 .loc 2 2413 0 discriminator 3
 4664 003a 3B69     	 ldr r3,[r7,#16]
 4665 003c 7A69     	 ldr r2,[r7,#20]
 4666 003e 1A60     	 str r2,[r3]
2414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        array_ptr++;
 4667              	 .loc 2 2414 0 discriminator 3
 4668 0040 3B69     	 ldr r3,[r7,#16]
 4669 0042 0433     	 add r3,r3,#4
 4670 0044 3B61     	 str r3,[r7,#16]
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4671              	 .loc 2 2411 0 discriminator 3
 4672 0046 FB69     	 ldr r3,[r7,#28]
 4673 0048 0133     	 add r3,r3,#1
 4674 004a FB61     	 str r3,[r7,#28]
 4675              	.L337:
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4676              	 .loc 2 2411 0 is_stmt 0 discriminator 1
 4677 004c FB69     	 ldr r3,[r7,#28]
 4678 004e 032B     	 cmp r3,#3
 4679 0050 F3D9     	 bls .L338
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4680              	 .loc 2 2401 0 is_stmt 1 discriminator 2
 4681 0052 BB69     	 ldr r3,[r7,#24]
 4682 0054 0133     	 add r3,r3,#1
 4683 0056 BB61     	 str r3,[r7,#24]
 4684              	.L334:
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4685              	 .loc 2 2401 0 is_stmt 0 discriminator 1
 4686 0058 BB69     	 ldr r3,[r7,#24]
 4687 005a 032B     	 cmp r3,#3
 4688 005c DDD9     	 bls .L339
2415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Fill the first rest 12 blocks of the page with all ones*/
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
 4689              	 .loc 2 2419 0 is_stmt 1
 4690 005e 0023     	 mov r3,#0
 4691 0060 FB61     	 str r3,[r7,#28]
 4692 0062 09E0     	 b .L340
 4693              	.L341:
2420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     *array_ptr = E_EEPROM_XMC1_ALL_ONES;
 4694              	 .loc 2 2421 0 discriminator 3
 4695 0064 3B69     	 ldr r3,[r7,#16]
 4696 0066 0122     	 mov r2,#1
 4697 0068 5242     	 neg r2,r2
 4698 006a 1A60     	 str r2,[r3]
2422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     array_ptr++;
 4699              	 .loc 2 2422 0 discriminator 3
 4700 006c 3B69     	 ldr r3,[r7,#16]
 4701 006e 0433     	 add r3,r3,#4
 4702 0070 3B61     	 str r3,[r7,#16]
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4703              	 .loc 2 2419 0 discriminator 3
 4704 0072 FB69     	 ldr r3,[r7,#28]
 4705 0074 0133     	 add r3,r3,#1
 4706 0076 FB61     	 str r3,[r7,#28]
 4707              	.L340:
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4708              	 .loc 2 2419 0 is_stmt 0 discriminator 1
 4709 0078 FB69     	 ldr r3,[r7,#28]
 4710 007a 2F2B     	 cmp r3,#47
 4711 007c F2D9     	 bls .L341
2423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4712              	 .loc 2 2425 0 is_stmt 1
 4713 007e BD46     	 mov sp,r7
 4714 0080 08B0     	 add sp,sp,#32
 4715              	 
 4716 0082 80BD     	 pop {r7,pc}
 4717              	.L343:
 4718              	 .align 2
 4719              	.L342:
 4720 0084 00000000 	 .word E_EEPROM_XMC1_0
 4721              	 .cfi_endproc
 4722              	.LFE89:
 4724              	 .section .text.E_EEPROM_XMC1_lEraseBank,"ax",%progbits
 4725              	 .align 2
 4726              	 .code 16
 4727              	 .thumb_func
 4729              	E_EEPROM_XMC1_lEraseBank:
 4730              	.LFB90:
2426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : page_address - Bank end address
2429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Erases the particular bank
2433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address)
2435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4731              	 .loc 2 2435 0
 4732              	 .cfi_startproc
 4733 0000 80B5     	 push {r7,lr}
 4734              	.LCFI128:
 4735              	 .cfi_def_cfa_offset 8
 4736              	 .cfi_offset 7,-8
 4737              	 .cfi_offset 14,-4
 4738 0002 84B0     	 sub sp,sp,#16
 4739              	.LCFI129:
 4740              	 .cfi_def_cfa_offset 24
 4741 0004 00AF     	 add r7,sp,#0
 4742              	.LCFI130:
 4743              	 .cfi_def_cfa_register 7
 4744 0006 7860     	 str r0,[r7,#4]
2436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   page_address = ((page_address) - E_EEPROM_XMC1_FLASH_PAGE_SIZE );
 4745              	 .loc 2 2439 0
 4746 0008 7B68     	 ldr r3,[r7,#4]
 4747 000a 013B     	 sub r3,r3,#1
 4748 000c FF3B     	 sub r3,r3,#255
 4749 000e 7B60     	 str r3,[r7,#4]
2440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   page_address += 1U;
 4750              	 .loc 2 2440 0
 4751 0010 7B68     	 ldr r3,[r7,#4]
 4752 0012 0133     	 add r3,r3,#1
 4753 0014 7B60     	 str r3,[r7,#4]
2441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 4754              	 .loc 2 2441 0
 4755 0016 0023     	 mov r3,#0
 4756 0018 FB60     	 str r3,[r7,#12]
 4757              	.L346:
2442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
2446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 4758              	 .loc 2 2446 0 discriminator 2
 4759 001a FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lEraseSinglePage(page_address);
 4760              	 .loc 2 2448 0 discriminator 2
 4761 001e 7B68     	 ldr r3,[r7,#4]
 4762 0020 181C     	 mov r0,r3
 4763 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseSinglePage
2449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGetFlashStatus();
 4764              	 .loc 2 2450 0 discriminator 2
 4765 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4766 002a 031C     	 mov r3,r0
 4767 002c BB60     	 str r3,[r7,#8]
2451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     page_address = page_address - (E_EEPROM_XMC1_FLASH_PAGE_SIZE );
 4768              	 .loc 2 2452 0 discriminator 2
 4769 002e 7B68     	 ldr r3,[r7,#4]
 4770 0030 013B     	 sub r3,r3,#1
 4771 0032 FF3B     	 sub r3,r3,#255
 4772 0034 7B60     	 str r3,[r7,#4]
2453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx++;
 4773              	 .loc 2 2453 0 discriminator 2
 4774 0036 FB68     	 ldr r3,[r7,#12]
 4775 0038 0133     	 add r3,r3,#1
 4776 003a FB60     	 str r3,[r7,#12]
2454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((indx <E_EEPROM_XMC1_BANK_PAGES) && (status == 0U));
 4777              	 .loc 2 2454 0 discriminator 2
 4778 003c FB68     	 ldr r3,[r7,#12]
 4779 003e 012B     	 cmp r3,#1
 4780 0040 02D8     	 bhi .L345
 4781              	 .loc 2 2454 0 is_stmt 0 discriminator 1
 4782 0042 BB68     	 ldr r3,[r7,#8]
 4783 0044 002B     	 cmp r3,#0
 4784 0046 E8D0     	 beq .L346
 4785              	.L345:
2455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 4786              	 .loc 2 2456 0 is_stmt 1
 4787 0048 BB68     	 ldr r3,[r7,#8]
2457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4788              	 .loc 2 2457 0
 4789 004a 181C     	 mov r0,r3
 4790 004c BD46     	 mov sp,r7
 4791 004e 04B0     	 add sp,sp,#16
 4792              	 
 4793 0050 80BD     	 pop {r7,pc}
 4794              	 .cfi_endproc
 4795              	.LFE90:
 4797 0052 C046     	 .section .text.E_EEPROM_XMC1_lGCWrite,"ax",%progbits
 4798              	 .align 2
 4799              	 .code 16
 4800              	 .thumb_func
 4802              	E_EEPROM_XMC1_lGCWrite:
 4803              	.LFB91:
2458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_address  - flash address
2461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Local function to write data into specified location during GC operation
2465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address)
2467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4804              	 .loc 2 2467 0
 4805              	 .cfi_startproc
 4806 0000 80B5     	 push {r7,lr}
 4807              	.LCFI131:
 4808              	 .cfi_def_cfa_offset 8
 4809              	 .cfi_offset 7,-8
 4810              	 .cfi_offset 14,-4
 4811 0002 84B0     	 sub sp,sp,#16
 4812              	.LCFI132:
 4813              	 .cfi_def_cfa_offset 24
 4814 0004 00AF     	 add r7,sp,#0
 4815              	.LCFI133:
 4816              	 .cfi_def_cfa_register 7
 4817 0006 7860     	 str r0,[r7,#4]
2468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4818              	 .loc 2 2471 0
 4819 0008 0A4B     	 ldr r3,.L350
 4820 000a 5B68     	 ldr r3,[r3,#4]
 4821 000c FB60     	 str r3,[r7,#12]
2472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 4822              	 .loc 2 2474 0
 4823 000e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write a single block into flash*/
2477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lWriteSingleBlock(block_address, (uint32_t*)(void*)data_ptr->read_write_buffer);
 4824              	 .loc 2 2477 0
 4825 0012 FB68     	 ldr r3,[r7,#12]
 4826 0014 4433     	 add r3,r3,#68
 4827 0016 7A68     	 ldr r2,[r7,#4]
 4828 0018 101C     	 mov r0,r2
 4829 001a 191C     	 mov r1,r3
 4830 001c FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSingleBlock
2478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 4831              	 .loc 2 2478 0
 4832 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4833 0024 031C     	 mov r3,r0
 4834 0026 BB60     	 str r3,[r7,#8]
2479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 4835              	 .loc 2 2479 0
 4836 0028 BB68     	 ldr r3,[r7,#8]
2480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4837              	 .loc 2 2480 0
 4838 002a 181C     	 mov r0,r3
 4839 002c BD46     	 mov sp,r7
 4840 002e 04B0     	 add sp,sp,#16
 4841              	 
 4842 0030 80BD     	 pop {r7,pc}
 4843              	.L351:
 4844 0032 C046     	 .align 2
 4845              	.L350:
 4846 0034 00000000 	 .word E_EEPROM_XMC1_0
 4847              	 .cfi_endproc
 4848              	.LFE91:
 4850              	 .section .text.E_EEPROM_XMC1_lLocalWrite,"ax",%progbits
 4851              	 .align 2
 4852              	 .code 16
 4853              	 .thumb_func
 4855              	E_EEPROM_XMC1_lLocalWrite:
 4856              	.LFB92:
2481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   invalidate    - (0 = normal write / 1 = invalidate block)
2487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Common local write function to do write block function or invalidate block.
2490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lLocalWrite( uint8_t block_number,
2492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                            uint8_t* data_buffer_ptr,
2493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                            uint32_t invalidate)
2494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4857              	 .loc 2 2494 0
 4858              	 .cfi_startproc
 4859 0000 80B5     	 push {r7,lr}
 4860              	.LCFI134:
 4861              	 .cfi_def_cfa_offset 8
 4862              	 .cfi_offset 7,-8
 4863              	 .cfi_offset 14,-4
 4864 0002 8CB0     	 sub sp,sp,#48
 4865              	.LCFI135:
 4866              	 .cfi_def_cfa_offset 56
 4867 0004 00AF     	 add r7,sp,#0
 4868              	.LCFI136:
 4869              	 .cfi_def_cfa_register 7
 4870 0006 B960     	 str r1,[r7,#8]
 4871 0008 7A60     	 str r2,[r7,#4]
 4872 000a 0F23     	 mov r3,#15
 4873 000c FB18     	 add r3,r7,r3
 4874 000e 021C     	 add r2,r0,#0
 4875 0010 1A70     	 strb r2,[r3]
2495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_blocks;
2497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t perform_write;
2498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
2499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_blocks;
2500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
2502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4876              	 .loc 2 2503 0
 4877 0012 3B4B     	 ldr r3,.L363
 4878 0014 5B68     	 ldr r3,[r3,#4]
 4879 0016 7B62     	 str r3,[r7,#36]
2504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 4880              	 .loc 2 2505 0
 4881 0018 0023     	 mov r3,#0
 4882 001a FB62     	 str r3,[r7,#44]
2506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   perform_write = 0U;
 4883              	 .loc 2 2506 0
 4884 001c 0023     	 mov r3,#0
 4885 001e BB62     	 str r3,[r7,#40]
2507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 4886              	 .loc 2 2507 0
 4887 0020 0F23     	 mov r3,#15
 4888 0022 FB18     	 add r3,r7,r3
 4889 0024 1B78     	 ldrb r3,[r3]
 4890 0026 181C     	 mov r0,r3
 4891 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 4892 002c 031C     	 mov r3,r0
 4893 002e 3B62     	 str r3,[r7,#32]
2508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 4894              	 .loc 2 2508 0
 4895 0030 334B     	 ldr r3,.L363
 4896 0032 1A68     	 ldr r2,[r3]
 4897 0034 3B6A     	 ldr r3,[r7,#32]
 4898 0036 DB00     	 lsl r3,r3,#3
 4899 0038 D318     	 add r3,r2,r3
 4900 003a FB61     	 str r3,[r7,#28]
2509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 4901              	 .loc 2 2510 0
 4902 003c FB69     	 ldr r3,[r7,#28]
 4903 003e 5B68     	 ldr r3,[r3,#4]
 4904 0040 181C     	 mov r0,r3
 4905 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 4906 0046 031C     	 mov r3,r0
 4907 0048 BB61     	 str r3,[r7,#24]
2511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 4908              	 .loc 2 2511 0
 4909 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 4910 004e 031C     	 mov r3,r0
 4911 0050 7B61     	 str r3,[r7,#20]
2512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (remaining_blocks < flash_blocks)
 4912              	 .loc 2 2513 0
 4913 0052 7A69     	 ldr r2,[r7,#20]
 4914 0054 BB69     	 ldr r3,[r7,#24]
 4915 0056 9A42     	 cmp r2,r3
 4916 0058 28D2     	 bcs .L353
2514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Doesn't do Garbage collection if, GUI option garbage collection is disabled*/
2516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (E_EEPROM_XMC1_HANDLE_PTR->garbage_collection == 1U)
 4917              	 .loc 2 2516 0
 4918 005a 294B     	 ldr r3,.L363
 4919 005c 1B7B     	 ldrb r3,[r3,#12]
 4920 005e 012B     	 cmp r3,#1
 4921 0060 21D1     	 bne .L354
2517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Request for Garbage Collection and continue */
2519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
 4922              	 .loc 2 2519 0
 4923 0062 7A6A     	 ldr r2,[r7,#36]
 4924 0064 AE23     	 mov r3,#174
 4925 0066 5B00     	 lsl r3,r3,#1
 4926 0068 0421     	 mov r1,#4
 4927 006a D150     	 str r1,[r2,r3]
2520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lGarbageCollection();
 4928              	 .loc 2 2520 0
 4929 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
2521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*Check the size of the GC requested block to check if space is available in the new bank or 
2523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 4930              	 .loc 2 2523 0
 4931 0070 FB69     	 ldr r3,[r7,#28]
 4932 0072 5B68     	 ldr r3,[r3,#4]
 4933 0074 181C     	 mov r0,r3
 4934 0076 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 4935 007a 031C     	 mov r3,r0
 4936 007c BB61     	 str r3,[r7,#24]
2524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 4937              	 .loc 2 2524 0
 4938 007e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 4939 0082 031C     	 mov r3,r0
 4940 0084 7B61     	 str r3,[r7,#20]
2525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check for GC overflows the complete space in the new bank, hence cant write the GC trigger
2527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((remaining_blocks >= flash_blocks)&&(data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE))
 4941              	 .loc 2 2527 0
 4942 0086 7A69     	 ldr r2,[r7,#20]
 4943 0088 BB69     	 ldr r3,[r7,#24]
 4944 008a 9A42     	 cmp r2,r3
 4945 008c 08D3     	 bcc .L355
 4946              	 .loc 2 2527 0 is_stmt 0 discriminator 1
 4947 008e 7A6A     	 ldr r2,[r7,#36]
 4948 0090 AE23     	 mov r3,#174
 4949 0092 5B00     	 lsl r3,r3,#1
 4950 0094 D358     	 ldr r3,[r2,r3]
 4951 0096 0A2B     	 cmp r3,#10
 4952 0098 02D1     	 bne .L355
2528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         perform_write = 1U;
 4953              	 .loc 2 2529 0 is_stmt 1
 4954 009a 0123     	 mov r3,#1
 4955 009c BB62     	 str r3,[r7,#40]
 4956 009e 07E0     	 b .L358
 4957              	.L355:
2530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
2532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 4958              	 .loc 2 2533 0
 4959 00a0 0523     	 mov r3,#5
 4960 00a2 FB62     	 str r3,[r7,#44]
 4961 00a4 04E0     	 b .L358
 4962              	.L354:
2534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_MEMORY_BANK_FULL;
 4963              	 .loc 2 2538 0
 4964 00a6 0623     	 mov r3,#6
 4965 00a8 FB62     	 str r3,[r7,#44]
 4966 00aa 01E0     	 b .L358
 4967              	.L353:
2539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     perform_write = 1U;
 4968              	 .loc 2 2543 0
 4969 00ac 0123     	 mov r3,#1
 4970 00ae BB62     	 str r3,[r7,#40]
 4971              	.L358:
2544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write operation Starts */
2546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (perform_write == 1U)
 4972              	 .loc 2 2546 0
 4973 00b0 BB6A     	 ldr r3,[r7,#40]
 4974 00b2 012B     	 cmp r3,#1
 4975 00b4 1FD1     	 bne .L359
2547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->written_block_counter = 0U;
 4976              	 .loc 2 2548 0
 4977 00b6 7B6A     	 ldr r3,[r7,#36]
 4978 00b8 0022     	 mov r2,#0
 4979 00ba 1A64     	 str r2,[r3,#64]
2549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (invalidate == 1U)
 4980              	 .loc 2 2549 0
 4981 00bc 7B68     	 ldr r3,[r7,#4]
 4982 00be 012B     	 cmp r3,#1
 4983 00c0 0AD1     	 bne .L360
2550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lHandleInvalidReq(block_number, user_block_index);
 4984              	 .loc 2 2551 0
 4985 00c2 0F23     	 mov r3,#15
 4986 00c4 FB18     	 add r3,r7,r3
 4987 00c6 1A78     	 ldrb r2,[r3]
 4988 00c8 3B6A     	 ldr r3,[r7,#32]
 4989 00ca 101C     	 mov r0,r2
 4990 00cc 191C     	 mov r1,r3
 4991 00ce FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleInvalidReq
 4992 00d2 031C     	 mov r3,r0
 4993 00d4 FB62     	 str r3,[r7,#44]
 4994 00d6 09E0     	 b .L361
 4995              	.L360:
2552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lHandleWriteReq(block_number, data_buffer_ptr);
 4996              	 .loc 2 2555 0
 4997 00d8 0F23     	 mov r3,#15
 4998 00da FB18     	 add r3,r7,r3
 4999 00dc 1A78     	 ldrb r2,[r3]
 5000 00de BB68     	 ldr r3,[r7,#8]
 5001 00e0 101C     	 mov r0,r2
 5002 00e2 191C     	 mov r1,r3
 5003 00e4 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleWriteReq
 5004 00e8 031C     	 mov r3,r0
 5005 00ea FB62     	 str r3,[r7,#44]
 5006              	.L361:
2556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status != 0U)
 5007              	 .loc 2 2557 0
 5008 00ec FB6A     	 ldr r3,[r7,#44]
 5009 00ee 002B     	 cmp r3,#0
 5010 00f0 01D0     	 beq .L359
2558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 5011              	 .loc 2 2559 0
 5012 00f2 0123     	 mov r3,#1
 5013 00f4 FB62     	 str r3,[r7,#44]
 5014              	.L359:
2560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5015              	 .loc 2 2562 0
 5016 00f6 FB6A     	 ldr r3,[r7,#44]
2563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5017              	 .loc 2 2563 0
 5018 00f8 181C     	 mov r0,r3
 5019 00fa BD46     	 mov sp,r7
 5020 00fc 0CB0     	 add sp,sp,#48
 5021              	 
 5022 00fe 80BD     	 pop {r7,pc}
 5023              	.L364:
 5024              	 .align 2
 5025              	.L363:
 5026 0100 00000000 	 .word E_EEPROM_XMC1_0
 5027              	 .cfi_endproc
 5028              	.LFE92:
 5030              	 .section .text.E_EEPROM_XMC1_lHandleWriteReq,"ax",%progbits
 5031              	 .align 2
 5032              	 .code 16
 5033              	 .thumb_func
 5035              	E_EEPROM_XMC1_lHandleWriteReq:
 5036              	.LFB93:
2564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Handle function to write one complete data block into flash.
2572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr)
2574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5037              	 .loc 2 2574 0
 5038              	 .cfi_startproc
 5039 0000 80B5     	 push {r7,lr}
 5040              	.LCFI137:
 5041              	 .cfi_def_cfa_offset 8
 5042              	 .cfi_offset 7,-8
 5043              	 .cfi_offset 14,-4
 5044 0002 88B0     	 sub sp,sp,#32
 5045              	.LCFI138:
 5046              	 .cfi_def_cfa_offset 40
 5047 0004 00AF     	 add r7,sp,#0
 5048              	.LCFI139:
 5049              	 .cfi_def_cfa_register 7
 5050 0006 021C     	 mov r2,r0
 5051 0008 3960     	 str r1,[r7]
 5052 000a FB1D     	 add r3,r7,#7
 5053 000c 1A70     	 strb r2,[r3]
2575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
2576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
2577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
2580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5054              	 .loc 2 2581 0
 5055 000e 534B     	 ldr r3,.L379
 5056 0010 5B68     	 ldr r3,[r3,#4]
 5057 0012 BB61     	 str r3,[r7,#24]
2582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 5058              	 .loc 2 2584 0
 5059 0014 FB1D     	 add r3,r7,#7
 5060 0016 1B78     	 ldrb r3,[r3]
 5061 0018 181C     	 mov r0,r3
 5062 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 5063 001e 031C     	 mov r3,r0
 5064 0020 7B61     	 str r3,[r7,#20]
2585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 5065              	 .loc 2 2585 0
 5066 0022 4E4B     	 ldr r3,.L379
 5067 0024 1A68     	 ldr r2,[r3]
 5068 0026 7B69     	 ldr r3,[r7,#20]
 5069 0028 DB00     	 lsl r3,r3,#3
 5070 002a D318     	 add r3,r2,r3
 5071 002c 3B61     	 str r3,[r7,#16]
2586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = block_ptr->size;
 5072              	 .loc 2 2586 0
 5073 002e 3B69     	 ldr r3,[r7,#16]
 5074 0030 5B68     	 ldr r3,[r3,#4]
 5075 0032 FB60     	 str r3,[r7,#12]
2587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_bytes_count = 0U;
 5076              	 .loc 2 2587 0
 5077 0034 BA69     	 ldr r2,[r7,#24]
 5078 0036 AC23     	 mov r3,#172
 5079 0038 5B00     	 lsl r3,r3,#1
 5080 003a 0021     	 mov r1,#0
 5081 003c D150     	 str r1,[r2,r3]
2588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_state = E_EEPROM_XMC1_FIRST_BLOCK_WRITE;
 5082              	 .loc 2 2588 0
 5083 003e BA69     	 ldr r2,[r7,#24]
 5084 0040 B823     	 mov r3,#184
 5085 0042 5B00     	 lsl r3,r3,#1
 5086 0044 0121     	 mov r1,#1
 5087 0046 D150     	 str r1,[r2,r3]
2589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 5088              	 .loc 2 2589 0
 5089 0048 0023     	 mov r3,#0
 5090 004a FB61     	 str r3,[r7,#28]
 5091              	.L375:
2590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->user_write_state)
 5092              	 .loc 2 2592 0
 5093 004c BA69     	 ldr r2,[r7,#24]
 5094 004e B823     	 mov r3,#184
 5095 0050 5B00     	 lsl r3,r3,#1
 5096 0052 D358     	 ldr r3,[r2,r3]
 5097 0054 022B     	 cmp r3,#2
 5098 0056 02D0     	 beq .L367
 5099 0058 032B     	 cmp r3,#3
 5100 005a 12D0     	 beq .L368
 5101 005c 4AE0     	 b .L378
 5102              	.L367:
2593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_NEXT_BLOCK_WRITE:
2595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lWriteDataBlock();
 5103              	 .loc 2 2595 0
 5104 005e FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5105 0062 031C     	 mov r3,r0
 5106 0064 FB61     	 str r3,[r7,#28]
2596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == (uint32_t)0U)
 5107              	 .loc 2 2596 0
 5108 0066 FB69     	 ldr r3,[r7,#28]
 5109 0068 002B     	 cmp r3,#0
 5110 006a 09D1     	 bne .L369
2597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lPopulateNextBlock(block_number,data_buffer_ptr,block_size);
 5111              	 .loc 2 2598 0
 5112 006c FB1D     	 add r3,r7,#7
 5113 006e 1978     	 ldrb r1,[r3]
 5114 0070 3A68     	 ldr r2,[r7]
 5115 0072 FB68     	 ldr r3,[r7,#12]
 5116 0074 081C     	 mov r0,r1
 5117 0076 111C     	 mov r1,r2
 5118 0078 1A1C     	 mov r2,r3
 5119 007a FFF7FEFF 	 bl E_EEPROM_XMC1_lPopulateNextBlock
2599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5120              	 .loc 2 2600 0
 5121 007e 43E0     	 b .L370
 5122              	.L369:
 5123 0080 42E0     	 b .L370
 5124              	.L368:
2601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_LAST_BLOCK_WRITE:
2603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lWriteDataBlock();
 5125              	 .loc 2 2603 0
 5126 0082 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5127 0086 031C     	 mov r3,r0
 5128 0088 FB61     	 str r3,[r7,#28]
2604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == (uint32_t)0U)
 5129              	 .loc 2 2604 0
 5130 008a FB69     	 ldr r3,[r7,#28]
 5131 008c 002B     	 cmp r3,#0
 5132 008e 30D1     	 bne .L371
2605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Mark the block as inconsistent */
2607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
 5133              	 .loc 2 2607 0
 5134 0090 BB69     	 ldr r3,[r7,#24]
 5135 0092 596B     	 ldr r1,[r3,#52]
 5136 0094 BB69     	 ldr r3,[r7,#24]
 5137 0096 7A69     	 ldr r2,[r7,#20]
 5138 0098 D200     	 lsl r2,r2,#3
 5139 009a D150     	 str r1,[r2,r3]
2608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].status.valid = 1U;
 5140              	 .loc 2 2608 0
 5141 009c BA69     	 ldr r2,[r7,#24]
 5142 009e 7B69     	 ldr r3,[r7,#20]
 5143 00a0 DB00     	 lsl r3,r3,#3
 5144 00a2 D318     	 add r3,r2,r3
 5145 00a4 1A79     	 ldrb r2,[r3,#4]
 5146 00a6 0121     	 mov r1,#1
 5147 00a8 0A43     	 orr r2,r1
 5148 00aa 1A71     	 strb r2,[r3,#4]
2609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].status.consistent = 1U;
 5149              	 .loc 2 2609 0
 5150 00ac BA69     	 ldr r2,[r7,#24]
 5151 00ae 7B69     	 ldr r3,[r7,#20]
 5152 00b0 DB00     	 lsl r3,r3,#3
 5153 00b2 D318     	 add r3,r2,r3
 5154 00b4 1A79     	 ldrb r2,[r3,#4]
 5155 00b6 0221     	 mov r1,#2
 5156 00b8 0A43     	 orr r2,r1
 5157 00ba 1A71     	 strb r2,[r3,#4]
2610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (E_EEPROM_XMC1_HANDLE_PTR->data_block_crc ==1U)
 5158              	 .loc 2 2610 0
 5159 00bc 274B     	 ldr r3,.L379
 5160 00be DB7A     	 ldrb r3,[r3,#11]
 5161 00c0 012B     	 cmp r3,#1
 5162 00c2 08D1     	 bne .L372
2611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* Updated Cache table Block Header status as CRC enabled block*/
2613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_info[user_block_index].status.crc = 1U;
 5163              	 .loc 2 2613 0
 5164 00c4 BA69     	 ldr r2,[r7,#24]
 5165 00c6 7B69     	 ldr r3,[r7,#20]
 5166 00c8 DB00     	 lsl r3,r3,#3
 5167 00ca D318     	 add r3,r2,r3
 5168 00cc 1A79     	 ldrb r2,[r3,#4]
 5169 00ce 0821     	 mov r1,#8
 5170 00d0 0A43     	 orr r2,r1
 5171 00d2 1A71     	 strb r2,[r3,#4]
 5172 00d4 07E0     	 b .L373
 5173              	.L372:
2614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* Updated Cache table Block Header status as CRC disabled block*/
2618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_info[user_block_index].status.crc = 0U;
 5174              	 .loc 2 2618 0
 5175 00d6 BA69     	 ldr r2,[r7,#24]
 5176 00d8 7B69     	 ldr r3,[r7,#20]
 5177 00da DB00     	 lsl r3,r3,#3
 5178 00dc D318     	 add r3,r2,r3
 5179 00de 1A79     	 ldrb r2,[r3,#4]
 5180 00e0 0821     	 mov r1,#8
 5181 00e2 8A43     	 bic r2,r1
 5182 00e4 1A71     	 strb r2,[r3,#4]
 5183              	.L373:
2619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->user_write_state = E_EEPROM_XMC1_BLOCK_WRITE_IDLE;
 5184              	 .loc 2 2621 0
 5185 00e6 BA69     	 ldr r2,[r7,#24]
 5186 00e8 B823     	 mov r3,#184
 5187 00ea 5B00     	 lsl r3,r3,#1
 5188 00ec 0021     	 mov r1,#0
 5189 00ee D150     	 str r1,[r2,r3]
2622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5190              	 .loc 2 2623 0
 5191 00f0 0AE0     	 b .L370
 5192              	.L371:
 5193 00f2 09E0     	 b .L370
 5194              	.L378:
2624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:
2626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_
 5195              	 .loc 2 2626 0
 5196 00f4 FB1D     	 add r3,r7,#7
 5197 00f6 1978     	 ldrb r1,[r3]
 5198 00f8 3A68     	 ldr r2,[r7]
 5199 00fa FB68     	 ldr r3,[r7,#12]
 5200 00fc 081C     	 mov r0,r1
 5201 00fe 111C     	 mov r1,r2
 5202 0100 1A1C     	 mov r2,r3
 5203 0102 FFF7FEFF 	 bl E_EEPROM_XMC1_lPopulateFirstBlock
2627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5204              	 .loc 2 2627 0
 5205 0106 C046     	 mov r8,r8
 5206              	.L370:
2628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
 5207              	 .loc 2 2629 0
 5208 0108 FB69     	 ldr r3,[r7,#28]
 5209 010a 002B     	 cmp r3,#0
 5210 010c 05D1     	 bne .L374
 5211              	 .loc 2 2629 0 is_stmt 0 discriminator 1
 5212 010e BA69     	 ldr r2,[r7,#24]
 5213 0110 B823     	 mov r3,#184
 5214 0112 5B00     	 lsl r3,r3,#1
 5215 0114 D358     	 ldr r3,[r2,r3]
 5216 0116 002B     	 cmp r3,#0
 5217 0118 98D1     	 bne .L375
 5218              	.L374:
2630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
 5219              	 .loc 2 2631 0 is_stmt 1
 5220 011a BB69     	 ldr r3,[r7,#24]
 5221 011c 5A6B     	 ldr r2,[r3,#52]
2632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                    (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 5222              	 .loc 2 2632 0
 5223 011e BB69     	 ldr r3,[r7,#24]
 5224 0120 1B6C     	 ldr r3,[r3,#64]
 5225 0122 1B01     	 lsl r3,r3,#4
2631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                    (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 5226              	 .loc 2 2631 0
 5227 0124 D218     	 add r2,r2,r3
 5228 0126 BB69     	 ldr r3,[r7,#24]
 5229 0128 5A63     	 str r2,[r3,#52]
2633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status != 0U)
 5230              	 .loc 2 2633 0
 5231 012a FB69     	 ldr r3,[r7,#28]
 5232 012c 002B     	 cmp r3,#0
 5233 012e 0FD0     	 beq .L376
2634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.valid = 1U;
 5234              	 .loc 2 2635 0
 5235 0130 BA69     	 ldr r2,[r7,#24]
 5236 0132 7B69     	 ldr r3,[r7,#20]
 5237 0134 DB00     	 lsl r3,r3,#3
 5238 0136 D318     	 add r3,r2,r3
 5239 0138 1A79     	 ldrb r2,[r3,#4]
 5240 013a 0121     	 mov r1,#1
 5241 013c 0A43     	 orr r2,r1
 5242 013e 1A71     	 strb r2,[r3,#4]
2636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 0U;
 5243              	 .loc 2 2636 0
 5244 0140 BA69     	 ldr r2,[r7,#24]
 5245 0142 7B69     	 ldr r3,[r7,#20]
 5246 0144 DB00     	 lsl r3,r3,#3
 5247 0146 D318     	 add r3,r2,r3
 5248 0148 1A79     	 ldrb r2,[r3,#4]
 5249 014a 0221     	 mov r1,#2
 5250 014c 8A43     	 bic r2,r1
 5251 014e 1A71     	 strb r2,[r3,#4]
 5252              	.L376:
2637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5253              	 .loc 2 2638 0
 5254 0150 FB69     	 ldr r3,[r7,#28]
2639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5255              	 .loc 2 2639 0
 5256 0152 181C     	 mov r0,r3
 5257 0154 BD46     	 mov sp,r7
 5258 0156 08B0     	 add sp,sp,#32
 5259              	 
 5260 0158 80BD     	 pop {r7,pc}
 5261              	.L380:
 5262 015a C046     	 .align 2
 5263              	.L379:
 5264 015c 00000000 	 .word E_EEPROM_XMC1_0
 5265              	 .cfi_endproc
 5266              	.LFE93:
 5268              	 .section .text.E_EEPROM_XMC1_lHandleInvalidReq,"ax",%progbits
 5269              	 .align 2
 5270              	 .code 16
 5271              	 .thumb_func
 5273              	E_EEPROM_XMC1_lHandleInvalidReq:
 5274              	.LFB94:
2640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number - User block number / ID
2642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   user_block_index  - Index of the logical block
2643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Write one block with all data element as 0xFF to invalidate a block.
2647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t  user_block_index)
2649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5275              	 .loc 2 2649 0
 5276              	 .cfi_startproc
 5277 0000 80B5     	 push {r7,lr}
 5278              	.LCFI140:
 5279              	 .cfi_def_cfa_offset 8
 5280              	 .cfi_offset 7,-8
 5281              	 .cfi_offset 14,-4
 5282 0002 86B0     	 sub sp,sp,#24
 5283              	.LCFI141:
 5284              	 .cfi_def_cfa_offset 32
 5285 0004 00AF     	 add r7,sp,#0
 5286              	.LCFI142:
 5287              	 .cfi_def_cfa_register 7
 5288 0006 021C     	 mov r2,r0
 5289 0008 3960     	 str r1,[r7]
 5290 000a FB1D     	 add r3,r7,#7
 5291 000c 1A70     	 strb r2,[r3]
2650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_byte_count;
2652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* read_write_buffer_ptr;
2653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5292              	 .loc 2 2655 0
 5293 000e 264B     	 ldr r3,.L387
 5294 0010 5B68     	 ldr r3,[r3,#4]
 5295 0012 3B61     	 str r3,[r7,#16]
2656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5296              	 .loc 2 2656 0
 5297 0014 3B69     	 ldr r3,[r7,#16]
 5298 0016 4433     	 add r3,r3,#68
 5299 0018 FB60     	 str r3,[r7,#12]
2657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *read_write_buffer_ptr = block_number;
 5300              	 .loc 2 2657 0
 5301 001a FB68     	 ldr r3,[r7,#12]
 5302 001c FA1D     	 add r2,r7,#7
 5303 001e 1278     	 ldrb r2,[r2]
 5304 0020 1A70     	 strb r2,[r3]
2658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
 5305              	 .loc 2 2658 0
 5306 0022 FB68     	 ldr r3,[r7,#12]
 5307 0024 0133     	 add r3,r3,#1
 5308 0026 8022     	 mov r2,#128
 5309 0028 1A70     	 strb r2,[r3]
2659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;d
 5310              	 .loc 2 2661 0
 5311 002a 0223     	 mov r3,#2
 5312 002c 7B61     	 str r3,[r7,#20]
 5313 002e 07E0     	 b .L382
 5314              	.L383:
2662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5315              	 .loc 2 2663 0 discriminator 3
 5316 0030 FA68     	 ldr r2,[r7,#12]
 5317 0032 7B69     	 ldr r3,[r7,#20]
 5318 0034 D318     	 add r3,r2,r3
 5319 0036 FF22     	 mov r2,#255
 5320 0038 1A70     	 strb r2,[r3]
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 5321              	 .loc 2 2661 0 discriminator 3
 5322 003a 7B69     	 ldr r3,[r7,#20]
 5323 003c 0133     	 add r3,r3,#1
 5324 003e 7B61     	 str r3,[r7,#20]
 5325              	.L382:
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 5326              	 .loc 2 2661 0 is_stmt 0 discriminator 1
 5327 0040 7B69     	 ldr r3,[r7,#20]
 5328 0042 0F2B     	 cmp r3,#15
 5329 0044 F4D9     	 bls .L383
2664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lWriteDataBlock();
 5330              	 .loc 2 2666 0 is_stmt 1
 5331 0046 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5332 004a 031C     	 mov r3,r0
 5333 004c BB60     	 str r3,[r7,#8]
2667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 5334              	 .loc 2 2668 0
 5335 004e BB68     	 ldr r3,[r7,#8]
 5336 0050 002B     	 cmp r3,#0
 5337 0052 0ED1     	 bne .L384
2669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 1U;
 5338              	 .loc 2 2670 0
 5339 0054 3A69     	 ldr r2,[r7,#16]
 5340 0056 3B68     	 ldr r3,[r7]
 5341 0058 DB00     	 lsl r3,r3,#3
 5342 005a D318     	 add r3,r2,r3
 5343 005c 1A79     	 ldrb r2,[r3,#4]
 5344 005e 0221     	 mov r1,#2
 5345 0060 0A43     	 orr r2,r1
 5346 0062 1A71     	 strb r2,[r3,#4]
2671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
 5347              	 .loc 2 2671 0
 5348 0064 3B69     	 ldr r3,[r7,#16]
 5349 0066 596B     	 ldr r1,[r3,#52]
 5350 0068 3B69     	 ldr r3,[r7,#16]
 5351 006a 3A68     	 ldr r2,[r7]
 5352 006c D200     	 lsl r2,r2,#3
 5353 006e D150     	 str r1,[r2,r3]
 5354 0070 07E0     	 b .L385
 5355              	.L384:
2672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 0U;
 5356              	 .loc 2 2675 0
 5357 0072 3A69     	 ldr r2,[r7,#16]
 5358 0074 3B68     	 ldr r3,[r7]
 5359 0076 DB00     	 lsl r3,r3,#3
 5360 0078 D318     	 add r3,r2,r3
 5361 007a 1A79     	 ldrb r2,[r3,#4]
 5362 007c 0221     	 mov r1,#2
 5363 007e 8A43     	 bic r2,r1
 5364 0080 1A71     	 strb r2,[r3,#4]
 5365              	.L385:
2676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_info[user_block_index].status.valid = 0U;
 5366              	 .loc 2 2678 0
 5367 0082 3A69     	 ldr r2,[r7,#16]
 5368 0084 3B68     	 ldr r3,[r7]
 5369 0086 DB00     	 lsl r3,r3,#3
 5370 0088 D318     	 add r3,r2,r3
 5371 008a 1A79     	 ldrb r2,[r3,#4]
 5372 008c 0121     	 mov r1,#1
 5373 008e 8A43     	 bic r2,r1
 5374 0090 1A71     	 strb r2,[r3,#4]
2679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->next_free_block_addr = (E_EEPROM_XMC1_FLASH_BLOCK_SIZE + (uint32_t)(data_ptr->next_free
 5375              	 .loc 2 2679 0
 5376 0092 3B69     	 ldr r3,[r7,#16]
 5377 0094 5B6B     	 ldr r3,[r3,#52]
 5378 0096 1033     	 add r3,r3,#16
 5379 0098 1A1C     	 mov r2,r3
 5380 009a 3B69     	 ldr r3,[r7,#16]
 5381 009c 5A63     	 str r2,[r3,#52]
2680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5382              	 .loc 2 2681 0
 5383 009e BB68     	 ldr r3,[r7,#8]
2682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5384              	 .loc 2 2682 0
 5385 00a0 181C     	 mov r0,r3
 5386 00a2 BD46     	 mov sp,r7
 5387 00a4 06B0     	 add sp,sp,#24
 5388              	 
 5389 00a6 80BD     	 pop {r7,pc}
 5390              	.L388:
 5391              	 .align 2
 5392              	.L387:
 5393 00a8 00000000 	 .word E_EEPROM_XMC1_0
 5394              	 .cfi_endproc
 5395              	.LFE94:
 5397              	 .section .text.E_EEPROM_XMC1_lPopulateFirstBlock,"ax",%progbits
 5398              	 .align 2
 5399              	 .code 16
 5400              	 .thumb_func
 5402              	E_EEPROM_XMC1_lPopulateFirstBlock:
 5403              	.LFB95:
2683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Data buffer address
2687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             block_size - Length of data to be read
2688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
2690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Populates the first block with data elements starting from the passed data buff
2692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number,
2694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint8_t* user_data_buffer_ptr,
2695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint32_t block_size)
2696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5404              	 .loc 2 2696 0
 5405              	 .cfi_startproc
 5406 0000 80B5     	 push {r7,lr}
 5407              	.LCFI143:
 5408              	 .cfi_def_cfa_offset 8
 5409              	 .cfi_offset 7,-8
 5410              	 .cfi_offset 14,-4
 5411 0002 8AB0     	 sub sp,sp,#40
 5412              	.LCFI144:
 5413              	 .cfi_def_cfa_offset 48
 5414 0004 00AF     	 add r7,sp,#0
 5415              	.LCFI145:
 5416              	 .cfi_def_cfa_register 7
 5417 0006 B960     	 str r1,[r7,#8]
 5418 0008 7A60     	 str r2,[r7,#4]
 5419 000a 0F23     	 mov r3,#15
 5420 000c FB18     	 add r3,r7,r3
 5421 000e 021C     	 add r2,r0,#0
 5422 0010 1A70     	 strb r2,[r3]
2697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_bit;
2698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_buffer;
2699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_byte_count;
2700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* read_write_buffer_ptr;
2701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5423              	 .loc 2 2703 0
 5424 0012 2A4B     	 ldr r3,.L394
 5425 0014 5B68     	 ldr r3,[r3,#4]
 5426 0016 3B62     	 str r3,[r7,#32]
2704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5427              	 .loc 2 2704 0
 5428 0018 3B6A     	 ldr r3,[r7,#32]
 5429 001a 4433     	 add r3,r3,#68
 5430 001c FB61     	 str r3,[r7,#28]
2705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_state = E_EEPROM_XMC1_NEXT_BLOCK_WRITE;
 5431              	 .loc 2 2705 0
 5432 001e 3A6A     	 ldr r2,[r7,#32]
 5433 0020 B823     	 mov r3,#184
 5434 0022 5B00     	 lsl r3,r3,#1
 5435 0024 0221     	 mov r1,#2
 5436 0026 D150     	 str r1,[r2,r3]
2706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
2708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the dat
2709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,user_data_buffer_ptr,block_size);
2710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
2711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_bit = E_EEPROM_XMC1_CRC_BIT;
2712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #else
2713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
 5437              	 .loc 2 2713 0
 5438 0028 254B     	 ldr r3,.L394+4
 5439 002a BB61     	 str r3,[r7,#24]
2714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_bit = 0U;
 5440              	 .loc 2 2714 0
 5441 002c 0023     	 mov r3,#0
 5442 002e 7B61     	 str r3,[r7,#20]
2715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
2716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for d
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
 5443              	 .loc 2 2718 0
 5444 0030 0F23     	 mov r3,#15
 5445 0032 FB18     	 add r3,r7,r3
 5446 0034 1A78     	 ldrb r2,[r3]
2719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5447              	 .loc 2 2719 0
 5448 0036 7B69     	 ldr r3,[r7,#20]
 5449 0038 C021     	 mov r1,#192
 5450 003a 0B43     	 orr r3,r1
 5451 003c 1B02     	 lsl r3,r3,#8
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5452              	 .loc 2 2718 0
 5453 003e 1A43     	 orr r2,r3
2720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
2721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT
 5454              	 .loc 2 2721 0
 5455 0040 BB69     	 ldr r3,[r7,#24]
 5456 0042 1B04     	 lsl r3,r3,#16
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5457              	 .loc 2 2718 0
 5458 0044 1A43     	 orr r2,r3
 5459 0046 FB69     	 ldr r3,[r7,#28]
 5460 0048 1A60     	 str r2,[r3]
2722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_byte_count = E_EEPROM_XMC1_FOUR_BYTES;
 5461              	 .loc 2 2722 0
 5462 004a 0423     	 mov r3,#4
 5463 004c 7B62     	 str r3,[r7,#36]
 5464              	.L392:
2723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Add data to the write buffer from the user specified pointer */
2724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->user_write_bytes_count < block_size  )
 5465              	 .loc 2 2726 0
 5466 004e 3A6A     	 ldr r2,[r7,#32]
 5467 0050 AC23     	 mov r3,#172
 5468 0052 5B00     	 lsl r3,r3,#1
 5469 0054 D258     	 ldr r2,[r2,r3]
 5470 0056 7B68     	 ldr r3,[r7,#4]
 5471 0058 9A42     	 cmp r2,r3
 5472 005a 14D2     	 bcs .L390
2727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_by
 5473              	 .loc 2 2728 0
 5474 005c FA69     	 ldr r2,[r7,#28]
 5475 005e 7B6A     	 ldr r3,[r7,#36]
 5476 0060 D318     	 add r3,r2,r3
 5477 0062 396A     	 ldr r1,[r7,#32]
 5478 0064 AC22     	 mov r2,#172
 5479 0066 5200     	 lsl r2,r2,#1
 5480 0068 8A58     	 ldr r2,[r1,r2]
 5481 006a B968     	 ldr r1,[r7,#8]
 5482 006c 8A18     	 add r2,r1,r2
 5483 006e 1278     	 ldrb r2,[r2]
 5484 0070 1A70     	 strb r2,[r3]
2729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        (data_ptr->user_write_bytes_count)++;
 5485              	 .loc 2 2729 0
 5486 0072 3A6A     	 ldr r2,[r7,#32]
 5487 0074 AC23     	 mov r3,#172
 5488 0076 5B00     	 lsl r3,r3,#1
 5489 0078 D358     	 ldr r3,[r2,r3]
 5490 007a 591C     	 add r1,r3,#1
 5491 007c 3A6A     	 ldr r2,[r7,#32]
 5492 007e AC23     	 mov r3,#172
 5493 0080 5B00     	 lsl r3,r3,#1
 5494 0082 D150     	 str r1,[r2,r3]
 5495 0084 04E0     	 b .L391
 5496              	.L390:
2730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5497              	 .loc 2 2733 0
 5498 0086 FA69     	 ldr r2,[r7,#28]
 5499 0088 7B6A     	 ldr r3,[r7,#36]
 5500 008a D318     	 add r3,r2,r3
 5501 008c FF22     	 mov r2,#255
 5502 008e 1A70     	 strb r2,[r3]
 5503              	.L391:
2734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_byte_count++;
 5504              	 .loc 2 2735 0
 5505 0090 7B6A     	 ldr r3,[r7,#36]
 5506 0092 0133     	 add r3,r3,#1
 5507 0094 7B62     	 str r3,[r7,#36]
2736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE); /* Check for block size overflow*/
 5508              	 .loc 2 2737 0
 5509 0096 7B6A     	 ldr r3,[r7,#36]
 5510 0098 102B     	 cmp r3,#16
 5511 009a D8D1     	 bne .L392
2738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->user_write_bytes_count >= block_size)
 5512              	 .loc 2 2739 0
 5513 009c 3A6A     	 ldr r2,[r7,#32]
 5514 009e AC23     	 mov r3,#172
 5515 00a0 5B00     	 lsl r3,r3,#1
 5516 00a2 D258     	 ldr r2,[r2,r3]
 5517 00a4 7B68     	 ldr r3,[r7,#4]
 5518 00a6 9A42     	 cmp r2,r3
 5519 00a8 04D3     	 bcc .L389
2740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5520              	 .loc 2 2741 0
 5521 00aa 3A6A     	 ldr r2,[r7,#32]
 5522 00ac B823     	 mov r3,#184
 5523 00ae 5B00     	 lsl r3,r3,#1
 5524 00b0 0321     	 mov r1,#3
 5525 00b2 D150     	 str r1,[r2,r3]
 5526              	.L389:
2742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5527              	 .loc 2 2743 0
 5528 00b4 BD46     	 mov sp,r7
 5529 00b6 0AB0     	 add sp,sp,#40
 5530              	 
 5531 00b8 80BD     	 pop {r7,pc}
 5532              	.L395:
 5533 00ba C046     	 .align 2
 5534              	.L394:
 5535 00bc 00000000 	 .word E_EEPROM_XMC1_0
 5536 00c0 0000A5A5 	 .word -1515913216
 5537              	 .cfi_endproc
 5538              	.LFE95:
 5540              	 .section .text.E_EEPROM_XMC1_lPopulateNextBlock,"ax",%progbits
 5541              	 .align 2
 5542              	 .code 16
 5543              	 .thumb_func
 5545              	E_EEPROM_XMC1_lPopulateNextBlock:
 5546              	.LFB96:
2744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Data buffer address
2748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             block_size - Length of data to be read
2749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
2751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Populates the successive blocks with data elements starting from the passed dat
2753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateNextBlock( uint8_t block_number ,
2755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint8_t*  const user_data_buffer_ptr ,
2756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint32_t block_size)
2757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5547              	 .loc 2 2757 0
 5548              	 .cfi_startproc
 5549 0000 80B5     	 push {r7,lr}
 5550              	.LCFI146:
 5551              	 .cfi_def_cfa_offset 8
 5552              	 .cfi_offset 7,-8
 5553              	 .cfi_offset 14,-4
 5554 0002 88B0     	 sub sp,sp,#32
 5555              	.LCFI147:
 5556              	 .cfi_def_cfa_offset 40
 5557 0004 00AF     	 add r7,sp,#0
 5558              	.LCFI148:
 5559              	 .cfi_def_cfa_register 7
 5560 0006 B960     	 str r1,[r7,#8]
 5561 0008 7A60     	 str r2,[r7,#4]
 5562 000a 0F23     	 mov r3,#15
 5563 000c FB18     	 add r3,r7,r3
 5564 000e 021C     	 add r2,r0,#0
 5565 0010 1A70     	 strb r2,[r3]
2758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  data_byte_count;
2759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t*  read_write_buffer_ptr;
2760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5566              	 .loc 2 2761 0
 5567 0012 264B     	 ldr r3,.L401
 5568 0014 5B68     	 ldr r3,[r3,#4]
 5569 0016 BB61     	 str r3,[r7,#24]
2762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5570              	 .loc 2 2763 0
 5571 0018 BB69     	 ldr r3,[r7,#24]
 5572 001a 4433     	 add r3,r3,#68
 5573 001c 7B61     	 str r3,[r7,#20]
2764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr) = block_number;
 5574              	 .loc 2 2764 0
 5575 001e 7B69     	 ldr r3,[r7,#20]
 5576 0020 0F22     	 mov r2,#15
 5577 0022 BA18     	 add r2,r7,r2
 5578 0024 1278     	 ldrb r2,[r2]
 5579 0026 1A70     	 strb r2,[r3]
2765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr + 1U) = E_EEPROM_XMC1_VALID_BIT;
 5580              	 .loc 2 2765 0
 5581 0028 7B69     	 ldr r3,[r7,#20]
 5582 002a 0133     	 add r3,r3,#1
 5583 002c 4022     	 mov r2,#64
 5584 002e 1A70     	 strb r2,[r3]
2766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_byte_count = E_EEPROM_XMC1_TWO_BYTES;
 5585              	 .loc 2 2766 0
 5586 0030 0223     	 mov r3,#2
 5587 0032 FB61     	 str r3,[r7,#28]
 5588              	.L399:
2767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Add data to the write buffer from the user specified pointer */
2769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->user_write_bytes_count < block_size )
 5589              	 .loc 2 2771 0
 5590 0034 BA69     	 ldr r2,[r7,#24]
 5591 0036 AC23     	 mov r3,#172
 5592 0038 5B00     	 lsl r3,r3,#1
 5593 003a D258     	 ldr r2,[r2,r3]
 5594 003c 7B68     	 ldr r3,[r7,#4]
 5595 003e 9A42     	 cmp r2,r3
 5596 0040 14D2     	 bcs .L397
2772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_by
 5597              	 .loc 2 2773 0
 5598 0042 7A69     	 ldr r2,[r7,#20]
 5599 0044 FB69     	 ldr r3,[r7,#28]
 5600 0046 D318     	 add r3,r2,r3
 5601 0048 B969     	 ldr r1,[r7,#24]
 5602 004a AC22     	 mov r2,#172
 5603 004c 5200     	 lsl r2,r2,#1
 5604 004e 8A58     	 ldr r2,[r1,r2]
 5605 0050 B968     	 ldr r1,[r7,#8]
 5606 0052 8A18     	 add r2,r1,r2
 5607 0054 1278     	 ldrb r2,[r2]
 5608 0056 1A70     	 strb r2,[r3]
2774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->user_write_bytes_count)++;
 5609              	 .loc 2 2774 0
 5610 0058 BA69     	 ldr r2,[r7,#24]
 5611 005a AC23     	 mov r3,#172
 5612 005c 5B00     	 lsl r3,r3,#1
 5613 005e D358     	 ldr r3,[r2,r3]
 5614 0060 591C     	 add r1,r3,#1
 5615 0062 BA69     	 ldr r2,[r7,#24]
 5616 0064 AC23     	 mov r3,#172
 5617 0066 5B00     	 lsl r3,r3,#1
 5618 0068 D150     	 str r1,[r2,r3]
 5619 006a 09E0     	 b .L398
 5620              	.L397:
2775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5621              	 .loc 2 2778 0
 5622 006c 7A69     	 ldr r2,[r7,#20]
 5623 006e FB69     	 ldr r3,[r7,#28]
 5624 0070 D318     	 add r3,r2,r3
 5625 0072 FF22     	 mov r2,#255
 5626 0074 1A70     	 strb r2,[r3]
2779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5627              	 .loc 2 2779 0
 5628 0076 BA69     	 ldr r2,[r7,#24]
 5629 0078 B823     	 mov r3,#184
 5630 007a 5B00     	 lsl r3,r3,#1
 5631 007c 0321     	 mov r1,#3
 5632 007e D150     	 str r1,[r2,r3]
 5633              	.L398:
2780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_byte_count++;
 5634              	 .loc 2 2781 0
 5635 0080 FB69     	 ldr r3,[r7,#28]
 5636 0082 0133     	 add r3,r3,#1
 5637 0084 FB61     	 str r3,[r7,#28]
2782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
 5638              	 .loc 2 2783 0
 5639 0086 FB69     	 ldr r3,[r7,#28]
 5640 0088 102B     	 cmp r3,#16
 5641 008a D3D1     	 bne .L399
2784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->user_write_bytes_count >= block_size)
 5642              	 .loc 2 2785 0
 5643 008c BA69     	 ldr r2,[r7,#24]
 5644 008e AC23     	 mov r3,#172
 5645 0090 5B00     	 lsl r3,r3,#1
 5646 0092 D258     	 ldr r2,[r2,r3]
 5647 0094 7B68     	 ldr r3,[r7,#4]
 5648 0096 9A42     	 cmp r2,r3
 5649 0098 04D3     	 bcc .L396
2786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5650              	 .loc 2 2787 0
 5651 009a BA69     	 ldr r2,[r7,#24]
 5652 009c B823     	 mov r3,#184
 5653 009e 5B00     	 lsl r3,r3,#1
 5654 00a0 0321     	 mov r1,#3
 5655 00a2 D150     	 str r1,[r2,r3]
 5656              	.L396:
2788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5657              	 .loc 2 2789 0
 5658 00a4 BD46     	 mov sp,r7
 5659 00a6 08B0     	 add sp,sp,#32
 5660              	 
 5661 00a8 80BD     	 pop {r7,pc}
 5662              	.L402:
 5663 00aa C046     	 .align 2
 5664              	.L401:
 5665 00ac 00000000 	 .word E_EEPROM_XMC1_0
 5666              	 .cfi_endproc
 5667              	.LFE96:
 5669              	 .section .text.E_EEPROM_XMC1_lWriteDataBlock,"ax",%progbits
 5670              	 .align 2
 5671              	 .code 16
 5672              	 .thumb_func
 5674              	E_EEPROM_XMC1_lWriteDataBlock:
 5675              	.LFB97:
2790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t - NVM_STATUS register value after read operation
2795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Writes single data block into flash
2797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void)
2799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5676              	 .loc 2 2799 0
 5677              	 .cfi_startproc
 5678 0000 80B5     	 push {r7,lr}
 5679              	.LCFI149:
 5680              	 .cfi_def_cfa_offset 8
 5681              	 .cfi_offset 7,-8
 5682              	 .cfi_offset 14,-4
 5683 0002 84B0     	 sub sp,sp,#16
 5684              	.LCFI150:
 5685              	 .cfi_def_cfa_offset 24
 5686 0004 00AF     	 add r7,sp,#0
 5687              	.LCFI151:
 5688              	 .cfi_def_cfa_register 7
2800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t src_addr;
2802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5689              	 .loc 2 2804 0
 5690 0006 104B     	 ldr r3,.L405
 5691 0008 5B68     	 ldr r3,[r3,#4]
 5692 000a FB60     	 str r3,[r7,#12]
2805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   src_addr = (uint32_t)(data_ptr->next_free_block_addr +
 5693              	 .loc 2 2806 0
 5694 000c FB68     	 ldr r3,[r7,#12]
 5695 000e 5A6B     	 ldr r2,[r3,#52]
2807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****              (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
 5696              	 .loc 2 2807 0
 5697 0010 FB68     	 ldr r3,[r7,#12]
 5698 0012 1B6C     	 ldr r3,[r3,#64]
 5699 0014 1B01     	 lsl r3,r3,#4
2806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****              (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
 5700              	 .loc 2 2806 0
 5701 0016 D318     	 add r3,r2,r3
 5702 0018 BB60     	 str r3,[r7,#8]
2808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->written_block_counter)++;
 5703              	 .loc 2 2808 0
 5704 001a FB68     	 ldr r3,[r7,#12]
 5705 001c 1B6C     	 ldr r3,[r3,#64]
 5706 001e 5A1C     	 add r2,r3,#1
 5707 0020 FB68     	 ldr r3,[r7,#12]
 5708 0022 1A64     	 str r2,[r3,#64]
2809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 5709              	 .loc 2 2810 0
 5710 0024 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lWriteSingleBlock(src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
 5711              	 .loc 2 2811 0
 5712 0028 FB68     	 ldr r3,[r7,#12]
 5713 002a 4433     	 add r3,r3,#68
 5714 002c BA68     	 ldr r2,[r7,#8]
 5715 002e 101C     	 mov r0,r2
 5716 0030 191C     	 mov r1,r3
 5717 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSingleBlock
2812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 5718              	 .loc 2 2812 0
 5719 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 5720 003a 031C     	 mov r3,r0
 5721 003c 7B60     	 str r3,[r7,#4]
2813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5722              	 .loc 2 2814 0
 5723 003e 7B68     	 ldr r3,[r7,#4]
2815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5724              	 .loc 2 2815 0
 5725 0040 181C     	 mov r0,r3
 5726 0042 BD46     	 mov sp,r7
 5727 0044 04B0     	 add sp,sp,#16
 5728              	 
 5729 0046 80BD     	 pop {r7,pc}
 5730              	.L406:
 5731              	 .align 2
 5732              	.L405:
 5733 0048 00000000 	 .word E_EEPROM_XMC1_0
 5734              	 .cfi_endproc
 5735              	.LFE97:
 5737              	 .section .text.E_EEPROM_XMC1_lReadBlockContents,"ax",%progbits
 5738              	 .align 2
 5739              	 .code 16
 5740              	 .thumb_func
 5742              	E_EEPROM_XMC1_lReadBlockContents:
 5743              	.LFB98:
2816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : data_buffer_ptr - Data buffer address
2820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length - Length of data to be read
2821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset - Offset from which the read shall start
2822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - NVM_STATUS register value after read operation
2824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Read data bytes starting from specified address (data_buffer_ptr + offset).
2826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   Read number of bytes as specified in the length parameter.
2827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *const data_buffer_ptr, uint32_t length, u
2829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5744              	 .loc 2 2829 0
 5745              	 .cfi_startproc
 5746 0000 80B5     	 push {r7,lr}
 5747              	.LCFI152:
 5748              	 .cfi_def_cfa_offset 8
 5749              	 .cfi_offset 7,-8
 5750              	 .cfi_offset 14,-4
 5751 0002 8CB0     	 sub sp,sp,#48
 5752              	.LCFI153:
 5753              	 .cfi_def_cfa_offset 56
 5754 0004 00AF     	 add r7,sp,#0
 5755              	.LCFI154:
 5756              	 .cfi_def_cfa_register 7
 5757 0006 F860     	 str r0,[r7,#12]
 5758 0008 B960     	 str r1,[r7,#8]
 5759 000a 7A60     	 str r2,[r7,#4]
2830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
2833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_address;
2834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_start_address;
2835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_bytes_in_curr_block;
2837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 5760              	 .loc 2 2838 0
 5761 000c 0023     	 mov r3,#0
 5762 000e FB62     	 str r3,[r7,#44]
2839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 5763              	 .loc 2 2839 0
 5764 0010 0023     	 mov r3,#0
 5765 0012 3B62     	 str r3,[r7,#32]
2840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = 0U;
 5766              	 .loc 2 2840 0
 5767 0014 0023     	 mov r3,#0
 5768 0016 BB62     	 str r3,[r7,#40]
2841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5769              	 .loc 2 2842 0
 5770 0018 364B     	 ldr r3,.L419
 5771 001a 5B68     	 ldr r3,[r3,#4]
 5772 001c FB61     	 str r3,[r7,#28]
2843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_start_address = data_ptr->read_start_address;
 5773              	 .loc 2 2843 0
 5774 001e FA69     	 ldr r2,[r7,#28]
 5775 0020 BA23     	 mov r3,#186
 5776 0022 5B00     	 lsl r3,r3,#1
 5777 0024 D358     	 ldr r3,[r2,r3]
 5778 0026 BB61     	 str r3,[r7,#24]
2844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first da
 5779              	 .loc 2 2845 0
 5780 0028 7B68     	 ldr r3,[r7,#4]
 5781 002a 0B2B     	 cmp r3,#11
 5782 002c 13D9     	 bls .L408
2846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count++;                        /* If not then increment block counter*/
 5783              	 .loc 2 2847 0
 5784 002e BB6A     	 ldr r3,[r7,#40]
 5785 0030 0133     	 add r3,r3,#1
 5786 0032 BB62     	 str r3,[r7,#40]
2848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12
 5787              	 .loc 2 2848 0
 5788 0034 7B68     	 ldr r3,[r7,#4]
 5789 0036 0C3B     	 sub r3,r3,#12
 5790 0038 7B60     	 str r3,[r7,#4]
2849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fi
 5791              	 .loc 2 2849 0
 5792 003a 05E0     	 b .L409
 5793              	.L410:
2850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;                        /* If not then increment block counter*/
 5794              	 .loc 2 2851 0
 5795 003c BB6A     	 ldr r3,[r7,#40]
 5796 003e 0133     	 add r3,r3,#1
 5797 0040 BB62     	 str r3,[r7,#40]
2852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14
 5798              	 .loc 2 2852 0
 5799 0042 7B68     	 ldr r3,[r7,#4]
 5800 0044 0E3B     	 sub r3,r3,#14
 5801 0046 7B60     	 str r3,[r7,#4]
 5802              	.L409:
2849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fi
 5803              	 .loc 2 2849 0
 5804 0048 7B68     	 ldr r3,[r7,#4]
 5805 004a 0D2B     	 cmp r3,#13
 5806 004c F6D8     	 bhi .L410
2853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset += E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;
 5807              	 .loc 2 2854 0
 5808 004e 7B68     	 ldr r3,[r7,#4]
 5809 0050 0233     	 add r3,r3,#2
 5810 0052 7B60     	 str r3,[r7,#4]
 5811 0054 02E0     	 b .L411
 5812              	.L408:
2855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset += E_EEPROM_XMC1_BLOCK1_DATA_OFFSET;
 5813              	 .loc 2 2858 0
 5814 0056 7B68     	 ldr r3,[r7,#4]
 5815 0058 0433     	 add r3,r3,#4
 5816 005a 7B60     	 str r3,[r7,#4]
 5817              	.L411:
2859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Remaining bytes in the block where Read offset is pointing*/
2861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_bytes_in_curr_block = E_EEPROM_XMC1_FLASH_BLOCK_SIZE - offset;
 5818              	 .loc 2 2861 0
 5819 005c 7B68     	 ldr r3,[r7,#4]
 5820 005e 1022     	 mov r2,#16
 5821 0060 D31A     	 sub r3,r2,r3
 5822 0062 7B62     	 str r3,[r7,#36]
 5823              	.L417:
2862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Calculate the Flash address of the block to be read*/
2866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     flash_address = block_start_address + ((uint32_t)block_count * E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
 5824              	 .loc 2 2866 0
 5825 0064 BB6A     	 ldr r3,[r7,#40]
 5826 0066 1A01     	 lsl r2,r3,#4
 5827 0068 BB69     	 ldr r3,[r7,#24]
 5828 006a D318     	 add r3,r2,r3
 5829 006c 7B61     	 str r3,[r7,#20]
2867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 5830              	 .loc 2 2868 0
 5831 006e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lReadSingleBlock(flash_address,(uint32_t*)(void*)data_ptr->read_write_buffer);
 5832              	 .loc 2 2869 0
 5833 0072 FB69     	 ldr r3,[r7,#28]
 5834 0074 4433     	 add r3,r3,#68
 5835 0076 7A69     	 ldr r2,[r7,#20]
 5836 0078 101C     	 mov r0,r2
 5837 007a 191C     	 mov r1,r3
 5838 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGetFlashStatus();
 5839              	 .loc 2 2870 0
 5840 0080 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 5841 0084 031C     	 mov r3,r0
 5842 0086 3B62     	 str r3,[r7,#32]
2871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status != 0U)
 5843              	 .loc 2 2872 0
 5844 0088 3B6A     	 ldr r3,[r7,#32]
 5845 008a 002B     	 cmp r3,#0
 5846 008c 00D0     	 beq .L412
2873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5847              	 .loc 2 2874 0
 5848 008e 2BE0     	 b .L413
 5849              	.L412:
2875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Extract the data read from flash byte by byte and load into the user buffer*/
2877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     do{
2878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(data_buffer_ptr + indx) = *(data_ptr->read_write_buffer + offset);
 5850              	 .loc 2 2879 0 discriminator 2
 5851 0090 FA68     	 ldr r2,[r7,#12]
 5852 0092 FB6A     	 ldr r3,[r7,#44]
 5853 0094 D318     	 add r3,r2,r3
 5854 0096 F969     	 ldr r1,[r7,#28]
 5855 0098 4020     	 mov r0,#64
 5856 009a 7A68     	 ldr r2,[r7,#4]
 5857 009c 8A18     	 add r2,r1,r2
 5858 009e 1218     	 add r2,r2,r0
 5859 00a0 1279     	 ldrb r2,[r2,#4]
 5860 00a2 1A70     	 strb r2,[r3]
2880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       indx++;
 5861              	 .loc 2 2880 0 discriminator 2
 5862 00a4 FB6A     	 ldr r3,[r7,#44]
 5863 00a6 0133     	 add r3,r3,#1
 5864 00a8 FB62     	 str r3,[r7,#44]
2881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       offset++;
 5865              	 .loc 2 2881 0 discriminator 2
 5866 00aa 7B68     	 ldr r3,[r7,#4]
 5867 00ac 0133     	 add r3,r3,#1
 5868 00ae 7B60     	 str r3,[r7,#4]
2882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       length--;
 5869              	 .loc 2 2882 0 discriminator 2
 5870 00b0 BB68     	 ldr r3,[r7,#8]
 5871 00b2 013B     	 sub r3,r3,#1
 5872 00b4 BB60     	 str r3,[r7,#8]
2883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block--;
 5873              	 .loc 2 2883 0 discriminator 2
 5874 00b6 7B6A     	 ldr r3,[r7,#36]
 5875 00b8 013B     	 sub r3,r3,#1
 5876 00ba 7B62     	 str r3,[r7,#36]
2884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* check any of the length parameters reaches 0 */
2886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     } while ( (remaining_bytes_in_curr_block) && (length) );
 5877              	 .loc 2 2886 0 discriminator 2
 5878 00bc 7B6A     	 ldr r3,[r7,#36]
 5879 00be 002B     	 cmp r3,#0
 5880 00c0 02D0     	 beq .L414
 5881              	 .loc 2 2886 0 is_stmt 0 discriminator 1
 5882 00c2 BB68     	 ldr r3,[r7,#8]
 5883 00c4 002B     	 cmp r3,#0
 5884 00c6 E3D1     	 bne .L412
 5885              	.L414:
2887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the length of bytes pending to be read is within the range of available bytes in th
2889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (length <= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
 5886              	 .loc 2 2889 0 is_stmt 1
 5887 00c8 BB68     	 ldr r3,[r7,#8]
 5888 00ca 0E2B     	 cmp r3,#14
 5889 00cc 02D8     	 bhi .L415
2890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Force remaining bytes in current block to length remaining */
2892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block = length;
 5890              	 .loc 2 2892 0
 5891 00ce BB68     	 ldr r3,[r7,#8]
 5892 00d0 7B62     	 str r3,[r7,#36]
 5893 00d2 01E0     	 b .L416
 5894              	.L415:
2893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Force remaining bytes to next block size(14)*/
2897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block = E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
 5895              	 .loc 2 2897 0
 5896 00d4 0E23     	 mov r3,#14
 5897 00d6 7B62     	 str r3,[r7,#36]
 5898              	.L416:
2898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset = E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;     /* Shift offset by 2 counts to avoid next block 
 5899              	 .loc 2 2900 0
 5900 00d8 0223     	 mov r3,#2
 5901 00da 7B60     	 str r3,[r7,#4]
2901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count++;                        /* Increment the block count to read next block */
 5902              	 .loc 2 2901 0
 5903 00dc BB6A     	 ldr r3,[r7,#40]
 5904 00de 0133     	 add r3,r3,#1
 5905 00e0 BB62     	 str r3,[r7,#40]
2902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (length != 0U);
 5906              	 .loc 2 2903 0
 5907 00e2 BB68     	 ldr r3,[r7,#8]
 5908 00e4 002B     	 cmp r3,#0
 5909 00e6 BDD1     	 bne .L417
 5910              	.L413:
2904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5911              	 .loc 2 2905 0
 5912 00e8 3B6A     	 ldr r3,[r7,#32]
2906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5913              	 .loc 2 2906 0
 5914 00ea 181C     	 mov r0,r3
 5915 00ec BD46     	 mov sp,r7
 5916 00ee 0CB0     	 add sp,sp,#48
 5917              	 
 5918 00f0 80BD     	 pop {r7,pc}
 5919              	.L420:
 5920 00f2 C046     	 .align 2
 5921              	.L419:
 5922 00f4 00000000 	 .word E_EEPROM_XMC1_0
 5923              	 .cfi_endproc
 5924              	.LFE98:
 5926              	 .section .text.E_EEPROM_XMC1_lWriteSingleBlock,"ax",%progbits
 5927              	 .align 2
 5928              	 .code 16
 5929              	 .thumb_func
 5931              	E_EEPROM_XMC1_lWriteSingleBlock:
 5932              	.LFB99:
2907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
2909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   block_size    - size in bytes of logical block
2913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS : CRC verification succeeded
2915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   E_EEPROM_XMC1_OPERATION_STATUS_CRC_FAILED : CRC verification failed
2916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Reads 16 bit CRC from FLASH block header and verify with the calculated CRC va
2918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_lReadBlockCrcStatus( uint8_t block_number,
2920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                            uint8_t *const data_buff
2921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                            uint32_t block_size)
2922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
2923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_buffer;
2924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_index;
2925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_read_from_flash;
2926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
2928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
2930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
2931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS;
2932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
2933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
2936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read the CRC 16 bit data from flash for the particular block */
2938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   crc_read_from_flash = E_EEPROM_XMC1_lReadSingleWord((uint32_t)(data_ptr->block_info[block_index].
2939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If CRC is enabled for the block, calculate CRC else use the 16 bit dummy CRC */
2941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->block_info[block_index].status.crc == 1U)
2942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the dat
2944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,data_buffer_ptr,block_size);
2945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
2946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check the validity of CRC for the particular block */
2947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (crc_buffer != (crc_read_from_flash >> E_EEPROM_XMC1_CRC_SHIFT))
2948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_CRC_FAILED;
2950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check the availability of CRC for the particular block */
2955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN;
2956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return ((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
2959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
2960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
2961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
2964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
2965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash block(16 bytes) write operation
2969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data)
2971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5933              	 .loc 2 2971 0
 5934              	 .cfi_startproc
 5935 0000 80B5     	 push {r7,lr}
 5936              	.LCFI155:
 5937              	 .cfi_def_cfa_offset 8
 5938              	 .cfi_offset 7,-8
 5939              	 .cfi_offset 14,-4
 5940 0002 82B0     	 sub sp,sp,#8
 5941              	.LCFI156:
 5942              	 .cfi_def_cfa_offset 16
 5943 0004 00AF     	 add r7,sp,#0
 5944              	.LCFI157:
 5945              	 .cfi_def_cfa_register 7
 5946 0006 7860     	 str r0,[r7,#4]
 5947 0008 3960     	 str r1,[r7]
2972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
2973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_writeblock == 1U)
2974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(address,data);
2976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
2979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_WriteBlocks( (uint32_t*)address, (uint32_t*)data , 1U , 1U);
 5948              	 .loc 2 2980 0
 5949 000a 7A68     	 ldr r2,[r7,#4]
 5950 000c 3B68     	 ldr r3,[r7]
 5951 000e 101C     	 mov r0,r2
 5952 0010 191C     	 mov r1,r3
 5953 0012 0122     	 mov r2,#1
 5954 0014 0123     	 mov r3,#1
 5955 0016 FFF7FEFF 	 bl XMC_FLASH_WriteBlocks
2981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5956              	 .loc 2 2982 0
 5957 001a BD46     	 mov sp,r7
 5958 001c 02B0     	 add sp,sp,#8
 5959              	 
 5960 001e 80BD     	 pop {r7,pc}
 5961              	 .cfi_endproc
 5962              	.LFE99:
 5964              	 .section .text.E_EEPROM_XMC1_lReadSingleBlock,"ax",%progbits
 5965              	 .align 2
 5966              	 .code 16
 5967              	 .thumb_func
 5969              	E_EEPROM_XMC1_lReadSingleBlock:
 5970              	.LFB100:
2983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
2986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
2987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash block(16 bytes) read operation
2991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data)
2993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5971              	 .loc 2 2993 0
 5972              	 .cfi_startproc
 5973 0000 80B5     	 push {r7,lr}
 5974              	.LCFI158:
 5975              	 .cfi_def_cfa_offset 8
 5976              	 .cfi_offset 7,-8
 5977              	 .cfi_offset 14,-4
 5978 0002 82B0     	 sub sp,sp,#8
 5979              	.LCFI159:
 5980              	 .cfi_def_cfa_offset 16
 5981 0004 00AF     	 add r7,sp,#0
 5982              	.LCFI160:
 5983              	 .cfi_def_cfa_register 7
 5984 0006 7860     	 str r0,[r7,#4]
 5985 0008 3960     	 str r1,[r7]
2994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
2995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_readblock == 1U)
2996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(address,data);
2998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ReadBlocks( (uint32_t*)address , (uint32_t*)data , 1U);
 5986              	 .loc 2 3002 0
 5987 000a 7A68     	 ldr r2,[r7,#4]
 5988 000c 3B68     	 ldr r3,[r7]
 5989 000e 101C     	 mov r0,r2
 5990 0010 191C     	 mov r1,r3
 5991 0012 0122     	 mov r2,#1
 5992 0014 FFF7FEFF 	 bl XMC_FLASH_ReadBlocks
3003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5993              	 .loc 2 3004 0
 5994 0018 BD46     	 mov sp,r7
 5995 001a 02B0     	 add sp,sp,#8
 5996              	 
 5997 001c 80BD     	 pop {r7,pc}
 5998              	 .cfi_endproc
 5999              	.LFE100:
 6001 001e C046     	 .section .text.E_EEPROM_XMC1_lWriteSinglePage,"ax",%progbits
 6002              	 .align 2
 6003              	 .code 16
 6004              	 .thumb_func
 6006              	E_EEPROM_XMC1_lWriteSinglePage:
 6007              	.LFB101:
3005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Function Name   : E_EEPROM_XMC1_lWriteSinglePage
3008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
3011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
3013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash page(256 bytes) write operation
3015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data)
3017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6008              	 .loc 2 3017 0
 6009              	 .cfi_startproc
 6010 0000 80B5     	 push {r7,lr}
 6011              	.LCFI161:
 6012              	 .cfi_def_cfa_offset 8
 6013              	 .cfi_offset 7,-8
 6014              	 .cfi_offset 14,-4
 6015 0002 82B0     	 sub sp,sp,#8
 6016              	.LCFI162:
 6017              	 .cfi_def_cfa_offset 16
 6018 0004 00AF     	 add r7,sp,#0
 6019              	.LCFI163:
 6020              	 .cfi_def_cfa_register 7
 6021 0006 7860     	 str r0,[r7,#4]
 6022 0008 3960     	 str r1,[r7]
3018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_writepage == 1U)
3020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(address,data);
3022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ProgramPage( (uint32_t*)address , (uint32_t*)data);
 6023              	 .loc 2 3026 0
 6024 000a 7A68     	 ldr r2,[r7,#4]
 6025 000c 3B68     	 ldr r3,[r7]
 6026 000e 101C     	 mov r0,r2
 6027 0010 191C     	 mov r1,r3
 6028 0012 FFF7FEFF 	 bl XMC_FLASH_ProgramPage
3027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6029              	 .loc 2 3028 0
 6030 0016 BD46     	 mov sp,r7
 6031 0018 02B0     	 add sp,sp,#8
 6032              	 
 6033 001a 80BD     	 pop {r7,pc}
 6034              	 .cfi_endproc
 6035              	.LFE101:
 6037              	 .section .text.E_EEPROM_XMC1_lEraseSinglePage,"ax",%progbits
 6038              	 .align 2
 6039              	 .code 16
 6040              	 .thumb_func
 6042              	E_EEPROM_XMC1_lEraseSinglePage:
 6043              	.LFB102:
3029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
3034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Erases single flash page(256 bytes)
3036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address)
3038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6044              	 .loc 2 3038 0
 6045              	 .cfi_startproc
 6046 0000 80B5     	 push {r7,lr}
 6047              	.LCFI164:
 6048              	 .cfi_def_cfa_offset 8
 6049              	 .cfi_offset 7,-8
 6050              	 .cfi_offset 14,-4
 6051 0002 82B0     	 sub sp,sp,#8
 6052              	.LCFI165:
 6053              	 .cfi_def_cfa_offset 16
 6054 0004 00AF     	 add r7,sp,#0
 6055              	.LCFI166:
 6056              	 .cfi_def_cfa_register 7
 6057 0006 7860     	 str r0,[r7,#4]
3039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_erasepage == 1U)
3041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(address);
3043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ErasePages( (uint32_t*)address , 1U);
 6058              	 .loc 2 3047 0
 6059 0008 7B68     	 ldr r3,[r7,#4]
 6060 000a 181C     	 mov r0,r3
 6061 000c 0121     	 mov r1,#1
 6062 000e FFF7FEFF 	 bl XMC_FLASH_ErasePages
3048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6063              	 .loc 2 3049 0
 6064 0012 BD46     	 mov sp,r7
 6065 0014 02B0     	 add sp,sp,#8
 6066              	 
 6067 0016 80BD     	 pop {r7,pc}
 6068              	 .cfi_endproc
 6069              	.LFE102:
 6071              	 .section .text.E_EEPROM_XMC1_lReadSingleWord,"ax",%progbits
 6072              	 .align 2
 6073              	 .code 16
 6074              	 .thumb_func
 6076              	E_EEPROM_XMC1_lReadSingleWord:
 6077              	.LFB103:
3050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t  - Word data read from flash address
3055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single word(4 bytes) read operation from flash
3057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadSingleWord(uint32_t const address)
3059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6078              	 .loc 2 3059 0
 6079              	 .cfi_startproc
 6080 0000 80B5     	 push {r7,lr}
 6081              	.LCFI167:
 6082              	 .cfi_def_cfa_offset 8
 6083              	 .cfi_offset 7,-8
 6084              	 .cfi_offset 14,-4
 6085 0002 84B0     	 sub sp,sp,#16
 6086              	.LCFI168:
 6087              	 .cfi_def_cfa_offset 24
 6088 0004 00AF     	 add r7,sp,#0
 6089              	.LCFI169:
 6090              	 .cfi_def_cfa_register 7
 6091 0006 7860     	 str r0,[r7,#4]
3060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_word;
3061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_readword == 1U)
3063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word = E_EEPROM_XMC1_TEST_HOOK_ReadSingleWord(address);
3065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word = XMC_FLASH_ReadWord((uint32_t*)address);
 6092              	 .loc 2 3069 0
 6093 0008 7B68     	 ldr r3,[r7,#4]
 6094 000a 181C     	 mov r0,r3
 6095 000c FFF7FEFF 	 bl XMC_FLASH_ReadWord
 6096 0010 031C     	 mov r3,r0
 6097 0012 FB60     	 str r3,[r7,#12]
3070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (read_word);
 6098              	 .loc 2 3071 0
 6099 0014 FB68     	 ldr r3,[r7,#12]
3072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6100              	 .loc 2 3072 0
 6101 0016 181C     	 mov r0,r3
 6102 0018 BD46     	 mov sp,r7
 6103 001a 04B0     	 add sp,sp,#16
 6104              	 
 6105 001c 80BD     	 pop {r7,pc}
 6106              	 .cfi_endproc
 6107              	.LFE103:
 6109 001e C046     	 .section .text.E_EEPROM_XMC1_lGetFlashStatus,"ax",%progbits
 6110              	 .align 2
 6111              	 .code 16
 6112              	 .thumb_func
 6114              	E_EEPROM_XMC1_lGetFlashStatus:
 6115              	.LFB104:
3073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
3076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t  - Flash NVM_STATUS register value
3078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Reads the flash status from hardware to check whether any error exist or not.
3080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void)
3082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6116              	 .loc 2 3082 0
 6117              	 .cfi_startproc
 6118 0000 80B5     	 push {r7,lr}
 6119              	.LCFI170:
 6120              	 .cfi_def_cfa_offset 8
 6121              	 .cfi_offset 7,-8
 6122              	 .cfi_offset 14,-4
 6123 0002 82B0     	 sub sp,sp,#8
 6124              	.LCFI171:
 6125              	 .cfi_def_cfa_offset 16
 6126 0004 00AF     	 add r7,sp,#0
 6127              	.LCFI172:
 6128              	 .cfi_def_cfa_register 7
3083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
3084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_getflashstatus == 1U)
3086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus();
3088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = XMC_FLASH_GetStatus();
 6129              	 .loc 2 3092 0
 6130 0006 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 6131 000a 031C     	 mov r3,r0
 6132 000c 7B60     	 str r3,[r7,#4]
3093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 6133              	 .loc 2 3094 0
 6134 000e 7B68     	 ldr r3,[r7,#4]
3095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6135              	 .loc 2 3095 0
 6136 0010 181C     	 mov r0,r3
 6137 0012 BD46     	 mov sp,r7
 6138 0014 02B0     	 add sp,sp,#8
 6139              	 
 6140 0016 80BD     	 pop {r7,pc}
 6141              	 .cfi_endproc
 6142              	.LFE104:
 6144              	 .text
 6145              	.Letext0:
 6146              	 .file 3 "c:\\workspaces\\4.5.0\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6147              	 .file 4 "c:\\workspaces\\4.5.0\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6148              	 .file 5 "C:/Workspaces/DAVE_WS/USB_Changer/Libraries/CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 6149              	 .file 6 "C:/Workspaces/DAVE_WS/USB_Changer/Dave/Generated/DAVE_Common.h"
 6150              	 .file 7 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.h"
 6151              	 .file 8 "C:/Workspaces/DAVE_WS/USB_Changer/Libraries/CMSIS/Include/cmsis_gcc.h"
 6152              	 .file 9 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 e_eeprom_xmc1.c
    {standard input}:18     .text.XMC_FLASH_ReadWord:00000000 $t
    {standard input}:22     .text.XMC_FLASH_ReadWord:00000000 XMC_FLASH_ReadWord
    {standard input}:52     .text.XMC_FLASH_SetHardReadLevel:00000000 $t
    {standard input}:56     .text.XMC_FLASH_SetHardReadLevel:00000000 XMC_FLASH_SetHardReadLevel
    {standard input}:104    .text.XMC_FLASH_SetHardReadLevel:0000003c $d
    {standard input}:109    .text.E_EEPROM_XMC1_GetAppVersion:00000000 $t
    {standard input}:114    .text.E_EEPROM_XMC1_GetAppVersion:00000000 E_EEPROM_XMC1_GetAppVersion
    {standard input}:180    .text.E_EEPROM_XMC1_GetAppVersion:00000058 $d
    {standard input}:186    .text.E_EEPROM_XMC1_Init:00000000 $t
    {standard input}:191    .text.E_EEPROM_XMC1_Init:00000000 E_EEPROM_XMC1_Init
    {standard input}:4294   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000000 E_EEPROM_XMC1_lReadMarkerBlocks
    {standard input}:1392   .text.E_EEPROM_XMC1_lInitGc:00000000 E_EEPROM_XMC1_lInitGc
    {standard input}:391    .text.E_EEPROM_XMC1_Write:00000000 $t
    {standard input}:396    .text.E_EEPROM_XMC1_Write:00000000 E_EEPROM_XMC1_Write
    {standard input}:4855   .text.E_EEPROM_XMC1_lLocalWrite:00000000 E_EEPROM_XMC1_lLocalWrite
    {standard input}:457    .text.E_EEPROM_XMC1_Write:00000050 $d
    {standard input}:462    .text.E_EEPROM_XMC1_InvalidateBlock:00000000 $t
    {standard input}:467    .text.E_EEPROM_XMC1_InvalidateBlock:00000000 E_EEPROM_XMC1_InvalidateBlock
    {standard input}:531    .text.E_EEPROM_XMC1_InvalidateBlock:00000054 $d
    {standard input}:536    .text.E_EEPROM_XMC1_Read:00000000 $t
    {standard input}:541    .text.E_EEPROM_XMC1_Read:00000000 E_EEPROM_XMC1_Read
    {standard input}:3990   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:00000000 E_EEPROM_XMC1_lGetUsrBlockIndex
    {standard input}:5742   .text.E_EEPROM_XMC1_lReadBlockContents:00000000 E_EEPROM_XMC1_lReadBlockContents
    {standard input}:684    .text.E_EEPROM_XMC1_Read:000000dc $d
    {standard input}:689    .text.E_EEPROM_XMC1_StartGarbageCollection:00000000 $t
    {standard input}:694    .text.E_EEPROM_XMC1_StartGarbageCollection:00000000 E_EEPROM_XMC1_StartGarbageCollection
    {standard input}:2470   .text.E_EEPROM_XMC1_lGarbageCollection:00000000 E_EEPROM_XMC1_lGarbageCollection
    {standard input}:762    .text.E_EEPROM_XMC1_StartGarbageCollection:00000054 $d
    {standard input}:767    .text.E_EEPROM_XMC1_GetStatus:00000000 $t
    {standard input}:772    .text.E_EEPROM_XMC1_GetStatus:00000000 E_EEPROM_XMC1_GetStatus
    {standard input}:834    .text.E_EEPROM_XMC1_GetStatus:00000048 $d
    {standard input}:839    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000000 $t
    {standard input}:844    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000000 E_EEPROM_XMC1_IsGarbageCollectionNeeded
    {standard input}:4076   .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:00000000 E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
    {standard input}:4140   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:00000000 E_EEPROM_XMC1_lGetFreeDFLASHBlocks
    {standard input}:916    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000064 $d
    {standard input}:921    .text.E_EEPROM_XMC1_GetPreviousData:00000000 $t
    {standard input}:926    .text.E_EEPROM_XMC1_GetPreviousData:00000000 E_EEPROM_XMC1_GetPreviousData
    {standard input}:1065   .text.E_EEPROM_XMC1_lGetPrevData:00000000 E_EEPROM_XMC1_lGetPrevData
    {standard input}:1056   .text.E_EEPROM_XMC1_GetPreviousData:000000c0 $d
    {standard input}:1061   .text.E_EEPROM_XMC1_lGetPrevData:00000000 $t
    {standard input}:1210   .text.E_EEPROM_XMC1_lSearchBlockCopy:00000000 E_EEPROM_XMC1_lSearchBlockCopy
    {standard input}:1199   .text.E_EEPROM_XMC1_lGetPrevData:000000c0 $d
    {standard input}:1206   .text.E_EEPROM_XMC1_lSearchBlockCopy:00000000 $t
    {standard input}:6076   .text.E_EEPROM_XMC1_lReadSingleWord:00000000 E_EEPROM_XMC1_lReadSingleWord
    {standard input}:6114   .text.E_EEPROM_XMC1_lGetFlashStatus:00000000 E_EEPROM_XMC1_lGetFlashStatus
    {standard input}:1383   .text.E_EEPROM_XMC1_lSearchBlockCopy:000000f4 $d
    {standard input}:1388   .text.E_EEPROM_XMC1_lInitGc:00000000 $t
    {standard input}:1510   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000000 E_EEPROM_XMC1_lInitllegalStateMachine
    {standard input}:1568   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:00000000 E_EEPROM_XMC1_lInitDirtyStateMachine
    {standard input}:1699   .text.E_EEPROM_XMC1_lInitNormalStateMachine:00000000 E_EEPROM_XMC1_lInitNormalStateMachine
    {standard input}:1501   .text.E_EEPROM_XMC1_lInitGc:000000a0 $d
    {standard input}:1506   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000000 $t
    {standard input}:2109   .text.E_EEPROM_XMC1_lInitGcNormalStates:00000000 E_EEPROM_XMC1_lInitGcNormalStates
    {standard input}:1559   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000034 $d
    {standard input}:1564   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:00000000 $t
    {standard input}:2283   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000000 E_EEPROM_XMC1_lErasedDirtyStateRecovery
    {standard input}:2373   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:00000000 E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
    {standard input}:1690   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:000000a4 $d
    {standard input}:1695   .text.E_EEPROM_XMC1_lInitNormalStateMachine:00000000 $t
    {standard input}:1738   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000000 E_EEPROM_XMC1_lInitBank0NormalStateMachine
    {standard input}:1861   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000000 E_EEPROM_XMC1_lInitBank1NormalStateMachine
    {standard input}:1984   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000000 E_EEPROM_XMC1_lInitOtherNormalStateMachine
    {standard input}:1734   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000000 $t
    {standard input}:2190   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000000 E_EEPROM_XMC1_lInitGcDataCopyState
    {standard input}:1852   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000094 $d
    {standard input}:1857   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000000 $t
    {standard input}:1975   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000094 $d
    {standard input}:1980   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000000 $t
    {standard input}:2100   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000098 $d
    {standard input}:2105   .text.E_EEPROM_XMC1_lInitGcNormalStates:00000000 $t
    {standard input}:4206   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000000 E_EEPROM_XMC1_lUpdateCurrBankInfo
    {standard input}:3207   .text.E_EEPROM_XMC1_lPrepareDFlash:00000000 E_EEPROM_XMC1_lPrepareDFlash
    {standard input}:3392   .text.E_EEPROM_XMC1_lUpdateCache:00000000 E_EEPROM_XMC1_lUpdateCache
    {standard input}:2181   .text.E_EEPROM_XMC1_lInitGcNormalStates:0000005c $d
    {standard input}:2186   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000000 $t
    {standard input}:4729   .text.E_EEPROM_XMC1_lEraseBank:00000000 E_EEPROM_XMC1_lEraseBank
    {standard input}:4550   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000000 E_EEPROM_XMC1_lSetMarkerBlockBuffer
    {standard input}:4802   .text.E_EEPROM_XMC1_lGCWrite:00000000 E_EEPROM_XMC1_lGCWrite
    {standard input}:2274   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000074 $d
    {standard input}:2279   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000000 $t
    {standard input}:2364   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000070 $d
    {standard input}:2369   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:00000000 $t
    {standard input}:4611   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000000 E_EEPROM_XMC1_lSetMarkerPageBuffer
    {standard input}:6006   .text.E_EEPROM_XMC1_lWriteSinglePage:00000000 E_EEPROM_XMC1_lWriteSinglePage
    {standard input}:2461   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:0000007c $d
    {standard input}:2466   .text.E_EEPROM_XMC1_lGarbageCollection:00000000 $t
    {standard input}:2503   .rodata.E_EEPROM_XMC1_lGarbageCollection:00000000 $d
    {standard input}:2717   .text.E_EEPROM_XMC1_lHandleGcStartCopy:00000000 E_EEPROM_XMC1_lHandleGcStartCopy
    {standard input}:2874   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:00000000 E_EEPROM_XMC1_lHandleGcCopyWrite
    {standard input}:5969   .text.E_EEPROM_XMC1_lReadSingleBlock:00000000 E_EEPROM_XMC1_lReadSingleBlock
    {standard input}:3037   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000000 E_EEPROM_XMC1_lHandleGcEndOfCopy
    {standard input}:3111   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000000 E_EEPROM_XMC1_lHandleGcOtherStates
    {standard input}:2611   .text.E_EEPROM_XMC1_lHandleGcRequested:00000000 E_EEPROM_XMC1_lHandleGcRequested
    {standard input}:2601   .text.E_EEPROM_XMC1_lGarbageCollection:00000098 $d
    {standard input}:2607   .text.E_EEPROM_XMC1_lHandleGcRequested:00000000 $t
    {standard input}:2708   .text.E_EEPROM_XMC1_lHandleGcRequested:00000084 $d
    {standard input}:2713   .text.E_EEPROM_XMC1_lHandleGcStartCopy:00000000 $t
    {standard input}:2865   .text.E_EEPROM_XMC1_lHandleGcStartCopy:000000d0 $d
    {standard input}:2870   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:00000000 $t
    {standard input}:3028   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:000000e8 $d
    {standard input}:3033   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000000 $t
    {standard input}:3102   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000054 $d
    {standard input}:3107   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000000 $t
    {standard input}:3198   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000078 $d
    {standard input}:3203   .text.E_EEPROM_XMC1_lPrepareDFlash:00000000 $t
    {standard input}:3381   .text.E_EEPROM_XMC1_lPrepareDFlash:000000f4 $d
    {standard input}:3388   .text.E_EEPROM_XMC1_lUpdateCache:00000000 $t
    {standard input}:3569   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:00000000 E_EEPROM_XMC1_lCacheEmptyBlkEval
    {standard input}:3708   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000000 E_EEPROM_XMC1_lEvalBlockStatus
    {standard input}:3927   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000000 E_EEPROM_XMC1_lUpdateCacheBlockRead
    {standard input}:3558   .text.E_EEPROM_XMC1_lUpdateCache:000000ec $d
    {standard input}:3565   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:00000000 $t
    {standard input}:3699   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:000000b8 $d
    {standard input}:3704   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000000 $t
    {standard input}:3918   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000134 $d
    {standard input}:3923   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000000 $t
    {standard input}:3981   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000044 $d
    {standard input}:3986   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:00000000 $t
    {standard input}:4067   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:0000005c $d
    {standard input}:4072   .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:00000000 $t
    {standard input}:4136   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:00000000 $t
    {standard input}:4195   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:0000003c $d
    {standard input}:4202   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000000 $t
    {standard input}:4281   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000058 $d
    {standard input}:4290   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000000 $t
    {standard input}:4407   .text.E_EEPROM_XMC1_lReadVerifyMarker:00000000 E_EEPROM_XMC1_lReadVerifyMarker
    {standard input}:4398   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000088 $d
    {standard input}:4403   .text.E_EEPROM_XMC1_lReadVerifyMarker:00000000 $t
    {standard input}:4540   .text.E_EEPROM_XMC1_lReadVerifyMarker:000000b0 $d
    {standard input}:4546   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000000 $t
    {standard input}:4602   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000038 $d
    {standard input}:4607   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000000 $t
    {standard input}:4720   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000084 $d
    {standard input}:4725   .text.E_EEPROM_XMC1_lEraseBank:00000000 $t
    {standard input}:6042   .text.E_EEPROM_XMC1_lEraseSinglePage:00000000 E_EEPROM_XMC1_lEraseSinglePage
    {standard input}:4798   .text.E_EEPROM_XMC1_lGCWrite:00000000 $t
    {standard input}:5931   .text.E_EEPROM_XMC1_lWriteSingleBlock:00000000 E_EEPROM_XMC1_lWriteSingleBlock
    {standard input}:4846   .text.E_EEPROM_XMC1_lGCWrite:00000034 $d
    {standard input}:4851   .text.E_EEPROM_XMC1_lLocalWrite:00000000 $t
    {standard input}:5273   .text.E_EEPROM_XMC1_lHandleInvalidReq:00000000 E_EEPROM_XMC1_lHandleInvalidReq
    {standard input}:5035   .text.E_EEPROM_XMC1_lHandleWriteReq:00000000 E_EEPROM_XMC1_lHandleWriteReq
    {standard input}:5026   .text.E_EEPROM_XMC1_lLocalWrite:00000100 $d
    {standard input}:5031   .text.E_EEPROM_XMC1_lHandleWriteReq:00000000 $t
    {standard input}:5674   .text.E_EEPROM_XMC1_lWriteDataBlock:00000000 E_EEPROM_XMC1_lWriteDataBlock
    {standard input}:5545   .text.E_EEPROM_XMC1_lPopulateNextBlock:00000000 E_EEPROM_XMC1_lPopulateNextBlock
    {standard input}:5402   .text.E_EEPROM_XMC1_lPopulateFirstBlock:00000000 E_EEPROM_XMC1_lPopulateFirstBlock
    {standard input}:5264   .text.E_EEPROM_XMC1_lHandleWriteReq:0000015c $d
    {standard input}:5269   .text.E_EEPROM_XMC1_lHandleInvalidReq:00000000 $t
    {standard input}:5393   .text.E_EEPROM_XMC1_lHandleInvalidReq:000000a8 $d
    {standard input}:5398   .text.E_EEPROM_XMC1_lPopulateFirstBlock:00000000 $t
    {standard input}:5535   .text.E_EEPROM_XMC1_lPopulateFirstBlock:000000bc $d
    {standard input}:5541   .text.E_EEPROM_XMC1_lPopulateNextBlock:00000000 $t
    {standard input}:5665   .text.E_EEPROM_XMC1_lPopulateNextBlock:000000ac $d
    {standard input}:5670   .text.E_EEPROM_XMC1_lWriteDataBlock:00000000 $t
    {standard input}:5733   .text.E_EEPROM_XMC1_lWriteDataBlock:00000048 $d
    {standard input}:5738   .text.E_EEPROM_XMC1_lReadBlockContents:00000000 $t
    {standard input}:5922   .text.E_EEPROM_XMC1_lReadBlockContents:000000f4 $d
    {standard input}:5927   .text.E_EEPROM_XMC1_lWriteSingleBlock:00000000 $t
    {standard input}:5965   .text.E_EEPROM_XMC1_lReadSingleBlock:00000000 $t
    {standard input}:6002   .text.E_EEPROM_XMC1_lWriteSinglePage:00000000 $t
    {standard input}:6038   .text.E_EEPROM_XMC1_lEraseSinglePage:00000000 $t
    {standard input}:6072   .text.E_EEPROM_XMC1_lReadSingleWord:00000000 $t
    {standard input}:6110   .text.E_EEPROM_XMC1_lGetFlashStatus:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
E_EEPROM_XMC1_0
XMC_FLASH_ClearStatus
XMC_FLASH_WriteBlocks
XMC_FLASH_ReadBlocks
XMC_FLASH_ProgramPage
XMC_FLASH_ErasePages
XMC_FLASH_GetStatus
