   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "e_eeprom_xmc1.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_FLASH_ReadWord,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_FLASH_ReadWord:
  23              	.LFB42:
  24              	 .file 1 "C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc/xmc1_flash.h"
   1:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
   2:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @file xmc1_flash.h
   3:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @date 2019-12-02
   4:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
   5:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @cond
   6:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
   9:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  12:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  14:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  21:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * a source language processor.
  27:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  28:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  36:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  41:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Change History
  42:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * --------------
  43:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  44:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2014-12-10:
  45:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2015-02-20:
  47:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Updated for Documentation related changes<br>
  48:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2015-06-20:
  49:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  50:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2019-05-04:
  51:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Moved definitions of XMC_FLASH_ProgramPage() and XMC_FLASH_EraseSector() from xmc_flash.h
  52:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Changed XMC_FLASH_ProgramPage() and XMC_FLASH_EraseSector() to return status of operation
  53:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Changed XMC_FLASH_ErasePages(), XMC_FLASH_ErasePage(), XMC_FLASH_ProgramVerifyPage() to re
  54:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2019-12-02:
  55:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Fix including XMC1000_RomFunctionTable.h following the convention: angle brackets are used
  56:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  57:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @endcond
  58:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  59:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
  60:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  61:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #ifndef XMC1_FLASH_H
  62:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC1_FLASH_H
  63:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  64:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  65:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * HEADER FILES
  66:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  67:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  68:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #include "xmc_common.h"
  69:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  70:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #if UC_FAMILY == XMC1
  71:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  72:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #include "XMC1000_RomFunctionTable.h"
  73:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  74:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
  75:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @addtogroup XMClib XMC Peripheral Library
  76:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @{
  77:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** */
  78:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  79:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
  80:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @addtogroup FLASH
  81:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** * @{
  82:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** */
  83:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  84:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  85:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * MACROS
  86:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  87:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  88:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_PAGES_PER_SECTOR (16U)    /**< Number of pages in a sector. A page consists of 16
  89:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BLOCKS_PER_PAGE  (16U)    /**< Number of blocks in a page. A block consists of 4 
  90:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  91:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_SECTOR (4096U)  /**< Number of bytes in a sector. (16 pages * 256 bytes
  92:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_PAGE   (256U)   /**< Number of bytes in a page. (16 blocks * 16 bytes =
  93:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_BLOCK  (16U)    /**< Number of bytes in a block. (128 bits = 16 bytes)*
  94:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  95:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_SECTOR (1024U)  /**< Number of words in a sector. (16 pages * 64 words 
  96:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_PAGE   (64U)    /**< Number of words in a page. (16 blocks * 4 words = 
  97:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_BLOCK  (4U)     /**< Number of words in a block. (128 bit / 32 bit = 4 
  98:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
  99:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_BLOCK_ADDR_MASK      (15U)    /*   Bitwise AND with block address is done to check th
 100:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_WriteBlocks() and XMC_FLAS
 101:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  APIs.*/
 102:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_PAGE_ADDR_MASK       (255U)   /*   Bitwise AND with page address is done to check the
 103:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_ErasePages() API.*/
 104:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_SECTOR_ADDR_MASK     (4095U)  /*   Bitwise AND with sector address is done to check t
 105:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_EraseSector API.*/
 106:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 107:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BASE             (0x10001000U) /**< Starting address of flash for XMC1 family of 
 108:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 109:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
 110:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * ENUMS
 111:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
 112:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 113:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines the status of flash, to verify the flash related API calls. Use type \a XMC_FLASH_STATU
 114:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  The members defines the respective masked status bits of \a NVMSTATUS register.
 115:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 116:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_STATUS
 117:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 118:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_OK                   = 0U,                          /**< Flash related operation
 119:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             completed*/
 120:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_BUSY                 = NVM_NVMSTATUS_BUSY_Msk,  /**< Cannot execute the flash re
 121:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             another operation is in
 122:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_SLEEP_MODE           = NVM_NVMSTATUS_SLEEP_Msk,     /**< Flash is in sleep mode*
 123:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_VERIFY_ERROR         = NVM_NVMSTATUS_VERR_Msk,      /**< Flash reported a verifi
 124:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_ECC1_READ_ERROR      = NVM_NVMSTATUS_ECC1READ_Msk,  /**< Flash reports a single 
 125:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             is automatically correc
 126:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_ECC2_READ_ERROR      = NVM_NVMSTATUS_ECC2READ_Msk,  /**< Flash reported at least
 127:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTOCOL_ERROR = NVM_NVMSTATUS_WRPERR_Msk,  /**< Write/Verify operation on
 128:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             failed due to protocol 
 129:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             protected sectors*/
 130:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_STATUS_t;
 131:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 132:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 133:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines NVM ready interrupt event. Use type \a XMC_FLASH_EVENT_t for this enum.
 134:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 135:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_EVENT
 136:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 137:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_EVENT_READY = NVM_NVMCONF_INT_ON_Msk  /**< Generates the NVM ready interrupts on flash 
 138:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_EVENT_t;
 139:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 140:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 141:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines hard read levels for strict data verification. Use type \a XMC_FLASH_HARDREAD_LEVEL_t f
 142:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  These \a hardread levels provide some margin to ensure that the data is really programmed with 
 143:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *  levels for written and erased bits.
 144:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 145:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_HARDREAD_LEVEL
 146:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 147:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_NORMAL  = (uint16_t)0x0, /**< No \a hardread level verification enabled 
 148:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_WRITTEN = (uint16_t)0x1, /**< Enables strict margin compare for written 
 149:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_ERASED  = (uint16_t)0x2  /**< Enables strict margin compare for erased d
 150:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_HARDREAD_LEVEL_t;
 151:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 152:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
 153:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * API PROTOTYPES
 154:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
 155:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 156:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #ifdef __cplusplus
 157:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** extern "C" {
 158:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** #endif
 159:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 160:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 161:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 162:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 163:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data is located.
 164:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 165:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 166:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 167:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 168:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Programs a single flash page associated with the specified \a address.\n\n XMC1000 Flash can be 
 169:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * page (256 bytes) using this API. It calls the Flash Firmware routine \a XMC1000_NvmProgVerify(un
 170:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * to perform the programming. Refer XMC1000 reference manual of for more details on flash firmware
 171:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * (Section 25.3). Call XMC_FLASH_GetStatus() API after calling this API, to verify the programming
 172:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 173:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note:</b><br>
 174:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 175:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 176:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 177:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 178:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 179:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 180:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data);
 181:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 182:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 183:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 184:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the starting address of the page to be erased.
 185:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 186:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 187:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 188:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 189:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a complete sector starting from the \a address specified.\n\n  XMC1000 Flash can be erase
 190:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls XMC_FLASH_Er
 191:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * times starting from the first page of the sector.. Call XMC_FLASH_GetStatus() API after calling 
 192:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * to verify the erase operation.\n
 193:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 194:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 195:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ErasePages() \n\n\n
 196:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 197:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_EraseSector(uint32_t *address);
 198:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 199:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 200:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 201:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address   Pointer to the starting address of the flash page from where the erase starts
 202:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_pages Number of pages to be erased.<BR> Range: [1 to (flash size / 256)]
 203:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 204:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 205:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 206:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><BR>
 207:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a set of flash memory pages.<BR><BR>
 208:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erase starts from the  specified \a address.
 209:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * It erases a maximum number of \a num_pages flash pages. The maximum erasable pages are limited t
 210:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * microcontroller flash size. It sets NVMPROG register to continuous page erase mode before erase 
 211:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * it action back to normal state on completion. Call XMC_FLASH_GetStatus() after calling this API 
 212:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * operation.\n
 213:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 214:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note:</b><BR>
 215:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be in busy state during erase operation. Hence no operations on flash are allowed unt
 216:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 217:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 218:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EraseSector(), XMC_FLASH_ErasePage() \n\n\n
 219:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 220:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 222:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 223:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 224:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages);
 225:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 226:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 227:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 228:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash block from where the write starts.
 229:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 230:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_blocks Maximum number of flash block writes needed.<BR> Range:  [1 to (flash size / 1
 231:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param verify     If \a true, hardware verification after block write is enabled else disabled.
 232:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 233:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 234:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 235:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 236:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Writes a set of data blocks into the flash.\n\n Minimum possible writable area is 16 byte block.
 237:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * register to continuous block write mode before write and resets it action back to normal state o
 238:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Call XMC_FLASH_GetStatus() API after calling this API to verify the erase operation.
 239:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 240:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note</b><br>
 241:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 242:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 243:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 244:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 245:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 246:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 247:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verif
 248:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 249:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 250:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 251:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash block from where the verification sta
 252:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 253:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_blocks Maximum number of flash blocks writes needed.<BR> Range:  [1 to (flash size / 
 254:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 255:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 256:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 257:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 258:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Performs verification of written data blocks.\n\n After calling XMC_FLASH_WriteBlocks() API, cal
 259:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * verify the correctness of written blocks. It sets the \a NVMPROG register into continuous block 
 260:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * write and resets it action back to normal state on completion. It reads back the written data bl
 261:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * and verify the values against the internal buffer values. Calling XMC_FLASH_GetStatus() API afte
 262:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * validates the result of verification.
 263:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 264:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 265:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 266:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 267:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 268:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_VerifyBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks);
 269:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 270:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 271:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 272:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 273:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  address    Pointer to the starting address of flash block from where the read starts.
 274:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  data       Pointer to the destination address, where the read data blocks to be stored.
 275:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  num_blocks Number of blocks to be read.<BR> Range:  [1 to (flash size / 16)]
 276:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 277:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 278:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 279:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 280:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Reads multiple blocks from flash in one shot, starting from the \a address specified.\n\n The re
 281:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * into the locations starting from the \a data address. Calling XMC_FLASH_GetStatus() API after ca
 282:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * verifies the read operation.
 283:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 284:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 285:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 286:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 287:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 288:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks);
 289:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 290:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 291:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 292:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 293:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the flash word address from where the read is expected
 294:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 295:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return <BR>
 296:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *   a 32bit data word stored in the specified \a address.
 297:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 298:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 299:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Reads a single word from the specified flash\a address.\n\n Calling XMC_FLASH_GetStatus() API af
 300:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * API returns the read status.
 301:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 302:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 303:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ReadBlocks()
 304:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 305:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 306:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE uint32_t XMC_FLASH_ReadWord(const uint32_t *const address)
 307:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
  25              	 .loc 1 307 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 308:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   return *address;
  39              	 .loc 1 308 0
  40 0008 7B68     	 ldr r3,[r7,#4]
  41 000a 1B68     	 ldr r3,[r3]
 309:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
  42              	 .loc 1 309 0
  43 000c 181C     	 mov r0,r3
  44 000e BD46     	 mov sp,r7
  45 0010 02B0     	 add sp,sp,#8
  46              	 
  47 0012 80BD     	 pop {r7,pc}
  48              	 .cfi_endproc
  49              	.LFE42:
  51              	 .section .text.XMC_FLASH_SetHardReadLevel,"ax",%progbits
  52              	 .align 2
  53              	 .code 16
  54              	 .thumb_func
  56              	XMC_FLASH_SetHardReadLevel:
  57              	.LFB47:
 310:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 311:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 312:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 313:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the starting address of the page to be erased
 314:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 315:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 316:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 317:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 318:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a single flash page associated to the specified \a address.\n\n XMC1000 Flash can be eras
 319:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls the Flash Fi
 320:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \a XMC1000_NvmErasePage(unsigned long pageAddr) to perform the erase operation. Refer XMC1000 re
 321:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * for more details on flash firmware routines (Section 25.3). Call XMC_FLASH_GetStatus() API after
 322:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * to verify the erase operation.\n
 323:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 324:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 325:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ErasePages() \n\n\n
 326:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 327:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ErasePage(uint32_t *address);
 328:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 329:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 330:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 331:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 332:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 333:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 334:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return Status of operation (NVM_STATUS)
 335:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 336:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 337:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases, programs and verifies a single flash page starting from the \a address specified.\n\n XM
 338:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * programmed with granularity of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It i
 339:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash Firmware routine \a XMC1000_NvmProgVerify(unsigned long pageAddr) to perform the programmi
 340:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * reference manual of for more details on flash firmware routines (Section 25.3). Call XMC_FLASH_G
 341:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * calling this API, to verify the erase operation.
 342:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 343:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 344:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 345:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 346:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 347:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** int32_t XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data);
 348:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 349:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 350:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 351:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param None
 352:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 353:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 354:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 355:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 356:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Enables the flash to enter into sleep mode by resetting the NVMCONF register NVM_ON bit.\n\n Fla
 357:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * sleep mode on any flash operation completion ready event trigger. To disable the sleep mode any 
 358:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * call the API XMC_FLASH_ExitSleepMode().\n
 359:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 360:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 361:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ExitSleepMode()\n\n\n
 362:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 363:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 364:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_EnterSleepMode(void)
 365:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 366:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (uint16_t)(~(uint32_t)NVM_NVMCONF_NVM_ON_Msk);
 367:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 368:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 369:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 370:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 371:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param None
 372:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 373:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 374:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 375:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 376:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Enables the flash to exit from sleep mode by setting the NVMCONF register NVM_ON bit.\n\n Callin
 377:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EnterSleepMode() allows the flash to renter into sleep mode.\n
 378:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 379:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 380:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EnterSleepMode()\n\n\n
 381:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 382:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 383:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_ExitSleepMode(void)
 384:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 385:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)NVM_NVMCONF_NVM_ON_Msk;
 386:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 387:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 388:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 389:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 390:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 391:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param sector Flash sector number for which the address extraction is needed<BR> Range:  [0 to 5
 392:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 393:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return uint32_t Starting address of the sector specified<BR> Range:  [0x10001000 to 0x10032000]
 394:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 395:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 396:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Finds the starting address of the specified \a sector number.\n\n
 397:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 398:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 399:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 400:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 401:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 402:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE uint32_t XMC_FLASH_GetSectorAddress(uint32_t sector)
 403:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 404:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   return (XMC_FLASH_BASE + (XMC_FLASH_BYTES_PER_SECTOR * sector));
 405:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 406:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 407:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 408:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 409:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 410:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_sectors    Number of sectors to be protected<BR> Range:  [0 to 51]
 411:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 412:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 413:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 414:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 415:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Protect the flash sectors starting from 0th sector to the specified \a num_sectors.\n\n It sets 
 416:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * SECPROT field with the value specified in \a num_sectors. Changing the protection limit can be a
 417:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * this API at runtime with a different value of \a num_sectors.\n\n
 418:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 419:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 420:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 421:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 422:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 423:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_SetSectorProtection(uint32_t num_sectors)
 424:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
 425:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (~(uint16_t)NVM_NVMCONF_SECPROT_Msk);
 426:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)((uint16_t)num_sectors << NVM_NVMCONF_SECPROT_Pos);
 427:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
 428:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 429:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** 
 430:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 431:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 432:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param level Hard read levels specified in \a XMC_FLASH_HARDREAD_LEVEL_t.
 433:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 434:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 435:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 436:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 437:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * Sets the hard read level for verification process.\n\n It insists the flash to do a strict margi
 438:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * with the written/erased data against the internal buffer. Sets the NVMCONF register HRLEV field 
 439:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * value. This hardread level is used until the end of the verification sequence and, may not be ch
 440:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 441:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 442:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  * None
 443:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 444:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 445:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_t level)
 446:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** {
  58              	 .loc 1 446 0
  59              	 .cfi_startproc
  60 0000 80B5     	 push {r7,lr}
  61              	.LCFI3:
  62              	 .cfi_def_cfa_offset 8
  63              	 .cfi_offset 7,-8
  64              	 .cfi_offset 14,-4
  65 0002 82B0     	 sub sp,sp,#8
  66              	.LCFI4:
  67              	 .cfi_def_cfa_offset 16
  68 0004 00AF     	 add r7,sp,#0
  69              	.LCFI5:
  70              	 .cfi_def_cfa_register 7
  71 0006 021C     	 mov r2,r0
  72 0008 FB1D     	 add r3,r7,#7
  73 000a 1A70     	 strb r2,[r3]
 447:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (uint16_t)(~(uint16_t)NVM_NVMCONF_HRLEV_Msk);
  74              	 .loc 1 447 0
  75 000c 0B4A     	 ldr r2,.L4
  76 000e 0B4B     	 ldr r3,.L4
  77 0010 1B89     	 ldrh r3,[r3,#8]
  78 0012 9BB2     	 uxth r3,r3
  79 0014 0621     	 mov r1,#6
  80 0016 8B43     	 bic r3,r1
  81 0018 9BB2     	 uxth r3,r3
  82 001a 1381     	 strh r3,[r2,#8]
 448:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)(level << (uint16_t)NVM_NVMCONF_HRLEV_Pos);
  83              	 .loc 1 448 0
  84 001c 0749     	 ldr r1,.L4
  85 001e 074B     	 ldr r3,.L4
  86 0020 1B89     	 ldrh r3,[r3,#8]
  87 0022 9AB2     	 uxth r2,r3
  88 0024 FB1D     	 add r3,r7,#7
  89 0026 1B78     	 ldrb r3,[r3]
  90 0028 9BB2     	 uxth r3,r3
  91 002a DB18     	 add r3,r3,r3
  92 002c 9BB2     	 uxth r3,r3
  93 002e 1343     	 orr r3,r2
  94 0030 9BB2     	 uxth r3,r3
  95 0032 0B81     	 strh r3,[r1,#8]
 449:C:/Workspaces/DAVE_WS/USB_Changer/Libraries/XMCLib/inc\xmc1_flash.h **** }
  96              	 .loc 1 449 0
  97 0034 BD46     	 mov sp,r7
  98 0036 02B0     	 add sp,sp,#8
  99              	 
 100 0038 80BD     	 pop {r7,pc}
 101              	.L5:
 102 003a C046     	 .align 2
 103              	.L4:
 104 003c 00000540 	 .word 1074069504
 105              	 .cfi_endproc
 106              	.LFE47:
 108              	 .section .text.E_EEPROM_XMC1_GetAppVersion,"ax",%progbits
 109              	 .align 2
 110              	 .global E_EEPROM_XMC1_GetAppVersion
 111              	 .code 16
 112              	 .thumb_func
 114              	E_EEPROM_XMC1_GetAppVersion:
 115              	.LFB49:
 116              	 .file 2 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c"
   1:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**
   2:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @file e_eeprom_xmc1.c
   3:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @date 2018-08-08
   4:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
   5:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * NOTE:
   6:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
   8:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @cond
   9:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  10:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * E_EEPROM_XMC1 v4.1.14 - Emulates a portion of flash as an EEPROM for data storage.
  11:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  12:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * All rights reserved.
  14:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  15:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * following conditions are met:
  17:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  18:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   disclaimer.
  20:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  21:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  24:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  27:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  35:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  38:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  39:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Change History
  40:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * --------------
  41:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  42:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2015-02-16:
  43:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Initial version<br>
  44:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  45:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2015-04-24:
  46:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - E_EEPROM_XMC1_ReadBlockWithCRC API renamed to E_EEPROM_XMC1_VerifyBlockCrcStatus<br>
  47:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - E_EEPROM_XMC1_OPERATION_STATUS_t enumeration parameter names changed and additional status
  48:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *       E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN added.
  49:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  50:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2016-07-08:
  51:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Fixed incorrect case for an included header.<br>
  52:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  53:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2018-08-08:
  54:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Fixed issue E_EEPROM_XMC1_lGetPrevData() function to avoid that it can search beyond the e
  55:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  56:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @endcond
  57:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  58:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
  59:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  60:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
  61:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * HEADER FILES
  62:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  63:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  64:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #include "e_eeprom_xmc1.h"
  65:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  66:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
  67:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * MACROS
  68:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  69:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  70:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Define WEAK attribute */
  71:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #if !defined(__WEAK)
  72:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #if defined ( __CC_ARM )
  73:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  74:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __ICCARM__ )
  75:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __weak
  76:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __GNUC__ )
  77:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  78:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __TASKING__ )
  79:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  80:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
  81:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
  82:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  83:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Garbage Collection procedure States */
  84:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_UNINT             (0x0U)
  85:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_START        (0x1U)
  86:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_READ_NXTBLOCK     (0x2U)
  87:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_ERASE_PREV_BANK   (0x3U)
  88:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_REQUESTED         (0x4U)
  89:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_WRITE        (0x5U)
  90:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_END          (0x6U)
  91:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_NEXT_BANK_VALID   (0x7U)
  92:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_MARK_END_ERASE1   (0x8U)
  93:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_FAIL              (0x9U)
  94:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_IDLE              (0xAU)
  95:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  96:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Prepare DFLASH states states */
  97:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_FF         (0x1U)
  98:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_2F         (0x4U)
  99:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_2E         (0x5U)
 100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Cache Update states */ 
 103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_IDLE           (0U)
 104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_EMPTY_BLOCK    (1U)
 105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_NEXT_BLK       (2U)
 106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_UPDATE_DONE    (4U)
 107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Bank BLOCK values, used to store current status of the DFLASH */
 109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_ALL_ONES             ((uint32_t)0xFFFFFFFFU)
 110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_ALL_ZEROS            ((uint32_t)0x00000000U)
 111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_START_BIT            (0x80U)
 112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_BIT            (0x40U)
 113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_BIT              (0x10U)
 114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_MASK           ((uint32_t)(0x00004000U))
 115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_MASK             ((uint32_t)(0x00001000U))
 116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Internal Block status macros for implementation*/
 118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK1_DATA_SIZE     (12U)
 119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK2_DATA_SIZE     (14U)
 120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_8BIT_ALL_ONE         (0xFFU)
 121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND  ((uint32_t)(0xFFU))
 122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_SHIFT            (16U)
 123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_DUMMY_CRC            (0xA5A50000U)
 124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MASK_CRC             (0xFFFF0000U)
 125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Bank BLOCK offsets */
 127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_NEXT_VALID_OFFSET    (0U)
 128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BEGIN_OFFSET         (E_EEPROM_XMC1_FLASH_BLOCK_SIZE)
 129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_END_OF_COPY_OFFSET   (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 2U)
 130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_END_ERASE_OFFSET     (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 3U)
 131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_DATA_BLOCK_OFFSET    (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 16U)
 132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK1_DATA_OFFSET   (4U)
 133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK2_DATA_OFFSET   (2U)
 134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK_WRITE_IDLE     (0U)
 136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_FIRST_BLOCK_WRITE    (1U)
 137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_NEXT_BLOCK_WRITE     (2U)
 138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_LAST_BLOCK_WRITE     (3U)
 139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* States to monitor Garbage Collection completion, if it was interrupted earlier due to reset */
 141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NORMAL1         (0x2EU) /* Bank0 = VALID        BANK 1 = ERASED */
 142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_DATA_COPY1      (0x2AU) /* Bank0 = VALID        BANK 1 = COPY ON-GOING *
 143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_COPY_DONE2      (0x0AU) /* Bank0 = COPY COMPLETED  BANK 1 = COPY ON-GOIN
 144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NEXT_VALID2     (0x02U) /* Bank0 = COPY COMPLETED  BANK 1 = VALID */
 145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_END_ERASE2      (0xF2U) /* Bank0 = ERASE ON-GOING  BANK 1 = VALID */
 146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NORMAL2         (0xE2U) /* Bank1 = VALID        BANK 0 = ERASED */
 148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_DATA_COPY2      (0xA2U) /* Bank1 = VALID        BANK 0 = COPY ON-GOING *
 149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_COPY_DONE1      (0xA0U) /* Bank1 = COPY COMPLETED  BANK 0 = COPY ON-GOIN
 150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NEXT_VALID1     (0x20U) /* Bank1 = COPY COMPLETED  BANK 0 = VALID */
 151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_END_ERASE1      (0x2FU) /* Bank1 = ERASE ON-GOING  BANK 0 = VALID */
 152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_ALL_ERASED      (0xFFU)
 154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_2D        (0x2DU)
 156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_D2        (0xD2U)
 157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_AD        (0xADU)
 158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_DA        (0xDAU)
 159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_0D        (0x0DU)
 160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_D0        (0xD0U)
 161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_AF        (0xAFU)
 162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_FA        (0xFAU)
 163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_0F        (0x0FU)
 164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_F0        (0xF0U)
 165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_STATE          ((uint32_t)(0x20U))
 167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_COPY_COMPLETED       ((uint32_t)(0x00U))
 168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MARKER_MAX_SHIFT     ((uint32_t)(4U))
 170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK   ((uint32_t)(4U))
 171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PAGE1_EXTRA_WORDS    ((uint8_t)(48U))
 172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MARKER_POSITION      ((uint32_t)0x80U)
 173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /** Marker states on Init GC operation */
 175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_0                 ((uint32_t)0x00U)
 176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_1                 ((uint32_t)0x01U)
 177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_WRITTEN           ((uint32_t)0x00U)
 178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_ERASED            ((uint32_t)0x0FU)
 179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_DIRTY             ((uint32_t)0xDDU)
 180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BOTH_BANKS_VALID     ((uint32_t)0U) /* Both banks have clean markers */
 182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BANK0_INVALID        ((uint32_t)1U) /* Bank 0 is having dirty marker */
 183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BANK1_INVALID        ((uint32_t)2U) /* Bank 1 is having dirty marker */
 184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BOTH_BANKS_INVALID   ((uint32_t)3U) /* Both banks are having dirty markers */
 185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_TWO_BYTES            ((uint32_t)0x02U)
 187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_TWO_BIT_POS          ((uint32_t)0x02U)
 188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_FOUR_BYTES           ((uint32_t)0x04U)
 189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EIGHT_BYTES          ((uint32_t)0x08U)
 190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EIGHT_BIT_POS        ((uint32_t)0x08U)
 191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE (0x0U)
 193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_PREP_FLASH   (0x1U)
 194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_GC_STATE     (0x2U)
 195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * LOCAL DATA
 198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
 199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * LOCAL ROUTINES
 202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
 203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data);
 205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data);
 206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data);
 207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address);
 208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadSingleWord(uint32_t const address);
 209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void);
 210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitDirtyStateMachine(void);
 212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitNormalStateMachine(void);
 213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitllegalStateMachine(void);
 214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void);
 215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void);
 216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void);
 217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGc(const uint32_t  marker_dirty_state);
 218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process);
 219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset);
 220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPrepareDFlash(void);
 222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lGarbageCollection(void);
 223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void);
 224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state);
 225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block);
 226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset);
 227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void);
 228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery(uint32_t current_state ,
 229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                          uint32_t NextState,
 230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                          uint32_t page_addr_select);
 231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCache(void);
 233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEvalBlockStatus(void);
 234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void);
 235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void);
 236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr);
 237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void);
 239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number);
 240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size);
 241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address);
 242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address);
 243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcStartCopy(void);
 245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcRequested(void);
 246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void);
 247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcCopyWrite(void);
 248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state);
 249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void);
 250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t user_block_index);
 251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr);
 252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lLocalWrite(uint8_t block_number,
 253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                           uint8_t* data_buffer_ptr,
 254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                           uint32_t invalidate);
 255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateNextBlock(uint8_t block_number,
 256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                              uint8_t* const user_data_buffer_ptr ,
 257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                              uint32_t block_size);
 258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number, uint8_t* user_data_buffer_ptr, 
 259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_lReadBlockCrcStatus(uint8_t block_number,
 261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                           uint8_t* data_buffer_ptr,
 262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                           uint32_t block_size);
 263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *data_buffer_ptr, uint32_t length, uint32_
 265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetPrevData(uint8_t block_number);
 266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lSearchBlockCopy(uint8_t required_block_number,
 267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t read_addr ,
 268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t data_sec_start_addr);
 269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *  These are global functions used only for internal testing purpose.
 271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *  Application code shall not use these variables by enabling E_EEPROM_XMC1_TEST_HOOK_ENABLE macro
 272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
 274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(uint32_t const address, const uint32_t *const 
 275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(uint32_t const address, uint32_t *const data)
 278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(uint32_t const address, const uint32_t *const d
 281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(uint32_t const address)
 284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK uint32_t E_EEPROM_XMC1_TEST_HOOK_ReadSingleWord(uint32_t const address)
 287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** return (0U);
 289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK uint32_t E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus(void)
 291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** return (0U);
 293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * API IMPLEMENTATION
 298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** ***************************************************************************************************
 299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : DAVE_APP_VERSION_t
 304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Reads the APP implementation version.
 306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** DAVE_APP_VERSION_t E_EEPROM_XMC1_GetAppVersion(void)
 308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 117              	 .loc 2 308 0
 118              	 .cfi_startproc
 119 0000 80B5     	 push {r7,lr}
 120              	.LCFI6:
 121              	 .cfi_def_cfa_offset 8
 122              	 .cfi_offset 7,-8
 123              	 .cfi_offset 14,-4
 124 0002 82B0     	 sub sp,sp,#8
 125              	.LCFI7:
 126              	 .cfi_def_cfa_offset 16
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI8:
 129              	 .cfi_def_cfa_register 7
 309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   DAVE_APP_VERSION_t version;
 310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.major = E_EEPROM_XMC1_MAJOR_VERSION;
 130              	 .loc 2 311 0
 131 0006 3B1C     	 mov r3,r7
 132 0008 0422     	 mov r2,#4
 133 000a 1A70     	 strb r2,[r3]
 312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.minor = E_EEPROM_XMC1_MINOR_VERSION;
 134              	 .loc 2 312 0
 135 000c 3B1C     	 mov r3,r7
 136 000e 0122     	 mov r2,#1
 137 0010 5A70     	 strb r2,[r3,#1]
 313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.patch = E_EEPROM_XMC1_PATCH_VERSION;
 138              	 .loc 2 313 0
 139 0012 3B1C     	 mov r3,r7
 140 0014 0E22     	 mov r2,#14
 141 0016 9A70     	 strb r2,[r3,#2]
 314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return version;
 142              	 .loc 2 315 0
 143 0018 3B1D     	 add r3,r7,#4
 144 001a 3A1C     	 mov r2,r7
 145 001c 1188     	 ldrh r1,[r2]
 146 001e 1980     	 strh r1,[r3]
 147 0020 9278     	 ldrb r2,[r2,#2]
 148 0022 9A70     	 strb r2,[r3,#2]
 149 0024 3A1D     	 add r2,r7,#4
 150 0026 0023     	 mov r3,#0
 151 0028 1178     	 ldrb r1,[r2]
 152 002a FF20     	 mov r0,#255
 153 002c 0140     	 and r1,r0
 154 002e FF20     	 mov r0,#255
 155 0030 8343     	 bic r3,r0
 156 0032 0B43     	 orr r3,r1
 157 0034 5178     	 ldrb r1,[r2,#1]
 158 0036 FF20     	 mov r0,#255
 159 0038 0140     	 and r1,r0
 160 003a 0902     	 lsl r1,r1,#8
 161 003c 0648     	 ldr r0,.L8
 162 003e 0340     	 and r3,r0
 163 0040 0B43     	 orr r3,r1
 164 0042 9278     	 ldrb r2,[r2,#2]
 165 0044 FF21     	 mov r1,#255
 166 0046 0A40     	 and r2,r1
 167 0048 1204     	 lsl r2,r2,#16
 168 004a 0449     	 ldr r1,.L8+4
 169 004c 0B40     	 and r3,r1
 170 004e 1343     	 orr r3,r2
 316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 171              	 .loc 2 316 0
 172 0050 181C     	 mov r0,r3
 173 0052 BD46     	 mov sp,r7
 174 0054 02B0     	 add sp,sp,#8
 175              	 
 176 0056 80BD     	 pop {r7,pc}
 177              	.L9:
 178              	 .align 2
 179              	.L8:
 180 0058 FF00FFFF 	 .word -65281
 181 005c FFFF00FF 	 .word -16711681
 182              	 .cfi_endproc
 183              	.LFE49:
 185              	 .section .text.E_EEPROM_XMC1_Init,"ax",%progbits
 186              	 .align 2
 187              	 .global E_EEPROM_XMC1_Init
 188              	 .code 16
 189              	 .thumb_func
 191              	E_EEPROM_XMC1_Init:
 192              	.LFB50:
 317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : handle_ptr
 320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Driver Module Initialization function. This service shall initialize the Flash
 324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   module using the values provided by configuration set.
 325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_Init(E_EEPROM_XMC1_t *const handle_ptr)
 327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 193              	 .loc 2 327 0
 194              	 .cfi_startproc
 195 0000 80B5     	 push {r7,lr}
 196              	.LCFI9:
 197              	 .cfi_def_cfa_offset 8
 198              	 .cfi_offset 7,-8
 199              	 .cfi_offset 14,-4
 200 0002 86B0     	 sub sp,sp,#24
 201              	.LCFI10:
 202              	 .cfi_def_cfa_offset 32
 203 0004 00AF     	 add r7,sp,#0
 204              	.LCFI11:
 205              	 .cfi_def_cfa_register 7
 206 0006 7860     	 str r0,[r7,#4]
 328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
 329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_state;
 330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (handle_ptr != NULL));
 332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the E_EEPROM_XMC1_Init API is called once*/
 334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
 207              	 .loc 2 334 0
 208 0008 7B68     	 ldr r3,[r7,#4]
 209 000a 1B7A     	 ldrb r3,[r3,#8]
 210 000c 002B     	 cmp r3,#0
 211 000e 00D1     	 bne .LCB174
 212 0010 84E0     	 b .L11
 213              	.LCB174:
 335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     handle_ptr->state = (E_EEPROM_XMC1_STATUS_t)CRC_SW_Init(handle_ptr->crc_handle_ptr);
 338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
 339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
 341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     #endif
 344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Initialize the cache variables for the User defined Block configuration list */
 346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       indx = 0U;
 214              	 .loc 2 346 0
 215 0012 0023     	 mov r3,#0
 216 0014 7B61     	 str r3,[r7,#20]
 217              	.L12:
 218              	.LBB2:
 347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       do
 348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_CACHE_t * block_ptr;
 350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr = &(handle_ptr->data_ptr->block_info[indx]);
 219              	 .loc 2 350 0 discriminator 1
 220 0016 7B68     	 ldr r3,[r7,#4]
 221 0018 5A68     	 ldr r2,[r3,#4]
 222 001a 7B69     	 ldr r3,[r7,#20]
 223 001c DB00     	 lsl r3,r3,#3
 224 001e D318     	 add r3,r2,r3
 225 0020 3B61     	 str r3,[r7,#16]
 351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->address = 0U;
 226              	 .loc 2 352 0 discriminator 1
 227 0022 3B69     	 ldr r3,[r7,#16]
 228 0024 0022     	 mov r2,#0
 229 0026 1A60     	 str r2,[r3]
 353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.consistent = 0U;
 230              	 .loc 2 353 0 discriminator 1
 231 0028 3B69     	 ldr r3,[r7,#16]
 232 002a 1A79     	 ldrb r2,[r3,#4]
 233 002c 0221     	 mov r1,#2
 234 002e 8A43     	 bic r2,r1
 235 0030 1A71     	 strb r2,[r3,#4]
 354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.valid = 1U;
 236              	 .loc 2 354 0 discriminator 1
 237 0032 3B69     	 ldr r3,[r7,#16]
 238 0034 1A79     	 ldrb r2,[r3,#4]
 239 0036 0121     	 mov r1,#1
 240 0038 0A43     	 orr r2,r1
 241 003a 1A71     	 strb r2,[r3,#4]
 355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.copied = 0U;
 242              	 .loc 2 355 0 discriminator 1
 243 003c 3B69     	 ldr r3,[r7,#16]
 244 003e 1A79     	 ldrb r2,[r3,#4]
 245 0040 0421     	 mov r1,#4
 246 0042 8A43     	 bic r2,r1
 247 0044 1A71     	 strb r2,[r3,#4]
 356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.crc = 0U;
 248              	 .loc 2 356 0 discriminator 1
 249 0046 3B69     	 ldr r3,[r7,#16]
 250 0048 1A79     	 ldrb r2,[r3,#4]
 251 004a 0821     	 mov r1,#8
 252 004c 8A43     	 bic r2,r1
 253 004e 1A71     	 strb r2,[r3,#4]
 357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         indx++;
 254              	 .loc 2 357 0 discriminator 1
 255 0050 7B69     	 ldr r3,[r7,#20]
 256 0052 0133     	 add r3,r3,#1
 257 0054 7B61     	 str r3,[r7,#20]
 258              	.LBE2:
 358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       } while (indx < handle_ptr->block_count);
 259              	 .loc 2 358 0 discriminator 1
 260 0056 7B68     	 ldr r3,[r7,#4]
 261 0058 5B7A     	 ldrb r3,[r3,#9]
 262 005a 1A1E     	 sub r2,r3,#0
 263 005c 7B69     	 ldr r3,[r7,#20]
 264 005e 9A42     	 cmp r2,r3
 265 0060 D9D8     	 bhi .L12
 359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /********* Initialize all global variables *****************/
 361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->updated_cache_index = 0U;
 266              	 .loc 2 361 0
 267 0062 7B68     	 ldr r3,[r7,#4]
 268 0064 5A68     	 ldr r2,[r3,#4]
 269 0066 BA23     	 mov r3,#186
 270 0068 5B00     	 lsl r3,r3,#1
 271 006a 0021     	 mov r1,#0
 272 006c D150     	 str r1,[r2,r3]
 362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->cache_state = E_EEPROM_XMC1_CACHE_IDLE;
 273              	 .loc 2 362 0
 274 006e 7B68     	 ldr r3,[r7,#4]
 275 0070 5A68     	 ldr r2,[r3,#4]
 276 0072 B823     	 mov r3,#184
 277 0074 5B00     	 lsl r3,r3,#1
 278 0076 0021     	 mov r1,#0
 279 0078 D150     	 str r1,[r2,r3]
 363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_state = E_EEPROM_XMC1_GC_UNINT;
 280              	 .loc 2 363 0
 281 007a 7B68     	 ldr r3,[r7,#4]
 282 007c 5A68     	 ldr r2,[r3,#4]
 283 007e B223     	 mov r3,#178
 284 0080 5B00     	 lsl r3,r3,#1
 285 0082 0021     	 mov r1,#0
 286 0084 D150     	 str r1,[r2,r3]
 364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->init_gc_state = 0U;
 287              	 .loc 2 364 0
 288 0086 7B68     	 ldr r3,[r7,#4]
 289 0088 5A68     	 ldr r2,[r3,#4]
 290 008a B423     	 mov r3,#180
 291 008c 5B00     	 lsl r3,r3,#1
 292 008e 0021     	 mov r1,#0
 293 0090 D150     	 str r1,[r2,r3]
 365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_log_block_count = 0U;
 294              	 .loc 2 365 0
 295 0092 7B68     	 ldr r3,[r7,#4]
 296 0094 5A68     	 ldr r2,[r3,#4]
 297 0096 B623     	 mov r3,#182
 298 0098 5B00     	 lsl r3,r3,#1
 299 009a 0021     	 mov r1,#0
 300 009c D150     	 str r1,[r2,r3]
 366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->crc_buffer = 0U;
 301              	 .loc 2 366 0
 302 009e 7B68     	 ldr r3,[r7,#4]
 303 00a0 5B68     	 ldr r3,[r3,#4]
 304 00a2 0022     	 mov r2,#0
 305 00a4 DA65     	 str r2,[r3,#92]
 367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->written_block_counter = (uint32_t)0;
 306              	 .loc 2 368 0
 307 00a6 7B68     	 ldr r3,[r7,#4]
 308 00a8 5B68     	 ldr r3,[r3,#4]
 309 00aa 0022     	 mov r2,#0
 310 00ac 9A64     	 str r2,[r3,#72]
 369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->curr_bank_src_addr = 0U;
 311              	 .loc 2 369 0
 312 00ae 7B68     	 ldr r3,[r7,#4]
 313 00b0 5B68     	 ldr r3,[r3,#4]
 314 00b2 0022     	 mov r2,#0
 315 00b4 1A64     	 str r2,[r3,#64]
 370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_src_addr = 0U;
 316              	 .loc 2 370 0
 317 00b6 7B68     	 ldr r3,[r7,#4]
 318 00b8 5B68     	 ldr r3,[r3,#4]
 319 00ba 0022     	 mov r2,#0
 320 00bc 1A63     	 str r2,[r3,#48]
 371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_dest_addr = 0U;
 321              	 .loc 2 371 0
 322 00be 7B68     	 ldr r3,[r7,#4]
 323 00c0 5B68     	 ldr r3,[r3,#4]
 324 00c2 0022     	 mov r2,#0
 325 00c4 DA62     	 str r2,[r3,#44]
 372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->next_free_block_addr = 0U;
 326              	 .loc 2 372 0
 327 00c6 7B68     	 ldr r3,[r7,#4]
 328 00c8 5B68     	 ldr r3,[r3,#4]
 329 00ca 0022     	 mov r2,#0
 330 00cc DA63     	 str r2,[r3,#60]
 373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_block_counter = (uint32_t)0;
 331              	 .loc 2 373 0
 332 00ce 7B68     	 ldr r3,[r7,#4]
 333 00d0 5B68     	 ldr r3,[r3,#4]
 334 00d2 0022     	 mov r2,#0
 335 00d4 5A64     	 str r2,[r3,#68]
 374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->user_write_bytes_count = 0U;
 336              	 .loc 2 374 0
 337 00d6 7B68     	 ldr r3,[r7,#4]
 338 00d8 5A68     	 ldr r2,[r3,#4]
 339 00da B023     	 mov r3,#176
 340 00dc 5B00     	 lsl r3,r3,#1
 341 00de 0021     	 mov r1,#0
 342 00e0 D150     	 str r1,[r2,r3]
 375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->current_bank = 0U;
 343              	 .loc 2 376 0
 344 00e2 7B68     	 ldr r3,[r7,#4]
 345 00e4 5B68     	 ldr r3,[r3,#4]
 346 00e6 0022     	 mov r2,#0
 347 00e8 9A62     	 str r2,[r3,#40]
 377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_WRITTEN);
 348              	 .loc 2 378 0
 349 00ea 0120     	 mov r0,#1
 350 00ec FFF7FEFF 	 bl XMC_FLASH_SetHardReadLevel
 379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Read the marker blocks from flash and decide the MARKER STATES */
 381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       marker_state = E_EEPROM_XMC1_lReadMarkerBlocks();
 351              	 .loc 2 381 0
 352 00f0 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadMarkerBlocks
 353 00f4 031C     	 mov r3,r0
 354 00f6 FB60     	 str r3,[r7,#12]
 382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*
 385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * Call INIT-GC state machine function to take decision on current MARKER STATE available.
 386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * Progress to GC state machine or PrepareDFLASH State machine after completing  the Cache up
 387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        */
 388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGc(marker_state);
 355              	 .loc 2 388 0
 356 00f8 FB68     	 ldr r3,[r7,#12]
 357 00fa 181C     	 mov r0,r3
 358 00fc FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGc
 389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If Initialization is done without any errors, set the INIT API called state into Initializ
 391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (handle_ptr->data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 359              	 .loc 2 391 0
 360 0100 7B68     	 ldr r3,[r7,#4]
 361 0102 5A68     	 ldr r2,[r3,#4]
 362 0104 B223     	 mov r3,#178
 363 0106 5B00     	 lsl r3,r3,#1
 364 0108 D358     	 ldr r3,[r2,r3]
 365 010a 0A2B     	 cmp r3,#10
 366 010c 03D1     	 bne .L13
 392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         handle_ptr->state = E_EEPROM_XMC1_STATUS_SUCCESS;
 367              	 .loc 2 393 0
 368 010e 7B68     	 ldr r3,[r7,#4]
 369 0110 0022     	 mov r2,#0
 370 0112 1A72     	 strb r2,[r3,#8]
 371 0114 02E0     	 b .L11
 372              	.L13:
 394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
 373              	 .loc 2 397 0
 374 0116 7B68     	 ldr r3,[r7,#4]
 375 0118 0122     	 mov r2,#1
 376 011a 1A72     	 strb r2,[r3,#8]
 377              	.L11:
 398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (handle_ptr->state);
 378              	 .loc 2 401 0
 379 011c 7B68     	 ldr r3,[r7,#4]
 380 011e 1B7A     	 ldrb r3,[r3,#8]
 402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 381              	 .loc 2 402 0
 382 0120 181C     	 mov r0,r3
 383 0122 BD46     	 mov sp,r7
 384 0124 06B0     	 add sp,sp,#24
 385              	 
 386 0126 80BD     	 pop {r7,pc}
 387              	 .cfi_endproc
 388              	.LFE50:
 390              	 .section .text.E_EEPROM_XMC1_Write,"ax",%progbits
 391              	 .align 2
 392              	 .global E_EEPROM_XMC1_Write
 393              	 .code 16
 394              	 .thumb_func
 396              	E_EEPROM_XMC1_Write:
 397              	.LFB51:
 403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block (Block-ID)
 406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Pointer to user data buffer
 407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : E_EEPROM_XMC1_OPERATION_STATUS_t
 409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function shall write user data block into flash.
 411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Write(uint8_t block_number, uint8_t *data_buffer_ptr
 413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 398              	 .loc 2 413 0
 399              	 .cfi_startproc
 400 0000 80B5     	 push {r7,lr}
 401              	.LCFI12:
 402              	 .cfi_def_cfa_offset 8
 403              	 .cfi_offset 7,-8
 404              	 .cfi_offset 14,-4
 405 0002 84B0     	 sub sp,sp,#16
 406              	.LCFI13:
 407              	 .cfi_def_cfa_offset 24
 408 0004 00AF     	 add r7,sp,#0
 409              	.LCFI14:
 410              	 .cfi_def_cfa_register 7
 411 0006 021C     	 mov r2,r0
 412 0008 3960     	 str r1,[r7]
 413 000a FB1D     	 add r3,r7,#7
 414 000c 1A70     	 strb r2,[r3]
 414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 415              	 .loc 2 417 0
 416 000e 104B     	 ldr r3,.L18
 417 0010 5B68     	 ldr r3,[r3,#4]
 418 0012 BB60     	 str r3,[r7,#8]
 418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(block_numbe
 420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                         E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND));
 421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 419              	 .loc 2 423 0
 420 0014 0F23     	 mov r3,#15
 421 0016 FB18     	 add r3,r7,r3
 422 0018 0522     	 mov r2,#5
 423 001a 1A70     	 strb r2,[r3]
 424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute only if there is no previous pending request and the GC process is in IDLE state */
 426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 424              	 .loc 2 426 0
 425 001c BA68     	 ldr r2,[r7,#8]
 426 001e B223     	 mov r3,#178
 427 0020 5B00     	 lsl r3,r3,#1
 428 0022 D358     	 ldr r3,[r2,r3]
 429 0024 0A2B     	 cmp r3,#10
 430 0026 0BD1     	 bne .L16
 427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to write the specified block of data into flash */
 429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite(block_number, data_buffer_
 431              	 .loc 2 429 0
 432 0028 FB1D     	 add r3,r7,#7
 433 002a 1A78     	 ldrb r2,[r3]
 434 002c 3B68     	 ldr r3,[r7]
 435 002e 101C     	 mov r0,r2
 436 0030 191C     	 mov r1,r3
 437 0032 0022     	 mov r2,#0
 438 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lLocalWrite
 439 0038 021C     	 mov r2,r0
 440 003a 0F23     	 mov r3,#15
 441 003c FB18     	 add r3,r7,r3
 442 003e 1A70     	 strb r2,[r3]
 443              	.L16:
 430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 444              	 .loc 2 432 0
 445 0040 0F23     	 mov r3,#15
 446 0042 FB18     	 add r3,r7,r3
 447 0044 1B78     	 ldrb r3,[r3]
 433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 448              	 .loc 2 433 0
 449 0046 181C     	 mov r0,r3
 450 0048 BD46     	 mov sp,r7
 451 004a 04B0     	 add sp,sp,#16
 452              	 
 453 004c 80BD     	 pop {r7,pc}
 454              	.L19:
 455 004e C046     	 .align 2
 456              	.L18:
 457 0050 00000000 	 .word E_EEPROM_XMC1_0
 458              	 .cfi_endproc
 459              	.LFE51:
 461              	 .section .text.E_EEPROM_XMC1_InvalidateBlock,"ax",%progbits
 462              	 .align 2
 463              	 .global E_EEPROM_XMC1_InvalidateBlock
 464              	 .code 16
 465              	 .thumb_func
 467              	E_EEPROM_XMC1_InvalidateBlock:
 468              	.LFB52:
 434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : block_number  - Number of logical block (Block-ID)
 437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
 438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * 
 440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : This function shall invalidate user data block.
 441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
 442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_InvalidateBlock(uint8_t block_number)
 443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 469              	 .loc 2 443 0
 470              	 .cfi_startproc
 471 0000 80B5     	 push {r7,lr}
 472              	.LCFI15:
 473              	 .cfi_def_cfa_offset 8
 474              	 .cfi_offset 7,-8
 475              	 .cfi_offset 14,-4
 476 0002 86B0     	 sub sp,sp,#24
 477              	.LCFI16:
 478              	 .cfi_def_cfa_offset 32
 479 0004 00AF     	 add r7,sp,#0
 480              	.LCFI17:
 481              	 .cfi_def_cfa_register 7
 482 0006 021C     	 mov r2,r0
 483 0008 FB1D     	 add r3,r7,#7
 484 000a 1A70     	 strb r2,[r3]
 444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* data_buffer_ptr;
 445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 485              	 .loc 2 448 0
 486 000c 114B     	 ldr r3,.L23
 487 000e 5B68     	 ldr r3,[r3,#4]
 488 0010 3B61     	 str r3,[r7,#16]
 449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_InvalidateBlock:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(b
 450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                   E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND
 451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_buffer_ptr =  data_ptr->read_write_buffer;
 489              	 .loc 2 451 0
 490 0012 3B69     	 ldr r3,[r7,#16]
 491 0014 4C33     	 add r3,r3,#76
 492 0016 FB60     	 str r3,[r7,#12]
 452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 493              	 .loc 2 452 0
 494 0018 1723     	 mov r3,#23
 495 001a FB18     	 add r3,r7,r3
 496 001c 0522     	 mov r2,#5
 497 001e 1A70     	 strb r2,[r3]
 453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute only if there is no previous pending request and the GC process is in IDLE state */
 455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 498              	 .loc 2 455 0
 499 0020 3A69     	 ldr r2,[r7,#16]
 500 0022 B223     	 mov r3,#178
 501 0024 5B00     	 lsl r3,r3,#1
 502 0026 D358     	 ldr r3,[r2,r3]
 503 0028 0A2B     	 cmp r3,#10
 504 002a 0BD1     	 bne .L21
 456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to write the specified block of data into flash */
 458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite( block_number, data_buffer
 505              	 .loc 2 458 0
 506 002c FB1D     	 add r3,r7,#7
 507 002e 1A78     	 ldrb r2,[r3]
 508 0030 FB68     	 ldr r3,[r7,#12]
 509 0032 101C     	 mov r0,r2
 510 0034 191C     	 mov r1,r3
 511 0036 0122     	 mov r2,#1
 512 0038 FFF7FEFF 	 bl E_EEPROM_XMC1_lLocalWrite
 513 003c 021C     	 mov r2,r0
 514 003e 1723     	 mov r3,#23
 515 0040 FB18     	 add r3,r7,r3
 516 0042 1A70     	 strb r2,[r3]
 517              	.L21:
 459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 518              	 .loc 2 461 0
 519 0044 1723     	 mov r3,#23
 520 0046 FB18     	 add r3,r7,r3
 521 0048 1B78     	 ldrb r3,[r3]
 462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 522              	 .loc 2 462 0
 523 004a 181C     	 mov r0,r3
 524 004c BD46     	 mov sp,r7
 525 004e 06B0     	 add sp,sp,#24
 526              	 
 527 0050 80BD     	 pop {r7,pc}
 528              	.L24:
 529 0052 C046     	 .align 2
 530              	.L23:
 531 0054 00000000 	 .word E_EEPROM_XMC1_0
 532              	 .cfi_endproc
 533              	.LFE52:
 535              	 .section .text.E_EEPROM_XMC1_Read,"ax",%progbits
 536              	 .align 2
 537              	 .global E_EEPROM_XMC1_Read
 538              	 .code 16
 539              	 .thumb_func
 541              	E_EEPROM_XMC1_Read:
 542              	.LFB53:
 463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block
 466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset      - Start Location for Read start
 467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length      - End Location for read completion
 469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                                                                   
 472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall read user data blocks from flash.
 473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Read(uint8_t block_number,
 475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint32_t offset,
 476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint8_t *data_buffer_ptr,
 477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint32_t length)
 478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 543              	 .loc 2 478 0
 544              	 .cfi_startproc
 545 0000 80B5     	 push {r7,lr}
 546              	.LCFI18:
 547              	 .cfi_def_cfa_offset 8
 548              	 .cfi_offset 7,-8
 549              	 .cfi_offset 14,-4
 550 0002 88B0     	 sub sp,sp,#32
 551              	.LCFI19:
 552              	 .cfi_def_cfa_offset 40
 553 0004 00AF     	 add r7,sp,#0
 554              	.LCFI20:
 555              	 .cfi_def_cfa_register 7
 556 0006 B960     	 str r1,[r7,#8]
 557 0008 7A60     	 str r2,[r7,#4]
 558 000a 3B60     	 str r3,[r7]
 559 000c 0F23     	 mov r3,#15
 560 000e FB18     	 add r3,r7,r3
 561 0010 021C     	 add r2,r0,#0
 562 0012 1A70     	 strb r2,[r3]
 479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 563              	 .loc 2 484 0
 564 0014 314B     	 ldr r3,.L30
 565 0016 5B68     	 ldr r3,[r3,#4]
 566 0018 BB61     	 str r3,[r7,#24]
 485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 567              	 .loc 2 485 0
 568 001a 0F23     	 mov r3,#15
 569 001c FB18     	 add r3,r7,r3
 570 001e 1B78     	 ldrb r3,[r3]
 571 0020 181C     	 mov r0,r3
 572 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 573 0026 031C     	 mov r3,r0
 574 0028 7B61     	 str r3,[r7,#20]
 486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 575              	 .loc 2 486 0
 576 002a 2C4B     	 ldr r3,.L30
 577 002c 1A68     	 ldr r2,[r3]
 578 002e 7B69     	 ldr r3,[r7,#20]
 579 0030 DB00     	 lsl r3,r3,#3
 580 0032 D318     	 add r3,r2,r3
 581 0034 5B68     	 ldr r3,[r3,#4]
 582 0036 3B61     	 str r3,[r7,#16]
 487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Read:Wrong Block Number", (user_block_index  != E_EEPROM_XMC1_LOG_BLOCK
 489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Read:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 583              	 .loc 2 491 0
 584 0038 1F23     	 mov r3,#31
 585 003a FB18     	 add r3,r7,r3
 586 003c 0522     	 mov r2,#5
 587 003e 1A70     	 strb r2,[r3]
 492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
 588              	 .loc 2 494 0
 589 0040 BA69     	 ldr r2,[r7,#24]
 590 0042 B223     	 mov r3,#178
 591 0044 5B00     	 lsl r3,r3,#1
 592 0046 D358     	 ldr r3,[r2,r3]
 593 0048 0A2B     	 cmp r3,#10
 594 004a 40D1     	 bne .L26
 595              	 .loc 2 494 0 is_stmt 0 discriminator 1
 596 004c BA68     	 ldr r2,[r7,#8]
 597 004e 3B68     	 ldr r3,[r7]
 598 0050 D218     	 add r2,r2,r3
 599 0052 3B69     	 ldr r3,[r7,#16]
 600 0054 9A42     	 cmp r2,r3
 601 0056 3AD8     	 bhi .L26
 495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
 602              	 .loc 2 496 0 is_stmt 1
 603 0058 BA69     	 ldr r2,[r7,#24]
 604 005a 7B69     	 ldr r3,[r7,#20]
 605 005c DB00     	 lsl r3,r3,#3
 606 005e D318     	 add r3,r2,r3
 607 0060 1B79     	 ldrb r3,[r3,#4]
 608 0062 DB07     	 lsl r3,r3,#31
 609 0064 DB0F     	 lsr r3,r3,#31
 610 0066 DBB2     	 uxtb r3,r3
 611 0068 002B     	 cmp r3,#0
 612 006a 04D1     	 bne .L27
 497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
 613              	 .loc 2 498 0
 614 006c 1F23     	 mov r3,#31
 615 006e FB18     	 add r3,r7,r3
 616 0070 0322     	 mov r2,#3
 617 0072 1A70     	 strb r2,[r3]
 618 0074 2BE0     	 b .L26
 619              	.L27:
 499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Inval
 620              	 .loc 2 500 0
 621 0076 BA69     	 ldr r2,[r7,#24]
 622 0078 7B69     	 ldr r3,[r7,#20]
 623 007a DB00     	 lsl r3,r3,#3
 624 007c D318     	 add r3,r2,r3
 625 007e 1B79     	 ldrb r3,[r3,#4]
 626 0080 9B07     	 lsl r3,r3,#30
 627 0082 DB0F     	 lsr r3,r3,#31
 628 0084 DBB2     	 uxtb r3,r3
 629 0086 002B     	 cmp r3,#0
 630 0088 04D1     	 bne .L28
 501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 631              	 .loc 2 502 0
 632 008a 1F23     	 mov r3,#31
 633 008c FB18     	 add r3,r7,r3
 634 008e 0222     	 mov r2,#2
 635 0090 1A70     	 strb r2,[r3]
 636 0092 1CE0     	 b .L26
 637              	.L28:
 503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address = data_ptr->block_info[user_block_index].address;
 638              	 .loc 2 506 0
 639 0094 BB69     	 ldr r3,[r7,#24]
 640 0096 7A69     	 ldr r2,[r7,#20]
 641 0098 D200     	 lsl r2,r2,#3
 642 009a D158     	 ldr r1,[r2,r3]
 643 009c BA69     	 ldr r2,[r7,#24]
 644 009e BE23     	 mov r3,#190
 645 00a0 5B00     	 lsl r3,r3,#1
 646 00a2 D150     	 str r1,[r2,r3]
 507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr ,
 647              	 .loc 2 507 0
 648 00a4 7968     	 ldr r1,[r7,#4]
 649 00a6 3A68     	 ldr r2,[r7]
 650 00a8 BB68     	 ldr r3,[r7,#8]
 651 00aa 081C     	 mov r0,r1
 652 00ac 111C     	 mov r1,r2
 653 00ae 1A1C     	 mov r2,r3
 654 00b0 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadBlockContents
 655 00b4 021C     	 mov r2,r0
 656 00b6 1F23     	 mov r3,#31
 657 00b8 FB18     	 add r3,r7,r3
 658 00ba 1A70     	 strb r2,[r3]
 508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((uint32_t)status != 0U)
 659              	 .loc 2 509 0
 660 00bc 1F23     	 mov r3,#31
 661 00be FB18     	 add r3,r7,r3
 662 00c0 1B78     	 ldrb r3,[r3]
 663 00c2 002B     	 cmp r3,#0
 664 00c4 03D0     	 beq .L26
 510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****          status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 665              	 .loc 2 511 0
 666 00c6 1F23     	 mov r3,#31
 667 00c8 FB18     	 add r3,r7,r3
 668 00ca 0122     	 mov r2,#1
 669 00cc 1A70     	 strb r2,[r3]
 670              	.L26:
 512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 671              	 .loc 2 515 0
 672 00ce 1F23     	 mov r3,#31
 673 00d0 FB18     	 add r3,r7,r3
 674 00d2 1B78     	 ldrb r3,[r3]
 516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 675              	 .loc 2 516 0
 676 00d4 181C     	 mov r0,r3
 677 00d6 BD46     	 mov sp,r7
 678 00d8 08B0     	 add sp,sp,#32
 679              	 
 680 00da 80BD     	 pop {r7,pc}
 681              	.L31:
 682              	 .align 2
 683              	.L30:
 684 00dc 00000000 	 .word E_EEPROM_XMC1_0
 685              	 .cfi_endproc
 686              	.LFE53:
 688              	 .section .text.E_EEPROM_XMC1_StartGarbageCollection,"ax",%progbits
 689              	 .align 2
 690              	 .global E_EEPROM_XMC1_StartGarbageCollection
 691              	 .code 16
 692              	 .thumb_func
 694              	E_EEPROM_XMC1_StartGarbageCollection:
 695              	.LFB54:
 517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall start Garbage collection.
 524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_StartGarbageCollection(void)
 526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 696              	 .loc 2 526 0
 697              	 .cfi_startproc
 698 0000 80B5     	 push {r7,lr}
 699              	.LCFI21:
 700              	 .cfi_def_cfa_offset 8
 701              	 .cfi_offset 7,-8
 702              	 .cfi_offset 14,-4
 703 0002 82B0     	 sub sp,sp,#8
 704              	.LCFI22:
 705              	 .cfi_def_cfa_offset 16
 706 0004 00AF     	 add r7,sp,#0
 707              	.LCFI23:
 708              	 .cfi_def_cfa_register 7
 527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 709              	 .loc 2 530 0
 710 0006 134B     	 ldr r3,.L36
 711 0008 5B68     	 ldr r3,[r3,#4]
 712 000a 3B60     	 str r3,[r7]
 531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 713              	 .loc 2 532 0
 714 000c FB1D     	 add r3,r7,#7
 715 000e 0522     	 mov r2,#5
 716 0010 1A70     	 strb r2,[r3]
 533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the E_EEPROM_XMC1_Init API is called */
 535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 717              	 .loc 2 535 0
 718 0012 3A68     	 ldr r2,[r7]
 719 0014 B223     	 mov r3,#178
 720 0016 5B00     	 lsl r3,r3,#1
 721 0018 D358     	 ldr r3,[r2,r3]
 722 001a 0A2B     	 cmp r3,#10
 723 001c 13D1     	 bne .L33
 536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
 724              	 .loc 2 537 0
 725 001e 3A68     	 ldr r2,[r7]
 726 0020 B223     	 mov r3,#178
 727 0022 5B00     	 lsl r3,r3,#1
 728 0024 0421     	 mov r1,#4
 729 0026 D150     	 str r1,[r2,r3]
 538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to start garbage collection process from scratch */
 540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 730              	 .loc 2 540 0
 731 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
 732              	 .loc 2 542 0
 733 002c 3A68     	 ldr r2,[r7]
 734 002e B223     	 mov r3,#178
 735 0030 5B00     	 lsl r3,r3,#1
 736 0032 D358     	 ldr r3,[r2,r3]
 737 0034 092B     	 cmp r3,#9
 738 0036 03D1     	 bne .L34
 543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 739              	 .loc 2 544 0
 740 0038 FB1D     	 add r3,r7,#7
 741 003a 0122     	 mov r2,#1
 742 003c 1A70     	 strb r2,[r3]
 743 003e 02E0     	 b .L33
 744              	.L34:
 545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS;
 745              	 .loc 2 548 0
 746 0040 FB1D     	 add r3,r7,#7
 747 0042 0022     	 mov r2,#0
 748 0044 1A70     	 strb r2,[r3]
 749              	.L33:
 549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 750              	 .loc 2 552 0
 751 0046 FB1D     	 add r3,r7,#7
 752 0048 1B78     	 ldrb r3,[r3]
 553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 753              	 .loc 2 553 0
 754 004a 181C     	 mov r0,r3
 755 004c BD46     	 mov sp,r7
 756 004e 02B0     	 add sp,sp,#8
 757              	 
 758 0050 80BD     	 pop {r7,pc}
 759              	.L37:
 760 0052 C046     	 .align 2
 761              	.L36:
 762 0054 00000000 	 .word E_EEPROM_XMC1_0
 763              	 .cfi_endproc
 764              	.LFE54:
 766              	 .section .text.E_EEPROM_XMC1_GetStatus,"ax",%progbits
 767              	 .align 2
 768              	 .global E_EEPROM_XMC1_GetStatus
 769              	 .code 16
 770              	 .thumb_func
 772              	E_EEPROM_XMC1_GetStatus:
 773              	.LFB55:
 554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall return the status of the APP
 561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_GetStatus(void)
 563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 774              	 .loc 2 563 0
 775              	 .cfi_startproc
 776 0000 80B5     	 push {r7,lr}
 777              	.LCFI24:
 778              	 .cfi_def_cfa_offset 8
 779              	 .cfi_offset 7,-8
 780              	 .cfi_offset 14,-4
 781 0002 82B0     	 sub sp,sp,#8
 782              	.LCFI25:
 783              	 .cfi_def_cfa_offset 16
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI26:
 786              	 .cfi_def_cfa_register 7
 564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_STATUS_t status;
 565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 787              	 .loc 2 566 0
 788 0006 104B     	 ldr r3,.L43
 789 0008 5B68     	 ldr r3,[r3,#4]
 790 000a 3B60     	 str r3,[r7]
 567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If the GC/InitGC has failed */
 569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 791              	 .loc 2 569 0
 792 000c 3A68     	 ldr r2,[r7]
 793 000e B223     	 mov r3,#178
 794 0010 5B00     	 lsl r3,r3,#1
 795 0012 D358     	 ldr r3,[r2,r3]
 796 0014 0A2B     	 cmp r3,#10
 797 0016 03D1     	 bne .L39
 570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_IDLE;
 798              	 .loc 2 571 0
 799 0018 FB1D     	 add r3,r7,#7
 800 001a 0322     	 mov r2,#3
 801 001c 1A70     	 strb r2,[r3]
 802 001e 0CE0     	 b .L40
 803              	.L39:
 572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
 804              	 .loc 2 573 0
 805 0020 3A68     	 ldr r2,[r7]
 806 0022 B223     	 mov r3,#178
 807 0024 5B00     	 lsl r3,r3,#1
 808 0026 D358     	 ldr r3,[r2,r3]
 809 0028 092B     	 cmp r3,#9
 810 002a 03D1     	 bne .L41
 574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_FAILURE;
 811              	 .loc 2 575 0
 812 002c FB1D     	 add r3,r7,#7
 813 002e 0122     	 mov r2,#1
 814 0030 1A70     	 strb r2,[r3]
 815 0032 02E0     	 b .L40
 816              	.L41:
 576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_BUSY;
 817              	 .loc 2 579 0
 818 0034 FB1D     	 add r3,r7,#7
 819 0036 0422     	 mov r2,#4
 820 0038 1A70     	 strb r2,[r3]
 821              	.L40:
 580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 822              	 .loc 2 582 0
 823 003a FB1D     	 add r3,r7,#7
 824 003c 1B78     	 ldrb r3,[r3]
 583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 825              	 .loc 2 583 0
 826 003e 181C     	 mov r0,r3
 827 0040 BD46     	 mov sp,r7
 828 0042 02B0     	 add sp,sp,#8
 829              	 
 830 0044 80BD     	 pop {r7,pc}
 831              	.L44:
 832 0046 C046     	 .align 2
 833              	.L43:
 834 0048 00000000 	 .word E_EEPROM_XMC1_0
 835              	 .cfi_endproc
 836              	.LFE55:
 838              	 .section .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded,"ax",%progbits
 839              	 .align 2
 840              	 .global E_EEPROM_XMC1_IsGarbageCollectionNeeded
 841              	 .code 16
 842              	 .thumb_func
 844              	E_EEPROM_XMC1_IsGarbageCollectionNeeded:
 845              	.LFB56:
 584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*This function returns the whether the block can be fit inside the bank or it needs a garbage coll
 586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** bool E_EEPROM_XMC1_IsGarbageCollectionNeeded(uint8_t block_number)
 587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 846              	 .loc 2 587 0
 847              	 .cfi_startproc
 848 0000 80B5     	 push {r7,lr}
 849              	.LCFI27:
 850              	 .cfi_def_cfa_offset 8
 851              	 .cfi_offset 7,-8
 852              	 .cfi_offset 14,-4
 853 0002 88B0     	 sub sp,sp,#32
 854              	.LCFI28:
 855              	 .cfi_def_cfa_offset 40
 856 0004 00AF     	 add r7,sp,#0
 857              	.LCFI29:
 858              	 .cfi_def_cfa_register 7
 859 0006 021C     	 mov r2,r0
 860 0008 FB1D     	 add r3,r7,#7
 861 000a 1A70     	 strb r2,[r3]
 588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   bool status;
 589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_blocks;
 590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_blocks;
 592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
 593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = false;
 862              	 .loc 2 594 0
 863 000c 1F23     	 mov r3,#31
 864 000e FB18     	 add r3,r7,r3
 865 0010 0022     	 mov r2,#0
 866 0012 1A70     	 strb r2,[r3]
 595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 867              	 .loc 2 595 0
 868 0014 FB1D     	 add r3,r7,#7
 869 0016 1B78     	 ldrb r3,[r3]
 870 0018 181C     	 mov r0,r3
 871 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 872 001e 031C     	 mov r3,r0
 873 0020 BB61     	 str r3,[r7,#24]
 596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 874              	 .loc 2 596 0
 875 0022 104B     	 ldr r3,.L48
 876 0024 1A68     	 ldr r2,[r3]
 877 0026 BB69     	 ldr r3,[r7,#24]
 878 0028 DB00     	 lsl r3,r3,#3
 879 002a D318     	 add r3,r2,r3
 880 002c 7B61     	 str r3,[r7,#20]
 597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_IsGarbageCollectionNeeded:Wrong Block Number", (user_block_index  !=
 599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                             E_EEPROM_XMC1_LOG_BLOCK
 600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 881              	 .loc 2 601 0
 882 002e 7B69     	 ldr r3,[r7,#20]
 883 0030 5B68     	 ldr r3,[r3,#4]
 884 0032 181C     	 mov r0,r3
 885 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 886 0038 031C     	 mov r3,r0
 887 003a 3B61     	 str r3,[r7,#16]
 602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 888              	 .loc 2 602 0
 889 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 890 0040 031C     	 mov r3,r0
 891 0042 FB60     	 str r3,[r7,#12]
 603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (remaining_blocks < flash_blocks)
 892              	 .loc 2 604 0
 893 0044 FA68     	 ldr r2,[r7,#12]
 894 0046 3B69     	 ldr r3,[r7,#16]
 895 0048 9A42     	 cmp r2,r3
 896 004a 03D2     	 bcs .L46
 605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = true;
 897              	 .loc 2 606 0
 898 004c 1F23     	 mov r3,#31
 899 004e FB18     	 add r3,r7,r3
 900 0050 0122     	 mov r2,#1
 901 0052 1A70     	 strb r2,[r3]
 902              	.L46:
 607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 903              	 .loc 2 609 0
 904 0054 1F23     	 mov r3,#31
 905 0056 FB18     	 add r3,r7,r3
 906 0058 1B78     	 ldrb r3,[r3]
 610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 907              	 .loc 2 610 0
 908 005a 181C     	 mov r0,r3
 909 005c BD46     	 mov sp,r7
 910 005e 08B0     	 add sp,sp,#32
 911              	 
 912 0060 80BD     	 pop {r7,pc}
 913              	.L49:
 914 0062 C046     	 .align 2
 915              	.L48:
 916 0064 00000000 	 .word E_EEPROM_XMC1_0
 917              	 .cfi_endproc
 918              	.LFE56:
 920              	 .section .text.E_EEPROM_XMC1_GetPreviousData,"ax",%progbits
 921              	 .align 2
 922              	 .global E_EEPROM_XMC1_GetPreviousData
 923              	 .code 16
 924              	 .thumb_func
 926              	E_EEPROM_XMC1_GetPreviousData:
 927              	.LFB57:
 611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block
 616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : It reads the complete data block from the flash and compare the CRC from heade
 621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   with the computed CRC using CRC_SW APP. Read from arbitrary location and limit
 622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   possible under this API.
 623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_VerifyBlockCrcStatus(uint8_t block_number, uint8_t *
 625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = (uint32_t)E_EEPROM_XMC1_lGetUsrBlockIndex( block_number);
 633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_ReadBlockWithCRC:Wrong Block Number", (user_block_index  !=
 636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                    E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUN
 637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_ReadBlockWithCRC:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state) == E_EEPROM_XMC1_GC_IDLE)
 643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
 645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
 647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Inval
 649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address = data_ptr->block_info[user_block_index].address ;
 655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Call local function to read the specified block of data from flash */
 656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr,
 657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                                   block_size , 0U);
 658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS)
 660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Call local function to cross check the CRC, No ECC check done again for the CRC read fun
 662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockCrcStatus(block_number, 
 663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                                      block_size);
 664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  :
 677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   block_number   - Number of logical block
 678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset       - Start Location for Read start
 679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length       - End Location for read completion
 681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall read the just previous copy of the particular block when r
 685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   function is used commonly when the latest copy gets corrupted.
 686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_GetPreviousData(uint8_t block_number,
 688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint32_t offset,
 689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint8_t *data_buffer_ptr,
 690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint32_t length)
 691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 928              	 .loc 2 691 0
 929              	 .cfi_startproc
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI30:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 8AB0     	 sub sp,sp,#40
 936              	.LCFI31:
 937              	 .cfi_def_cfa_offset 48
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI32:
 940              	 .cfi_def_cfa_register 7
 941 0006 B960     	 str r1,[r7,#8]
 942 0008 7A60     	 str r2,[r7,#4]
 943 000a 3B60     	 str r3,[r7]
 944 000c 0F23     	 mov r3,#15
 945 000e FB18     	 add r3,r7,r3
 946 0010 021C     	 add r2,r0,#0
 947 0012 1A70     	 strb r2,[r3]
 692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_start_addr;
 694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 948              	 .loc 2 698 0
 949 0014 2A4B     	 ldr r3,.L57
 950 0016 5B68     	 ldr r3,[r3,#4]
 951 0018 3B62     	 str r3,[r7,#32]
 699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 952              	 .loc 2 699 0
 953 001a 0F23     	 mov r3,#15
 954 001c FB18     	 add r3,r7,r3
 955 001e 1B78     	 ldrb r3,[r3]
 956 0020 181C     	 mov r0,r3
 957 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 958 0026 031C     	 mov r3,r0
 959 0028 FB61     	 str r3,[r7,#28]
 700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 960              	 .loc 2 700 0
 961 002a 254B     	 ldr r3,.L57
 962 002c 1A68     	 ldr r2,[r3]
 963 002e FB69     	 ldr r3,[r7,#28]
 964 0030 DB00     	 lsl r3,r3,#3
 965 0032 D318     	 add r3,r2,r3
 966 0034 5B68     	 ldr r3,[r3,#4]
 967 0036 BB61     	 str r3,[r7,#24]
 701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_GetPreviousData:Wrong Block Number", (user_block_index  !=
 703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                   E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND
 704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_GetPreviousData:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
 705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
 968              	 .loc 2 707 0
 969 0038 3A6A     	 ldr r2,[r7,#32]
 970 003a B223     	 mov r3,#178
 971 003c 5B00     	 lsl r3,r3,#1
 972 003e D358     	 ldr r3,[r2,r3]
 973 0040 0A2B     	 cmp r3,#10
 974 0042 31D1     	 bne .L51
 975              	 .loc 2 707 0 is_stmt 0 discriminator 1
 976 0044 BA68     	 ldr r2,[r7,#8]
 977 0046 3B68     	 ldr r3,[r7]
 978 0048 D218     	 add r2,r2,r3
 979 004a BB69     	 ldr r3,[r7,#24]
 980 004c 9A42     	 cmp r2,r3
 981 004e 2BD8     	 bhi .L51
 708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_start_addr = E_EEPROM_XMC1_lGetPrevData(block_number);
 982              	 .loc 2 710 0 is_stmt 1
 983 0050 0F23     	 mov r3,#15
 984 0052 FB18     	 add r3,r7,r3
 985 0054 1B78     	 ldrb r3,[r3]
 986 0056 181C     	 mov r0,r3
 987 0058 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetPrevData
 988 005c 031C     	 mov r3,r0
 989 005e 7B61     	 str r3,[r7,#20]
 711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (read_start_addr != 0U )
 990              	 .loc 2 712 0
 991 0060 7B69     	 ldr r3,[r7,#20]
 992 0062 002B     	 cmp r3,#0
 993 0064 1AD0     	 beq .L52
 713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address =  read_start_addr;
 994              	 .loc 2 714 0
 995 0066 3A6A     	 ldr r2,[r7,#32]
 996 0068 BE23     	 mov r3,#190
 997 006a 5B00     	 lsl r3,r3,#1
 998 006c 7969     	 ldr r1,[r7,#20]
 999 006e D150     	 str r1,[r2,r3]
 715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
 716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Call local function to read the specified block of data from flash */
 717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr, 
 1000              	 .loc 2 717 0
 1001 0070 7968     	 ldr r1,[r7,#4]
 1002 0072 3A68     	 ldr r2,[r7]
 1003 0074 BB68     	 ldr r3,[r7,#8]
 1004 0076 081C     	 mov r0,r1
 1005 0078 111C     	 mov r1,r2
 1006 007a 1A1C     	 mov r2,r3
 1007 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadBlockContents
 1008 0080 021C     	 mov r2,r0
 1009 0082 2723     	 mov r3,#39
 1010 0084 FB18     	 add r3,r7,r3
 1011 0086 1A70     	 strb r2,[r3]
 718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((uint32_t)status != 0U)
 1012              	 .loc 2 718 0
 1013 0088 2723     	 mov r3,#39
 1014 008a FB18     	 add r3,r7,r3
 1015 008c 1B78     	 ldrb r3,[r3]
 1016 008e 002B     	 cmp r3,#0
 1017 0090 09D0     	 beq .L54
 719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****          status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 1018              	 .loc 2 720 0
 1019 0092 2723     	 mov r3,#39
 1020 0094 FB18     	 add r3,r7,r3
 1021 0096 0122     	 mov r2,#1
 1022 0098 1A70     	 strb r2,[r3]
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1023              	 .loc 2 712 0
 1024 009a 09E0     	 b .L55
 1025              	.L52:
 721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 1026              	 .loc 2 725 0
 1027 009c 2723     	 mov r3,#39
 1028 009e FB18     	 add r3,r7,r3
 1029 00a0 0222     	 mov r2,#2
 1030 00a2 1A70     	 strb r2,[r3]
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1031              	 .loc 2 712 0
 1032 00a4 04E0     	 b .L55
 1033              	.L54:
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1034              	 .loc 2 712 0 is_stmt 0 discriminator 1
 1035 00a6 03E0     	 b .L55
 1036              	.L51:
 726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 1037              	 .loc 2 730 0 is_stmt 1
 1038 00a8 2723     	 mov r3,#39
 1039 00aa FB18     	 add r3,r7,r3
 1040 00ac 0522     	 mov r2,#5
 1041 00ae 1A70     	 strb r2,[r3]
 1042              	.L55:
 731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 1043              	 .loc 2 733 0
 1044 00b0 2723     	 mov r3,#39
 1045 00b2 FB18     	 add r3,r7,r3
 1046 00b4 1B78     	 ldrb r3,[r3]
 734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1047              	 .loc 2 734 0
 1048 00b6 181C     	 mov r0,r3
 1049 00b8 BD46     	 mov sp,r7
 1050 00ba 0AB0     	 add sp,sp,#40
 1051              	 
 1052 00bc 80BD     	 pop {r7,pc}
 1053              	.L58:
 1054 00be C046     	 .align 2
 1055              	.L57:
 1056 00c0 00000000 	 .word E_EEPROM_XMC1_0
 1057              	 .cfi_endproc
 1058              	.LFE57:
 1060              	 .section .text.E_EEPROM_XMC1_lGetPrevData,"ax",%progbits
 1061              	 .align 2
 1062              	 .code 16
 1063              	 .thumb_func
 1065              	E_EEPROM_XMC1_lGetPrevData:
 1066              	.LFB58:
 735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  ***********************************  Private Function Definitions  *******************************
 739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User block number / ID
 744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
 746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will traverse through the bank and find the previous copy of the
 748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetPrevData(uint8_t block_number)
 750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1067              	 .loc 2 750 0
 1068              	 .cfi_startproc
 1069 0000 80B5     	 push {r7,lr}
 1070              	.LCFI33:
 1071              	 .cfi_def_cfa_offset 8
 1072              	 .cfi_offset 7,-8
 1073              	 .cfi_offset 14,-4
 1074 0002 88B0     	 sub sp,sp,#32
 1075              	.LCFI34:
 1076              	 .cfi_def_cfa_offset 40
 1077 0004 00AF     	 add r7,sp,#0
 1078              	.LCFI35:
 1079              	 .cfi_def_cfa_register 7
 1080 0006 021C     	 mov r2,r0
 1081 0008 FB1D     	 add r3,r7,#7
 1082 000a 1A70     	 strb r2,[r3]
 751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_index;
 753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_sec_start_addr;
 754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t expected_block_count;
 755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_read_start_addr;
 756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1083              	 .loc 2 758 0
 1084 000c 2D4B     	 ldr r3,.L67
 1085 000e 5B68     	 ldr r3,[r3,#4]
 1086 0010 7B61     	 str r3,[r7,#20]
 759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Get the block details */
 761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_index = (uint32_t)E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 1087              	 .loc 2 761 0
 1088 0012 FB1D     	 add r3,r7,#7
 1089 0014 1B78     	 ldrb r3,[r3]
 1090 0016 181C     	 mov r0,r3
 1091 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 1092 001c 031C     	 mov r3,r0
 1093 001e 3B61     	 str r3,[r7,#16]
 762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_index].size;
 1094              	 .loc 2 762 0
 1095 0020 284B     	 ldr r3,.L67
 1096 0022 1A68     	 ldr r2,[r3]
 1097 0024 3B69     	 ldr r3,[r7,#16]
 1098 0026 DB00     	 lsl r3,r3,#3
 1099 0028 D318     	 add r3,r2,r3
 1100 002a 5B68     	 ldr r3,[r3,#4]
 1101 002c FB60     	 str r3,[r7,#12]
 763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   expected_block_count = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_size);
 1102              	 .loc 2 763 0
 1103 002e FB68     	 ldr r3,[r7,#12]
 1104 0030 181C     	 mov r0,r3
 1105 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 1106 0036 031C     	 mov r3,r0
 1107 0038 BB60     	 str r3,[r7,#8]
 764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Find the data bank starting address from current Bank to decide when to stop reading of blocks
 766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 1108              	 .loc 2 766 0
 1109 003a 7B69     	 ldr r3,[r7,#20]
 1110 003c 9B6A     	 ldr r3,[r3,#40]
 1111 003e 002B     	 cmp r3,#0
 1112 0040 02D1     	 bne .L60
 767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_sec_start_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 1113              	 .loc 2 768 0
 1114 0042 214B     	 ldr r3,.L67+4
 1115 0044 FB61     	 str r3,[r7,#28]
 1116 0046 01E0     	 b .L61
 1117              	.L60:
 769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_sec_start_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 1118              	 .loc 2 772 0
 1119 0048 204B     	 ldr r3,.L67+8
 1120 004a FB61     	 str r3,[r7,#28]
 1121              	.L61:
 773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_read_start_addr = data_ptr->block_info[block_index].address;
 1122              	 .loc 2 775 0
 1123 004c 7B69     	 ldr r3,[r7,#20]
 1124 004e 3A69     	 ldr r2,[r7,#16]
 1125 0050 D200     	 lsl r2,r2,#3
 1126 0052 D358     	 ldr r3,[r2,r3]
 1127 0054 BB61     	 str r3,[r7,#24]
 776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (block_read_start_addr >= (data_sec_start_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE))
 1128              	 .loc 2 777 0
 1129 0056 FB69     	 ldr r3,[r7,#28]
 1130 0058 1033     	 add r3,r3,#16
 1131 005a 1A1E     	 sub r2,r3,#0
 1132 005c BB69     	 ldr r3,[r7,#24]
 1133 005e 9A42     	 cmp r2,r3
 1134 0060 28D8     	 bhi .L62
 778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_read_start_addr = E_EEPROM_XMC1_lSearchBlockCopy(block_number,
 1135              	 .loc 2 779 0
 1136 0062 BB69     	 ldr r3,[r7,#24]
 1137 0064 103B     	 sub r3,r3,#16
 1138 0066 1A1C     	 mov r2,r3
 1139 0068 FB1D     	 add r3,r7,#7
 1140 006a 1978     	 ldrb r1,[r3]
 1141 006c FB69     	 ldr r3,[r7,#28]
 1142 006e 081C     	 mov r0,r1
 1143 0070 111C     	 mov r1,r2
 1144 0072 1A1C     	 mov r2,r3
 1145 0074 FFF7FEFF 	 bl E_EEPROM_XMC1_lSearchBlockCopy
 1146 0078 031C     	 mov r3,r0
 1147 007a BB61     	 str r3,[r7,#24]
 780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                            block_read_start_addr - E_EEPROM_XMC1_FL
 781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                            data_sec_start_addr);
 782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ((block_read_start_addr < data_sec_start_addr) ||
 1148              	 .loc 2 784 0
 1149 007c BA69     	 ldr r2,[r7,#24]
 1150 007e FB69     	 ldr r3,[r7,#28]
 1151 0080 9A42     	 cmp r2,r3
 1152 0082 14D3     	 bcc .L63
 785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->block_result.status.consistent != 1U) ||
 1153              	 .loc 2 785 0 discriminator 1
 1154 0084 7B69     	 ldr r3,[r7,#20]
 1155 0086 2422     	 mov r2,#36
 1156 0088 9B5C     	 ldrb r3,[r3,r2]
 1157 008a 0222     	 mov r2,#2
 1158 008c 1340     	 and r3,r2
 1159 008e DBB2     	 uxtb r3,r3
 784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->block_result.status.consistent != 1U) ||
 1160              	 .loc 2 784 0 discriminator 1
 1161 0090 002B     	 cmp r3,#0
 1162 0092 0CD0     	 beq .L63
 786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             (data_ptr->block_result.block_count != expected_block_count) ||
 1163              	 .loc 2 786 0
 1164 0094 7B69     	 ldr r3,[r7,#20]
 1165 0096 1A6A     	 ldr r2,[r3,#32]
 785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->block_result.status.consistent != 1U) ||
 1166              	 .loc 2 785 0
 1167 0098 BB68     	 ldr r3,[r7,#8]
 1168 009a 9A42     	 cmp r2,r3
 1169 009c 07D1     	 bne .L63
 787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             (data_ptr->block_result.status.valid != 1U))
 1170              	 .loc 2 787 0
 1171 009e 7B69     	 ldr r3,[r7,#20]
 1172 00a0 2422     	 mov r2,#36
 1173 00a2 9B5C     	 ldrb r3,[r3,r2]
 1174 00a4 0122     	 mov r2,#1
 1175 00a6 1340     	 and r3,r2
 1176 00a8 DBB2     	 uxtb r3,r3
 786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             (data_ptr->block_result.block_count != expected_block_count) ||
 1177              	 .loc 2 786 0
 1178 00aa 002B     	 cmp r3,#0
 1179 00ac 04D1     	 bne .L65
 1180              	.L63:
 788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_read_start_addr = 0U;  /* No Previous copy of block exist*/
 1181              	 .loc 2 789 0
 1182 00ae 0023     	 mov r3,#0
 1183 00b0 BB61     	 str r3,[r7,#24]
 1184 00b2 01E0     	 b .L65
 1185              	.L62:
 790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_read_start_addr = 0U;  /* No Previous copy of block can exist*/
 1186              	 .loc 2 794 0
 1187 00b4 0023     	 mov r3,#0
 1188 00b6 BB61     	 str r3,[r7,#24]
 1189              	.L65:
 795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (block_read_start_addr);
 1190              	 .loc 2 797 0
 1191 00b8 BB69     	 ldr r3,[r7,#24]
 798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1192              	 .loc 2 798 0
 1193 00ba 181C     	 mov r0,r3
 1194 00bc BD46     	 mov sp,r7
 1195 00be 08B0     	 add sp,sp,#32
 1196              	 
 1197 00c0 80BD     	 pop {r7,pc}
 1198              	.L68:
 1199 00c2 C046     	 .align 2
 1200              	.L67:
 1201 00c4 00000000 	 .word E_EEPROM_XMC1_0
 1202 00c8 008D0010 	 .word 268471552
 1203 00cc 008F0010 	 .word 268472064
 1204              	 .cfi_endproc
 1205              	.LFE58:
 1207              	 .section .text.E_EEPROM_XMC1_lSearchBlockCopy,"ax",%progbits
 1208              	 .align 2
 1209              	 .code 16
 1210              	 .thumb_func
 1212              	E_EEPROM_XMC1_lSearchBlockCopy:
 1213              	.LFB59:
 799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User block number / ID
 802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
 804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function reads the block header bytes and compare the block number to fin
 806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lSearchBlockCopy(uint8_t required_block_number,
 808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t read_addr,
 809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t data_sec_start_addr)
 810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1214              	 .loc 2 810 0
 1215              	 .cfi_startproc
 1216 0000 80B5     	 push {r7,lr}
 1217              	.LCFI36:
 1218              	 .cfi_def_cfa_offset 8
 1219              	 .cfi_offset 7,-8
 1220              	 .cfi_offset 14,-4
 1221 0002 8CB0     	 sub sp,sp,#48
 1222              	.LCFI37:
 1223              	 .cfi_def_cfa_offset 56
 1224 0004 00AF     	 add r7,sp,#0
 1225              	.LCFI38:
 1226              	 .cfi_def_cfa_register 7
 1227 0006 B960     	 str r1,[r7,#8]
 1228 0008 7A60     	 str r2,[r7,#4]
 1229 000a 0F23     	 mov r3,#15
 1230 000c FB18     	 add r3,r7,r3
 1231 000e 021C     	 add r2,r0,#0
 1232 0010 1A70     	 strb r2,[r3]
 811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t header_word;
 812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
 813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t block_status;
 814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t read_block_number;
 815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_start_address;
 816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t is_all_blocks_clean;
 817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_HEADER_t* block_header_ptr;
 819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1233              	 .loc 2 820 0
 1234 0012 3A4B     	 ldr r3,.L80
 1235 0014 5B68     	 ldr r3,[r3,#4]
 1236 0016 3B62     	 str r3,[r7,#32]
 821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = 0U;
 1237              	 .loc 2 822 0
 1238 0018 0023     	 mov r3,#0
 1239 001a FB62     	 str r3,[r7,#44]
 823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_start_address = 0U;
 1240              	 .loc 2 823 0
 1241 001c 0023     	 mov r3,#0
 1242 001e BB62     	 str r3,[r7,#40]
 824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   is_all_blocks_clean = 1U;
 1243              	 .loc 2 824 0
 1244 0020 0123     	 mov r3,#1
 1245 0022 7B62     	 str r3,[r7,#36]
 825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.status.consistent = 0U;
 1246              	 .loc 2 825 0
 1247 0024 3B6A     	 ldr r3,[r7,#32]
 1248 0026 2422     	 mov r2,#36
 1249 0028 995C     	 ldrb r1,[r3,r2]
 1250 002a 0220     	 mov r0,#2
 1251 002c 8143     	 bic r1,r0
 1252 002e 9954     	 strb r1,[r3,r2]
 826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.status.valid = 0U;
 1253              	 .loc 2 826 0
 1254 0030 3B6A     	 ldr r3,[r7,#32]
 1255 0032 2422     	 mov r2,#36
 1256 0034 995C     	 ldrb r1,[r3,r2]
 1257 0036 0120     	 mov r0,#1
 1258 0038 8143     	 bic r1,r0
 1259 003a 9954     	 strb r1,[r3,r2]
 827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.block_count = 0U;
 1260              	 .loc 2 827 0
 1261 003c 3B6A     	 ldr r3,[r7,#32]
 1262 003e 0022     	 mov r2,#0
 1263 0040 1A62     	 str r2,[r3,#32]
 828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Loop until the first block address and check if any block number is matching the required bloc
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ((data_sec_start_addr <= read_addr) && (block_start_address == 0U))
 1264              	 .loc 2 830 0
 1265 0042 4FE0     	 b .L70
 1266              	.L78:
 831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
 833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();      
 1267              	 .loc 2 833 0
 1268 0044 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Read the header word */
 836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     header_word = E_EEPROM_XMC1_lReadSingleWord(read_addr);
 1269              	 .loc 2 836 0
 1270 0048 BB68     	 ldr r3,[r7,#8]
 1271 004a 181C     	 mov r0,r3
 1272 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleWord
 1273 0050 031C     	 mov r3,r0
 1274 0052 7B61     	 str r3,[r7,#20]
 837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_header_ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t*)(void *)(&header_word);
 1275              	 .loc 2 838 0
 1276 0054 1423     	 mov r3,#20
 1277 0056 FB18     	 add r3,r7,r3
 1278 0058 FB61     	 str r3,[r7,#28]
 839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_block_number = block_header_ptr->block_number;
 1279              	 .loc 2 839 0
 1280 005a 1B23     	 mov r3,#27
 1281 005c FB18     	 add r3,r7,r3
 1282 005e FA69     	 ldr r2,[r7,#28]
 1283 0060 1278     	 ldrb r2,[r2]
 1284 0062 1A70     	 strb r2,[r3]
 840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_status = block_header_ptr->status;
 1285              	 .loc 2 840 0
 1286 0064 1A23     	 mov r3,#26
 1287 0066 FB18     	 add r3,r7,r3
 1288 0068 FA69     	 ldr r2,[r7,#28]
 1289 006a 5278     	 ldrb r2,[r2,#1]
 1290 006c 1A70     	 strb r2,[r3]
 841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*Check whether the block number is matching the required block number*/
 843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (read_block_number == required_block_number)
 1291              	 .loc 2 843 0
 1292 006e 1B23     	 mov r3,#27
 1293 0070 FA18     	 add r2,r7,r3
 1294 0072 0F23     	 mov r3,#15
 1295 0074 FB18     	 add r3,r7,r3
 1296 0076 1278     	 ldrb r2,[r2]
 1297 0078 1B78     	 ldrb r3,[r3]
 1298 007a 9A42     	 cmp r2,r3
 1299 007c 2FD1     	 bne .L71
 844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 1300              	 .loc 2 845 0
 1301 007e FB6A     	 ldr r3,[r7,#44]
 1302 0080 0133     	 add r3,r3,#1
 1303 0082 FB62     	 str r3,[r7,#44]
 846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
 847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if any ECC error in the header */
 848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( ( E_EEPROM_XMC1_lGetFlashStatus() & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR ) != 0U )
 1304              	 .loc 2 848 0
 1305 0084 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 1306 0088 021C     	 mov r2,r0
 1307 008a 2023     	 mov r3,#32
 1308 008c 1340     	 and r3,r2
 1309 008e 01D0     	 beq .L72
 849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         is_all_blocks_clean = 0U;
 1310              	 .loc 2 850 0
 1311 0090 0023     	 mov r3,#0
 1312 0092 7B62     	 str r3,[r7,#36]
 1313              	.L72:
 851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if block header is of the starting block */
 853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (block_status & E_EEPROM_XMC1_START_BIT)
 1314              	 .loc 2 853 0
 1315 0094 1A23     	 mov r3,#26
 1316 0096 FB18     	 add r3,r7,r3
 1317 0098 1B78     	 ldrb r3,[r3]
 1318 009a 5BB2     	 sxtb r3,r3
 1319 009c 002B     	 cmp r3,#0
 1320 009e 1ADA     	 bge .L73
 854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ( is_all_blocks_clean == 1U )
 1321              	 .loc 2 855 0
 1322 00a0 7B6A     	 ldr r3,[r7,#36]
 1323 00a2 012B     	 cmp r3,#1
 1324 00a4 05D1     	 bne .L74
 856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
 857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_result.status.consistent = 1U;
 1325              	 .loc 2 857 0
 1326 00a6 3B6A     	 ldr r3,[r7,#32]
 1327 00a8 2422     	 mov r2,#36
 1328 00aa 995C     	 ldrb r1,[r3,r2]
 1329 00ac 0220     	 mov r0,#2
 1330 00ae 0143     	 orr r1,r0
 1331 00b0 9954     	 strb r1,[r3,r2]
 1332              	.L74:
 858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (block_status & (uint8_t)E_EEPROM_XMC1_VALID_BIT)
 1333              	 .loc 2 860 0
 1334 00b2 1A23     	 mov r3,#26
 1335 00b4 FB18     	 add r3,r7,r3
 1336 00b6 1B78     	 ldrb r3,[r3]
 1337 00b8 4022     	 mov r2,#64
 1338 00ba 1340     	 and r3,r2
 1339 00bc 05D0     	 beq .L75
 861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
 862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_result.status.valid = 1U;
 1340              	 .loc 2 862 0
 1341 00be 3B6A     	 ldr r3,[r7,#32]
 1342 00c0 2422     	 mov r2,#36
 1343 00c2 995C     	 ldrb r1,[r3,r2]
 1344 00c4 0120     	 mov r0,#1
 1345 00c6 0143     	 orr r1,r0
 1346 00c8 9954     	 strb r1,[r3,r2]
 1347              	.L75:
 863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_result.block_count = block_count;
 1348              	 .loc 2 865 0
 1349 00ca 3B6A     	 ldr r3,[r7,#32]
 1350 00cc FA6A     	 ldr r2,[r7,#44]
 1351 00ce 1A62     	 str r2,[r3,#32]
 866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_start_address = read_addr;
 1352              	 .loc 2 866 0
 1353 00d0 BB68     	 ldr r3,[r7,#8]
 1354 00d2 BB62     	 str r3,[r7,#40]
 1355 00d4 06E0     	 b .L70
 1356              	.L73:
 867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         read_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 1357              	 .loc 2 870 0
 1358 00d6 BB68     	 ldr r3,[r7,#8]
 1359 00d8 103B     	 sub r3,r3,#16
 1360 00da BB60     	 str r3,[r7,#8]
 1361 00dc 02E0     	 b .L70
 1362              	.L71:
 871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 1363              	 .loc 2 875 0
 1364 00de BB68     	 ldr r3,[r7,#8]
 1365 00e0 103B     	 sub r3,r3,#16
 1366 00e2 BB60     	 str r3,[r7,#8]
 1367              	.L70:
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 1368              	 .loc 2 830 0
 1369 00e4 7A68     	 ldr r2,[r7,#4]
 1370 00e6 BB68     	 ldr r3,[r7,#8]
 1371 00e8 9A42     	 cmp r2,r3
 1372 00ea 02D8     	 bhi .L77
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 1373              	 .loc 2 830 0 is_stmt 0 discriminator 1
 1374 00ec BB6A     	 ldr r3,[r7,#40]
 1375 00ee 002B     	 cmp r3,#0
 1376 00f0 A8D0     	 beq .L78
 1377              	.L77:
 876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return(block_start_address);
 1378              	 .loc 2 878 0 is_stmt 1
 1379 00f2 BB6A     	 ldr r3,[r7,#40]
 879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1380              	 .loc 2 879 0
 1381 00f4 181C     	 mov r0,r3
 1382 00f6 BD46     	 mov sp,r7
 1383 00f8 0CB0     	 add sp,sp,#48
 1384              	 
 1385 00fa 80BD     	 pop {r7,pc}
 1386              	.L81:
 1387              	 .align 2
 1388              	.L80:
 1389 00fc 00000000 	 .word E_EEPROM_XMC1_0
 1390              	 .cfi_endproc
 1391              	.LFE59:
 1393              	 .section .text.E_EEPROM_XMC1_lInitGc,"ax",%progbits
 1394              	 .align 2
 1395              	 .code 16
 1396              	 .thumb_func
 1398              	E_EEPROM_XMC1_lInitGc:
 1399              	.LFB60:
 880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : marker_dirty_state  - Dirty state
 883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
 885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall detect if there was any interruption in the ongoing runnin
 887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   (Read/Write/GC). If yes, then this routine shall decide to run a state machine
 888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   emulation to normal state
 889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGc(const uint32_t marker_dirty_state)
 891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1400              	 .loc 2 891 0
 1401              	 .cfi_startproc
 1402 0000 80B5     	 push {r7,lr}
 1403              	.LCFI39:
 1404              	 .cfi_def_cfa_offset 8
 1405              	 .cfi_offset 7,-8
 1406              	 .cfi_offset 14,-4
 1407 0002 84B0     	 sub sp,sp,#16
 1408              	.LCFI40:
 1409              	 .cfi_def_cfa_offset 24
 1410 0004 00AF     	 add r7,sp,#0
 1411              	.LCFI41:
 1412              	 .cfi_def_cfa_register 7
 1413 0006 7860     	 str r0,[r7,#4]
 892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1414              	 .loc 2 893 0
 1415 0008 254B     	 ldr r3,.L87
 1416 000a 5B68     	 ldr r3,[r3,#4]
 1417 000c FB60     	 str r3,[r7,#12]
 894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( marker_dirty_state == E_EEPROM_XMC1_BOTH_BANKS_INVALID )  /* If both Bank state markers are 
 1418              	 .loc 2 895 0
 1419 000e 7B68     	 ldr r3,[r7,#4]
 1420 0010 032B     	 cmp r3,#3
 1421 0012 07D1     	 bne .L83
 896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state = E_EEPROM_XMC1_MB_DIRTY;
 1422              	 .loc 2 897 0
 1423 0014 FA68     	 ldr r2,[r7,#12]
 1424 0016 B423     	 mov r3,#180
 1425 0018 5B00     	 lsl r3,r3,#1
 1426 001a DD21     	 mov r1,#221
 1427 001c D150     	 str r1,[r2,r3]
 898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitllegalStateMachine();
 1428              	 .loc 2 898 0
 1429 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
 1430 0022 39E0     	 b .L82
 1431              	.L83:
 899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if ( marker_dirty_state == E_EEPROM_XMC1_BANK0_INVALID )  /* If Only Bank0 state marker is i
 1432              	 .loc 2 900 0
 1433 0024 7B68     	 ldr r3,[r7,#4]
 1434 0026 012B     	 cmp r3,#1
 1435 0028 18D1     	 bne .L85
 901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_0F;
 1436              	 .loc 2 902 0
 1437 002a FA68     	 ldr r2,[r7,#12]
 1438 002c B423     	 mov r3,#180
 1439 002e 5B00     	 lsl r3,r3,#1
 1440 0030 D358     	 ldr r3,[r2,r3]
 1441 0032 0F22     	 mov r2,#15
 1442 0034 1340     	 and r3,r2
 1443 0036 191C     	 mov r1,r3
 1444 0038 FA68     	 ldr r2,[r7,#12]
 1445 003a B423     	 mov r3,#180
 1446 003c 5B00     	 lsl r3,r3,#1
 1447 003e D150     	 str r1,[r2,r3]
 903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_D0;
 1448              	 .loc 2 903 0
 1449 0040 FA68     	 ldr r2,[r7,#12]
 1450 0042 B423     	 mov r3,#180
 1451 0044 5B00     	 lsl r3,r3,#1
 1452 0046 D358     	 ldr r3,[r2,r3]
 1453 0048 D022     	 mov r2,#208
 1454 004a 1A43     	 orr r2,r3
 1455 004c 111C     	 mov r1,r2
 1456 004e FA68     	 ldr r2,[r7,#12]
 1457 0050 B423     	 mov r3,#180
 1458 0052 5B00     	 lsl r3,r3,#1
 1459 0054 D150     	 str r1,[r2,r3]
 904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitDirtyStateMachine();
 1460              	 .loc 2 904 0
 1461 0056 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitDirtyStateMachine
 1462 005a 1DE0     	 b .L82
 1463              	.L85:
 905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if ( marker_dirty_state == E_EEPROM_XMC1_BANK1_INVALID )  /* If Only Bank1 state marker is i
 1464              	 .loc 2 906 0
 1465 005c 7B68     	 ldr r3,[r7,#4]
 1466 005e 022B     	 cmp r3,#2
 1467 0060 18D1     	 bne .L86
 907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_F0;
 1468              	 .loc 2 908 0
 1469 0062 FA68     	 ldr r2,[r7,#12]
 1470 0064 B423     	 mov r3,#180
 1471 0066 5B00     	 lsl r3,r3,#1
 1472 0068 D358     	 ldr r3,[r2,r3]
 1473 006a F022     	 mov r2,#240
 1474 006c 1340     	 and r3,r2
 1475 006e 191C     	 mov r1,r3
 1476 0070 FA68     	 ldr r2,[r7,#12]
 1477 0072 B423     	 mov r3,#180
 1478 0074 5B00     	 lsl r3,r3,#1
 1479 0076 D150     	 str r1,[r2,r3]
 909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_0D;
 1480              	 .loc 2 909 0
 1481 0078 FA68     	 ldr r2,[r7,#12]
 1482 007a B423     	 mov r3,#180
 1483 007c 5B00     	 lsl r3,r3,#1
 1484 007e D358     	 ldr r3,[r2,r3]
 1485 0080 0D22     	 mov r2,#13
 1486 0082 1A43     	 orr r2,r3
 1487 0084 111C     	 mov r1,r2
 1488 0086 FA68     	 ldr r2,[r7,#12]
 1489 0088 B423     	 mov r3,#180
 1490 008a 5B00     	 lsl r3,r3,#1
 1491 008c D150     	 str r1,[r2,r3]
 910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitDirtyStateMachine();
 1492              	 .loc 2 910 0
 1493 008e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitDirtyStateMachine
 1494 0092 01E0     	 b .L82
 1495              	.L86:
 911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else                                      /* If both Bank state markers have valid state */
 913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitNormalStateMachine();
 1496              	 .loc 2 914 0
 1497 0094 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitNormalStateMachine
 1498              	.L82:
 915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1499              	 .loc 2 916 0
 1500 0098 BD46     	 mov sp,r7
 1501 009a 04B0     	 add sp,sp,#16
 1502              	 
 1503 009c 80BD     	 pop {r7,pc}
 1504              	.L88:
 1505 009e C046     	 .align 2
 1506              	.L87:
 1507 00a0 00000000 	 .word E_EEPROM_XMC1_0
 1508              	 .cfi_endproc
 1509              	.LFE60:
 1511              	 .section .text.E_EEPROM_XMC1_lInitllegalStateMachine,"ax",%progbits
 1512              	 .align 2
 1513              	 .code 16
 1514              	 .thumb_func
 1516              	E_EEPROM_XMC1_lInitllegalStateMachine:
 1517              	.LFB61:
 917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
 922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall erase all flash and start from fresh depending upon the us
 924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitllegalStateMachine(void)
 926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1518              	 .loc 2 926 0
 1519              	 .cfi_startproc
 1520 0000 80B5     	 push {r7,lr}
 1521              	.LCFI42:
 1522              	 .cfi_def_cfa_offset 8
 1523              	 .cfi_offset 7,-8
 1524              	 .cfi_offset 14,-4
 1525 0002 82B0     	 sub sp,sp,#8
 1526              	.LCFI43:
 1527              	 .cfi_def_cfa_offset 16
 1528 0004 00AF     	 add r7,sp,#0
 1529              	.LCFI44:
 1530              	 .cfi_def_cfa_register 7
 927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1531              	 .loc 2 928 0
 1532 0006 0B4B     	 ldr r3,.L92
 1533 0008 5B68     	 ldr r3,[r3,#4]
 1534 000a 7B60     	 str r3,[r7,#4]
 929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
 931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Any state apart from the normal states is considered as Illegal state. Next operation = Start 
 932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * (Only if the configuration option Erase all is 1U) IF Configuration Option is 0U, Next Operati
 933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
 934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_HANDLE_PTR->erase_all_auto_recovery == 1U)
 1535              	 .loc 2 934 0
 1536 000c 094B     	 ldr r3,.L92
 1537 000e 9B7A     	 ldrb r3,[r3,#10]
 1538 0010 012B     	 cmp r3,#1
 1539 0012 07D1     	 bne .L90
 935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Change the current Bank to Bank0 */
 937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = 0U;
 1540              	 .loc 2 937 0
 1541 0014 7B68     	 ldr r3,[r7,#4]
 1542 0016 0022     	 mov r2,#0
 1543 0018 9A62     	 str r2,[r3,#40]
 938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, 1U);
 1544              	 .loc 2 938 0
 1545 001a 0120     	 mov r0,#1
 1546 001c 0121     	 mov r1,#1
 1547 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
 1548 0022 04E0     	 b .L89
 1549              	.L90:
 939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 1550              	 .loc 2 942 0
 1551 0024 7A68     	 ldr r2,[r7,#4]
 1552 0026 B223     	 mov r3,#178
 1553 0028 5B00     	 lsl r3,r3,#1
 1554 002a 0921     	 mov r1,#9
 1555 002c D150     	 str r1,[r2,r3]
 1556              	.L89:
 943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1557              	 .loc 2 944 0
 1558 002e BD46     	 mov sp,r7
 1559 0030 02B0     	 add sp,sp,#8
 1560              	 
 1561 0032 80BD     	 pop {r7,pc}
 1562              	.L93:
 1563              	 .align 2
 1564              	.L92:
 1565 0034 00000000 	 .word E_EEPROM_XMC1_0
 1566              	 .cfi_endproc
 1567              	.LFE61:
 1569              	 .section .text.E_EEPROM_XMC1_lInitDirtyStateMachine,"ax",%progbits
 1570              	 .align 2
 1571              	 .code 16
 1572              	 .thumb_func
 1574              	E_EEPROM_XMC1_lInitDirtyStateMachine:
 1575              	.LFB62:
 945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
 950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function shall address the dirty state recovery mechanism by erasing and r
 952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitDirtyStateMachine(void)
 954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1576              	 .loc 2 954 0
 1577              	 .cfi_startproc
 1578 0000 80B5     	 push {r7,lr}
 1579              	.LCFI45:
 1580              	 .cfi_def_cfa_offset 8
 1581              	 .cfi_offset 7,-8
 1582              	 .cfi_offset 14,-4
 1583 0002 82B0     	 sub sp,sp,#8
 1584              	.LCFI46:
 1585              	 .cfi_def_cfa_offset 16
 1586 0004 00AF     	 add r7,sp,#0
 1587              	.LCFI47:
 1588              	 .cfi_def_cfa_register 7
 955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1589              	 .loc 2 956 0
 1590 0006 274B     	 ldr r3,.L104
 1591 0008 5B68     	 ldr r3,[r3,#4]
 1592 000a 7B60     	 str r3,[r7,#4]
 957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1593              	 .loc 2 957 0
 1594 000c 7A68     	 ldr r2,[r7,#4]
 1595 000e B423     	 mov r3,#180
 1596 0010 5B00     	 lsl r3,r3,#1
 1597 0012 D358     	 ldr r3,[r2,r3]
 1598 0014 AD2B     	 cmp r3,#173
 1599 0016 1AD0     	 beq .L96
 1600 0018 04D8     	 bhi .L97
 1601 001a 0D2B     	 cmp r3,#13
 1602 001c 29D0     	 beq .L98
 1603 001e 2D2B     	 cmp r3,#45
 1604 0020 07D0     	 beq .L99
 1605 0022 38E0     	 b .L95
 1606              	.L97:
 1607 0024 D22B     	 cmp r3,#210
 1608 0026 0BD0     	 beq .L100
 1609 0028 DA2B     	 cmp r3,#218
 1610 002a 19D0     	 beq .L101
 1611 002c D02B     	 cmp r3,#208
 1612 002e 29D0     	 beq .L102
 1613 0030 31E0     	 b .L95
 1614              	.L99:
 958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_2D:
 960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E  */
 961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1615              	 .loc 2 961 0
 1616 0032 7B68     	 ldr r3,[r7,#4]
 1617 0034 0022     	 mov r2,#0
 1618 0036 9A62     	 str r2,[r3,#40]
 962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : 2D -> 2F -> 2E */
 963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
 1619              	 .loc 2 963 0
 1620 0038 3020     	 mov r0,#48
 1621 003a FFF7FEFF 	 bl E_EEPROM_XMC1_lErasedDirtyStateRecovery
 964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1622              	 .loc 2 964 0
 1623 003e 2DE0     	 b .L94
 1624              	.L100:
 965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_D2:
 966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
 967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1625              	 .loc 2 967 0
 1626 0040 7B68     	 ldr r3,[r7,#4]
 1627 0042 0122     	 mov r2,#1
 1628 0044 9A62     	 str r2,[r3,#40]
 968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D2 -> F2 -> E2 */
 969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
 1629              	 .loc 2 969 0
 1630 0046 3020     	 mov r0,#48
 1631 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lErasedDirtyStateRecovery
 970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1632              	 .loc 2 970 0
 1633 004c 26E0     	 b .L94
 1634              	.L96:
 971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_AD:
 972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
 973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1635              	 .loc 2 973 0
 1636 004e 7B68     	 ldr r3,[r7,#4]
 1637 0050 0022     	 mov r2,#0
 1638 0052 9A62     	 str r2,[r3,#40]
 974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : AD -> A0 -> GC PROCESS -> 2E */
 975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 1639              	 .loc 2 975 0
 1640 0054 0020     	 mov r0,#0
 1641 0056 0721     	 mov r1,#7
 1642 0058 0122     	 mov r2,#1
 1643 005a FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
 977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1644              	 .loc 2 977 0
 1645 005e 1DE0     	 b .L94
 1646              	.L101:
 978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_DA:
 979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1  and recover from the dirty state to E2*/
 980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1647              	 .loc 2 980 0
 1648 0060 7B68     	 ldr r3,[r7,#4]
 1649 0062 0122     	 mov r2,#1
 1650 0064 9A62     	 str r2,[r3,#40]
 981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : DA -> 0A -> GC PROCESS -> E2 */
 982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 1651              	 .loc 2 982 0
 1652 0066 0020     	 mov r0,#0
 1653 0068 0721     	 mov r1,#7
 1654 006a 0122     	 mov r2,#1
 1655 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
 984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1656              	 .loc 2 984 0
 1657 0070 14E0     	 b .L94
 1658              	.L98:
 985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_0D:
 986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
 987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1659              	 .loc 2 987 0
 1660 0072 7B68     	 ldr r3,[r7,#4]
 1661 0074 0122     	 mov r2,#1
 1662 0076 9A62     	 str r2,[r3,#40]
 988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : 0D -> 02 -> GC PROCESS -> E2 */
 989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 1663              	 .loc 2 989 0
 1664 0078 2020     	 mov r0,#32
 1665 007a 0321     	 mov r1,#3
 1666 007c 0022     	 mov r2,#0
 1667 007e FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
 991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1668              	 .loc 2 991 0
 1669 0082 0BE0     	 b .L94
 1670              	.L102:
 992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_D0:
 993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
 994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1671              	 .loc 2 994 0
 1672 0084 7B68     	 ldr r3,[r7,#4]
 1673 0086 0022     	 mov r2,#0
 1674 0088 9A62     	 str r2,[r3,#40]
 995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
 996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 1675              	 .loc 2 996 0
 1676 008a 2020     	 mov r0,#32
 1677 008c 0321     	 mov r1,#3
 1678 008e 0022     	 mov r2,#0
 1679 0090 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
 998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1680              	 .loc 2 998 0
 1681 0094 02E0     	 b .L94
 1682              	.L95:
 999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Any state apart from the normal states is considered as Illegal state */
1001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : Illegal -> PREPARE DFLASH -> 2E */
1002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitllegalStateMachine();
 1683              	 .loc 2 1002 0
 1684 0096 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
1003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1685              	 .loc 2 1003 0
 1686 009a C046     	 mov r8,r8
 1687              	.L94:
1004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1688              	 .loc 2 1005 0
 1689 009c BD46     	 mov sp,r7
 1690 009e 02B0     	 add sp,sp,#8
 1691              	 
 1692 00a0 80BD     	 pop {r7,pc}
 1693              	.L105:
 1694 00a2 C046     	 .align 2
 1695              	.L104:
 1696 00a4 00000000 	 .word E_EEPROM_XMC1_0
 1697              	 .cfi_endproc
 1698              	.LFE62:
 1700              	 .section .text.E_EEPROM_XMC1_lInitNormalStateMachine,"ax",%progbits
 1701              	 .align 2
 1702              	 .code 16
 1703              	 .thumb_func
 1705              	E_EEPROM_XMC1_lInitNormalStateMachine:
 1706              	.LFB63:
1006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value   : void
1011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description    : Check which normal bank state machine process has executed.
1013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitNormalStateMachine(void)
1015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1707              	 .loc 2 1015 0
 1708              	 .cfi_startproc
 1709 0000 80B5     	 push {r7,lr}
 1710              	.LCFI48:
 1711              	 .cfi_def_cfa_offset 8
 1712              	 .cfi_offset 7,-8
 1713              	 .cfi_offset 14,-4
 1714 0002 00AF     	 add r7,sp,#0
 1715              	.LCFI49:
 1716              	 .cfi_def_cfa_register 7
1016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the state matches with any of the normal marker states with active bank as bank-0*/
1017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_lInitBank0NormalStateMachine() == 0U)
 1717              	 .loc 2 1017 0
 1718 0004 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitBank0NormalStateMachine
 1719 0008 031E     	 sub r3,r0,#0
 1720 000a 09D1     	 bne .L106
1018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the state matches with any of the normal marker states with active bank as bank-1*/
1020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (E_EEPROM_XMC1_lInitBank1NormalStateMachine() == 0U)
 1721              	 .loc 2 1020 0
 1722 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitBank1NormalStateMachine
 1723 0010 031E     	 sub r3,r0,#0
 1724 0012 05D1     	 bne .L106
1021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if the state matches with any other intermediate states from where a recover is poss
1023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (E_EEPROM_XMC1_lInitOtherNormalStateMachine() == 0U)
 1725              	 .loc 2 1023 0
 1726 0014 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitOtherNormalStateMachine
 1727 0018 031E     	 sub r3,r0,#0
 1728 001a 01D1     	 bne .L106
1024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* If no matches found then go to illegal state and try to recover by erasing complete DFLA
1026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lInitllegalStateMachine();
 1729              	 .loc 2 1026 0
 1730 001c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
 1731              	.L106:
1027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1732              	 .loc 2 1030 0
 1733 0020 BD46     	 mov sp,r7
 1734              	 
 1735 0022 80BD     	 pop {r7,pc}
 1736              	 .cfi_endproc
 1737              	.LFE63:
 1739              	 .section .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine,"ax",%progbits
 1740              	 .align 2
 1741              	 .code 16
 1742              	 .thumb_func
 1744              	E_EEPROM_XMC1_lInitBank0NormalStateMachine:
 1745              	.LFB64:
1031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute bank 0 state machine process and return the found states.
1038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void)
1040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1746              	 .loc 2 1040 0
 1747              	 .cfi_startproc
 1748 0000 80B5     	 push {r7,lr}
 1749              	.LCFI50:
 1750              	 .cfi_def_cfa_offset 8
 1751              	 .cfi_offset 7,-8
 1752              	 .cfi_offset 14,-4
 1753 0002 82B0     	 sub sp,sp,#8
 1754              	.LCFI51:
 1755              	 .cfi_def_cfa_offset 16
 1756 0004 00AF     	 add r7,sp,#0
 1757              	.LCFI52:
 1758              	 .cfi_def_cfa_register 7
1041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1759              	 .loc 2 1043 0
 1760 0006 234B     	 ldr r3,.L118
 1761 0008 5B68     	 ldr r3,[r3,#4]
 1762 000a 3B60     	 str r3,[r7]
1044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 1763              	 .loc 2 1045 0
 1764 000c 0123     	 mov r3,#1
 1765 000e 7B60     	 str r3,[r7,#4]
1046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1766              	 .loc 2 1047 0
 1767 0010 3A68     	 ldr r2,[r7]
 1768 0012 B423     	 mov r3,#180
 1769 0014 5B00     	 lsl r3,r3,#1
 1770 0016 D358     	 ldr r3,[r2,r3]
 1771 0018 2E2B     	 cmp r3,#46
 1772 001a 0AD0     	 beq .L110
 1773 001c 04D8     	 bhi .L111
 1774 001e 202B     	 cmp r3,#32
 1775 0020 1FD0     	 beq .L112
 1776 0022 2A2B     	 cmp r3,#42
 1777 0024 0DD0     	 beq .L113
 1778 0026 2CE0     	 b .L109
 1779              	.L111:
 1780 0028 2F2B     	 cmp r3,#47
 1781 002a 22D0     	 beq .L114
 1782 002c A02B     	 cmp r3,#160
 1783 002e 10D0     	 beq .L115
 1784 0030 27E0     	 b .L109
 1785              	.L110:
1048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Normal Data write in Bank-0 interrupted (2E), Next step = Cache Update and get ready to acce
1051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : Nothing
1052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NORMAL1:
1054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = 0U;
 1786              	 .loc 2 1054 0
 1787 0032 3B68     	 ldr r3,[r7]
 1788 0034 0022     	 mov r2,#0
 1789 0036 9A62     	 str r2,[r3,#40]
1055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE)
 1790              	 .loc 2 1055 0
 1791 0038 0A20     	 mov r0,#10
 1792 003a 0021     	 mov r1,#0
 1793 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1794              	 .loc 2 1056 0
 1795 0040 22E0     	 b .L116
 1796              	.L113:
1057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Data copy from Bank0 to Bank1 interrupted (2A), Next step = Erasing Bank-1 and restart copy 
1060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (2A) -> ERASE_BANK0 (2F) -> 2E -> GC_PROCESS (2A -> 0A -> 20 -> F2 -> E2
1061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_DATA_COPY1:
1063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1797              	 .loc 2 1063 0
 1798 0042 3B68     	 ldr r3,[r7]
 1799 0044 0022     	 mov r2,#0
 1800 0046 9A62     	 str r2,[r3,#40]
1064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSE
 1801              	 .loc 2 1064 0
 1802 0048 0420     	 mov r0,#4
 1803 004a 3021     	 mov r1,#48
 1804 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcDataCopyState
1065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1805              	 .loc 2 1065 0
 1806 0050 1AE0     	 b .L116
 1807              	.L115:
1066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after copy completion from Bank1 to Bank0 (A0),Next step = Writing Valid state i
1069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (A0) -> (20) -> GC_PROCESS (2F -> 2E)
1070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_COPY_DONE1:
1072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1808              	 .loc 2 1072 0
 1809 0052 3B68     	 ldr r3,[r7]
 1810 0054 0022     	 mov r2,#0
 1811 0056 9A62     	 str r2,[r3,#40]
1073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC
 1812              	 .loc 2 1073 0
 1813 0058 0720     	 mov r0,#7
 1814 005a 0221     	 mov r1,#2
 1815 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1816              	 .loc 2 1074 0
 1817 0060 12E0     	 b .L116
 1818              	.L112:
1075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after writing valid state to Bank0 (20), Next step = Erase of old redundant Bank
1078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (20) -> (2F) -> GC_PROCESS (2E)
1079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NEXT_VALID1:
1081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1819              	 .loc 2 1081 0
 1820 0062 3B68     	 ldr r3,[r7]
 1821 0064 0022     	 mov r2,#0
 1822 0066 9A62     	 str r2,[r3,#40]
1082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC
 1823              	 .loc 2 1082 0
 1824 0068 0320     	 mov r0,#3
 1825 006a 0221     	 mov r1,#2
 1826 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1827              	 .loc 2 1083 0
 1828 0070 0AE0     	 b .L116
 1829              	.L114:
1084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of old bank completed(2F), Next step = Mark erased Bank-1 with Forma
1087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (2F) -> GC_PROCESS (2E)
1088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_END_ERASE1:
1090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1830              	 .loc 2 1090 0
 1831 0072 3B68     	 ldr r3,[r7]
 1832 0074 0022     	 mov r2,#0
 1833 0076 9A62     	 str r2,[r3,#40]
1091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC
 1834              	 .loc 2 1091 0
 1835 0078 0820     	 mov r0,#8
 1836 007a 0221     	 mov r1,#2
 1837 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1838              	 .loc 2 1092 0
 1839 0080 02E0     	 b .L116
 1840              	.L109:
1093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 1841              	 .loc 2 1095 0
 1842 0082 0023     	 mov r3,#0
 1843 0084 7B60     	 str r3,[r7,#4]
1096:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1844              	 .loc 2 1096 0
 1845 0086 C046     	 mov r8,r8
 1846              	.L116:
1097:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1098:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 1847              	 .loc 2 1098 0
 1848 0088 7B68     	 ldr r3,[r7,#4]
1099:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1849              	 .loc 2 1099 0
 1850 008a 181C     	 mov r0,r3
 1851 008c BD46     	 mov sp,r7
 1852 008e 02B0     	 add sp,sp,#8
 1853              	 
 1854 0090 80BD     	 pop {r7,pc}
 1855              	.L119:
 1856 0092 C046     	 .align 2
 1857              	.L118:
 1858 0094 00000000 	 .word E_EEPROM_XMC1_0
 1859              	 .cfi_endproc
 1860              	.LFE64:
 1862              	 .section .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine,"ax",%progbits
 1863              	 .align 2
 1864              	 .code 16
 1865              	 .thumb_func
 1867              	E_EEPROM_XMC1_lInitBank1NormalStateMachine:
 1868              	.LFB65:
1100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute bank 1 state machine process and return the found states.
1107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void)
1109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1869              	 .loc 2 1109 0
 1870              	 .cfi_startproc
 1871 0000 80B5     	 push {r7,lr}
 1872              	.LCFI53:
 1873              	 .cfi_def_cfa_offset 8
 1874              	 .cfi_offset 7,-8
 1875              	 .cfi_offset 14,-4
 1876 0002 82B0     	 sub sp,sp,#8
 1877              	.LCFI54:
 1878              	 .cfi_def_cfa_offset 16
 1879 0004 00AF     	 add r7,sp,#0
 1880              	.LCFI55:
 1881              	 .cfi_def_cfa_register 7
1110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1882              	 .loc 2 1112 0
 1883 0006 234B     	 ldr r3,.L130
 1884 0008 5B68     	 ldr r3,[r3,#4]
 1885 000a 3B60     	 str r3,[r7]
1113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 1886              	 .loc 2 1114 0
 1887 000c 0123     	 mov r3,#1
 1888 000e 7B60     	 str r3,[r7,#4]
1115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1889              	 .loc 2 1116 0
 1890 0010 3A68     	 ldr r2,[r7]
 1891 0012 B423     	 mov r3,#180
 1892 0014 5B00     	 lsl r3,r3,#1
 1893 0016 D358     	 ldr r3,[r2,r3]
 1894 0018 A22B     	 cmp r3,#162
 1895 001a 12D0     	 beq .L122
 1896 001c 04D8     	 bhi .L123
 1897 001e 022B     	 cmp r3,#2
 1898 0020 1FD0     	 beq .L124
 1899 0022 0A2B     	 cmp r3,#10
 1900 0024 15D0     	 beq .L125
 1901 0026 2CE0     	 b .L121
 1902              	.L123:
 1903 0028 E22B     	 cmp r3,#226
 1904 002a 02D0     	 beq .L126
 1905 002c F22B     	 cmp r3,#242
 1906 002e 20D0     	 beq .L127
 1907 0030 27E0     	 b .L121
 1908              	.L126:
1117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Normal Data write in Bank-1 interrupted (E2), Next step = Cache Update and get ready to acce
1120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : Nothing
1121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NORMAL2:
1123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1909              	 .loc 2 1123 0
 1910 0032 3B68     	 ldr r3,[r7]
 1911 0034 0122     	 mov r2,#1
 1912 0036 9A62     	 str r2,[r3,#40]
1124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE)
 1913              	 .loc 2 1124 0
 1914 0038 0A20     	 mov r0,#10
 1915 003a 0021     	 mov r1,#0
 1916 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1917              	 .loc 2 1125 0
 1918 0040 22E0     	 b .L128
 1919              	.L122:
1126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Data copy from Bank1 to Bank0 interrupted (A2), Next step = Erasing Bank-0 and restart copy 
1129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (A2) -> ERASE_BANK0 (F2) -> E2 -> GC_PROCESS (A2 -> A0 -> 20 -> 2F -> 2E
1130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_DATA_COPY2:
1132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1920              	 .loc 2 1132 0
 1921 0042 3B68     	 ldr r3,[r7]
 1922 0044 0122     	 mov r2,#1
 1923 0046 9A62     	 str r2,[r3,#40]
1133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSE
 1924              	 .loc 2 1133 0
 1925 0048 0420     	 mov r0,#4
 1926 004a 3021     	 mov r1,#48
 1927 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcDataCopyState
1134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1928              	 .loc 2 1134 0
 1929 0050 1AE0     	 b .L128
 1930              	.L125:
1135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after copy completion from Bank0 to Bank1 (0A),Next step = Writing Valid state i
1138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (0A) -> (02) -> GC_PROCESS (F2 -> E2)
1139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_COPY_DONE2:
1141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1931              	 .loc 2 1141 0
 1932 0052 3B68     	 ldr r3,[r7]
 1933 0054 0122     	 mov r2,#1
 1934 0056 9A62     	 str r2,[r3,#40]
1142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC
 1935              	 .loc 2 1142 0
 1936 0058 0720     	 mov r0,#7
 1937 005a 0221     	 mov r1,#2
 1938 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1939              	 .loc 2 1143 0
 1940 0060 12E0     	 b .L128
 1941              	.L124:
1144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after writing valid state to Bank1 (02), Next step = Erase of old redundant Bank
1147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (02) -> (F2) -> GC_PROCESS (E2)
1148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NEXT_VALID2:
1150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1942              	 .loc 2 1150 0
 1943 0062 3B68     	 ldr r3,[r7]
 1944 0064 0122     	 mov r2,#1
 1945 0066 9A62     	 str r2,[r3,#40]
1151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC
 1946              	 .loc 2 1151 0
 1947 0068 0320     	 mov r0,#3
 1948 006a 0221     	 mov r1,#2
 1949 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1950              	 .loc 2 1152 0
 1951 0070 0AE0     	 b .L128
 1952              	.L127:
1153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of old bank completed(F2), Next step = Mark erased Bank-0 with Forma
1156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (F2) -> GC_PROCESS (E2)
1157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_END_ERASE2:
1159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1953              	 .loc 2 1159 0
 1954 0072 3B68     	 ldr r3,[r7]
 1955 0074 0122     	 mov r2,#1
 1956 0076 9A62     	 str r2,[r3,#40]
1160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC
 1957              	 .loc 2 1160 0
 1958 0078 0820     	 mov r0,#8
 1959 007a 0221     	 mov r1,#2
 1960 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1961              	 .loc 2 1161 0
 1962 0080 02E0     	 b .L128
 1963              	.L121:
1162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 1964              	 .loc 2 1164 0
 1965 0082 0023     	 mov r3,#0
 1966 0084 7B60     	 str r3,[r7,#4]
1165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1967              	 .loc 2 1165 0
 1968 0086 C046     	 mov r8,r8
 1969              	.L128:
1166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 1970              	 .loc 2 1167 0
 1971 0088 7B68     	 ldr r3,[r7,#4]
1168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1972              	 .loc 2 1168 0
 1973 008a 181C     	 mov r0,r3
 1974 008c BD46     	 mov sp,r7
 1975 008e 02B0     	 add sp,sp,#8
 1976              	 
 1977 0090 80BD     	 pop {r7,pc}
 1978              	.L131:
 1979 0092 C046     	 .align 2
 1980              	.L130:
 1981 0094 00000000 	 .word E_EEPROM_XMC1_0
 1982              	 .cfi_endproc
 1983              	.LFE65:
 1985              	 .section .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine,"ax",%progbits
 1986              	 .align 2
 1987              	 .code 16
 1988              	 .thumb_func
 1990              	E_EEPROM_XMC1_lInitOtherNormalStateMachine:
 1991              	.LFB66:
1169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute other state machine process and return the found states.
1176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void)
1178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1992              	 .loc 2 1178 0
 1993              	 .cfi_startproc
 1994 0000 80B5     	 push {r7,lr}
 1995              	.LCFI56:
 1996              	 .cfi_def_cfa_offset 8
 1997              	 .cfi_offset 7,-8
 1998              	 .cfi_offset 14,-4
 1999 0002 82B0     	 sub sp,sp,#8
 2000              	.LCFI57:
 2001              	 .cfi_def_cfa_offset 16
 2002 0004 00AF     	 add r7,sp,#0
 2003              	.LCFI58:
 2004              	 .cfi_def_cfa_register 7
1179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2005              	 .loc 2 1181 0
 2006 0006 244B     	 ldr r3,.L142
 2007 0008 5B68     	 ldr r3,[r3,#4]
 2008 000a 3B60     	 str r3,[r7]
1182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 2009              	 .loc 2 1183 0
 2010 000c 0123     	 mov r3,#1
 2011 000e 7B60     	 str r3,[r7,#4]
1184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 2012              	 .loc 2 1185 0
 2013 0010 3A68     	 ldr r2,[r7]
 2014 0012 B423     	 mov r3,#180
 2015 0014 5B00     	 lsl r3,r3,#1
 2016 0016 D358     	 ldr r3,[r2,r3]
 2017 0018 F02B     	 cmp r3,#240
 2018 001a 2CD0     	 beq .L134
 2019 001c 04D8     	 bhi .L135
 2020 001e 0F2B     	 cmp r3,#15
 2021 0020 20D0     	 beq .L136
 2022 0022 AF2B     	 cmp r3,#175
 2023 0024 0CD0     	 beq .L137
 2024 0026 2FE0     	 b .L133
 2025              	.L135:
 2026 0028 FA2B     	 cmp r3,#250
 2027 002a 12D0     	 beq .L138
 2028 002c FF2B     	 cmp r3,#255
 2029 002e 2BD1     	 bne .L133
1186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Interrupted after erase of both banks completed (FF), Next step = Start Prepare DFlash  */
1188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_ALL_ERASED:
1189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 */
1190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2030              	 .loc 2 1190 0
 2031 0030 3B68     	 ldr r3,[r7]
 2032 0032 0022     	 mov r2,#0
 2033 0034 9A62     	 str r2,[r3,#40]
1191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : FF ->  PREPARE_DFLASH (2F) -> 2E */
1192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, E_EEPROM_XMC1_EXECUTE_PREP_FLA
 2034              	 .loc 2 1192 0
 2035 0036 0120     	 mov r0,#1
 2036 0038 0121     	 mov r1,#1
 2037 003a FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2038              	 .loc 2 1193 0
 2039 003e 26E0     	 b .L140
 2040              	.L137:
1194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recovery(AF), Next step = Bank0 marker Page
1197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : AF -> A0 -> GC PROCESS -> 20 -> 2F -> 2E
1198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_AF:
1200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 */
1201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2041              	 .loc 2 1201 0
 2042 0040 3B68     	 ldr r3,[r7]
 2043 0042 0022     	 mov r2,#0
 2044 0044 9A62     	 str r2,[r3,#40]
1202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 2045              	 .loc 2 1203 0
 2046 0046 0020     	 mov r0,#0
 2047 0048 0721     	 mov r1,#7
 2048 004a 0122     	 mov r2,#1
 2049 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
1205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2050              	 .loc 2 1205 0
 2051 0050 1DE0     	 b .L140
 2052              	.L138:
1206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank0 during previous recovery(FA), Next step = Bank1 marker Page
1209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : FA -> 0A -> GC PROCESS -> 02 -> F2 -> E2
1210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_FA:
1212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 2053              	 .loc 2 1212 0
 2054 0052 3B68     	 ldr r3,[r7]
 2055 0054 0122     	 mov r2,#1
 2056 0056 9A62     	 str r2,[r3,#40]
1213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 2057              	 .loc 2 1213 0
 2058 0058 0020     	 mov r0,#0
 2059 005a 0721     	 mov r1,#7
 2060 005c 0122     	 mov r2,#1
 2061 005e FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
1215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2062              	 .loc 2 1215 0
 2063 0062 14E0     	 b .L140
 2064              	.L136:
1216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recover(0F), Next step = Bank1 marker Page 
1219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : 0F -> 02 -> GC PROCESS -> F2 -> E2
1220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_0F:
1222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 2065              	 .loc 2 1222 0
 2066 0064 3B68     	 ldr r3,[r7]
 2067 0066 0122     	 mov r2,#1
 2068 0068 9A62     	 str r2,[r3,#40]
1223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 2069              	 .loc 2 1223 0
 2070 006a 2020     	 mov r0,#32
 2071 006c 0321     	 mov r1,#3
 2072 006e 0022     	 mov r2,#0
 2073 0070 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
1225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2074              	 .loc 2 1225 0
 2075 0074 0BE0     	 b .L140
 2076              	.L134:
1226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recover(F0), Next step = Bank1 marker Page 
1229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : F0 -> 20 -> GC PROCESS -> 2F -> 2E
1230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_F0:
1232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 */
1233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2077              	 .loc 2 1233 0
 2078 0076 3B68     	 ldr r3,[r7]
 2079 0078 0022     	 mov r2,#0
 2080 007a 9A62     	 str r2,[r3,#40]
1234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
1235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 2081              	 .loc 2 1235 0
 2082 007c 2020     	 mov r0,#32
 2083 007e 0321     	 mov r1,#3
 2084 0080 0022     	 mov r2,#0
 2085 0082 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
1237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2086              	 .loc 2 1237 0
 2087 0086 02E0     	 b .L140
 2088              	.L133:
1238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 2089              	 .loc 2 1240 0
 2090 0088 0023     	 mov r3,#0
 2091 008a 7B60     	 str r3,[r7,#4]
1241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2092              	 .loc 2 1241 0
 2093 008c C046     	 mov r8,r8
 2094              	.L140:
1242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 2095              	 .loc 2 1243 0
 2096 008e 7B68     	 ldr r3,[r7,#4]
1244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2097              	 .loc 2 1244 0
 2098 0090 181C     	 mov r0,r3
 2099 0092 BD46     	 mov sp,r7
 2100 0094 02B0     	 add sp,sp,#8
 2101              	 
 2102 0096 80BD     	 pop {r7,pc}
 2103              	.L143:
 2104              	 .align 2
 2105              	.L142:
 2106 0098 00000000 	 .word E_EEPROM_XMC1_0
 2107              	 .cfi_endproc
 2108              	.LFE66:
 2110              	 .section .text.E_EEPROM_XMC1_lInitGcNormalStates,"ax",%progbits
 2111              	 .align 2
 2112              	 .code 16
 2113              	 .thumb_func
 2115              	E_EEPROM_XMC1_lInitGcNormalStates:
 2116              	.LFB67:
1245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : current_state  - Current GC state
1247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *                   next_process  - Number of logical block
1248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : void
1250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Executes normal Garbage collection state machine sub process
1252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process)
1254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2117              	 .loc 2 1254 0
 2118              	 .cfi_startproc
 2119 0000 80B5     	 push {r7,lr}
 2120              	.LCFI59:
 2121              	 .cfi_def_cfa_offset 8
 2122              	 .cfi_offset 7,-8
 2123              	 .cfi_offset 14,-4
 2124 0002 84B0     	 sub sp,sp,#16
 2125              	.LCFI60:
 2126              	 .cfi_def_cfa_offset 24
 2127 0004 00AF     	 add r7,sp,#0
 2128              	.LCFI61:
 2129              	 .cfi_def_cfa_register 7
 2130 0006 7860     	 str r0,[r7,#4]
 2131 0008 3960     	 str r1,[r7]
1255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2132              	 .loc 2 1256 0
 2133 000a 144B     	 ldr r3,.L148
 2134 000c 5B68     	 ldr r3,[r3,#4]
 2135 000e FB60     	 str r3,[r7,#12]
1257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2136              	 .loc 2 1259 0
 2137 0010 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (next_process == E_EEPROM_XMC1_EXECUTE_PREP_FLASH)
 2138              	 .loc 2 1261 0
 2139 0014 3B68     	 ldr r3,[r7]
 2140 0016 012B     	 cmp r3,#1
 2141 0018 09D1     	 bne .L145
1262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state*/
1264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2142              	 .loc 2 1264 0
 2143 001a FA68     	 ldr r2,[r7,#12]
 2144 001c B223     	 mov r3,#178
 2145 001e 5B00     	 lsl r3,r3,#1
 2146 0020 7968     	 ldr r1,[r7,#4]
 2147 0022 D150     	 str r1,[r2,r3]
1265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Prepare DFlash routine to build FEE base  */
1266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lPrepareDFlash();
 2148              	 .loc 2 1266 0
 2149 0024 FFF7FEFF 	 bl E_EEPROM_XMC1_lPrepareDFlash
1267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2150              	 .loc 2 1268 0
 2151 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
 2152 002c 13E0     	 b .L144
 2153              	.L145:
1269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }  
1270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (next_process == E_EEPROM_XMC1_EXECUTE_GC_STATE)
 2154              	 .loc 2 1270 0
 2155 002e 3B68     	 ldr r3,[r7]
 2156 0030 022B     	 cmp r3,#2
 2157 0032 09D1     	 bne .L147
1271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state */
1273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2158              	 .loc 2 1273 0
 2159 0034 FA68     	 ldr r2,[r7,#12]
 2160 0036 B223     	 mov r3,#178
 2161 0038 5B00     	 lsl r3,r3,#1
 2162 003a 7968     	 ldr r1,[r7,#4]
 2163 003c D150     	 str r1,[r2,r3]
1274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2164              	 .loc 2 1275 0
 2165 003e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Garbage Collection */
1277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 2166              	 .loc 2 1277 0
 2167 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2168 0046 06E0     	 b .L144
 2169              	.L147:
1278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else /* if ( next_process == E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE ) */
1280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2170              	 .loc 2 1282 0
 2171 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state as Bank-0 Erase Completed state */
1284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2172              	 .loc 2 1284 0
 2173 004c FA68     	 ldr r2,[r7,#12]
 2174 004e B223     	 mov r3,#178
 2175 0050 5B00     	 lsl r3,r3,#1
 2176 0052 7968     	 ldr r1,[r7,#4]
 2177 0054 D150     	 str r1,[r2,r3]
 2178              	.L144:
1285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2179              	 .loc 2 1286 0
 2180 0056 BD46     	 mov sp,r7
 2181 0058 04B0     	 add sp,sp,#16
 2182              	 
 2183 005a 80BD     	 pop {r7,pc}
 2184              	.L149:
 2185              	 .align 2
 2186              	.L148:
 2187 005c 00000000 	 .word E_EEPROM_XMC1_0
 2188              	 .cfi_endproc
 2189              	.LFE67:
 2191              	 .section .text.E_EEPROM_XMC1_lInitGcDataCopyState,"ax",%progbits
 2192              	 .align 2
 2193              	 .code 16
 2194              	 .thumb_func
 2196              	E_EEPROM_XMC1_lInitGcDataCopyState:
 2197              	.LFB68:
1287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : current_state  - Current GC state
1290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *                   marker_offset  - Marker block offset
1291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : void
1293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Executes data copy state GC state machine sub process.
1295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset)
1297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2198              	 .loc 2 1297 0
 2199              	 .cfi_startproc
 2200 0000 80B5     	 push {r7,lr}
 2201              	.LCFI62:
 2202              	 .cfi_def_cfa_offset 8
 2203              	 .cfi_offset 7,-8
 2204              	 .cfi_offset 14,-4
 2205 0002 84B0     	 sub sp,sp,#16
 2206              	.LCFI63:
 2207              	 .cfi_def_cfa_offset 24
 2208 0004 00AF     	 add r7,sp,#0
 2209              	.LCFI64:
 2210              	 .cfi_def_cfa_register 7
 2211 0006 7860     	 str r0,[r7,#4]
 2212 0008 3960     	 str r1,[r7]
1298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2213              	 .loc 2 1300 0
 2214 000a 1A4B     	 ldr r3,.L155
 2215 000c 5B68     	 ldr r3,[r3,#4]
 2216 000e FB60     	 str r3,[r7,#12]
1301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2217              	 .loc 2 1303 0
 2218 0010 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the GC state as restart copy process */
1306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_state = current_state ;
 2219              	 .loc 2 1306 0
 2220 0014 FA68     	 ldr r2,[r7,#12]
 2221 0016 B223     	 mov r3,#178
 2222 0018 5B00     	 lsl r3,r3,#1
 2223 001a 7968     	 ldr r1,[r7,#4]
 2224 001c D150     	 str r1,[r2,r3]
1307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the RAM Cache Table with */
1309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCache();
 2225              	 .loc 2 1309 0
 2226 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Erase the previous redundant bank */
1312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 2227              	 .loc 2 1312 0
 2228 0022 FB68     	 ldr r3,[r7,#12]
 2229 0024 9B6B     	 ldr r3,[r3,#56]
 2230 0026 181C     	 mov r0,r3
 2231 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 2232 002c 031C     	 mov r3,r0
 2233 002e BB60     	 str r3,[r7,#8]
1313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2234              	 .loc 2 1314 0
 2235 0030 BB68     	 ldr r3,[r7,#8]
 2236 0032 002B     	 cmp r3,#0
 2237 0034 16D1     	 bne .L151
1315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2238              	 .loc 2 1316 0
 2239 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the erased bank (2E)  */
1319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
 2240              	 .loc 2 1319 0
 2241 003a FB68     	 ldr r3,[r7,#12]
 2242 003c DA6A     	 ldr r2,[r3,#44]
 2243 003e 3B68     	 ldr r3,[r7]
 2244 0040 D318     	 add r3,r2,r3
 2245 0042 181C     	 mov r0,r3
 2246 0044 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2247 0048 031C     	 mov r3,r0
 2248 004a BB60     	 str r3,[r7,#8]
1320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status == 0U)
 2249              	 .loc 2 1321 0
 2250 004c BB68     	 ldr r3,[r7,#8]
 2251 004e 002B     	 cmp r3,#0
 2252 0050 02D1     	 bne .L152
1322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Start Garbage Collection */
1324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lGarbageCollection();
 2253              	 .loc 2 1324 0
 2254 0052 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2255 0056 0AE0     	 b .L150
 2256              	.L152:
1325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2257              	 .loc 2 1328 0
 2258 0058 FA68     	 ldr r2,[r7,#12]
 2259 005a B223     	 mov r3,#178
 2260 005c 5B00     	 lsl r3,r3,#1
 2261 005e 0921     	 mov r1,#9
 2262 0060 D150     	 str r1,[r2,r3]
 2263 0062 04E0     	 b .L150
 2264              	.L151:
1329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2265              	 .loc 2 1334 0
 2266 0064 FA68     	 ldr r2,[r7,#12]
 2267 0066 B223     	 mov r3,#178
 2268 0068 5B00     	 lsl r3,r3,#1
 2269 006a 0921     	 mov r1,#9
 2270 006c D150     	 str r1,[r2,r3]
 2271              	.L150:
1335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2272              	 .loc 2 1337 0
 2273 006e BD46     	 mov sp,r7
 2274 0070 04B0     	 add sp,sp,#16
 2275              	 
 2276 0072 80BD     	 pop {r7,pc}
 2277              	.L156:
 2278              	 .align 2
 2279              	.L155:
 2280 0074 00000000 	 .word E_EEPROM_XMC1_0
 2281              	 .cfi_endproc
 2282              	.LFE68:
 2284              	 .section .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery,"ax",%progbits
 2285              	 .align 2
 2286              	 .code 16
 2287              	 .thumb_func
 2289              	E_EEPROM_XMC1_lErasedDirtyStateRecovery:
 2290              	.LFB69:
1338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : marker_offset  - Marker block offset
1341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Executes state machine sub process for erase dirty states to recover.
1345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset)
1347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2291              	 .loc 2 1347 0
 2292              	 .cfi_startproc
 2293 0000 80B5     	 push {r7,lr}
 2294              	.LCFI65:
 2295              	 .cfi_def_cfa_offset 8
 2296              	 .cfi_offset 7,-8
 2297              	 .cfi_offset 14,-4
 2298 0002 84B0     	 sub sp,sp,#16
 2299              	.LCFI66:
 2300              	 .cfi_def_cfa_offset 24
 2301 0004 00AF     	 add r7,sp,#0
 2302              	.LCFI67:
 2303              	 .cfi_def_cfa_register 7
 2304 0006 7860     	 str r0,[r7,#4]
1348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2305              	 .loc 2 1350 0
 2306 0008 194B     	 ldr r3,.L162
 2307 000a 5B68     	 ldr r3,[r3,#4]
 2308 000c FB60     	 str r3,[r7,#12]
1351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2309              	 .loc 2 1353 0
 2310 000e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Erase the previous redundant bank */
1356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 2311              	 .loc 2 1356 0
 2312 0012 FB68     	 ldr r3,[r7,#12]
 2313 0014 9B6B     	 ldr r3,[r3,#56]
 2314 0016 181C     	 mov r0,r3
 2315 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 2316 001c 031C     	 mov r3,r0
 2317 001e BB60     	 str r3,[r7,#8]
1357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2318              	 .loc 2 1358 0
 2319 0020 BB68     	 ldr r3,[r7,#8]
 2320 0022 002B     	 cmp r3,#0
 2321 0024 1BD1     	 bne .L158
1359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2322              	 .loc 2 1360 0
 2323 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the erased bank */
1363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
 2324              	 .loc 2 1363 0
 2325 002a FB68     	 ldr r3,[r7,#12]
 2326 002c DA6A     	 ldr r2,[r3,#44]
 2327 002e 7B68     	 ldr r3,[r7,#4]
 2328 0030 D318     	 add r3,r2,r3
 2329 0032 181C     	 mov r0,r3
 2330 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2331 0038 031C     	 mov r3,r0
 2332 003a BB60     	 str r3,[r7,#8]
1364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status == 0U)
 2333              	 .loc 2 1364 0
 2334 003c BB68     	 ldr r3,[r7,#8]
 2335 003e 002B     	 cmp r3,#0
 2336 0040 07D1     	 bne .L159
1365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Update the RAM Cache Table with the written blocks of data.*/
1367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lUpdateCache();
 2337              	 .loc 2 1367 0
 2338 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
 2339              	 .loc 2 1369 0
 2340 0046 FA68     	 ldr r2,[r7,#12]
 2341 0048 B223     	 mov r3,#178
 2342 004a 5B00     	 lsl r3,r3,#1
 2343 004c 0A21     	 mov r1,#10
 2344 004e D150     	 str r1,[r2,r3]
 2345 0050 0AE0     	 b .L157
 2346              	.L159:
1370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2347              	 .loc 2 1373 0
 2348 0052 FA68     	 ldr r2,[r7,#12]
 2349 0054 B223     	 mov r3,#178
 2350 0056 5B00     	 lsl r3,r3,#1
 2351 0058 0921     	 mov r1,#9
 2352 005a D150     	 str r1,[r2,r3]
 2353 005c 04E0     	 b .L157
 2354              	.L158:
1374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2355              	 .loc 2 1378 0
 2356 005e FA68     	 ldr r2,[r7,#12]
 2357 0060 B223     	 mov r3,#178
 2358 0062 5B00     	 lsl r3,r3,#1
 2359 0064 0921     	 mov r1,#9
 2360 0066 D150     	 str r1,[r2,r3]
 2361              	.L157:
1379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2362              	 .loc 2 1380 0
 2363 0068 BD46     	 mov sp,r7
 2364 006a 04B0     	 add sp,sp,#16
 2365              	 
 2366 006c 80BD     	 pop {r7,pc}
 2367              	.L163:
 2368 006e C046     	 .align 2
 2369              	.L162:
 2370 0070 00000000 	 .word E_EEPROM_XMC1_0
 2371              	 .cfi_endproc
 2372              	.LFE69:
 2374              	 .section .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery,"ax",%progbits
 2375              	 .align 2
 2376              	 .code 16
 2377              	 .thumb_func
 2379              	E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:
 2380              	.LFB70:
1381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : current_state   - Current GC state
1384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   NextState      - Next GC state
1385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   page_addr_select - Page address from which bank to be written
1386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Recovers from any copy process dirty state.
1390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( uint32_t current_state,
1392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                           uint32_t next_state,
1393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                           uint32_t page_addr_select)
1394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2381              	 .loc 2 1394 0
 2382              	 .cfi_startproc
 2383 0000 80B5     	 push {r7,lr}
 2384              	.LCFI68:
 2385              	 .cfi_def_cfa_offset 8
 2386              	 .cfi_offset 7,-8
 2387              	 .cfi_offset 14,-4
 2388 0002 86B0     	 sub sp,sp,#24
 2389              	.LCFI69:
 2390              	 .cfi_def_cfa_offset 32
 2391 0004 00AF     	 add r7,sp,#0
 2392              	.LCFI70:
 2393              	 .cfi_def_cfa_register 7
 2394 0006 F860     	 str r0,[r7,#12]
 2395 0008 B960     	 str r1,[r7,#8]
 2396 000a 7A60     	 str r2,[r7,#4]
1395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2397              	 .loc 2 1397 0
 2398 000c 1B4B     	 ldr r3,.L169
 2399 000e 5B68     	 ldr r3,[r3,#4]
 2400 0010 7B61     	 str r3,[r7,#20]
1398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2401              	 .loc 2 1400 0
 2402 0012 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Set the marker blocks with copy completed state */
1403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerPageBuffer(current_state);
 2403              	 .loc 2 1403 0
 2404 0016 FB68     	 ldr r3,[r7,#12]
 2405 0018 181C     	 mov r0,r3
 2406 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerPageBuffer
1404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
1406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 2407              	 .loc 2 1406 0
 2408 001e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Decide the bank from page_addr_select and Erase the marker page + Program with the current sta
1409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (page_addr_select == 1U)
 2409              	 .loc 2 1409 0
 2410 0022 7B68     	 ldr r3,[r7,#4]
 2411 0024 012B     	 cmp r3,#1
 2412 0026 08D1     	 bne .L165
1410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_dest_addr, (uint32_t*)(void*)data_ptr->page_write_b
 2413              	 .loc 2 1411 0
 2414 0028 7B69     	 ldr r3,[r7,#20]
 2415 002a DA6A     	 ldr r2,[r3,#44]
 2416 002c 7B69     	 ldr r3,[r7,#20]
 2417 002e 6033     	 add r3,r3,#96
 2418 0030 101C     	 mov r0,r2
 2419 0032 191C     	 mov r1,r3
 2420 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
 2421 0038 07E0     	 b .L166
 2422              	.L165:
1412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_src_addr, (uint32_t*)(void*)data_ptr->page_write_bu
 2423              	 .loc 2 1415 0
 2424 003a 7B69     	 ldr r3,[r7,#20]
 2425 003c 1A6B     	 ldr r2,[r3,#48]
 2426 003e 7B69     	 ldr r3,[r7,#20]
 2427 0040 6033     	 add r3,r3,#96
 2428 0042 101C     	 mov r0,r2
 2429 0044 191C     	 mov r1,r3
 2430 0046 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
 2431              	.L166:
1416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 2432              	 .loc 2 1418 0
 2433 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 2434 004e 031C     	 mov r3,r0
 2435 0050 3B61     	 str r3,[r7,#16]
1419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2436              	 .loc 2 1420 0
 2437 0052 3B69     	 ldr r3,[r7,#16]
 2438 0054 002B     	 cmp r3,#0
 2439 0056 09D1     	 bne .L167
1421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state as write next bank valid */
1423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = next_state ;
 2440              	 .loc 2 1423 0
 2441 0058 7A69     	 ldr r2,[r7,#20]
 2442 005a B223     	 mov r3,#178
 2443 005c 5B00     	 lsl r3,r3,#1
 2444 005e B968     	 ldr r1,[r7,#8]
 2445 0060 D150     	 str r1,[r2,r3]
1424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2446              	 .loc 2 1425 0
 2447 0062 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Garbage Collection */
1427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 2448              	 .loc 2 1427 0
 2449 0066 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2450 006a 04E0     	 b .L164
 2451              	.L167:
1428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2452              	 .loc 2 1431 0
 2453 006c 7A69     	 ldr r2,[r7,#20]
 2454 006e B223     	 mov r3,#178
 2455 0070 5B00     	 lsl r3,r3,#1
 2456 0072 0921     	 mov r1,#9
 2457 0074 D150     	 str r1,[r2,r3]
 2458              	.L164:
1432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2459              	 .loc 2 1433 0
 2460 0076 BD46     	 mov sp,r7
 2461 0078 06B0     	 add sp,sp,#24
 2462              	 
 2463 007a 80BD     	 pop {r7,pc}
 2464              	.L170:
 2465              	 .align 2
 2466              	.L169:
 2467 007c 00000000 	 .word E_EEPROM_XMC1_0
 2468              	 .cfi_endproc
 2469              	.LFE70:
 2471              	 .section .text.E_EEPROM_XMC1_lGarbageCollection,"ax",%progbits
 2472              	 .align 2
 2473              	 .code 16
 2474              	 .thumb_func
 2476              	E_EEPROM_XMC1_lGarbageCollection:
 2477              	.LFB71:
1434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function execute's the garbage collection state machine.
1441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lGarbageCollection(void)
1443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2478              	 .loc 2 1443 0
 2479              	 .cfi_startproc
 2480 0000 80B5     	 push {r7,lr}
 2481              	.LCFI71:
 2482              	 .cfi_def_cfa_offset 8
 2483              	 .cfi_offset 7,-8
 2484              	 .cfi_offset 14,-4
 2485 0002 82B0     	 sub sp,sp,#8
 2486              	.LCFI72:
 2487              	 .cfi_def_cfa_offset 16
 2488 0004 00AF     	 add r7,sp,#0
 2489              	.LCFI73:
 2490              	 .cfi_def_cfa_register 7
1444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2491              	 .loc 2 1445 0
 2492 0006 244B     	 ldr r3,.L184
 2493 0008 5B68     	 ldr r3,[r3,#4]
 2494 000a 7B60     	 str r3,[r7,#4]
 2495              	.L183:
1446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
1448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->gc_state)
 2496              	 .loc 2 1449 0
 2497 000c 7A68     	 ldr r2,[r7,#4]
 2498 000e B223     	 mov r3,#178
 2499 0010 5B00     	 lsl r3,r3,#1
 2500 0012 D358     	 ldr r3,[r2,r3]
 2501 0014 082B     	 cmp r3,#8
 2502 0016 2CD8     	 bhi .L172
 2503 0018 9A00     	 lsl r2,r3,#2
 2504 001a 204B     	 ldr r3,.L184+4
 2505 001c D318     	 add r3,r2,r3
 2506 001e 1B68     	 ldr r3,[r3]
 2507 0020 9F46     	 mov pc,r3
 2508              	 .section .rodata.E_EEPROM_XMC1_lGarbageCollection,"a",%progbits
 2509              	 .align 2
 2510              	.L174:
 2511 0000 72000000 	 .word .L172
 2512 0004 22000000 	 .word .L173
 2513 0008 2E000000 	 .word .L175
 2514 000c 5E000000 	 .word .L176
 2515 0010 72000000 	 .word .L172
 2516 0014 28000000 	 .word .L177
 2517 0018 4E000000 	 .word .L178
 2518 001c 54000000 	 .word .L179
 2519 0020 68000000 	 .word .L180
 2520              	 .section .text.E_EEPROM_XMC1_lGarbageCollection
 2521              	.L173:
1450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_START:
1452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcStartCopy();
 2522              	 .loc 2 1452 0
 2523 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcStartCopy
1453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2524              	 .loc 2 1453 0
 2525 0026 27E0     	 b .L181
 2526              	.L177:
1454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_WRITE:
1456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcCopyWrite();
 2527              	 .loc 2 1456 0
 2528 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcCopyWrite
1457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2529              	 .loc 2 1457 0
 2530 002c 24E0     	 b .L181
 2531              	.L175:
1458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_READ_NXTBLOCK:
1460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         XMC_FLASH_ClearStatus();
 2532              	 .loc 2 1460 0
 2533 002e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr ,(uint32_t*)(void*)data_ptr->read_writ
 2534              	 .loc 2 1461 0
 2535 0032 7B68     	 ldr r3,[r7,#4]
 2536 0034 1A6B     	 ldr r2,[r3,#48]
 2537 0036 7B68     	 ldr r3,[r7,#4]
 2538 0038 4C33     	 add r3,r3,#76
 2539 003a 101C     	 mov r0,r2
 2540 003c 191C     	 mov r1,r3
 2541 003e FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
 2542              	 .loc 2 1462 0
 2543 0042 7A68     	 ldr r2,[r7,#4]
 2544 0044 B223     	 mov r3,#178
 2545 0046 5B00     	 lsl r3,r3,#1
 2546 0048 0521     	 mov r1,#5
 2547 004a D150     	 str r1,[r2,r3]
1463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2548              	 .loc 2 1463 0
 2549 004c 14E0     	 b .L181
 2550              	.L178:
1464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_END:
1466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcEndOfCopy();
 2551              	 .loc 2 1466 0
 2552 004e FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcEndOfCopy
1467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2553              	 .loc 2 1467 0
 2554 0052 11E0     	 b .L181
 2555              	.L179:
1468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_NEXT_BANK_VALID:
1470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_GC_ERASE
 2556              	 .loc 2 1470 0
 2557 0054 0720     	 mov r0,#7
 2558 0056 0321     	 mov r1,#3
 2559 0058 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2560              	 .loc 2 1471 0
 2561 005c 0CE0     	 b .L181
 2562              	.L176:
1472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_ERASE_PREV_BANK:
1474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_GC_MARK
 2563              	 .loc 2 1474 0
 2564 005e 0320     	 mov r0,#3
 2565 0060 0821     	 mov r1,#8
 2566 0062 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2567              	 .loc 2 1475 0
 2568 0066 07E0     	 b .L181
 2569              	.L180:
1476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_MARK_END_ERASE1:
1478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_GC_IDLE)
 2570              	 .loc 2 1478 0
 2571 0068 0820     	 mov r0,#8
 2572 006a 0A21     	 mov r1,#10
 2573 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2574              	 .loc 2 1479 0
 2575 0070 02E0     	 b .L181
 2576              	.L172:
1480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:
1482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
 2577              	 .loc 2 1482 0
 2578 0072 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcRequested
1483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2579              	 .loc 2 1483 0
 2580 0076 C046     	 mov r8,r8
 2581              	.L181:
1484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
 2582              	 .loc 2 1486 0
 2583 0078 7A68     	 ldr r2,[r7,#4]
 2584 007a B223     	 mov r3,#178
 2585 007c 5B00     	 lsl r3,r3,#1
 2586 007e D358     	 ldr r3,[r2,r3]
1487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 2587              	 .loc 2 1487 0
 2588 0080 0A2B     	 cmp r3,#10
 2589 0082 05D0     	 beq .L171
 2590              	 .loc 2 1487 0 is_stmt 0 discriminator 1
 2591 0084 7A68     	 ldr r2,[r7,#4]
 2592 0086 B223     	 mov r3,#178
 2593 0088 5B00     	 lsl r3,r3,#1
 2594 008a D358     	 ldr r3,[r2,r3]
1486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 2595              	 .loc 2 1486 0 is_stmt 1 discriminator 1
 2596 008c 092B     	 cmp r3,#9
 2597 008e BDD1     	 bne .L183
 2598              	.L171:
1488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2599              	 .loc 2 1488 0
 2600 0090 BD46     	 mov sp,r7
 2601 0092 02B0     	 add sp,sp,#8
 2602              	 
 2603 0094 80BD     	 pop {r7,pc}
 2604              	.L185:
 2605 0096 C046     	 .align 2
 2606              	.L184:
 2607 0098 00000000 	 .word E_EEPROM_XMC1_0
 2608 009c 00000000 	 .word .L174
 2609              	 .cfi_endproc
 2610              	.LFE71:
 2612              	 .section .text.E_EEPROM_XMC1_lHandleGcRequested,"ax",%progbits
 2613              	 .align 2
 2614              	 .code 16
 2615              	 .thumb_func
 2617              	E_EEPROM_XMC1_lHandleGcRequested:
 2618              	.LFB72:
1489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC REQUESTED state
1496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcRequested(void)
1498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2619              	 .loc 2 1498 0
 2620              	 .cfi_startproc
 2621 0000 80B5     	 push {r7,lr}
 2622              	.LCFI74:
 2623              	 .cfi_def_cfa_offset 8
 2624              	 .cfi_offset 7,-8
 2625              	 .cfi_offset 14,-4
 2626 0002 84B0     	 sub sp,sp,#16
 2627              	.LCFI75:
 2628              	 .cfi_def_cfa_offset 24
 2629 0004 00AF     	 add r7,sp,#0
 2630              	.LCFI76:
 2631              	 .cfi_def_cfa_register 7
1499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2632              	 .loc 2 1504 0
 2633 0006 1F4B     	 ldr r3,.L190
 2634 0008 5B68     	 ldr r3,[r3,#4]
 2635 000a 7B60     	 str r3,[r7,#4]
1505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2636              	 .loc 2 1506 0
 2637 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write Copy start state to new bank  (2A) or (A2) */
1508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_BEGIN_OFFSET));
 2638              	 .loc 2 1508 0
 2639 0010 7B68     	 ldr r3,[r7,#4]
 2640 0012 DB6A     	 ldr r3,[r3,#44]
 2641 0014 1033     	 add r3,r3,#16
 2642 0016 181C     	 mov r0,r3
 2643 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2644 001c 031C     	 mov r3,r0
 2645 001e 3B60     	 str r3,[r7]
1509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2646              	 .loc 2 1509 0
 2647 0020 3B68     	 ldr r3,[r7]
 2648 0022 002B     	 cmp r3,#0
 2649 0024 25D1     	 bne .L187
1510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Initialize the copied status for all the logical blocks */
1512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     cache_ptr = data_ptr->block_info;
 2650              	 .loc 2 1512 0
 2651 0026 7B68     	 ldr r3,[r7,#4]
 2652 0028 BB60     	 str r3,[r7,#8]
1513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count = 0U;
 2653              	 .loc 2 1513 0
 2654 002a 0023     	 mov r3,#0
 2655 002c FB60     	 str r3,[r7,#12]
 2656              	.L188:
1514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     do
1515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->status.copied = 0U;
 2657              	 .loc 2 1516 0 discriminator 1
 2658 002e BB68     	 ldr r3,[r7,#8]
 2659 0030 1A79     	 ldrb r2,[r3,#4]
 2660 0032 0421     	 mov r1,#4
 2661 0034 8A43     	 bic r2,r1
 2662 0036 1A71     	 strb r2,[r3,#4]
1517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2663              	 .loc 2 1517 0 discriminator 1
 2664 0038 FB68     	 ldr r3,[r7,#12]
 2665 003a 0133     	 add r3,r3,#1
 2666 003c FB60     	 str r3,[r7,#12]
1518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr++;
 2667              	 .loc 2 1518 0 discriminator 1
 2668 003e BB68     	 ldr r3,[r7,#8]
 2669 0040 0833     	 add r3,r3,#8
 2670 0042 BB60     	 str r3,[r7,#8]
1519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     } while (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count);
 2671              	 .loc 2 1519 0 discriminator 1
 2672 0044 0F4B     	 ldr r3,.L190
 2673 0046 5B7A     	 ldrb r3,[r3,#9]
 2674 0048 1A1E     	 sub r2,r3,#0
 2675 004a FB68     	 ldr r3,[r7,#12]
 2676 004c 9A42     	 cmp r2,r3
 2677 004e EED1     	 bne .L188
1520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_log_block_count = 0U;
 2678              	 .loc 2 1521 0
 2679 0050 7A68     	 ldr r2,[r7,#4]
 2680 0052 B623     	 mov r3,#182
 2681 0054 5B00     	 lsl r3,r3,#1
 2682 0056 0021     	 mov r1,#0
 2683 0058 D150     	 str r1,[r2,r3]
1522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
 2684              	 .loc 2 1522 0
 2685 005a 7A68     	 ldr r2,[r7,#4]
 2686 005c B223     	 mov r3,#178
 2687 005e 5B00     	 lsl r3,r3,#1
 2688 0060 0121     	 mov r1,#1
 2689 0062 D150     	 str r1,[r2,r3]
1523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 2690              	 .loc 2 1523 0
 2691 0064 7B68     	 ldr r3,[r7,#4]
 2692 0066 DB6A     	 ldr r3,[r3,#44]
 2693 0068 5A1C     	 add r2,r3,#1
 2694 006a FF32     	 add r2,r2,#255
 2695 006c 7B68     	 ldr r3,[r7,#4]
 2696 006e DA62     	 str r2,[r3,#44]
 2697 0070 04E0     	 b .L186
 2698              	.L187:
1524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2699              	 .loc 2 1527 0
 2700 0072 7A68     	 ldr r2,[r7,#4]
 2701 0074 B223     	 mov r3,#178
 2702 0076 5B00     	 lsl r3,r3,#1
 2703 0078 0921     	 mov r1,#9
 2704 007a D150     	 str r1,[r2,r3]
 2705              	.L186:
1528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2706              	 .loc 2 1529 0
 2707 007c BD46     	 mov sp,r7
 2708 007e 04B0     	 add sp,sp,#16
 2709              	 
 2710 0080 80BD     	 pop {r7,pc}
 2711              	.L191:
 2712 0082 C046     	 .align 2
 2713              	.L190:
 2714 0084 00000000 	 .word E_EEPROM_XMC1_0
 2715              	 .cfi_endproc
 2716              	.LFE72:
 2718              	 .section .text.E_EEPROM_XMC1_lHandleGcStartCopy,"ax",%progbits
 2719              	 .align 2
 2720              	 .code 16
 2721              	 .thumb_func
 2723              	E_EEPROM_XMC1_lHandleGcStartCopy:
 2724              	.LFB73:
1530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC START COPY state
1536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcStartCopy(void)
1538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2725              	 .loc 2 1538 0
 2726              	 .cfi_startproc
 2727 0000 80B5     	 push {r7,lr}
 2728              	.LCFI77:
 2729              	 .cfi_def_cfa_offset 8
 2730              	 .cfi_offset 7,-8
 2731              	 .cfi_offset 14,-4
 2732 0002 84B0     	 sub sp,sp,#16
 2733              	.LCFI78:
 2734              	 .cfi_def_cfa_offset 24
 2735 0004 00AF     	 add r7,sp,#0
 2736              	.LCFI79:
 2737              	 .cfi_def_cfa_register 7
1539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_flag;
1540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2738              	 .loc 2 1544 0
 2739 0006 324B     	 ldr r3,.L199
 2740 0008 5B68     	 ldr r3,[r3,#4]
 2741 000a 3B60     	 str r3,[r7]
1545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_flag = 0U;
 2742              	 .loc 2 1546 0
 2743 000c 0023     	 mov r3,#0
 2744 000e FB60     	 str r3,[r7,#12]
1547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* initialize the copied status for all the logical blocks */
1548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = data_ptr->gc_log_block_count;
 2745              	 .loc 2 1548 0
 2746 0010 3A68     	 ldr r2,[r7]
 2747 0012 B623     	 mov r3,#182
 2748 0014 5B00     	 lsl r3,r3,#1
 2749 0016 D358     	 ldr r3,[r2,r3]
 2750 0018 BB60     	 str r3,[r7,#8]
1549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info + block_count;
 2751              	 .loc 2 1549 0
 2752 001a BB68     	 ldr r3,[r7,#8]
 2753 001c DB00     	 lsl r3,r3,#3
 2754 001e 3A68     	 ldr r2,[r7]
 2755 0020 D318     	 add r3,r2,r3
 2756 0022 7B60     	 str r3,[r7,#4]
1550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
1551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Check all available blocks in cache table for Copy process. Condition breaks on either the cur
1552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * consistent or all blocks check for consistency is finished
1553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
 2757              	 .loc 2 1554 0
 2758 0024 1AE0     	 b .L193
 2759              	.L196:
1555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If block is consistent set state flag for copy enable*/
1557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (((cache_ptr->address != 0U) && (cache_ptr->status.consistent == 1U)) && (cache_ptr->status.
 2760              	 .loc 2 1557 0
 2761 0026 7B68     	 ldr r3,[r7,#4]
 2762 0028 1B68     	 ldr r3,[r3]
 2763 002a 002B     	 cmp r3,#0
 2764 002c 10D0     	 beq .L194
 2765              	 .loc 2 1557 0 is_stmt 0 discriminator 1
 2766 002e 7B68     	 ldr r3,[r7,#4]
 2767 0030 1B79     	 ldrb r3,[r3,#4]
 2768 0032 0222     	 mov r2,#2
 2769 0034 1340     	 and r3,r2
 2770 0036 DBB2     	 uxtb r3,r3
 2771 0038 002B     	 cmp r3,#0
 2772 003a 09D0     	 beq .L194
 2773              	 .loc 2 1557 0 discriminator 2
 2774 003c 7B68     	 ldr r3,[r7,#4]
 2775 003e 1B79     	 ldrb r3,[r3,#4]
 2776 0040 0422     	 mov r2,#4
 2777 0042 1340     	 and r3,r2
 2778 0044 DBB2     	 uxtb r3,r3
 2779 0046 002B     	 cmp r3,#0
 2780 0048 02D1     	 bne .L194
1558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_flag = 1U;
 2781              	 .loc 2 1559 0 is_stmt 1
 2782 004a 0123     	 mov r3,#1
 2783 004c FB60     	 str r3,[r7,#12]
 2784 004e 05E0     	 b .L193
 2785              	.L194:
1560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If block is inconsistent ignore the block from copy and try next block*/
1562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2786              	 .loc 2 1564 0
 2787 0050 BB68     	 ldr r3,[r7,#8]
 2788 0052 0133     	 add r3,r3,#1
 2789 0054 BB60     	 str r3,[r7,#8]
1565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr++;
 2790              	 .loc 2 1565 0
 2791 0056 7B68     	 ldr r3,[r7,#4]
 2792 0058 0833     	 add r3,r3,#8
 2793 005a 7B60     	 str r3,[r7,#4]
 2794              	.L193:
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 2795              	 .loc 2 1554 0
 2796 005c FB68     	 ldr r3,[r7,#12]
 2797 005e 002B     	 cmp r3,#0
 2798 0060 05D1     	 bne .L195
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 2799              	 .loc 2 1554 0 is_stmt 0 discriminator 1
 2800 0062 1B4B     	 ldr r3,.L199
 2801 0064 5B7A     	 ldrb r3,[r3,#9]
 2802 0066 1A1E     	 sub r2,r3,#0
 2803 0068 BB68     	 ldr r3,[r7,#8]
 2804 006a 9A42     	 cmp r2,r3
 2805 006c DBD1     	 bne .L196
 2806              	.L195:
1566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } /* end of while */
1568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If block is consistent */
1570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (state_flag == 1U)
 2807              	 .loc 2 1570 0 is_stmt 1
 2808 006e FB68     	 ldr r3,[r7,#12]
 2809 0070 012B     	 cmp r3,#1
 2810 0072 16D1     	 bne .L197
1571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = cache_ptr->address;
 2811              	 .loc 2 1572 0
 2812 0074 7B68     	 ldr r3,[r7,#4]
 2813 0076 1A68     	 ldr r2,[r3]
 2814 0078 3B68     	 ldr r3,[r7]
 2815 007a 1A63     	 str r2,[r3,#48]
1573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_block_counter = 0U;
 2816              	 .loc 2 1573 0
 2817 007c 3B68     	 ldr r3,[r7]
 2818 007e 0022     	 mov r2,#0
 2819 0080 5A64     	 str r2,[r3,#68]
1574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
1576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 2820              	 .loc 2 1576 0
 2821 0082 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr,(uint32_t*)(void*)data_ptr->read_write_buf
 2822              	 .loc 2 1578 0
 2823 0086 3B68     	 ldr r3,[r7]
 2824 0088 1A6B     	 ldr r2,[r3,#48]
 2825 008a 3B68     	 ldr r3,[r7]
 2826 008c 4C33     	 add r3,r3,#76
 2827 008e 101C     	 mov r0,r2
 2828 0090 191C     	 mov r1,r3
 2829 0092 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Return value above is ignored as parameters passed from FEE are correct */
1581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
 2830              	 .loc 2 1581 0
 2831 0096 3A68     	 ldr r2,[r7]
 2832 0098 B223     	 mov r3,#178
 2833 009a 5B00     	 lsl r3,r3,#1
 2834 009c 0521     	 mov r1,#5
 2835 009e D150     	 str r1,[r2,r3]
 2836 00a0 0EE0     	 b .L198
 2837              	.L197:
1582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Finished copying all the logical blocks */
1584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the next free block pointer */
1587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->next_free_block_addr = data_ptr->gc_dest_addr;
 2838              	 .loc 2 1587 0
 2839 00a2 3B68     	 ldr r3,[r7]
 2840 00a4 DA6A     	 ldr r2,[r3,#44]
 2841 00a6 3B68     	 ldr r3,[r7]
 2842 00a8 DA63     	 str r2,[r3,#60]
1588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = data_ptr->curr_bank_src_addr;
 2843              	 .loc 2 1588 0
 2844 00aa 3B68     	 ldr r3,[r7]
 2845 00ac 1A6C     	 ldr r2,[r3,#64]
 2846 00ae 3B68     	 ldr r3,[r7]
 2847 00b0 1A63     	 str r2,[r3,#48]
1589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2848              	 .loc 2 1589 0
 2849 00b2 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_END;
 2850              	 .loc 2 1590 0
 2851 00b6 3A68     	 ldr r2,[r7]
 2852 00b8 B223     	 mov r3,#178
 2853 00ba 5B00     	 lsl r3,r3,#1
 2854 00bc 0621     	 mov r1,#6
 2855 00be D150     	 str r1,[r2,r3]
 2856              	.L198:
1591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_log_block_count = block_count;
 2857              	 .loc 2 1592 0
 2858 00c0 3A68     	 ldr r2,[r7]
 2859 00c2 B623     	 mov r3,#182
 2860 00c4 5B00     	 lsl r3,r3,#1
 2861 00c6 B968     	 ldr r1,[r7,#8]
 2862 00c8 D150     	 str r1,[r2,r3]
1593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2863              	 .loc 2 1593 0
 2864 00ca BD46     	 mov sp,r7
 2865 00cc 04B0     	 add sp,sp,#16
 2866              	 
 2867 00ce 80BD     	 pop {r7,pc}
 2868              	.L200:
 2869              	 .align 2
 2870              	.L199:
 2871 00d0 00000000 	 .word E_EEPROM_XMC1_0
 2872              	 .cfi_endproc
 2873              	.LFE73:
 2875              	 .section .text.E_EEPROM_XMC1_lHandleGcCopyWrite,"ax",%progbits
 2876              	 .align 2
 2877              	 .code 16
 2878              	 .thumb_func
 2880              	E_EEPROM_XMC1_lHandleGcCopyWrite:
 2881              	.LFB74:
1594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC START COPY WRITE state.
1601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcCopyWrite(void)
1603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2882              	 .loc 2 1603 0
 2883              	 .cfi_startproc
 2884 0000 80B5     	 push {r7,lr}
 2885              	.LCFI80:
 2886              	 .cfi_def_cfa_offset 8
 2887              	 .cfi_offset 7,-8
 2888              	 .cfi_offset 14,-4
 2889 0002 86B0     	 sub sp,sp,#24
 2890              	.LCFI81:
 2891              	 .cfi_def_cfa_offset 32
 2892 0004 00AF     	 add r7,sp,#0
 2893              	.LCFI82:
 2894              	 .cfi_def_cfa_register 7
1604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t size;
1605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_physical_blocks;
1608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2895              	 .loc 2 1611 0
 2896 0006 384B     	 ldr r3,.L207
 2897 0008 5B68     	 ldr r3,[r3,#4]
 2898 000a 3B61     	 str r3,[r7,#16]
1612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* initialize the copied status for all the logical blocks */
1614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = data_ptr->gc_log_block_count;
 2899              	 .loc 2 1614 0
 2900 000c 3A69     	 ldr r2,[r7,#16]
 2901 000e B623     	 mov r3,#182
 2902 0010 5B00     	 lsl r3,r3,#1
 2903 0012 D358     	 ldr r3,[r2,r3]
 2904 0014 7B61     	 str r3,[r7,#20]
1615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info + block_count;
 2905              	 .loc 2 1615 0
 2906 0016 7B69     	 ldr r3,[r7,#20]
 2907 0018 DB00     	 lsl r3,r3,#3
 2908 001a 3A69     	 ldr r2,[r7,#16]
 2909 001c D318     	 add r3,r2,r3
 2910 001e FB60     	 str r3,[r7,#12]
1616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr));
 2911              	 .loc 2 1617 0
 2912 0020 3B69     	 ldr r3,[r7,#16]
 2913 0022 DB6A     	 ldr r3,[r3,#44]
 2914 0024 181C     	 mov r0,r3
 2915 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2916 002a 031C     	 mov r3,r0
 2917 002c BB60     	 str r3,[r7,#8]
1618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2918              	 .loc 2 1618 0
 2919 002e BB68     	 ldr r3,[r7,#8]
 2920 0030 002B     	 cmp r3,#0
 2921 0032 4BD1     	 bne .L202
1619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {      
1620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     (data_ptr->gc_block_counter)++;
 2922              	 .loc 2 1620 0
 2923 0034 3B69     	 ldr r3,[r7,#16]
 2924 0036 5B6C     	 ldr r3,[r3,#68]
 2925 0038 5A1C     	 add r2,r3,#1
 2926 003a 3B69     	 ldr r3,[r7,#16]
 2927 003c 5A64     	 str r2,[r3,#68]
1621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     size = (E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_count].size);
 2928              	 .loc 2 1621 0
 2929 003e 2A4B     	 ldr r3,.L207
 2930 0040 1A68     	 ldr r2,[r3]
 2931 0042 7B69     	 ldr r3,[r7,#20]
 2932 0044 DB00     	 lsl r3,r3,#3
 2933 0046 D318     	 add r3,r2,r3
 2934 0048 5B68     	 ldr r3,[r3,#4]
 2935 004a 7B60     	 str r3,[r7,#4]
1622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     flash_physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
 2936              	 .loc 2 1622 0
 2937 004c 7B68     	 ldr r3,[r7,#4]
 2938 004e 181C     	 mov r0,r3
 2939 0050 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 2940 0054 031C     	 mov r3,r0
 2941 0056 3B60     	 str r3,[r7]
1623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If all the blocks of the logical block are copied */
1624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ((data_ptr->gc_block_counter == flash_physical_blocks) || (cache_ptr->status.valid == 0U))
 2942              	 .loc 2 1624 0
 2943 0058 3B69     	 ldr r3,[r7,#16]
 2944 005a 5A6C     	 ldr r2,[r3,#68]
 2945 005c 3B68     	 ldr r3,[r7]
 2946 005e 9A42     	 cmp r2,r3
 2947 0060 06D0     	 beq .L203
 2948              	 .loc 2 1624 0 is_stmt 0 discriminator 1
 2949 0062 FB68     	 ldr r3,[r7,#12]
 2950 0064 1B79     	 ldrb r3,[r3,#4]
 2951 0066 0122     	 mov r2,#1
 2952 0068 1340     	 and r3,r2
 2953 006a DBB2     	 uxtb r3,r3
 2954 006c 002B     	 cmp r3,#0
 2955 006e 1BD1     	 bne .L204
 2956              	.L203:
1625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->status.copied = 1U;
 2957              	 .loc 2 1626 0 is_stmt 1
 2958 0070 FB68     	 ldr r3,[r7,#12]
 2959 0072 1A79     	 ldrb r2,[r3,#4]
 2960 0074 0421     	 mov r1,#4
 2961 0076 0A43     	 orr r2,r1
 2962 0078 1A71     	 strb r2,[r3,#4]
1627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2963              	 .loc 2 1627 0
 2964 007a 7B69     	 ldr r3,[r7,#20]
 2965 007c 0133     	 add r3,r3,#1
 2966 007e 7B61     	 str r3,[r7,#20]
1628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
 2967              	 .loc 2 1628 0
 2968 0080 3A69     	 ldr r2,[r7,#16]
 2969 0082 B223     	 mov r3,#178
 2970 0084 5B00     	 lsl r3,r3,#1
 2971 0086 0121     	 mov r1,#1
 2972 0088 D150     	 str r1,[r2,r3]
1629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_dest_addr += E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2973              	 .loc 2 1629 0
 2974 008a 3B69     	 ldr r3,[r7,#16]
 2975 008c DB6A     	 ldr r3,[r3,#44]
 2976 008e 1033     	 add r3,r3,#16
 2977 0090 1A1C     	 mov r2,r3
 2978 0092 3B69     	 ldr r3,[r7,#16]
 2979 0094 DA62     	 str r2,[r3,#44]
1630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->address = data_ptr->gc_dest_addr - (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * data_ptr->gc_
 2980              	 .loc 2 1630 0
 2981 0096 3B69     	 ldr r3,[r7,#16]
 2982 0098 DA6A     	 ldr r2,[r3,#44]
 2983 009a 3B69     	 ldr r3,[r7,#16]
 2984 009c 5B6C     	 ldr r3,[r3,#68]
 2985 009e 1B01     	 lsl r3,r3,#4
 2986 00a0 D21A     	 sub r2,r2,r3
 2987 00a2 FB68     	 ldr r3,[r7,#12]
 2988 00a4 1A60     	 str r2,[r3]
 2989 00a6 16E0     	 b .L206
 2990              	.L204:
1631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_src_addr = data_ptr->gc_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2991              	 .loc 2 1634 0
 2992 00a8 3B69     	 ldr r3,[r7,#16]
 2993 00aa 1B6B     	 ldr r3,[r3,#48]
 2994 00ac 1033     	 add r3,r3,#16
 2995 00ae 1A1C     	 mov r2,r3
 2996 00b0 3B69     	 ldr r3,[r7,#16]
 2997 00b2 1A63     	 str r2,[r3,#48]
1635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2998              	 .loc 2 1635 0
 2999 00b4 3B69     	 ldr r3,[r7,#16]
 3000 00b6 DB6A     	 ldr r3,[r3,#44]
 3001 00b8 1033     	 add r3,r3,#16
 3002 00ba 1A1C     	 mov r2,r3
 3003 00bc 3B69     	 ldr r3,[r7,#16]
 3004 00be DA62     	 str r2,[r3,#44]
1636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_READ_NXTBLOCK;
 3005              	 .loc 2 1636 0
 3006 00c0 3A69     	 ldr r2,[r7,#16]
 3007 00c2 B223     	 mov r3,#178
 3008 00c4 5B00     	 lsl r3,r3,#1
 3009 00c6 0221     	 mov r1,#2
 3010 00c8 D150     	 str r1,[r2,r3]
 3011 00ca 04E0     	 b .L206
 3012              	.L202:
1637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3013              	 .loc 2 1641 0
 3014 00cc 3A69     	 ldr r2,[r7,#16]
 3015 00ce B223     	 mov r3,#178
 3016 00d0 5B00     	 lsl r3,r3,#1
 3017 00d2 0921     	 mov r1,#9
 3018 00d4 D150     	 str r1,[r2,r3]
 3019              	.L206:
1642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_log_block_count = block_count;
 3020              	 .loc 2 1643 0
 3021 00d6 3A69     	 ldr r2,[r7,#16]
 3022 00d8 B623     	 mov r3,#182
 3023 00da 5B00     	 lsl r3,r3,#1
 3024 00dc 7969     	 ldr r1,[r7,#20]
 3025 00de D150     	 str r1,[r2,r3]
1644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3026              	 .loc 2 1644 0
 3027 00e0 BD46     	 mov sp,r7
 3028 00e2 06B0     	 add sp,sp,#24
 3029              	 
 3030 00e4 80BD     	 pop {r7,pc}
 3031              	.L208:
 3032 00e6 C046     	 .align 2
 3033              	.L207:
 3034 00e8 00000000 	 .word E_EEPROM_XMC1_0
 3035              	 .cfi_endproc
 3036              	.LFE74:
 3038              	 .section .text.E_EEPROM_XMC1_lHandleGcEndOfCopy,"ax",%progbits
 3039              	 .align 2
 3040              	 .code 16
 3041              	 .thumb_func
 3043              	E_EEPROM_XMC1_lHandleGcEndOfCopy:
 3044              	.LFB75:
1645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC END OF COPY state
1652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void)
1654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3045              	 .loc 2 1654 0
 3046              	 .cfi_startproc
 3047 0000 80B5     	 push {r7,lr}
 3048              	.LCFI83:
 3049              	 .cfi_def_cfa_offset 8
 3050              	 .cfi_offset 7,-8
 3051              	 .cfi_offset 14,-4
 3052 0002 82B0     	 sub sp,sp,#8
 3053              	.LCFI84:
 3054              	 .cfi_def_cfa_offset 16
 3055 0004 00AF     	 add r7,sp,#0
 3056              	.LCFI85:
 3057              	 .cfi_def_cfa_register 7
1655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3058              	 .loc 2 1657 0
 3059 0006 134B     	 ldr r3,.L212
 3060 0008 5B68     	 ldr r3,[r3,#4]
 3061 000a 7B60     	 str r3,[r7,#4]
1658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3062              	 .loc 2 1659 0
 3063 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write Copy completed state to old bank (0A) or (A0) */
1661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_END_OF_COPY_OFFS
 3064              	 .loc 2 1661 0
 3065 0010 7B68     	 ldr r3,[r7,#4]
 3066 0012 1B6B     	 ldr r3,[r3,#48]
 3067 0014 2033     	 add r3,r3,#32
 3068 0016 181C     	 mov r0,r3
 3069 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3070 001c 031C     	 mov r3,r0
 3071 001e 3B60     	 str r3,[r7]
1662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 3072              	 .loc 2 1662 0
 3073 0020 3B68     	 ldr r3,[r7]
 3074 0022 002B     	 cmp r3,#0
 3075 0024 0DD1     	 bne .L210
1663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the current bank to next bank */
1665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = data_ptr->current_bank ^ 1U;
 3076              	 .loc 2 1665 0
 3077 0026 7B68     	 ldr r3,[r7,#4]
 3078 0028 9B6A     	 ldr r3,[r3,#40]
 3079 002a 0122     	 mov r2,#1
 3080 002c 5A40     	 eor r2,r3
 3081 002e 7B68     	 ldr r3,[r7,#4]
 3082 0030 9A62     	 str r2,[r3,#40]
1666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the Bank related global variables */
1668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCurrBankInfo();
 3083              	 .loc 2 1668 0
 3084 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_NEXT_BANK_VALID;
 3085              	 .loc 2 1669 0
 3086 0036 7A68     	 ldr r2,[r7,#4]
 3087 0038 B223     	 mov r3,#178
 3088 003a 5B00     	 lsl r3,r3,#1
 3089 003c 0721     	 mov r1,#7
 3090 003e D150     	 str r1,[r2,r3]
 3091 0040 04E0     	 b .L209
 3092              	.L210:
1670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3093              	 .loc 2 1673 0
 3094 0042 7A68     	 ldr r2,[r7,#4]
 3095 0044 B223     	 mov r3,#178
 3096 0046 5B00     	 lsl r3,r3,#1
 3097 0048 0921     	 mov r1,#9
 3098 004a D150     	 str r1,[r2,r3]
 3099              	.L209:
1674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3100              	 .loc 2 1675 0
 3101 004c BD46     	 mov sp,r7
 3102 004e 02B0     	 add sp,sp,#8
 3103              	 
 3104 0050 80BD     	 pop {r7,pc}
 3105              	.L213:
 3106 0052 C046     	 .align 2
 3107              	.L212:
 3108 0054 00000000 	 .word E_EEPROM_XMC1_0
 3109              	 .cfi_endproc
 3110              	.LFE75:
 3112              	 .section .text.E_EEPROM_XMC1_lHandleGcOtherStates,"ax",%progbits
 3113              	 .align 2
 3114              	 .code 16
 3115              	 .thumb_func
 3117              	E_EEPROM_XMC1_lHandleGcOtherStates:
 3118              	.LFB76:
1676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : current_state - current state machine status
1679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   next_state - next state of the state machine
1680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC NEXT BANk VALID, ERASE PREV BANK a
1684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   state
1685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state)
1687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3119              	 .loc 2 1687 0
 3120              	 .cfi_startproc
 3121 0000 80B5     	 push {r7,lr}
 3122              	.LCFI86:
 3123              	 .cfi_def_cfa_offset 8
 3124              	 .cfi_offset 7,-8
 3125              	 .cfi_offset 14,-4
 3126 0002 84B0     	 sub sp,sp,#16
 3127              	.LCFI87:
 3128              	 .cfi_def_cfa_offset 24
 3129 0004 00AF     	 add r7,sp,#0
 3130              	.LCFI88:
 3131              	 .cfi_def_cfa_register 7
 3132 0006 7860     	 str r0,[r7,#4]
 3133 0008 3960     	 str r1,[r7]
1688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3134              	 .loc 2 1690 0
 3135 000a 1B4B     	 ldr r3,.L220
 3136 000c 5B68     	 ldr r3,[r3,#4]
 3137 000e BB60     	 str r3,[r7,#8]
1691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (current_state == E_EEPROM_XMC1_GC_NEXT_BANK_VALID)
 3138              	 .loc 2 1692 0
 3139 0010 7B68     	 ldr r3,[r7,#4]
 3140 0012 072B     	 cmp r3,#7
 3141 0014 09D1     	 bne .L215
1693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3142              	 .loc 2 1694 0
 3143 0016 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write next bank to valid state  (02) or (20) */
1696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_NEXT_VALID_OFF
 3144              	 .loc 2 1696 0
 3145 001a BB68     	 ldr r3,[r7,#8]
 3146 001c 1B6B     	 ldr r3,[r3,#48]
 3147 001e 181C     	 mov r0,r3
 3148 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3149 0024 031C     	 mov r3,r0
 3150 0026 FB60     	 str r3,[r7,#12]
 3151 0028 14E0     	 b .L216
 3152              	.L215:
1697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (current_state == E_EEPROM_XMC1_GC_ERASE_PREV_BANK)
 3153              	 .loc 2 1698 0
 3154 002a 7B68     	 ldr r3,[r7,#4]
 3155 002c 032B     	 cmp r3,#3
 3156 002e 07D1     	 bne .L217
1699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Erase the previous redundant bank (F2) or (2F) */
1701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 3157              	 .loc 2 1701 0
 3158 0030 BB68     	 ldr r3,[r7,#8]
 3159 0032 9B6B     	 ldr r3,[r3,#56]
 3160 0034 181C     	 mov r0,r3
 3161 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3162 003a 031C     	 mov r3,r0
 3163 003c FB60     	 str r3,[r7,#12]
 3164 003e 09E0     	 b .L216
 3165              	.L217:
1702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3166              	 .loc 2 1705 0
 3167 0040 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the old erased bank (E2) or (2E) */
1707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_END_ERASE_OFF
 3168              	 .loc 2 1707 0
 3169 0044 BB68     	 ldr r3,[r7,#8]
 3170 0046 DB6A     	 ldr r3,[r3,#44]
 3171 0048 3033     	 add r3,r3,#48
 3172 004a 181C     	 mov r0,r3
 3173 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3174 0050 031C     	 mov r3,r0
 3175 0052 FB60     	 str r3,[r7,#12]
 3176              	.L216:
1708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 3177              	 .loc 2 1710 0
 3178 0054 FB68     	 ldr r3,[r7,#12]
 3179 0056 002B     	 cmp r3,#0
 3180 0058 05D1     	 bne .L218
1711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = next_state;
 3181              	 .loc 2 1712 0
 3182 005a BA68     	 ldr r2,[r7,#8]
 3183 005c B223     	 mov r3,#178
 3184 005e 5B00     	 lsl r3,r3,#1
 3185 0060 3968     	 ldr r1,[r7]
 3186 0062 D150     	 str r1,[r2,r3]
 3187 0064 04E0     	 b .L214
 3188              	.L218:
1713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3189              	 .loc 2 1716 0
 3190 0066 BA68     	 ldr r2,[r7,#8]
 3191 0068 B223     	 mov r3,#178
 3192 006a 5B00     	 lsl r3,r3,#1
 3193 006c 0921     	 mov r1,#9
 3194 006e D150     	 str r1,[r2,r3]
 3195              	.L214:
1717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3196              	 .loc 2 1718 0
 3197 0070 BD46     	 mov sp,r7
 3198 0072 04B0     	 add sp,sp,#16
 3199              	 
 3200 0074 80BD     	 pop {r7,pc}
 3201              	.L221:
 3202 0076 C046     	 .align 2
 3203              	.L220:
 3204 0078 00000000 	 .word E_EEPROM_XMC1_0
 3205              	 .cfi_endproc
 3206              	.LFE76:
 3208              	 .section .text.E_EEPROM_XMC1_lPrepareDFlash,"ax",%progbits
 3209              	 .align 2
 3210              	 .code 16
 3211              	 .thumb_func
 3213              	E_EEPROM_XMC1_lPrepareDFlash:
 3214              	.LFB77:
1719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
1724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function executes the prepare data flash to bring the state machine to def
1726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPrepareDFlash(void)
1728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3215              	 .loc 2 1728 0
 3216              	 .cfi_startproc
 3217 0000 80B5     	 push {r7,lr}
 3218              	.LCFI89:
 3219              	 .cfi_def_cfa_offset 8
 3220              	 .cfi_offset 7,-8
 3221              	 .cfi_offset 14,-4
 3222 0002 82B0     	 sub sp,sp,#8
 3223              	.LCFI90:
 3224              	 .cfi_def_cfa_offset 16
 3225 0004 00AF     	 add r7,sp,#0
 3226              	.LCFI91:
 3227              	 .cfi_def_cfa_register 7
1729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3228              	 .loc 2 1731 0
 3229 0006 3B4B     	 ldr r3,.L239
 3230 0008 5B68     	 ldr r3,[r3,#4]
 3231 000a 7B60     	 str r3,[r7,#4]
 3232              	.L236:
1732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
1734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->gc_state)
 3233              	 .loc 2 1735 0
 3234 000c 7A68     	 ldr r2,[r7,#4]
 3235 000e B223     	 mov r3,#178
 3236 0010 5B00     	 lsl r3,r3,#1
 3237 0012 D358     	 ldr r3,[r2,r3]
 3238 0014 042B     	 cmp r3,#4
 3239 0016 02D0     	 beq .L224
 3240 0018 052B     	 cmp r3,#5
 3241 001a 1FD0     	 beq .L225
 3242 001c 35E0     	 b .L237
 3243              	.L224:
1736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_PREPFLASH_2F:
1738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Set the marker blocks with copy completed state */
1740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lSetMarkerPageBuffer(E_EEPROM_XMC1_VALID_STATE);
 3244              	 .loc 2 1740 0
 3245 001e 2020     	 mov r0,#32
 3246 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerPageBuffer
1741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Clear all error status flags before flash operation*/
1743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       XMC_FLASH_ClearStatus();
 3247              	 .loc 2 1743 0
 3248 0024 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lWriteSinglePage(E_EEPROM_XMC1_FLASH_BANK0_BASE , (uint32_t*)(void*)data_ptr->p
 3249              	 .loc 2 1745 0
 3250 0028 7B68     	 ldr r3,[r7,#4]
 3251 002a 6033     	 add r3,r3,#96
 3252 002c 324A     	 ldr r2,.L239+4
 3253 002e 101C     	 mov r0,r2
 3254 0030 191C     	 mov r1,r3
 3255 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
1746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lGetFlashStatus();
 3256              	 .loc 2 1747 0
 3257 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3258 003a 031C     	 mov r3,r0
 3259 003c 3B60     	 str r3,[r7]
1748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3260              	 .loc 2 1749 0
 3261 003e 3B68     	 ldr r3,[r7]
 3262 0040 002B     	 cmp r3,#0
 3263 0042 05D1     	 bne .L226
1750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
 3264              	 .loc 2 1751 0
 3265 0044 7A68     	 ldr r2,[r7,#4]
 3266 0046 B223     	 mov r3,#178
 3267 0048 5B00     	 lsl r3,r3,#1
 3268 004a 0521     	 mov r1,#5
 3269 004c D150     	 str r1,[r2,r3]
1752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3270              	 .loc 2 1757 0
 3271 004e 42E0     	 b .L228
 3272              	.L226:
1755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3273              	 .loc 2 1755 0
 3274 0050 7A68     	 ldr r2,[r7,#4]
 3275 0052 B223     	 mov r3,#178
 3276 0054 5B00     	 lsl r3,r3,#1
 3277 0056 0921     	 mov r1,#9
 3278 0058 D150     	 str r1,[r2,r3]
 3279              	 .loc 2 1757 0
 3280 005a 3CE0     	 b .L228
 3281              	.L225:
1758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_PREPFLASH_2E:
1760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
1761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3282              	 .loc 2 1761 0
 3283 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Write Bank1 to formatted state  (2E) */
1764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lGCWrite((uint32_t)E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_END_
 3284              	 .loc 2 1764 0
 3285 0060 264B     	 ldr r3,.L239+8
 3286 0062 181C     	 mov r0,r3
 3287 0064 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3288 0068 031C     	 mov r3,r0
 3289 006a 3B60     	 str r3,[r7]
1765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3290              	 .loc 2 1766 0
 3291 006c 3B68     	 ldr r3,[r7]
 3292 006e 002B     	 cmp r3,#0
 3293 0070 05D1     	 bne .L229
1767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
 3294              	 .loc 2 1768 0
 3295 0072 7A68     	 ldr r2,[r7,#4]
 3296 0074 B223     	 mov r3,#178
 3297 0076 5B00     	 lsl r3,r3,#1
 3298 0078 0A21     	 mov r1,#10
 3299 007a D150     	 str r1,[r2,r3]
1769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3300              	 .loc 2 1774 0
 3301 007c 2BE0     	 b .L228
 3302              	.L229:
1772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3303              	 .loc 2 1772 0
 3304 007e 7A68     	 ldr r2,[r7,#4]
 3305 0080 B223     	 mov r3,#178
 3306 0082 5B00     	 lsl r3,r3,#1
 3307 0084 0921     	 mov r1,#9
 3308 0086 D150     	 str r1,[r2,r3]
 3309              	 .loc 2 1774 0
 3310 0088 25E0     	 b .L228
 3311              	.L237:
1775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:  /* gc_state : E_EEPROM_XMC1_PREPFLASH_FF*/
1777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Erase the previous redundant bank */
1779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lEraseBank(data_ptr->curr_bank_end_addr);
 3312              	 .loc 2 1779 0
 3313 008a 7B68     	 ldr r3,[r7,#4]
 3314 008c 5B6B     	 ldr r3,[r3,#52]
 3315 008e 181C     	 mov r0,r3
 3316 0090 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3317 0094 031C     	 mov r3,r0
 3318 0096 3B60     	 str r3,[r7]
1780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Erase the previous redundant bank */
1782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3319              	 .loc 2 1782 0
 3320 0098 3B68     	 ldr r3,[r7]
 3321 009a 002B     	 cmp r3,#0
 3322 009c 15D1     	 bne .L231
1783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 3323              	 .loc 2 1784 0
 3324 009e 7B68     	 ldr r3,[r7,#4]
 3325 00a0 9B6B     	 ldr r3,[r3,#56]
 3326 00a2 181C     	 mov r0,r3
 3327 00a4 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3328 00a8 031C     	 mov r3,r0
 3329 00aa 3B60     	 str r3,[r7]
1785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
1786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (status == 0U)
 3330              	 .loc 2 1786 0
 3331 00ac 3B68     	 ldr r3,[r7]
 3332 00ae 002B     	 cmp r3,#0
 3333 00b0 05D1     	 bne .L232
1787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
1788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
 3334              	 .loc 2 1788 0
 3335 00b2 7A68     	 ldr r2,[r7,#4]
 3336 00b4 B223     	 mov r3,#178
 3337 00b6 5B00     	 lsl r3,r3,#1
 3338 00b8 0421     	 mov r1,#4
 3339 00ba D150     	 str r1,[r2,r3]
1789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
1790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
1791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
1792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
1794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3340              	 .loc 2 1799 0
 3341 00bc 0AE0     	 b .L238
 3342              	.L232:
1792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 3343              	 .loc 2 1792 0
 3344 00be 7A68     	 ldr r2,[r7,#4]
 3345 00c0 B223     	 mov r3,#178
 3346 00c2 5B00     	 lsl r3,r3,#1
 3347 00c4 0921     	 mov r1,#9
 3348 00c6 D150     	 str r1,[r2,r3]
 3349              	 .loc 2 1799 0
 3350 00c8 04E0     	 b .L238
 3351              	.L231:
1797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3352              	 .loc 2 1797 0
 3353 00ca 7A68     	 ldr r2,[r7,#4]
 3354 00cc B223     	 mov r3,#178
 3355 00ce 5B00     	 lsl r3,r3,#1
 3356 00d0 0921     	 mov r1,#9
 3357 00d2 D150     	 str r1,[r2,r3]
 3358              	.L238:
 3359              	 .loc 2 1799 0
 3360 00d4 C046     	 mov r8,r8
 3361              	.L228:
1800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
 3362              	 .loc 2 1801 0
 3363 00d6 7A68     	 ldr r2,[r7,#4]
 3364 00d8 B223     	 mov r3,#178
 3365 00da 5B00     	 lsl r3,r3,#1
 3366 00dc D358     	 ldr r3,[r2,r3]
1802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 3367              	 .loc 2 1802 0
 3368 00de 0A2B     	 cmp r3,#10
 3369 00e0 05D0     	 beq .L222
 3370              	 .loc 2 1802 0 is_stmt 0 discriminator 1
 3371 00e2 7A68     	 ldr r2,[r7,#4]
 3372 00e4 B223     	 mov r3,#178
 3373 00e6 5B00     	 lsl r3,r3,#1
 3374 00e8 D358     	 ldr r3,[r2,r3]
1801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 3375              	 .loc 2 1801 0 is_stmt 1 discriminator 1
 3376 00ea 092B     	 cmp r3,#9
 3377 00ec 8ED1     	 bne .L236
 3378              	.L222:
1803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3379              	 .loc 2 1803 0
 3380 00ee BD46     	 mov sp,r7
 3381 00f0 02B0     	 add sp,sp,#8
 3382              	 
 3383 00f2 80BD     	 pop {r7,pc}
 3384              	.L240:
 3385              	 .align 2
 3386              	.L239:
 3387 00f4 00000000 	 .word E_EEPROM_XMC1_0
 3388 00f8 008C0010 	 .word 268471296
 3389 00fc 308E0010 	 .word 268471856
 3390              	 .cfi_endproc
 3391              	.LFE77:
 3393              	 .section .text.E_EEPROM_XMC1_lUpdateCache,"ax",%progbits
 3394              	 .align 2
 3395              	 .code 16
 3396              	 .thumb_func
 3398              	E_EEPROM_XMC1_lUpdateCache:
 3399              	.LFB78:
1804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This utility function update's the cache table which contains the latest infor
1811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   FLASH contents.
1812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCache(void)
1814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3400              	 .loc 2 1814 0
 3401              	 .cfi_startproc
 3402 0000 80B5     	 push {r7,lr}
 3403              	.LCFI92:
 3404              	 .cfi_def_cfa_offset 8
 3405              	 .cfi_offset 7,-8
 3406              	 .cfi_offset 14,-4
 3407 0002 84B0     	 sub sp,sp,#16
 3408              	.LCFI93:
 3409              	 .cfi_def_cfa_offset 24
 3410 0004 00AF     	 add r7,sp,#0
 3411              	.LCFI94:
 3412              	 .cfi_def_cfa_register 7
1815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t end_addr;
1816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_status;
1817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3413              	 .loc 2 1820 0
 3414 0006 394B     	 ldr r3,.L252
 3415 0008 5B68     	 ldr r3,[r3,#4]
 3416 000a 7B60     	 str r3,[r7,#4]
1821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Evaluate the end address of the bank to start reading blocks for cache update */
1823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 3417              	 .loc 2 1823 0
 3418 000c 7B68     	 ldr r3,[r7,#4]
 3419 000e 9B6A     	 ldr r3,[r3,#40]
 3420 0010 002B     	 cmp r3,#0
 3421 0012 02D1     	 bne .L242
1824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     end_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 3422              	 .loc 2 1825 0
 3423 0014 364B     	 ldr r3,.L252+4
 3424 0016 FB60     	 str r3,[r7,#12]
 3425 0018 01E0     	 b .L243
 3426              	.L242:
1826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     end_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 3427              	 .loc 2 1829 0
 3428 001a 364B     	 ldr r3,.L252+8
 3429 001c FB60     	 str r3,[r7,#12]
 3430              	.L243:
1830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Reset the read number of blocks count variable and reset cache update index */
1833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->written_block_counter = 0U;
 3431              	 .loc 2 1833 0
 3432 001e 7B68     	 ldr r3,[r7,#4]
 3433 0020 0022     	 mov r2,#0
 3434 0022 9A64     	 str r2,[r3,#72]
1834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3435              	 .loc 2 1834 0
 3436 0024 7A68     	 ldr r2,[r7,#4]
 3437 0026 BA23     	 mov r3,#186
 3438 0028 5B00     	 lsl r3,r3,#1
 3439 002a FF21     	 mov r1,#255
 3440 002c D150     	 str r1,[r2,r3]
1835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Start the Cache Update state machine */
1837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->cache_state = E_EEPROM_XMC1_CACHE_EMPTY_BLOCK;
 3441              	 .loc 2 1837 0
 3442 002e 7A68     	 ldr r2,[r7,#4]
 3443 0030 B823     	 mov r3,#184
 3444 0032 5B00     	 lsl r3,r3,#1
 3445 0034 0121     	 mov r1,#1
 3446 0036 D150     	 str r1,[r2,r3]
1838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Point to starting address of last data block of the bank */
1840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->curr_bank_src_addr += ( E_EEPROM_XMC1_FLASH_BANK_SIZE - E_EEPROM_XMC1_FLASH_BLOCK_SIZE)
 3447              	 .loc 2 1840 0
 3448 0038 7B68     	 ldr r3,[r7,#4]
 3449 003a 1B6C     	 ldr r3,[r3,#64]
 3450 003c F133     	 add r3,r3,#241
 3451 003e FF33     	 add r3,r3,#255
 3452 0040 1A1C     	 mov r2,r3
 3453 0042 7B68     	 ldr r3,[r7,#4]
 3454 0044 1A64     	 str r2,[r3,#64]
 3455              	.L244:
1841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Search for the first entry of a non empty block inside the valid bank starting from bottom */
1842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do{
1843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_status = E_EEPROM_XMC1_lCacheEmptyBlkEval(end_addr);
 3456              	 .loc 2 1843 0 discriminator 1
 3457 0046 FB68     	 ldr r3,[r7,#12]
 3458 0048 181C     	 mov r0,r3
 3459 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lCacheEmptyBlkEval
 3460 004e 031C     	 mov r3,r0
 3461 0050 BB60     	 str r3,[r7,#8]
1844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (data_ptr->cache_state == E_EEPROM_XMC1_CACHE_EMPTY_BLOCK);
 3462              	 .loc 2 1844 0 discriminator 1
 3463 0052 7A68     	 ldr r2,[r7,#4]
 3464 0054 B823     	 mov r3,#184
 3465 0056 5B00     	 lsl r3,r3,#1
 3466 0058 D358     	 ldr r3,[r2,r3]
 3467 005a 012B     	 cmp r3,#1
 3468 005c F3D0     	 beq .L244
1845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    /* Update the next free block location only if it is not done by the previous function call  */
1847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->next_free_block_addr == 0U)
 3469              	 .loc 2 1847 0
 3470 005e 7B68     	 ldr r3,[r7,#4]
 3471 0060 DB6B     	 ldr r3,[r3,#60]
 3472 0062 002B     	 cmp r3,#0
 3473 0064 05D1     	 bne .L245
1848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 3474              	 .loc 2 1849 0
 3475 0066 7B68     	 ldr r3,[r7,#4]
 3476 0068 1B6C     	 ldr r3,[r3,#64]
 3477 006a 1033     	 add r3,r3,#16
 3478 006c 1A1C     	 mov r2,r3
 3479 006e 7B68     	 ldr r3,[r7,#4]
 3480 0070 DA63     	 str r2,[r3,#60]
 3481              	.L245:
1850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute the Cache update state machine until the Start address of bank is reached traversing f
1853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
 3482              	 .loc 2 1853 0
 3483 0072 31E0     	 b .L246
 3484              	.L251:
1854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check If the previous read had an ECC error or not */
1856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (!(read_status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR))
 3485              	 .loc 2 1856 0
 3486 0074 BB68     	 ldr r3,[r7,#8]
 3487 0076 2022     	 mov r2,#32
 3488 0078 1340     	 and r3,r2
 3489 007a 02D1     	 bne .L247
1857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Evaluate the Block status since no error found */
1859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lEvalBlockStatus();
 3490              	 .loc 2 1859 0
 3491 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lEvalBlockStatus
 3492 0080 1BE0     	 b .L248
 3493              	.L247:
1860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If previous read block of the block had correct block number then mark the block as incons
1864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( data_ptr->updated_cache_index != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND )
 3494              	 .loc 2 1864 0
 3495 0082 7A68     	 ldr r2,[r7,#4]
 3496 0084 BA23     	 mov r3,#186
 3497 0086 5B00     	 lsl r3,r3,#1
 3498 0088 D358     	 ldr r3,[r2,r3]
 3499 008a FF2B     	 cmp r3,#255
 3500 008c 0DD0     	 beq .L249
1865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Goto the cache table entry for the given block */
1867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr = data_ptr->block_info;
 3501              	 .loc 2 1867 0
 3502 008e 7B68     	 ldr r3,[r7,#4]
 3503 0090 3B60     	 str r3,[r7]
1868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr = cache_ptr + data_ptr->updated_cache_index;
 3504              	 .loc 2 1868 0
 3505 0092 7A68     	 ldr r2,[r7,#4]
 3506 0094 BA23     	 mov r3,#186
 3507 0096 5B00     	 lsl r3,r3,#1
 3508 0098 D358     	 ldr r3,[r2,r3]
 3509 009a DB00     	 lsl r3,r3,#3
 3510 009c 3A68     	 ldr r2,[r7]
 3511 009e D318     	 add r3,r2,r3
 3512 00a0 3B60     	 str r3,[r7]
1869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Since CacheUpdateIndex contains valid block the  previous read block must belong to this
1870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr->address = E_EEPROM_XMC1_ALL_ONES;
 3513              	 .loc 2 1870 0
 3514 00a2 3B68     	 ldr r3,[r7]
 3515 00a4 0122     	 mov r2,#1
 3516 00a6 5242     	 neg r2,r2
 3517 00a8 1A60     	 str r2,[r3]
 3518              	.L249:
1871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Prepare for the next block */
1873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3519              	 .loc 2 1873 0
 3520 00aa 7A68     	 ldr r2,[r7,#4]
 3521 00ac BA23     	 mov r3,#186
 3522 00ae 5B00     	 lsl r3,r3,#1
 3523 00b0 FF21     	 mov r1,#255
 3524 00b2 D150     	 str r1,[r2,r3]
1874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = 0U;
 3525              	 .loc 2 1874 0
 3526 00b4 7B68     	 ldr r3,[r7,#4]
 3527 00b6 0022     	 mov r2,#0
 3528 00b8 9A64     	 str r2,[r3,#72]
 3529              	.L248:
1875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if all blocks have been read */
1877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( data_ptr->curr_bank_src_addr == end_addr )
 3530              	 .loc 2 1877 0
 3531 00ba 7B68     	 ldr r3,[r7,#4]
 3532 00bc 1A6C     	 ldr r2,[r3,#64]
 3533 00be FB68     	 ldr r3,[r7,#12]
 3534 00c0 9A42     	 cmp r2,r3
 3535 00c2 05D1     	 bne .L250
1878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Goto the next state */
1880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3536              	 .loc 2 1880 0
 3537 00c4 7A68     	 ldr r2,[r7,#4]
 3538 00c6 B823     	 mov r3,#184
 3539 00c8 5B00     	 lsl r3,r3,#1
 3540 00ca 0421     	 mov r1,#4
 3541 00cc D150     	 str r1,[r2,r3]
 3542 00ce 03E0     	 b .L246
 3543              	.L250:
1881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
 3544              	 .loc 2 1884 0
 3545 00d0 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCacheBlockRead
 3546 00d4 031C     	 mov r3,r0
 3547 00d6 BB60     	 str r3,[r7,#8]
 3548              	.L246:
1853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 3549              	 .loc 2 1853 0
 3550 00d8 7A68     	 ldr r2,[r7,#4]
 3551 00da B823     	 mov r3,#184
 3552 00dc 5B00     	 lsl r3,r3,#1
 3553 00de D358     	 ldr r3,[r2,r3]
 3554 00e0 042B     	 cmp r3,#4
 3555 00e2 C7D1     	 bne .L251
1885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3556              	 .loc 2 1887 0
 3557 00e4 BD46     	 mov sp,r7
 3558 00e6 04B0     	 add sp,sp,#16
 3559              	 
 3560 00e8 80BD     	 pop {r7,pc}
 3561              	.L253:
 3562 00ea C046     	 .align 2
 3563              	.L252:
 3564 00ec 00000000 	 .word E_EEPROM_XMC1_0
 3565 00f0 008D0010 	 .word 268471552
 3566 00f4 008F0010 	 .word 268472064
 3567              	 .cfi_endproc
 3568              	.LFE78:
 3570              	 .section .text.E_EEPROM_XMC1_lCacheEmptyBlkEval,"ax",%progbits
 3571              	 .align 2
 3572              	 .code 16
 3573              	 .thumb_func
 3575              	E_EEPROM_XMC1_lCacheEmptyBlkEval:
 3576              	.LFB79:
1888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : end_addr - Last address to stop reading the block data
1891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t
1893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This utility function  will search through the FLASH from the bottom of the ba
1895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   readable data block is found.
1896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr)
1898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3577              	 .loc 2 1898 0
 3578              	 .cfi_startproc
 3579 0000 80B5     	 push {r7,lr}
 3580              	.LCFI95:
 3581              	 .cfi_def_cfa_offset 8
 3582              	 .cfi_offset 7,-8
 3583              	 .cfi_offset 14,-4
 3584 0002 86B0     	 sub sp,sp,#24
 3585              	.LCFI96:
 3586              	 .cfi_def_cfa_offset 32
 3587 0004 00AF     	 add r7,sp,#0
 3588              	.LCFI97:
 3589              	 .cfi_def_cfa_register 7
 3590 0006 7860     	 str r0,[r7,#4]
1899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *read_word_ptr;
1901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3591              	 .loc 2 1903 0
 3592 0008 2B4B     	 ldr r3,.L263
 3593 000a 5B68     	 ldr r3,[r3,#4]
 3594 000c 7B61     	 str r3,[r7,#20]
1904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 3595              	 .loc 2 1905 0
 3596 000e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read the complete block */
1908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr, (uint32_t*)(void*)data_ptr->read_wri
 3597              	 .loc 2 1908 0
 3598 0012 7B69     	 ldr r3,[r7,#20]
 3599 0014 1A6C     	 ldr r2,[r3,#64]
 3600 0016 7B69     	 ldr r3,[r7,#20]
 3601 0018 4C33     	 add r3,r3,#76
 3602 001a 101C     	 mov r0,r2
 3603 001c 191C     	 mov r1,r3
 3604 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 3605              	 .loc 2 1910 0
 3606 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3607 0026 031C     	 mov r3,r0
 3608 0028 3B61     	 str r3,[r7,#16]
1911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If ECC error exists because of any previous interruptions or power failures during Flash opera
1913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR)
 3609              	 .loc 2 1913 0
 3610 002a 3B69     	 ldr r3,[r7,#16]
 3611 002c 2022     	 mov r2,#32
 3612 002e 1340     	 and r3,r2
 3613 0030 1BD0     	 beq .L255
1914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the free block location of the valid bank once and for ever until new write happens*/
1916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->next_free_block_addr == 0U)
 3614              	 .loc 2 1916 0
 3615 0032 7B69     	 ldr r3,[r7,#20]
 3616 0034 DB6B     	 ldr r3,[r3,#60]
 3617 0036 002B     	 cmp r3,#0
 3618 0038 05D1     	 bne .L256
1917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SI
 3619              	 .loc 2 1918 0
 3620 003a 7B69     	 ldr r3,[r7,#20]
 3621 003c 1B6C     	 ldr r3,[r3,#64]
 3622 003e 1033     	 add r3,r3,#16
 3623 0040 1A1C     	 mov r2,r3
 3624 0042 7B69     	 ldr r3,[r7,#20]
 3625 0044 DA63     	 str r2,[r3,#60]
 3626              	.L256:
1919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if all blocks have been read? If yes go to cache update complete state else move to th
1922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( data_ptr->curr_bank_src_addr == end_addr )
 3627              	 .loc 2 1922 0
 3628 0046 7B69     	 ldr r3,[r7,#20]
 3629 0048 1A6C     	 ldr r2,[r3,#64]
 3630 004a 7B68     	 ldr r3,[r7,#4]
 3631 004c 9A42     	 cmp r2,r3
 3632 004e 05D1     	 bne .L257
1923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3633              	 .loc 2 1924 0
 3634 0050 7A69     	 ldr r2,[r7,#20]
 3635 0052 B823     	 mov r3,#184
 3636 0054 5B00     	 lsl r3,r3,#1
 3637 0056 0421     	 mov r1,#4
 3638 0058 D150     	 str r1,[r2,r3]
 3639 005a 28E0     	 b .L259
 3640              	.L257:
1925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3641              	 .loc 2 1928 0
 3642 005c 7B69     	 ldr r3,[r7,#20]
 3643 005e 1B6C     	 ldr r3,[r3,#64]
 3644 0060 103B     	 sub r3,r3,#16
 3645 0062 1A1C     	 mov r2,r3
 3646 0064 7B69     	 ldr r3,[r7,#20]
 3647 0066 1A64     	 str r2,[r3,#64]
 3648 0068 21E0     	 b .L259
 3649              	.L255:
1929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* No ECC Error */
1932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word_ptr = ((uint32_t*)(void*)data_ptr->read_write_buffer);
 3650              	 .loc 2 1934 0
 3651 006a 7B69     	 ldr r3,[r7,#20]
 3652 006c 4C33     	 add r3,r3,#76
 3653 006e FB60     	 str r3,[r7,#12]
1935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the first word of the block is having some data written on it */
1936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (*read_word_ptr != E_EEPROM_XMC1_ALL_ONES)
 3654              	 .loc 2 1936 0
 3655 0070 FB68     	 ldr r3,[r7,#12]
 3656 0072 1B68     	 ldr r3,[r3]
 3657 0074 0133     	 add r3,r3,#1
 3658 0076 0AD0     	 beq .L260
1937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Increment the data block count and go to the next block read state */
1939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
 3659              	 .loc 2 1939 0
 3660 0078 7B69     	 ldr r3,[r7,#20]
 3661 007a 9B6C     	 ldr r3,[r3,#72]
 3662 007c 5A1C     	 add r2,r3,#1
 3663 007e 7B69     	 ldr r3,[r7,#20]
 3664 0080 9A64     	 str r2,[r3,#72]
1940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_NEXT_BLK;
 3665              	 .loc 2 1940 0
 3666 0082 7A69     	 ldr r2,[r7,#20]
 3667 0084 B823     	 mov r3,#184
 3668 0086 5B00     	 lsl r3,r3,#1
 3669 0088 0221     	 mov r1,#2
 3670 008a D150     	 str r1,[r2,r3]
 3671 008c 0FE0     	 b .L259
 3672              	.L260:
1941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if all blocks have been read? If yes go to cache update complete state else move to 
1945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( data_ptr->curr_bank_src_addr == end_addr )
 3673              	 .loc 2 1945 0
 3674 008e 7B69     	 ldr r3,[r7,#20]
 3675 0090 1A6C     	 ldr r2,[r3,#64]
 3676 0092 7B68     	 ldr r3,[r7,#4]
 3677 0094 9A42     	 cmp r2,r3
 3678 0096 04D1     	 bne .L261
1946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3679              	 .loc 2 1947 0
 3680 0098 7A69     	 ldr r2,[r7,#20]
 3681 009a B823     	 mov r3,#184
 3682 009c 5B00     	 lsl r3,r3,#1
 3683 009e 0421     	 mov r1,#4
 3684 00a0 D150     	 str r1,[r2,r3]
 3685              	.L261:
1948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3686              	 .loc 2 1949 0
 3687 00a2 7B69     	 ldr r3,[r7,#20]
 3688 00a4 1B6C     	 ldr r3,[r3,#64]
 3689 00a6 103B     	 sub r3,r3,#16
 3690 00a8 1A1C     	 mov r2,r3
 3691 00aa 7B69     	 ldr r3,[r7,#20]
 3692 00ac 1A64     	 str r2,[r3,#64]
 3693              	.L259:
1950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 3694              	 .loc 2 1952 0
 3695 00ae 3B69     	 ldr r3,[r7,#16]
1953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3696              	 .loc 2 1953 0
 3697 00b0 181C     	 mov r0,r3
 3698 00b2 BD46     	 mov sp,r7
 3699 00b4 06B0     	 add sp,sp,#24
 3700              	 
 3701 00b6 80BD     	 pop {r7,pc}
 3702              	.L264:
 3703              	 .align 2
 3704              	.L263:
 3705 00b8 00000000 	 .word E_EEPROM_XMC1_0
 3706              	 .cfi_endproc
 3707              	.LFE79:
 3709              	 .section .text.E_EEPROM_XMC1_lEvalBlockStatus,"ax",%progbits
 3710              	 .align 2
 3711              	 .code 16
 3712              	 .thumb_func
 3714              	E_EEPROM_XMC1_lEvalBlockStatus:
 3715              	.LFB80:
1954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function evaluates the block status and updates the cache (if required).
1961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    Entry Criteria:                          
1962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    1) No ECC error                        
1963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    2) Block number is non zero             
1964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    Possible results:                         
1965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    1) cache updated: consistent            
1966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    2) cache updated: inconsistent           
1967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    3) cache already updated (no actions done)   
1968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    4) cannot evaluate - requires more blocks to be read          
1969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEvalBlockStatus(void)
1971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3716              	 .loc 2 1971 0
 3717              	 .cfi_startproc
 3718 0000 80B5     	 push {r7,lr}
 3719              	.LCFI98:
 3720              	 .cfi_def_cfa_offset 8
 3721              	 .cfi_offset 7,-8
 3722              	 .cfi_offset 14,-4
 3723 0002 88B0     	 sub sp,sp,#32
 3724              	.LCFI99:
 3725              	 .cfi_def_cfa_offset 40
 3726 0004 00AF     	 add r7,sp,#0
 3727              	.LCFI100:
 3728              	 .cfi_def_cfa_register 7
1972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t size;
1973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
1974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status_byte;
1975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t  block_number;
1976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t physical_blocks;
1977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_HEADER_t *Ptr;
1980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3729              	 .loc 2 1981 0
 3730 0006 4B4B     	 ldr r3,.L278
 3731 0008 5B68     	 ldr r3,[r3,#4]
 3732 000a FB61     	 str r3,[r7,#28]
1982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   Ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t *)(void *)data_ptr->read_write_buffer;
 3733              	 .loc 2 1982 0
 3734 000c FB69     	 ldr r3,[r7,#28]
 3735 000e 4C33     	 add r3,r3,#76
 3736 0010 BB61     	 str r3,[r7,#24]
1983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_number = Ptr->block_number;
 3737              	 .loc 2 1983 0
 3738 0012 1723     	 mov r3,#23
 3739 0014 FB18     	 add r3,r7,r3
 3740 0016 BA69     	 ldr r2,[r7,#24]
 3741 0018 1278     	 ldrb r2,[r2]
 3742 001a 1A70     	 strb r2,[r3]
1984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status_byte = Ptr->status;
 3743              	 .loc 2 1984 0
 3744 001c BB69     	 ldr r3,[r7,#24]
 3745 001e 5B78     	 ldrb r3,[r3,#1]
 3746 0020 3B61     	 str r3,[r7,#16]
1985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info;
 3747              	 .loc 2 1986 0
 3748 0022 FB69     	 ldr r3,[r7,#28]
 3749 0024 FB60     	 str r3,[r7,#12]
1987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Get the Index of the read block from the user configuration */
1989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 3750              	 .loc 2 1989 0
 3751 0026 1723     	 mov r3,#23
 3752 0028 FB18     	 add r3,r7,r3
 3753 002a 1B78     	 ldrb r3,[r3]
 3754 002c 181C     	 mov r0,r3
 3755 002e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 3756 0032 031C     	 mov r3,r0
 3757 0034 BB60     	 str r3,[r7,#8]
1990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If the block is found */
1992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( (indx != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND) )
 3758              	 .loc 2 1992 0
 3759 0036 BB68     	 ldr r3,[r7,#8]
 3760 0038 FF2B     	 cmp r3,#255
 3761 003a 00D1     	 bne .LCB3403
 3762 003c 6FE0     	 b .L266
 3763              	.LCB3403:
1993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Point to the cache table entry for the block to be evaluated */
1995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     cache_ptr = cache_ptr + indx;
 3764              	 .loc 2 1995 0
 3765 003e BB68     	 ldr r3,[r7,#8]
 3766 0040 DB00     	 lsl r3,r3,#3
 3767 0042 FA68     	 ldr r2,[r7,#12]
 3768 0044 D318     	 add r3,r2,r3
 3769 0046 FB60     	 str r3,[r7,#12]
1996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Store Index of current block */
1998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->updated_cache_index = indx;
 3770              	 .loc 2 1998 0
 3771 0048 FA69     	 ldr r2,[r7,#28]
 3772 004a BA23     	 mov r3,#186
 3773 004c 5B00     	 lsl r3,r3,#1
 3774 004e B968     	 ldr r1,[r7,#8]
 3775 0050 D150     	 str r1,[r2,r3]
1999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if cache table is updated for the given block : address = 0U => cache table not yet up
2001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (cache_ptr->address == 0U)
 3776              	 .loc 2 2001 0
 3777 0052 FB68     	 ldr r3,[r7,#12]
 3778 0054 1B68     	 ldr r3,[r3]
 3779 0056 002B     	 cmp r3,#0
 3780 0058 58D1     	 bne .L267
2002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If the starting block of the block found */
2004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((status_byte & E_EEPROM_XMC1_START_BIT ) != 0U)
 3781              	 .loc 2 2004 0
 3782 005a 3B69     	 ldr r3,[r7,#16]
 3783 005c 8022     	 mov r2,#128
 3784 005e 1340     	 and r3,r2
 3785 0060 65D0     	 beq .L265
2005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Update the cache with block address */
2007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr->address = data_ptr->curr_bank_src_addr;
 3786              	 .loc 2 2007 0
 3787 0062 FB69     	 ldr r3,[r7,#28]
 3788 0064 1A6C     	 ldr r2,[r3,#64]
 3789 0066 FB68     	 ldr r3,[r7,#12]
 3790 0068 1A60     	 str r2,[r3]
2008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* if the Valid bit for the logical block is set */
2010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ((status_byte & (E_EEPROM_XMC1_VALID_BIT) ) != 0U)
 3791              	 .loc 2 2010 0
 3792 006a 3B69     	 ldr r3,[r7,#16]
 3793 006c 4022     	 mov r2,#64
 3794 006e 1340     	 and r3,r2
 3795 0070 14D0     	 beq .L269
2011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.valid = 1U;
 3796              	 .loc 2 2012 0
 3797 0072 FB68     	 ldr r3,[r7,#12]
 3798 0074 1A79     	 ldrb r2,[r3,#4]
 3799 0076 0121     	 mov r1,#1
 3800 0078 0A43     	 orr r2,r1
 3801 007a 1A71     	 strb r2,[r3,#4]
2013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           
2014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* if the CRC bit for the logical block is set */
2015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           if ((status_byte & (E_EEPROM_XMC1_CRC_BIT) ) != 0U)
 3802              	 .loc 2 2015 0
 3803 007c 3B69     	 ldr r3,[r7,#16]
 3804 007e 1022     	 mov r2,#16
 3805 0080 1340     	 and r3,r2
 3806 0082 05D0     	 beq .L270
2016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.crc = 1U;
 3807              	 .loc 2 2017 0
 3808 0084 FB68     	 ldr r3,[r7,#12]
 3809 0086 1A79     	 ldrb r2,[r3,#4]
 3810 0088 0821     	 mov r1,#8
 3811 008a 0A43     	 orr r2,r1
 3812 008c 1A71     	 strb r2,[r3,#4]
 3813 008e 0AE0     	 b .L272
 3814              	.L270:
2018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           else
2020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.crc = 0U;
 3815              	 .loc 2 2021 0
 3816 0090 FB68     	 ldr r3,[r7,#12]
 3817 0092 1A79     	 ldrb r2,[r3,#4]
 3818 0094 0821     	 mov r1,#8
 3819 0096 8A43     	 bic r2,r1
 3820 0098 1A71     	 strb r2,[r3,#4]
 3821 009a 04E0     	 b .L272
 3822              	.L269:
2022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.valid = 0U;
 3823              	 .loc 2 2026 0
 3824 009c FB68     	 ldr r3,[r7,#12]
 3825 009e 1A79     	 ldrb r2,[r3,#4]
 3826 00a0 0121     	 mov r1,#1
 3827 00a2 8A43     	 bic r2,r1
 3828 00a4 1A71     	 strb r2,[r3,#4]
 3829              	.L272:
2027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Check If number of Flash blocks used for this data block is same in size */
2030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         size = (uint32_t)(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx].size);
 3830              	 .loc 2 2030 0
 3831 00a6 234B     	 ldr r3,.L278
 3832 00a8 1A68     	 ldr r2,[r3]
 3833 00aa BB68     	 ldr r3,[r7,#8]
 3834 00ac DB00     	 lsl r3,r3,#3
 3835 00ae D318     	 add r3,r2,r3
 3836 00b0 5B68     	 ldr r3,[r3,#4]
 3837 00b2 7B60     	 str r3,[r7,#4]
2031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
 3838              	 .loc 2 2031 0
 3839 00b4 7B68     	 ldr r3,[r7,#4]
 3840 00b6 181C     	 mov r0,r3
 3841 00b8 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 3842 00bc 031C     	 mov r3,r0
 3843 00be 3B60     	 str r3,[r7]
2032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ( data_ptr->written_block_counter == physical_blocks)
 3844              	 .loc 2 2033 0
 3845 00c0 FB69     	 ldr r3,[r7,#28]
 3846 00c2 9A6C     	 ldr r2,[r3,#72]
 3847 00c4 3B68     	 ldr r3,[r7]
 3848 00c6 9A42     	 cmp r2,r3
 3849 00c8 05D1     	 bne .L273
2034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.consistent = 1U;  /* EVALUATION RESULT : BLOCK CONSISTENT*/
 3850              	 .loc 2 2035 0
 3851 00ca FB68     	 ldr r3,[r7,#12]
 3852 00cc 1A79     	 ldrb r2,[r3,#4]
 3853 00ce 0221     	 mov r1,#2
 3854 00d0 0A43     	 orr r2,r1
 3855 00d2 1A71     	 strb r2,[r3,#4]
 3856 00d4 11E0     	 b .L274
 3857              	.L273:
2036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           if (cache_ptr->status.valid == 1U)
 3858              	 .loc 2 2039 0
 3859 00d6 FB68     	 ldr r3,[r7,#12]
 3860 00d8 1B79     	 ldrb r3,[r3,#4]
 3861 00da 0122     	 mov r2,#1
 3862 00dc 1340     	 and r3,r2
 3863 00de DBB2     	 uxtb r3,r3
 3864 00e0 002B     	 cmp r3,#0
 3865 00e2 05D0     	 beq .L275
2040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.consistent = 0U;  /* EVALUATION RESULT : BLOCK INCONSISTENT */
 3866              	 .loc 2 2041 0
 3867 00e4 FB68     	 ldr r3,[r7,#12]
 3868 00e6 1A79     	 ldrb r2,[r3,#4]
 3869 00e8 0221     	 mov r1,#2
 3870 00ea 8A43     	 bic r2,r1
 3871 00ec 1A71     	 strb r2,[r3,#4]
 3872 00ee 04E0     	 b .L274
 3873              	.L275:
2042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           else
2044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.consistent = 1U; /* If the block is invalid, then mark : BLOCK INCONS
 3874              	 .loc 2 2045 0
 3875 00f0 FB68     	 ldr r3,[r7,#12]
 3876 00f2 1A79     	 ldrb r2,[r3,#4]
 3877 00f4 0221     	 mov r1,#2
 3878 00f6 0A43     	 orr r2,r1
 3879 00f8 1A71     	 strb r2,[r3,#4]
 3880              	.L274:
2046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Initialize the Index, block block count for the next read */
2049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3881              	 .loc 2 2049 0
 3882 00fa FA69     	 ldr r2,[r7,#28]
 3883 00fc BA23     	 mov r3,#186
 3884 00fe 5B00     	 lsl r3,r3,#1
 3885 0100 FF21     	 mov r1,#255
 3886 0102 D150     	 str r1,[r2,r3]
2050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->written_block_counter = 0U;
 3887              	 .loc 2 2050 0
 3888 0104 FB69     	 ldr r3,[r7,#28]
 3889 0106 0022     	 mov r2,#0
 3890 0108 9A64     	 str r2,[r3,#72]
 3891 010a 10E0     	 b .L265
 3892              	.L267:
2051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*
2057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * EVALUATION RESULT : CACHE ALREADY UPDATED
2058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * If cache table is already updated for the block, no need to evaluate the block
2059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        */
2060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3893              	 .loc 2 2060 0
 3894 010c FA69     	 ldr r2,[r7,#28]
 3895 010e BA23     	 mov r3,#186
 3896 0110 5B00     	 lsl r3,r3,#1
 3897 0112 FF21     	 mov r1,#255
 3898 0114 D150     	 str r1,[r2,r3]
2061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = 0U;
 3899              	 .loc 2 2061 0
 3900 0116 FB69     	 ldr r3,[r7,#28]
 3901 0118 0022     	 mov r2,#0
 3902 011a 9A64     	 str r2,[r3,#72]
 3903 011c 07E0     	 b .L265
 3904              	.L266:
2062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {    
2066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3905              	 .loc 2 2066 0
 3906 011e FA69     	 ldr r2,[r7,#28]
 3907 0120 BA23     	 mov r3,#186
 3908 0122 5B00     	 lsl r3,r3,#1
 3909 0124 FF21     	 mov r1,#255
 3910 0126 D150     	 str r1,[r2,r3]
2067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->written_block_counter = 0U;
 3911              	 .loc 2 2067 0
 3912 0128 FB69     	 ldr r3,[r7,#28]
 3913 012a 0022     	 mov r2,#0
 3914 012c 9A64     	 str r2,[r3,#72]
 3915              	.L265:
2068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3916              	 .loc 2 2069 0
 3917 012e BD46     	 mov sp,r7
 3918 0130 08B0     	 add sp,sp,#32
 3919              	 
 3920 0132 80BD     	 pop {r7,pc}
 3921              	.L279:
 3922              	 .align 2
 3923              	.L278:
 3924 0134 00000000 	 .word E_EEPROM_XMC1_0
 3925              	 .cfi_endproc
 3926              	.LFE80:
 3928              	 .section .text.E_EEPROM_XMC1_lUpdateCacheBlockRead,"ax",%progbits
 3929              	 .align 2
 3930              	 .code 16
 3931              	 .thumb_func
 3933              	E_EEPROM_XMC1_lUpdateCacheBlockRead:
 3934              	.LFB81:
2070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t
2075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Utility function to read data block from flash for cache update function.
2077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void)
2079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3935              	 .loc 2 2079 0
 3936              	 .cfi_startproc
 3937 0000 80B5     	 push {r7,lr}
 3938              	.LCFI101:
 3939              	 .cfi_def_cfa_offset 8
 3940              	 .cfi_offset 7,-8
 3941              	 .cfi_offset 14,-4
 3942 0002 82B0     	 sub sp,sp,#8
 3943              	.LCFI102:
 3944              	 .cfi_def_cfa_offset 16
 3945 0004 00AF     	 add r7,sp,#0
 3946              	.LCFI103:
 3947              	 .cfi_def_cfa_register 7
2080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3948              	 .loc 2 2081 0
 3949 0006 0F4B     	 ldr r3,.L282
 3950 0008 5B68     	 ldr r3,[r3,#4]
 3951 000a 7B60     	 str r3,[r7,#4]
2082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Set the Write Source pointer to the next block */
2084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->curr_bank_src_addr = data_ptr->curr_bank_src_addr -  E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3952              	 .loc 2 2084 0
 3953 000c 7B68     	 ldr r3,[r7,#4]
 3954 000e 1B6C     	 ldr r3,[r3,#64]
 3955 0010 103B     	 sub r3,r3,#16
 3956 0012 1A1C     	 mov r2,r3
 3957 0014 7B68     	 ldr r3,[r7,#4]
 3958 0016 1A64     	 str r2,[r3,#64]
2085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 3959              	 .loc 2 2087 0
 3960 0018 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr,  (uint32_t*)(void*)data_ptr->read_wr
 3961              	 .loc 2 2089 0
 3962 001c 7B68     	 ldr r3,[r7,#4]
 3963 001e 1A6C     	 ldr r2,[r3,#64]
 3964 0020 7B68     	 ldr r3,[r7,#4]
 3965 0022 4C33     	 add r3,r3,#76
 3966 0024 101C     	 mov r0,r2
 3967 0026 191C     	 mov r1,r3
 3968 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Increment number of read block counter  */
2092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
 3969              	 .loc 2 2092 0
 3970 002c 7B68     	 ldr r3,[r7,#4]
 3971 002e 9B6C     	 ldr r3,[r3,#72]
 3972 0030 5A1C     	 add r2,r3,#1
 3973 0032 7B68     	 ldr r3,[r7,#4]
 3974 0034 9A64     	 str r2,[r3,#72]
2093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (E_EEPROM_XMC1_lGetFlashStatus());
 3975              	 .loc 2 2094 0
 3976 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3977 003a 031C     	 mov r3,r0
2095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3978              	 .loc 2 2095 0
 3979 003c 181C     	 mov r0,r3
 3980 003e BD46     	 mov sp,r7
 3981 0040 02B0     	 add sp,sp,#8
 3982              	 
 3983 0042 80BD     	 pop {r7,pc}
 3984              	.L283:
 3985              	 .align 2
 3986              	.L282:
 3987 0044 00000000 	 .word E_EEPROM_XMC1_0
 3988              	 .cfi_endproc
 3989              	.LFE81:
 3991              	 .section .text.E_EEPROM_XMC1_lGetUsrBlockIndex,"ax",%progbits
 3992              	 .align 2
 3993              	 .code 16
 3994              	 .thumb_func
 3996              	E_EEPROM_XMC1_lGetUsrBlockIndex:
 3997              	.LFB82:
2096:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2097:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2098:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User data block number / ID
2099:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t : returns array index pointer of block configuration
2101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This utility function will return the Index (location) of the block in the user
2103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number)
2105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3998              	 .loc 2 2105 0
 3999              	 .cfi_startproc
 4000 0000 80B5     	 push {r7,lr}
 4001              	.LCFI104:
 4002              	 .cfi_def_cfa_offset 8
 4003              	 .cfi_offset 7,-8
 4004              	 .cfi_offset 14,-4
 4005 0002 84B0     	 sub sp,sp,#16
 4006              	.LCFI105:
 4007              	 .cfi_def_cfa_offset 24
 4008 0004 00AF     	 add r7,sp,#0
 4009              	.LCFI106:
 4010              	 .cfi_def_cfa_register 7
 4011 0006 021C     	 mov r2,r0
 4012 0008 FB1D     	 add r3,r7,#7
 4013 000a 1A70     	 strb r2,[r3]
2106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t  *block_ptr;
2108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 4014              	 .loc 2 2109 0
 4015 000c 0023     	 mov r3,#0
 4016 000e FB60     	 str r3,[r7,#12]
2110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
 4017              	 .loc 2 2110 0
 4018 0010 124B     	 ldr r3,.L290
 4019 0012 1A68     	 ldr r2,[r3]
 4020 0014 FB68     	 ldr r3,[r7,#12]
 4021 0016 DB00     	 lsl r3,r3,#3
 4022 0018 D318     	 add r3,r2,r3
 4023 001a BB60     	 str r3,[r7,#8]
2111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check for max configured block count reached and block number is matched against the configure
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_numbe
 4024              	 .loc 2 2113 0
 4025 001c 05E0     	 b .L285
 4026              	.L287:
2114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx++;
 4027              	 .loc 2 2115 0
 4028 001e FB68     	 ldr r3,[r7,#12]
 4029 0020 0133     	 add r3,r3,#1
 4030 0022 FB60     	 str r3,[r7,#12]
2116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_ptr++;
 4031              	 .loc 2 2116 0
 4032 0024 BB68     	 ldr r3,[r7,#8]
 4033 0026 0833     	 add r3,r3,#8
 4034 0028 BB60     	 str r3,[r7,#8]
 4035              	.L285:
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4036              	 .loc 2 2113 0
 4037 002a 0C4B     	 ldr r3,.L290
 4038 002c 5B7A     	 ldrb r3,[r3,#9]
 4039 002e 1A1E     	 sub r2,r3,#0
 4040 0030 FB68     	 ldr r3,[r7,#12]
 4041 0032 9A42     	 cmp r2,r3
 4042 0034 05D9     	 bls .L286
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4043              	 .loc 2 2113 0 is_stmt 0 discriminator 1
 4044 0036 BB68     	 ldr r3,[r7,#8]
 4045 0038 1B78     	 ldrb r3,[r3]
 4046 003a FA1D     	 add r2,r7,#7
 4047 003c 1278     	 ldrb r2,[r2]
 4048 003e 9A42     	 cmp r2,r3
 4049 0040 EDD1     	 bne .L287
 4050              	.L286:
2117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( indx == E_EEPROM_XMC1_HANDLE_PTR->block_count )
 4051              	 .loc 2 2119 0 is_stmt 1
 4052 0042 064B     	 ldr r3,.L290
 4053 0044 5B7A     	 ldrb r3,[r3,#9]
 4054 0046 1A1E     	 sub r2,r3,#0
 4055 0048 FB68     	 ldr r3,[r7,#12]
 4056 004a 9A42     	 cmp r2,r3
 4057 004c 01D1     	 bne .L288
2120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 4058              	 .loc 2 2121 0
 4059 004e FF23     	 mov r3,#255
 4060 0050 FB60     	 str r3,[r7,#12]
 4061              	.L288:
2122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (indx);
 4062              	 .loc 2 2123 0
 4063 0052 FB68     	 ldr r3,[r7,#12]
2124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4064              	 .loc 2 2124 0
 4065 0054 181C     	 mov r0,r3
 4066 0056 BD46     	 mov sp,r7
 4067 0058 04B0     	 add sp,sp,#16
 4068              	 
 4069 005a 80BD     	 pop {r7,pc}
 4070              	.L291:
 4071              	 .align 2
 4072              	.L290:
 4073 005c 00000000 	 .word E_EEPROM_XMC1_0
 4074              	 .cfi_endproc
 4075              	.LFE82:
 4077              	 .section .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks,"ax",%progbits
 4078              	 .align 2
 4079              	 .code 16
 4080              	 .thumb_func
 4082              	E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:
 4083              	.LFB83:
2125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : size - size of user data block
2128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t - returns maximum physical flash blocks required to store the data.
2130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Calculates and return the number of FLASH blocks required for a user data block
2132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size)
2134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4084              	 .loc 2 2134 0
 4085              	 .cfi_startproc
 4086 0000 80B5     	 push {r7,lr}
 4087              	.LCFI107:
 4088              	 .cfi_def_cfa_offset 8
 4089              	 .cfi_offset 7,-8
 4090              	 .cfi_offset 14,-4
 4091 0002 84B0     	 sub sp,sp,#16
 4092              	.LCFI108:
 4093              	 .cfi_def_cfa_offset 24
 4094 0004 00AF     	 add r7,sp,#0
 4095              	.LCFI109:
 4096              	 .cfi_def_cfa_register 7
 4097 0006 7860     	 str r0,[r7,#4]
2135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t physical_blocks;
2136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   physical_blocks = 1U;
 4098              	 .loc 2 2137 0
 4099 0008 0123     	 mov r3,#1
 4100 000a FB60     	 str r3,[r7,#12]
2138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If size is greater than the  */
2139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
 4101              	 .loc 2 2139 0
 4102 000c 7B68     	 ldr r3,[r7,#4]
 4103 000e 0C2B     	 cmp r3,#12
 4104 0010 0FD9     	 bls .L293
2140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
 4105              	 .loc 2 2141 0
 4106 0012 7B68     	 ldr r3,[r7,#4]
 4107 0014 0C3B     	 sub r3,r3,#12
 4108 0016 7B60     	 str r3,[r7,#4]
2142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     physical_blocks++;
 4109              	 .loc 2 2142 0
 4110 0018 FB68     	 ldr r3,[r7,#12]
 4111 001a 0133     	 add r3,r3,#1
 4112 001c FB60     	 str r3,[r7,#12]
2143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
 4113              	 .loc 2 2144 0
 4114 001e 05E0     	 b .L294
 4115              	.L295:
2145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       physical_blocks++;
 4116              	 .loc 2 2146 0
 4117 0020 FB68     	 ldr r3,[r7,#12]
 4118 0022 0133     	 add r3,r3,#1
 4119 0024 FB60     	 str r3,[r7,#12]
2147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
 4120              	 .loc 2 2147 0
 4121 0026 7B68     	 ldr r3,[r7,#4]
 4122 0028 0E3B     	 sub r3,r3,#14
 4123 002a 7B60     	 str r3,[r7,#4]
 4124              	.L294:
2144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4125              	 .loc 2 2144 0
 4126 002c 7B68     	 ldr r3,[r7,#4]
 4127 002e 0E2B     	 cmp r3,#14
 4128 0030 F6D8     	 bhi .L295
 4129              	.L293:
2148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return(physical_blocks);
 4130              	 .loc 2 2150 0
 4131 0032 FB68     	 ldr r3,[r7,#12]
2151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4132              	 .loc 2 2151 0
 4133 0034 181C     	 mov r0,r3
 4134 0036 BD46     	 mov sp,r7
 4135 0038 04B0     	 add sp,sp,#16
 4136              	 
 4137 003a 80BD     	 pop {r7,pc}
 4138              	 .cfi_endproc
 4139              	.LFE83:
 4141              	 .section .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks,"ax",%progbits
 4142              	 .align 2
 4143              	 .code 16
 4144              	 .thumb_func
 4146              	E_EEPROM_XMC1_lGetFreeDFLASHBlocks:
 4147              	.LFB84:
2152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t : Number of physical blocks left in the bank for writing data.
2157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This routine will calculate the number of empty DFLASH blocks remaining in the
2159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void)
2161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4148              	 .loc 2 2161 0
 4149              	 .cfi_startproc
 4150 0000 80B5     	 push {r7,lr}
 4151              	.LCFI110:
 4152              	 .cfi_def_cfa_offset 8
 4153              	 .cfi_offset 7,-8
 4154              	 .cfi_offset 14,-4
 4155 0002 84B0     	 sub sp,sp,#16
 4156              	.LCFI111:
 4157              	 .cfi_def_cfa_offset 24
 4158 0004 00AF     	 add r7,sp,#0
 4159              	.LCFI112:
 4160              	 .cfi_def_cfa_register 7
2162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t base_addr;
2163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t free_blocks;
2164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4161              	 .loc 2 2166 0
 4162 0006 0D4B     	 ldr r3,.L301
 4163 0008 5B68     	 ldr r3,[r3,#4]
 4164 000a BB60     	 str r3,[r7,#8]
2167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 4165              	 .loc 2 2168 0
 4166 000c BB68     	 ldr r3,[r7,#8]
 4167 000e 9B6A     	 ldr r3,[r3,#40]
 4168 0010 002B     	 cmp r3,#0
 4169 0012 02D1     	 bne .L298
2169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     base_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4170              	 .loc 2 2170 0
 4171 0014 0A4B     	 ldr r3,.L301+4
 4172 0016 FB60     	 str r3,[r7,#12]
 4173 0018 01E0     	 b .L299
 4174              	.L298:
2171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     base_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4175              	 .loc 2 2174 0
 4176 001a 0A4B     	 ldr r3,.L301+8
 4177 001c FB60     	 str r3,[r7,#12]
 4178              	.L299:
2175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   free_blocks = (uint32_t)( ( (base_addr + E_EEPROM_XMC1_FLASH_BANK_SIZE) - (data_ptr->next_free_bl
 4179              	 .loc 2 2176 0
 4180 001e BB68     	 ldr r3,[r7,#8]
 4181 0020 DB6B     	 ldr r3,[r3,#60]
 4182 0022 FA68     	 ldr r2,[r7,#12]
 4183 0024 D31A     	 sub r3,r2,r3
 4184 0026 8022     	 mov r2,#128
 4185 0028 9200     	 lsl r2,r2,#2
 4186 002a 9446     	 mov ip,r2
 4187 002c 6344     	 add r3,r3,ip
 4188 002e 1B09     	 lsr r3,r3,#4
 4189 0030 7B60     	 str r3,[r7,#4]
2177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                 /  E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
2178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (free_blocks);
 4190              	 .loc 2 2178 0
 4191 0032 7B68     	 ldr r3,[r7,#4]
2179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4192              	 .loc 2 2179 0
 4193 0034 181C     	 mov r0,r3
 4194 0036 BD46     	 mov sp,r7
 4195 0038 04B0     	 add sp,sp,#16
 4196              	 
 4197 003a 80BD     	 pop {r7,pc}
 4198              	.L302:
 4199              	 .align 2
 4200              	.L301:
 4201 003c 00000000 	 .word E_EEPROM_XMC1_0
 4202 0040 008C0010 	 .word 268471296
 4203 0044 008E0010 	 .word 268471808
 4204              	 .cfi_endproc
 4205              	.LFE84:
 4207              	 .section .text.E_EEPROM_XMC1_lUpdateCurrBankInfo,"ax",%progbits
 4208              	 .align 2
 4209              	 .code 16
 4210              	 .thumb_func
 4212              	E_EEPROM_XMC1_lUpdateCurrBankInfo:
 4213              	.LFB85:
2180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Updates global addresses to keep track of writing and reading operations respe
2187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void)
2189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4214              	 .loc 2 2189 0
 4215              	 .cfi_startproc
 4216 0000 80B5     	 push {r7,lr}
 4217              	.LCFI113:
 4218              	 .cfi_def_cfa_offset 8
 4219              	 .cfi_offset 7,-8
 4220              	 .cfi_offset 14,-4
 4221 0002 82B0     	 sub sp,sp,#8
 4222              	.LCFI114:
 4223              	 .cfi_def_cfa_offset 16
 4224 0004 00AF     	 add r7,sp,#0
 4225              	.LCFI115:
 4226              	 .cfi_def_cfa_register 7
2190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4227              	 .loc 2 2191 0
 4228 0006 144B     	 ldr r3,.L306
 4229 0008 5B68     	 ldr r3,[r3,#4]
 4230 000a 7B60     	 str r3,[r7,#4]
2192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 4231              	 .loc 2 2193 0
 4232 000c 7B68     	 ldr r3,[r7,#4]
 4233 000e 9B6A     	 ldr r3,[r3,#40]
 4234 0010 002B     	 cmp r3,#0
 4235 0012 0FD1     	 bne .L304
2194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4236              	 .loc 2 2195 0
 4237 0014 7B68     	 ldr r3,[r7,#4]
 4238 0016 114A     	 ldr r2,.L306+4
 4239 0018 1A64     	 str r2,[r3,#64]
2196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4240              	 .loc 2 2196 0
 4241 001a 7B68     	 ldr r3,[r7,#4]
 4242 001c 0F4A     	 ldr r2,.L306+4
 4243 001e 1A63     	 str r2,[r3,#48]
2197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4244              	 .loc 2 2197 0
 4245 0020 7B68     	 ldr r3,[r7,#4]
 4246 0022 0F4A     	 ldr r2,.L306+8
 4247 0024 DA62     	 str r2,[r3,#44]
2198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
 4248              	 .loc 2 2198 0
 4249 0026 7B68     	 ldr r3,[r7,#4]
 4250 0028 0E4A     	 ldr r2,.L306+12
 4251 002a 5A63     	 str r2,[r3,#52]
2199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
 4252              	 .loc 2 2199 0
 4253 002c 7B68     	 ldr r3,[r7,#4]
 4254 002e 0E4A     	 ldr r2,.L306+16
 4255 0030 9A63     	 str r2,[r3,#56]
 4256 0032 0EE0     	 b .L303
 4257              	.L304:
2200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4258              	 .loc 2 2203 0
 4259 0034 7B68     	 ldr r3,[r7,#4]
 4260 0036 0A4A     	 ldr r2,.L306+8
 4261 0038 1A64     	 str r2,[r3,#64]
2204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4262              	 .loc 2 2204 0
 4263 003a 7B68     	 ldr r3,[r7,#4]
 4264 003c 084A     	 ldr r2,.L306+8
 4265 003e 1A63     	 str r2,[r3,#48]
2205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4266              	 .loc 2 2205 0
 4267 0040 7B68     	 ldr r3,[r7,#4]
 4268 0042 064A     	 ldr r2,.L306+4
 4269 0044 DA62     	 str r2,[r3,#44]
2206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
 4270              	 .loc 2 2206 0
 4271 0046 7B68     	 ldr r3,[r7,#4]
 4272 0048 074A     	 ldr r2,.L306+16
 4273 004a 5A63     	 str r2,[r3,#52]
2207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
 4274              	 .loc 2 2207 0
 4275 004c 7B68     	 ldr r3,[r7,#4]
 4276 004e 054A     	 ldr r2,.L306+12
 4277 0050 9A63     	 str r2,[r3,#56]
 4278              	.L303:
2208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4279              	 .loc 2 2209 0
 4280 0052 BD46     	 mov sp,r7
 4281 0054 02B0     	 add sp,sp,#8
 4282              	 
 4283 0056 80BD     	 pop {r7,pc}
 4284              	.L307:
 4285              	 .align 2
 4286              	.L306:
 4287 0058 00000000 	 .word E_EEPROM_XMC1_0
 4288 005c 008C0010 	 .word 268471296
 4289 0060 008E0010 	 .word 268471808
 4290 0064 FF8D0010 	 .word 268471807
 4291 0068 FF8F0010 	 .word 268472319
 4292              	 .cfi_endproc
 4293              	.LFE85:
 4295              	 .section .text.E_EEPROM_XMC1_lReadMarkerBlocks,"ax",%progbits
 4296              	 .align 2
 4297              	 .code 16
 4298              	 .thumb_func
 4300              	E_EEPROM_XMC1_lReadMarkerBlocks:
 4301              	.LFB86:
2210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  :
2213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t : marker_dirty_state
2215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will read the Block marker contents
2217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void)
2219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4302              	 .loc 2 2219 0
 4303              	 .cfi_startproc
 4304 0000 80B5     	 push {r7,lr}
 4305              	.LCFI116:
 4306              	 .cfi_def_cfa_offset 8
 4307              	 .cfi_offset 7,-8
 4308              	 .cfi_offset 14,-4
 4309 0002 88B0     	 sub sp,sp,#32
 4310              	.LCFI117:
 4311              	 .cfi_def_cfa_offset 40
 4312 0004 00AF     	 add r7,sp,#0
 4313              	.LCFI118:
 4314              	 .cfi_def_cfa_register 7
2220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t bank;
2222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block;
2223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t temp_bank_state;
2224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_marker_cnt;
2225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t temp_state_marker;
2226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_dirty_state;
2227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4315              	 .loc 2 2229 0
 4316 0006 204B     	 ldr r3,.L314
 4317 0008 5B68     	 ldr r3,[r3,#4]
 4318 000a 3B61     	 str r3,[r7,#16]
2230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Initialize Local variables */
2232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   temp_bank_state = 0U;
 4319              	 .loc 2 2232 0
 4320 000c 0023     	 mov r3,#0
 4321 000e FB61     	 str r3,[r7,#28]
2233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_dirty_state = 0U;
 4322              	 .loc 2 2233 0
 4323 0010 0023     	 mov r3,#0
 4324 0012 7B61     	 str r3,[r7,#20]
2234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_marker_cnt = 0U;
 4325              	 .loc 2 2234 0
 4326 0014 0023     	 mov r3,#0
 4327 0016 BB61     	 str r3,[r7,#24]
 4328              	.L312:
2235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Prepare the variables for state block update */
2238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     temp_bank_state = (uint32_t)((uint32_t)temp_bank_state << (uint32_t)1U);
 4329              	 .loc 2 2238 0
 4330 0018 FB69     	 ldr r3,[r7,#28]
 4331 001a 5B00     	 lsl r3,r3,#1
 4332 001c FB61     	 str r3,[r7,#28]
2239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     bank  = (uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS;
 4333              	 .loc 2 2240 0
 4334 001e BB69     	 ldr r3,[r7,#24]
 4335 0020 9B08     	 lsr r3,r3,#2
 4336 0022 FB60     	 str r3,[r7,#12]
2241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block = (uint32_t)state_marker_cnt - ((uint32_t)bank << E_EEPROM_XMC1_TWO_BIT_POS);
 4337              	 .loc 2 2241 0
 4338 0024 FB68     	 ldr r3,[r7,#12]
 4339 0026 9B00     	 lsl r3,r3,#2
 4340 0028 BA69     	 ldr r2,[r7,#24]
 4341 002a D31A     	 sub r3,r2,r3
 4342 002c BB60     	 str r3,[r7,#8]
2242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Read the state block of bank*/
2244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     temp_state_marker = E_EEPROM_XMC1_lReadVerifyMarker(bank , block);
 4343              	 .loc 2 2244 0
 4344 002e FA68     	 ldr r2,[r7,#12]
 4345 0030 BB68     	 ldr r3,[r7,#8]
 4346 0032 101C     	 mov r0,r2
 4347 0034 191C     	 mov r1,r3
 4348 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadVerifyMarker
 4349 003a 031C     	 mov r3,r0
 4350 003c 7B60     	 str r3,[r7,#4]
2245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (temp_state_marker == E_EEPROM_XMC1_ALL_ONES)
 4351              	 .loc 2 2246 0
 4352 003e 7B68     	 ldr r3,[r7,#4]
 4353 0040 0133     	 add r3,r3,#1
 4354 0042 04D1     	 bne .L309
2247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      temp_bank_state |= 1U;
 4355              	 .loc 2 2248 0
 4356 0044 FB69     	 ldr r3,[r7,#28]
 4357 0046 0122     	 mov r2,#1
 4358 0048 1343     	 orr r3,r2
 4359 004a FB61     	 str r3,[r7,#28]
 4360 004c 0CE0     	 b .L310
 4361              	.L309:
2249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (temp_state_marker == E_EEPROM_XMC1_ALL_ZEROS)
 4362              	 .loc 2 2250 0
 4363 004e 7B68     	 ldr r3,[r7,#4]
 4364 0050 002B     	 cmp r3,#0
 4365 0052 09D0     	 beq .L310
2251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      temp_bank_state |= 0U;
2253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      indx = (uint32_t)((uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS);
 4366              	 .loc 2 2256 0
 4367 0054 BB69     	 ldr r3,[r7,#24]
 4368 0056 9B08     	 lsr r3,r3,#2
 4369 0058 3B60     	 str r3,[r7]
2257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      marker_dirty_state |= (uint32_t)((uint32_t)1U << (uint32_t)indx);
 4370              	 .loc 2 2257 0
 4371 005a 3B68     	 ldr r3,[r7]
 4372 005c 0122     	 mov r2,#1
 4373 005e 9A40     	 lsl r2,r2,r3
 4374 0060 131C     	 mov r3,r2
 4375 0062 7A69     	 ldr r2,[r7,#20]
 4376 0064 1343     	 orr r3,r2
 4377 0066 7B61     	 str r3,[r7,#20]
 4378              	.L310:
2258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the counter "StateBlockCnt" */
2260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     state_marker_cnt++;
 4379              	 .loc 2 2260 0
 4380 0068 BB69     	 ldr r3,[r7,#24]
 4381 006a 0133     	 add r3,r3,#1
 4382 006c BB61     	 str r3,[r7,#24]
2261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (state_marker_cnt < E_EEPROM_XMC1_EIGHT_BYTES);
 4383              	 .loc 2 2261 0
 4384 006e BB69     	 ldr r3,[r7,#24]
 4385 0070 072B     	 cmp r3,#7
 4386 0072 D1D9     	 bls .L312
2262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update Global variables */
2264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->init_gc_state = temp_bank_state;
 4387              	 .loc 2 2264 0
 4388 0074 3A69     	 ldr r2,[r7,#16]
 4389 0076 B423     	 mov r3,#180
 4390 0078 5B00     	 lsl r3,r3,#1
 4391 007a F969     	 ldr r1,[r7,#28]
 4392 007c D150     	 str r1,[r2,r3]
2265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (marker_dirty_state);
 4393              	 .loc 2 2266 0
 4394 007e 7B69     	 ldr r3,[r7,#20]
2267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4395              	 .loc 2 2267 0
 4396 0080 181C     	 mov r0,r3
 4397 0082 BD46     	 mov sp,r7
 4398 0084 08B0     	 add sp,sp,#32
 4399              	 
 4400 0086 80BD     	 pop {r7,pc}
 4401              	.L315:
 4402              	 .align 2
 4403              	.L314:
 4404 0088 00000000 	 .word E_EEPROM_XMC1_0
 4405              	 .cfi_endproc
 4406              	.LFE86:
 4408              	 .section .text.E_EEPROM_XMC1_lReadVerifyMarker,"ax",%progbits
 4409              	 .align 2
 4410              	 .code 16
 4411              	 .thumb_func
 4413              	E_EEPROM_XMC1_lReadVerifyMarker:
 4414              	.LFB87:
2268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : Bank  - Bank Number ( 0 / 1 )
2271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             Block - Block position
2272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t : E_EEPROM_XMC1_ALL_ONES
2274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    E_EEPROM_XMC1_ALL_ZEROS
2275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    E_EEPROM_XMC1_MB_DIRTY
2276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function will verify the marker contents read out from state page.
2278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block)
2280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4415              	 .loc 2 2280 0
 4416              	 .cfi_startproc
 4417 0000 80B5     	 push {r7,lr}
 4418              	.LCFI119:
 4419              	 .cfi_def_cfa_offset 8
 4420              	 .cfi_offset 7,-8
 4421              	 .cfi_offset 14,-4
 4422 0002 8AB0     	 sub sp,sp,#40
 4423              	.LCFI120:
 4424              	 .cfi_def_cfa_offset 48
 4425 0004 00AF     	 add r7,sp,#0
 4426              	.LCFI121:
 4427              	 .cfi_def_cfa_register 7
 4428 0006 7860     	 str r0,[r7,#4]
 4429 0008 3960     	 str r1,[r7]
2281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t return_val;
2283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t ones_counter;
2284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t zeros_counter;
2285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_block_addr;
2286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *marker_array_ptr;
2287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4430              	 .loc 2 2289 0
 4431 000a 294B     	 ldr r3,.L326
 4432 000c 5B68     	 ldr r3,[r3,#4]
 4433 000e 7B61     	 str r3,[r7,#20]
2290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   ones_counter = 0U;
 4434              	 .loc 2 2291 0
 4435 0010 0023     	 mov r3,#0
 4436 0012 FB61     	 str r3,[r7,#28]
2292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   zeros_counter = 0U;
 4437              	 .loc 2 2292 0
 4438 0014 0023     	 mov r3,#0
 4439 0016 BB61     	 str r3,[r7,#24]
2293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
 4440              	 .loc 2 2293 0
 4441 0018 7B69     	 ldr r3,[r7,#20]
 4442 001a 4C33     	 add r3,r3,#76
 4443 001c 3B61     	 str r3,[r7,#16]
2294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Calculate the Marker Block address from bank and Block size*/
2296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
2297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
 4444              	 .loc 2 2297 0
 4445 001e 7B68     	 ldr r3,[r7,#4]
 4446 0020 244A     	 ldr r2,.L326+4
 4447 0022 9446     	 mov ip,r2
 4448 0024 6344     	 add r3,r3,ip
 4449 0026 5A01     	 lsl r2,r3,#5
 4450 0028 3B68     	 ldr r3,[r7]
 4451 002a D318     	 add r3,r2,r3
2296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
 4452              	 .loc 2 2296 0
 4453 002c 1B01     	 lsl r3,r3,#4
 4454 002e FB60     	 str r3,[r7,#12]
2298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)block * (uint32_t)E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
2299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 4455              	 .loc 2 2301 0
 4456 0030 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read one complete block of data (4 Words = 128 bit) from the targeted Marker Block */
2304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(marker_block_addr, (uint32_t*)(void*)marker_array_ptr);
 4457              	 .loc 2 2304 0
 4458 0034 FA68     	 ldr r2,[r7,#12]
 4459 0036 3B69     	 ldr r3,[r7,#16]
 4460 0038 101C     	 mov r0,r2
 4461 003a 191C     	 mov r1,r3
 4462 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check for any flash hardware errors*/
2307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_lGetFlashStatus())
 4463              	 .loc 2 2307 0
 4464 0040 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4465 0044 031E     	 sub r3,r0,#0
 4466 0046 02D0     	 beq .L317
2308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Any Hardware errors will result in Dirty state*/
2310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     return_val = E_EEPROM_XMC1_MB_DIRTY;
 4467              	 .loc 2 2310 0
 4468 0048 DD23     	 mov r3,#221
 4469 004a 3B62     	 str r3,[r7,#32]
 4470 004c 2BE0     	 b .L318
 4471              	.L317:
2311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
 4472              	 .loc 2 2314 0
 4473 004e 0023     	 mov r3,#0
 4474 0050 7B62     	 str r3,[r7,#36]
 4475 0052 16E0     	 b .L319
 4476              	.L322:
2315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check for the Marker field and verify Marker either 0 or 1*/
2317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ZEROS)
 4477              	 .loc 2 2317 0
 4478 0054 7B6A     	 ldr r3,[r7,#36]
 4479 0056 9B00     	 lsl r3,r3,#2
 4480 0058 3A69     	 ldr r2,[r7,#16]
 4481 005a D318     	 add r3,r2,r3
 4482 005c 1B68     	 ldr r3,[r3]
 4483 005e 002B     	 cmp r3,#0
 4484 0060 02D1     	 bne .L320
2318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         zeros_counter++;
 4485              	 .loc 2 2319 0
 4486 0062 BB69     	 ldr r3,[r7,#24]
 4487 0064 0133     	 add r3,r3,#1
 4488 0066 BB61     	 str r3,[r7,#24]
 4489              	.L320:
2320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
 4490              	 .loc 2 2322 0
 4491 0068 7B6A     	 ldr r3,[r7,#36]
 4492 006a 9B00     	 lsl r3,r3,#2
 4493 006c 3A69     	 ldr r2,[r7,#16]
 4494 006e D318     	 add r3,r2,r3
 4495 0070 1B68     	 ldr r3,[r3]
 4496 0072 0133     	 add r3,r3,#1
 4497 0074 02D1     	 bne .L321
2323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         ones_counter++;
 4498              	 .loc 2 2324 0
 4499 0076 FB69     	 ldr r3,[r7,#28]
 4500 0078 0133     	 add r3,r3,#1
 4501 007a FB61     	 str r3,[r7,#28]
 4502              	.L321:
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4503              	 .loc 2 2314 0 discriminator 2
 4504 007c 7B6A     	 ldr r3,[r7,#36]
 4505 007e 0133     	 add r3,r3,#1
 4506 0080 7B62     	 str r3,[r7,#36]
 4507              	.L319:
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4508              	 .loc 2 2314 0 is_stmt 0 discriminator 1
 4509 0082 7B6A     	 ldr r3,[r7,#36]
 4510 0084 032B     	 cmp r3,#3
 4511 0086 E5D9     	 bls .L322
2325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (ones_counter == E_EEPROM_XMC1_FOUR_BYTES)
 4512              	 .loc 2 2327 0 is_stmt 1
 4513 0088 FB69     	 ldr r3,[r7,#28]
 4514 008a 042B     	 cmp r3,#4
 4515 008c 03D1     	 bne .L323
2328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_ALL_ONES;
 4516              	 .loc 2 2329 0
 4517 008e 0123     	 mov r3,#1
 4518 0090 5B42     	 neg r3,r3
 4519 0092 3B62     	 str r3,[r7,#32]
 4520 0094 07E0     	 b .L318
 4521              	.L323:
2330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (zeros_counter == E_EEPROM_XMC1_FOUR_BYTES)
 4522              	 .loc 2 2331 0
 4523 0096 BB69     	 ldr r3,[r7,#24]
 4524 0098 042B     	 cmp r3,#4
 4525 009a 02D1     	 bne .L324
2332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_ALL_ZEROS;
 4526              	 .loc 2 2333 0
 4527 009c 0023     	 mov r3,#0
 4528 009e 3B62     	 str r3,[r7,#32]
 4529 00a0 01E0     	 b .L318
 4530              	.L324:
2334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_MB_DIRTY;
 4531              	 .loc 2 2337 0
 4532 00a2 DD23     	 mov r3,#221
 4533 00a4 3B62     	 str r3,[r7,#32]
 4534              	.L318:
2338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (return_val);
 4535              	 .loc 2 2340 0
 4536 00a6 3B6A     	 ldr r3,[r7,#32]
2341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4537              	 .loc 2 2341 0
 4538 00a8 181C     	 mov r0,r3
 4539 00aa BD46     	 mov sp,r7
 4540 00ac 0AB0     	 add sp,sp,#40
 4541              	 
 4542 00ae 80BD     	 pop {r7,pc}
 4543              	.L327:
 4544              	 .align 2
 4545              	.L326:
 4546 00b0 00000000 	 .word E_EEPROM_XMC1_0
 4547 00b4 46000800 	 .word 524358
 4548              	 .cfi_endproc
 4549              	.LFE87:
 4551              	 .section .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer,"ax",%progbits
 4552              	 .align 2
 4553              	 .code 16
 4554              	 .thumb_func
 4556              	E_EEPROM_XMC1_lSetMarkerBlockBuffer:
 4557              	.LFB88:
2342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will update the write buffer for a particular bank marker state
2349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void)
2351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4558              	 .loc 2 2351 0
 4559              	 .cfi_startproc
 4560 0000 80B5     	 push {r7,lr}
 4561              	.LCFI122:
 4562              	 .cfi_def_cfa_offset 8
 4563              	 .cfi_offset 7,-8
 4564              	 .cfi_offset 14,-4
 4565 0002 84B0     	 sub sp,sp,#16
 4566              	.LCFI123:
 4567              	 .cfi_def_cfa_offset 24
 4568 0004 00AF     	 add r7,sp,#0
 4569              	.LCFI124:
 4570              	 .cfi_def_cfa_register 7
2352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *array_ptr;
2353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4571              	 .loc 2 2355 0
 4572 0006 0C4B     	 ldr r3,.L331
 4573 0008 5B68     	 ldr r3,[r3,#4]
 4574 000a BB60     	 str r3,[r7,#8]
2356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
 4575              	 .loc 2 2357 0
 4576 000c BB68     	 ldr r3,[r7,#8]
 4577 000e 4C33     	 add r3,r3,#76
 4578 0010 7B60     	 str r3,[r7,#4]
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4579              	 .loc 2 2358 0
 4580 0012 0023     	 mov r3,#0
 4581 0014 FB60     	 str r3,[r7,#12]
 4582 0016 08E0     	 b .L329
 4583              	.L330:
2359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
 4584              	 .loc 2 2360 0 discriminator 3
 4585 0018 FB68     	 ldr r3,[r7,#12]
 4586 001a 9B00     	 lsl r3,r3,#2
 4587 001c 7A68     	 ldr r2,[r7,#4]
 4588 001e D318     	 add r3,r2,r3
 4589 0020 0022     	 mov r2,#0
 4590 0022 1A60     	 str r2,[r3]
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4591              	 .loc 2 2358 0 discriminator 3
 4592 0024 FB68     	 ldr r3,[r7,#12]
 4593 0026 0133     	 add r3,r3,#1
 4594 0028 FB60     	 str r3,[r7,#12]
 4595              	.L329:
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4596              	 .loc 2 2358 0 is_stmt 0 discriminator 1
 4597 002a FB68     	 ldr r3,[r7,#12]
 4598 002c 032B     	 cmp r3,#3
 4599 002e F3D9     	 bls .L330
2361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4600              	 .loc 2 2363 0 is_stmt 1
 4601 0030 BD46     	 mov sp,r7
 4602 0032 04B0     	 add sp,sp,#16
 4603              	 
 4604 0034 80BD     	 pop {r7,pc}
 4605              	.L332:
 4606 0036 C046     	 .align 2
 4607              	.L331:
 4608 0038 00000000 	 .word E_EEPROM_XMC1_0
 4609              	 .cfi_endproc
 4610              	.LFE88:
 4612              	 .section .text.E_EEPROM_XMC1_lSetMarkerPageBuffer,"ax",%progbits
 4613              	 .align 2
 4614              	 .code 16
 4615              	 .thumb_func
 4617              	E_EEPROM_XMC1_lSetMarkerPageBuffer:
 4618              	.LFB89:
2364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : State - Marker State
2367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Fill complete Marker PAGE as per the below defined format.
2371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                                  WORD - 0      WORD - 1      WORD - 2     WORD - 3
2373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK0 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK1 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK2 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK3 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK4 -  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK5 -  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     ----------------------------------------------------------------------
2381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     ----------------------------------------------------------------------
2382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK16-  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state)
2385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4619              	 .loc 2 2385 0
 4620              	 .cfi_startproc
 4621 0000 80B5     	 push {r7,lr}
 4622              	.LCFI125:
 4623              	 .cfi_def_cfa_offset 8
 4624              	 .cfi_offset 7,-8
 4625              	 .cfi_offset 14,-4
 4626 0002 88B0     	 sub sp,sp,#32
 4627              	.LCFI126:
 4628              	 .cfi_def_cfa_offset 40
 4629 0004 00AF     	 add r7,sp,#0
 4630              	.LCFI127:
 4631              	 .cfi_def_cfa_register 7
 4632 0006 7860     	 str r0,[r7,#4]
2386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t bit_mask;
2388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t word_data;
2389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *array_ptr;
2390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4633              	 .loc 2 2392 0
 4634 0008 1E4B     	 ldr r3,.L342
 4635 000a 5B68     	 ldr r3,[r3,#4]
 4636 000c FB60     	 str r3,[r7,#12]
2393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   array_ptr = (uint32_t*)(void*)data_ptr->page_write_buffer;
 4637              	 .loc 2 2394 0
 4638 000e FB68     	 ldr r3,[r7,#12]
 4639 0010 6033     	 add r3,r3,#96
 4640 0012 3B61     	 str r3,[r7,#16]
2395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
2396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Depending upon the state received check the bit positions where a state marker has to be updat
2397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * get the actual state. Fill the first four blocks of the page with the state marker information
2398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
2399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Fill the first rest 4 blocks of the page with marker data  */
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
 4641              	 .loc 2 2401 0
 4642 0014 0023     	 mov r3,#0
 4643 0016 BB61     	 str r3,[r7,#24]
 4644 0018 1EE0     	 b .L334
 4645              	.L339:
2402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( (state & (E_EEPROM_XMC1_MARKER_POSITION >> bit_mask )) == 0U )
 4646              	 .loc 2 2403 0
 4647 001a BB69     	 ldr r3,[r7,#24]
 4648 001c 8022     	 mov r2,#128
 4649 001e DA40     	 lsr r2,r2,r3
 4650 0020 131C     	 mov r3,r2
 4651 0022 7A68     	 ldr r2,[r7,#4]
 4652 0024 1340     	 and r3,r2
 4653 0026 02D1     	 bne .L335
2404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        word_data = E_EEPROM_XMC1_ALL_ZEROS;
 4654              	 .loc 2 2405 0
 4655 0028 0023     	 mov r3,#0
 4656 002a 7B61     	 str r3,[r7,#20]
 4657 002c 02E0     	 b .L336
 4658              	.L335:
2406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        word_data = E_EEPROM_XMC1_ALL_ONES;
 4659              	 .loc 2 2409 0
 4660 002e 0123     	 mov r3,#1
 4661 0030 5B42     	 neg r3,r3
 4662 0032 7B61     	 str r3,[r7,#20]
 4663              	.L336:
2410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
 4664              	 .loc 2 2411 0
 4665 0034 0023     	 mov r3,#0
 4666 0036 FB61     	 str r3,[r7,#28]
 4667 0038 08E0     	 b .L337
 4668              	.L338:
2412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        *array_ptr = word_data;
 4669              	 .loc 2 2413 0 discriminator 3
 4670 003a 3B69     	 ldr r3,[r7,#16]
 4671 003c 7A69     	 ldr r2,[r7,#20]
 4672 003e 1A60     	 str r2,[r3]
2414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        array_ptr++;
 4673              	 .loc 2 2414 0 discriminator 3
 4674 0040 3B69     	 ldr r3,[r7,#16]
 4675 0042 0433     	 add r3,r3,#4
 4676 0044 3B61     	 str r3,[r7,#16]
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4677              	 .loc 2 2411 0 discriminator 3
 4678 0046 FB69     	 ldr r3,[r7,#28]
 4679 0048 0133     	 add r3,r3,#1
 4680 004a FB61     	 str r3,[r7,#28]
 4681              	.L337:
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4682              	 .loc 2 2411 0 is_stmt 0 discriminator 1
 4683 004c FB69     	 ldr r3,[r7,#28]
 4684 004e 032B     	 cmp r3,#3
 4685 0050 F3D9     	 bls .L338
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4686              	 .loc 2 2401 0 is_stmt 1 discriminator 2
 4687 0052 BB69     	 ldr r3,[r7,#24]
 4688 0054 0133     	 add r3,r3,#1
 4689 0056 BB61     	 str r3,[r7,#24]
 4690              	.L334:
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4691              	 .loc 2 2401 0 is_stmt 0 discriminator 1
 4692 0058 BB69     	 ldr r3,[r7,#24]
 4693 005a 032B     	 cmp r3,#3
 4694 005c DDD9     	 bls .L339
2415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Fill the first rest 12 blocks of the page with all ones*/
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
 4695              	 .loc 2 2419 0 is_stmt 1
 4696 005e 0023     	 mov r3,#0
 4697 0060 FB61     	 str r3,[r7,#28]
 4698 0062 09E0     	 b .L340
 4699              	.L341:
2420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     *array_ptr = E_EEPROM_XMC1_ALL_ONES;
 4700              	 .loc 2 2421 0 discriminator 3
 4701 0064 3B69     	 ldr r3,[r7,#16]
 4702 0066 0122     	 mov r2,#1
 4703 0068 5242     	 neg r2,r2
 4704 006a 1A60     	 str r2,[r3]
2422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     array_ptr++;
 4705              	 .loc 2 2422 0 discriminator 3
 4706 006c 3B69     	 ldr r3,[r7,#16]
 4707 006e 0433     	 add r3,r3,#4
 4708 0070 3B61     	 str r3,[r7,#16]
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4709              	 .loc 2 2419 0 discriminator 3
 4710 0072 FB69     	 ldr r3,[r7,#28]
 4711 0074 0133     	 add r3,r3,#1
 4712 0076 FB61     	 str r3,[r7,#28]
 4713              	.L340:
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4714              	 .loc 2 2419 0 is_stmt 0 discriminator 1
 4715 0078 FB69     	 ldr r3,[r7,#28]
 4716 007a 2F2B     	 cmp r3,#47
 4717 007c F2D9     	 bls .L341
2423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4718              	 .loc 2 2425 0 is_stmt 1
 4719 007e BD46     	 mov sp,r7
 4720 0080 08B0     	 add sp,sp,#32
 4721              	 
 4722 0082 80BD     	 pop {r7,pc}
 4723              	.L343:
 4724              	 .align 2
 4725              	.L342:
 4726 0084 00000000 	 .word E_EEPROM_XMC1_0
 4727              	 .cfi_endproc
 4728              	.LFE89:
 4730              	 .section .text.E_EEPROM_XMC1_lEraseBank,"ax",%progbits
 4731              	 .align 2
 4732              	 .code 16
 4733              	 .thumb_func
 4735              	E_EEPROM_XMC1_lEraseBank:
 4736              	.LFB90:
2426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : page_address - Bank end address
2429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Erases the particular bank
2433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address)
2435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4737              	 .loc 2 2435 0
 4738              	 .cfi_startproc
 4739 0000 80B5     	 push {r7,lr}
 4740              	.LCFI128:
 4741              	 .cfi_def_cfa_offset 8
 4742              	 .cfi_offset 7,-8
 4743              	 .cfi_offset 14,-4
 4744 0002 84B0     	 sub sp,sp,#16
 4745              	.LCFI129:
 4746              	 .cfi_def_cfa_offset 24
 4747 0004 00AF     	 add r7,sp,#0
 4748              	.LCFI130:
 4749              	 .cfi_def_cfa_register 7
 4750 0006 7860     	 str r0,[r7,#4]
2436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   page_address = ((page_address) - E_EEPROM_XMC1_FLASH_PAGE_SIZE );
 4751              	 .loc 2 2439 0
 4752 0008 7B68     	 ldr r3,[r7,#4]
 4753 000a 013B     	 sub r3,r3,#1
 4754 000c FF3B     	 sub r3,r3,#255
 4755 000e 7B60     	 str r3,[r7,#4]
2440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   page_address += 1U;
 4756              	 .loc 2 2440 0
 4757 0010 7B68     	 ldr r3,[r7,#4]
 4758 0012 0133     	 add r3,r3,#1
 4759 0014 7B60     	 str r3,[r7,#4]
2441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 4760              	 .loc 2 2441 0
 4761 0016 0023     	 mov r3,#0
 4762 0018 FB60     	 str r3,[r7,#12]
 4763              	.L346:
2442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
2446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 4764              	 .loc 2 2446 0 discriminator 2
 4765 001a FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lEraseSinglePage(page_address);
 4766              	 .loc 2 2448 0 discriminator 2
 4767 001e 7B68     	 ldr r3,[r7,#4]
 4768 0020 181C     	 mov r0,r3
 4769 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseSinglePage
2449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGetFlashStatus();
 4770              	 .loc 2 2450 0 discriminator 2
 4771 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4772 002a 031C     	 mov r3,r0
 4773 002c BB60     	 str r3,[r7,#8]
2451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     page_address = page_address - (E_EEPROM_XMC1_FLASH_PAGE_SIZE );
 4774              	 .loc 2 2452 0 discriminator 2
 4775 002e 7B68     	 ldr r3,[r7,#4]
 4776 0030 013B     	 sub r3,r3,#1
 4777 0032 FF3B     	 sub r3,r3,#255
 4778 0034 7B60     	 str r3,[r7,#4]
2453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx++;
 4779              	 .loc 2 2453 0 discriminator 2
 4780 0036 FB68     	 ldr r3,[r7,#12]
 4781 0038 0133     	 add r3,r3,#1
 4782 003a FB60     	 str r3,[r7,#12]
2454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((indx <E_EEPROM_XMC1_BANK_PAGES) && (status == 0U));
 4783              	 .loc 2 2454 0 discriminator 2
 4784 003c FB68     	 ldr r3,[r7,#12]
 4785 003e 012B     	 cmp r3,#1
 4786 0040 02D8     	 bhi .L345
 4787              	 .loc 2 2454 0 is_stmt 0 discriminator 1
 4788 0042 BB68     	 ldr r3,[r7,#8]
 4789 0044 002B     	 cmp r3,#0
 4790 0046 E8D0     	 beq .L346
 4791              	.L345:
2455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 4792              	 .loc 2 2456 0 is_stmt 1
 4793 0048 BB68     	 ldr r3,[r7,#8]
2457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4794              	 .loc 2 2457 0
 4795 004a 181C     	 mov r0,r3
 4796 004c BD46     	 mov sp,r7
 4797 004e 04B0     	 add sp,sp,#16
 4798              	 
 4799 0050 80BD     	 pop {r7,pc}
 4800              	 .cfi_endproc
 4801              	.LFE90:
 4803 0052 C046     	 .section .text.E_EEPROM_XMC1_lGCWrite,"ax",%progbits
 4804              	 .align 2
 4805              	 .code 16
 4806              	 .thumb_func
 4808              	E_EEPROM_XMC1_lGCWrite:
 4809              	.LFB91:
2458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_address  - flash address
2461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Local function to write data into specified location during GC operation
2465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address)
2467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4810              	 .loc 2 2467 0
 4811              	 .cfi_startproc
 4812 0000 80B5     	 push {r7,lr}
 4813              	.LCFI131:
 4814              	 .cfi_def_cfa_offset 8
 4815              	 .cfi_offset 7,-8
 4816              	 .cfi_offset 14,-4
 4817 0002 84B0     	 sub sp,sp,#16
 4818              	.LCFI132:
 4819              	 .cfi_def_cfa_offset 24
 4820 0004 00AF     	 add r7,sp,#0
 4821              	.LCFI133:
 4822              	 .cfi_def_cfa_register 7
 4823 0006 7860     	 str r0,[r7,#4]
2468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4824              	 .loc 2 2471 0
 4825 0008 0A4B     	 ldr r3,.L350
 4826 000a 5B68     	 ldr r3,[r3,#4]
 4827 000c FB60     	 str r3,[r7,#12]
2472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 4828              	 .loc 2 2474 0
 4829 000e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write a single block into flash*/
2477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lWriteSingleBlock(block_address, (uint32_t*)(void*)data_ptr->read_write_buffer);
 4830              	 .loc 2 2477 0
 4831 0012 FB68     	 ldr r3,[r7,#12]
 4832 0014 4C33     	 add r3,r3,#76
 4833 0016 7A68     	 ldr r2,[r7,#4]
 4834 0018 101C     	 mov r0,r2
 4835 001a 191C     	 mov r1,r3
 4836 001c FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSingleBlock
2478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 4837              	 .loc 2 2478 0
 4838 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4839 0024 031C     	 mov r3,r0
 4840 0026 BB60     	 str r3,[r7,#8]
2479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 4841              	 .loc 2 2479 0
 4842 0028 BB68     	 ldr r3,[r7,#8]
2480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4843              	 .loc 2 2480 0
 4844 002a 181C     	 mov r0,r3
 4845 002c BD46     	 mov sp,r7
 4846 002e 04B0     	 add sp,sp,#16
 4847              	 
 4848 0030 80BD     	 pop {r7,pc}
 4849              	.L351:
 4850 0032 C046     	 .align 2
 4851              	.L350:
 4852 0034 00000000 	 .word E_EEPROM_XMC1_0
 4853              	 .cfi_endproc
 4854              	.LFE91:
 4856              	 .section .text.E_EEPROM_XMC1_lLocalWrite,"ax",%progbits
 4857              	 .align 2
 4858              	 .code 16
 4859              	 .thumb_func
 4861              	E_EEPROM_XMC1_lLocalWrite:
 4862              	.LFB92:
2481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   invalidate    - (0 = normal write / 1 = invalidate block)
2487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Common local write function to do write block function or invalidate block.
2490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lLocalWrite( uint8_t block_number,
2492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                            uint8_t* data_buffer_ptr,
2493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                            uint32_t invalidate)
2494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4863              	 .loc 2 2494 0
 4864              	 .cfi_startproc
 4865 0000 80B5     	 push {r7,lr}
 4866              	.LCFI134:
 4867              	 .cfi_def_cfa_offset 8
 4868              	 .cfi_offset 7,-8
 4869              	 .cfi_offset 14,-4
 4870 0002 8CB0     	 sub sp,sp,#48
 4871              	.LCFI135:
 4872              	 .cfi_def_cfa_offset 56
 4873 0004 00AF     	 add r7,sp,#0
 4874              	.LCFI136:
 4875              	 .cfi_def_cfa_register 7
 4876 0006 B960     	 str r1,[r7,#8]
 4877 0008 7A60     	 str r2,[r7,#4]
 4878 000a 0F23     	 mov r3,#15
 4879 000c FB18     	 add r3,r7,r3
 4880 000e 021C     	 add r2,r0,#0
 4881 0010 1A70     	 strb r2,[r3]
2495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_blocks;
2497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t perform_write;
2498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
2499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_blocks;
2500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
2502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4882              	 .loc 2 2503 0
 4883 0012 3B4B     	 ldr r3,.L363
 4884 0014 5B68     	 ldr r3,[r3,#4]
 4885 0016 7B62     	 str r3,[r7,#36]
2504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 4886              	 .loc 2 2505 0
 4887 0018 0023     	 mov r3,#0
 4888 001a FB62     	 str r3,[r7,#44]
2506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   perform_write = 0U;
 4889              	 .loc 2 2506 0
 4890 001c 0023     	 mov r3,#0
 4891 001e BB62     	 str r3,[r7,#40]
2507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 4892              	 .loc 2 2507 0
 4893 0020 0F23     	 mov r3,#15
 4894 0022 FB18     	 add r3,r7,r3
 4895 0024 1B78     	 ldrb r3,[r3]
 4896 0026 181C     	 mov r0,r3
 4897 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 4898 002c 031C     	 mov r3,r0
 4899 002e 3B62     	 str r3,[r7,#32]
2508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 4900              	 .loc 2 2508 0
 4901 0030 334B     	 ldr r3,.L363
 4902 0032 1A68     	 ldr r2,[r3]
 4903 0034 3B6A     	 ldr r3,[r7,#32]
 4904 0036 DB00     	 lsl r3,r3,#3
 4905 0038 D318     	 add r3,r2,r3
 4906 003a FB61     	 str r3,[r7,#28]
2509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 4907              	 .loc 2 2510 0
 4908 003c FB69     	 ldr r3,[r7,#28]
 4909 003e 5B68     	 ldr r3,[r3,#4]
 4910 0040 181C     	 mov r0,r3
 4911 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 4912 0046 031C     	 mov r3,r0
 4913 0048 BB61     	 str r3,[r7,#24]
2511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 4914              	 .loc 2 2511 0
 4915 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 4916 004e 031C     	 mov r3,r0
 4917 0050 7B61     	 str r3,[r7,#20]
2512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (remaining_blocks < flash_blocks)
 4918              	 .loc 2 2513 0
 4919 0052 7A69     	 ldr r2,[r7,#20]
 4920 0054 BB69     	 ldr r3,[r7,#24]
 4921 0056 9A42     	 cmp r2,r3
 4922 0058 28D2     	 bcs .L353
2514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Doesn't do Garbage collection if, GUI option garbage collection is disabled*/
2516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (E_EEPROM_XMC1_HANDLE_PTR->garbage_collection == 1U)
 4923              	 .loc 2 2516 0
 4924 005a 294B     	 ldr r3,.L363
 4925 005c 1B7B     	 ldrb r3,[r3,#12]
 4926 005e 012B     	 cmp r3,#1
 4927 0060 21D1     	 bne .L354
2517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Request for Garbage Collection and continue */
2519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
 4928              	 .loc 2 2519 0
 4929 0062 7A6A     	 ldr r2,[r7,#36]
 4930 0064 B223     	 mov r3,#178
 4931 0066 5B00     	 lsl r3,r3,#1
 4932 0068 0421     	 mov r1,#4
 4933 006a D150     	 str r1,[r2,r3]
2520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lGarbageCollection();
 4934              	 .loc 2 2520 0
 4935 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
2521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*Check the size of the GC requested block to check if space is available in the new bank or 
2523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 4936              	 .loc 2 2523 0
 4937 0070 FB69     	 ldr r3,[r7,#28]
 4938 0072 5B68     	 ldr r3,[r3,#4]
 4939 0074 181C     	 mov r0,r3
 4940 0076 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 4941 007a 031C     	 mov r3,r0
 4942 007c BB61     	 str r3,[r7,#24]
2524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 4943              	 .loc 2 2524 0
 4944 007e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 4945 0082 031C     	 mov r3,r0
 4946 0084 7B61     	 str r3,[r7,#20]
2525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check for GC overflows the complete space in the new bank, hence cant write the GC trigger
2527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((remaining_blocks >= flash_blocks)&&(data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE))
 4947              	 .loc 2 2527 0
 4948 0086 7A69     	 ldr r2,[r7,#20]
 4949 0088 BB69     	 ldr r3,[r7,#24]
 4950 008a 9A42     	 cmp r2,r3
 4951 008c 08D3     	 bcc .L355
 4952              	 .loc 2 2527 0 is_stmt 0 discriminator 1
 4953 008e 7A6A     	 ldr r2,[r7,#36]
 4954 0090 B223     	 mov r3,#178
 4955 0092 5B00     	 lsl r3,r3,#1
 4956 0094 D358     	 ldr r3,[r2,r3]
 4957 0096 0A2B     	 cmp r3,#10
 4958 0098 02D1     	 bne .L355
2528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         perform_write = 1U;
 4959              	 .loc 2 2529 0 is_stmt 1
 4960 009a 0123     	 mov r3,#1
 4961 009c BB62     	 str r3,[r7,#40]
 4962 009e 07E0     	 b .L358
 4963              	.L355:
2530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
2532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 4964              	 .loc 2 2533 0
 4965 00a0 0523     	 mov r3,#5
 4966 00a2 FB62     	 str r3,[r7,#44]
 4967 00a4 04E0     	 b .L358
 4968              	.L354:
2534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_MEMORY_BANK_FULL;
 4969              	 .loc 2 2538 0
 4970 00a6 0623     	 mov r3,#6
 4971 00a8 FB62     	 str r3,[r7,#44]
 4972 00aa 01E0     	 b .L358
 4973              	.L353:
2539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     perform_write = 1U;
 4974              	 .loc 2 2543 0
 4975 00ac 0123     	 mov r3,#1
 4976 00ae BB62     	 str r3,[r7,#40]
 4977              	.L358:
2544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write operation Starts */
2546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (perform_write == 1U)
 4978              	 .loc 2 2546 0
 4979 00b0 BB6A     	 ldr r3,[r7,#40]
 4980 00b2 012B     	 cmp r3,#1
 4981 00b4 1FD1     	 bne .L359
2547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->written_block_counter = 0U;
 4982              	 .loc 2 2548 0
 4983 00b6 7B6A     	 ldr r3,[r7,#36]
 4984 00b8 0022     	 mov r2,#0
 4985 00ba 9A64     	 str r2,[r3,#72]
2549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (invalidate == 1U)
 4986              	 .loc 2 2549 0
 4987 00bc 7B68     	 ldr r3,[r7,#4]
 4988 00be 012B     	 cmp r3,#1
 4989 00c0 0AD1     	 bne .L360
2550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lHandleInvalidReq(block_number, user_block_index);
 4990              	 .loc 2 2551 0
 4991 00c2 0F23     	 mov r3,#15
 4992 00c4 FB18     	 add r3,r7,r3
 4993 00c6 1A78     	 ldrb r2,[r3]
 4994 00c8 3B6A     	 ldr r3,[r7,#32]
 4995 00ca 101C     	 mov r0,r2
 4996 00cc 191C     	 mov r1,r3
 4997 00ce FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleInvalidReq
 4998 00d2 031C     	 mov r3,r0
 4999 00d4 FB62     	 str r3,[r7,#44]
 5000 00d6 09E0     	 b .L361
 5001              	.L360:
2552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lHandleWriteReq(block_number, data_buffer_ptr);
 5002              	 .loc 2 2555 0
 5003 00d8 0F23     	 mov r3,#15
 5004 00da FB18     	 add r3,r7,r3
 5005 00dc 1A78     	 ldrb r2,[r3]
 5006 00de BB68     	 ldr r3,[r7,#8]
 5007 00e0 101C     	 mov r0,r2
 5008 00e2 191C     	 mov r1,r3
 5009 00e4 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleWriteReq
 5010 00e8 031C     	 mov r3,r0
 5011 00ea FB62     	 str r3,[r7,#44]
 5012              	.L361:
2556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status != 0U)
 5013              	 .loc 2 2557 0
 5014 00ec FB6A     	 ldr r3,[r7,#44]
 5015 00ee 002B     	 cmp r3,#0
 5016 00f0 01D0     	 beq .L359
2558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 5017              	 .loc 2 2559 0
 5018 00f2 0123     	 mov r3,#1
 5019 00f4 FB62     	 str r3,[r7,#44]
 5020              	.L359:
2560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5021              	 .loc 2 2562 0
 5022 00f6 FB6A     	 ldr r3,[r7,#44]
2563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5023              	 .loc 2 2563 0
 5024 00f8 181C     	 mov r0,r3
 5025 00fa BD46     	 mov sp,r7
 5026 00fc 0CB0     	 add sp,sp,#48
 5027              	 
 5028 00fe 80BD     	 pop {r7,pc}
 5029              	.L364:
 5030              	 .align 2
 5031              	.L363:
 5032 0100 00000000 	 .word E_EEPROM_XMC1_0
 5033              	 .cfi_endproc
 5034              	.LFE92:
 5036              	 .section .text.E_EEPROM_XMC1_lHandleWriteReq,"ax",%progbits
 5037              	 .align 2
 5038              	 .code 16
 5039              	 .thumb_func
 5041              	E_EEPROM_XMC1_lHandleWriteReq:
 5042              	.LFB93:
2564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Handle function to write one complete data block into flash.
2572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr)
2574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5043              	 .loc 2 2574 0
 5044              	 .cfi_startproc
 5045 0000 80B5     	 push {r7,lr}
 5046              	.LCFI137:
 5047              	 .cfi_def_cfa_offset 8
 5048              	 .cfi_offset 7,-8
 5049              	 .cfi_offset 14,-4
 5050 0002 88B0     	 sub sp,sp,#32
 5051              	.LCFI138:
 5052              	 .cfi_def_cfa_offset 40
 5053 0004 00AF     	 add r7,sp,#0
 5054              	.LCFI139:
 5055              	 .cfi_def_cfa_register 7
 5056 0006 021C     	 mov r2,r0
 5057 0008 3960     	 str r1,[r7]
 5058 000a FB1D     	 add r3,r7,#7
 5059 000c 1A70     	 strb r2,[r3]
2575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
2576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
2577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
2580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5060              	 .loc 2 2581 0
 5061 000e 534B     	 ldr r3,.L379
 5062 0010 5B68     	 ldr r3,[r3,#4]
 5063 0012 BB61     	 str r3,[r7,#24]
2582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 5064              	 .loc 2 2584 0
 5065 0014 FB1D     	 add r3,r7,#7
 5066 0016 1B78     	 ldrb r3,[r3]
 5067 0018 181C     	 mov r0,r3
 5068 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 5069 001e 031C     	 mov r3,r0
 5070 0020 7B61     	 str r3,[r7,#20]
2585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 5071              	 .loc 2 2585 0
 5072 0022 4E4B     	 ldr r3,.L379
 5073 0024 1A68     	 ldr r2,[r3]
 5074 0026 7B69     	 ldr r3,[r7,#20]
 5075 0028 DB00     	 lsl r3,r3,#3
 5076 002a D318     	 add r3,r2,r3
 5077 002c 3B61     	 str r3,[r7,#16]
2586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = block_ptr->size;
 5078              	 .loc 2 2586 0
 5079 002e 3B69     	 ldr r3,[r7,#16]
 5080 0030 5B68     	 ldr r3,[r3,#4]
 5081 0032 FB60     	 str r3,[r7,#12]
2587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_bytes_count = 0U;
 5082              	 .loc 2 2587 0
 5083 0034 BA69     	 ldr r2,[r7,#24]
 5084 0036 B023     	 mov r3,#176
 5085 0038 5B00     	 lsl r3,r3,#1
 5086 003a 0021     	 mov r1,#0
 5087 003c D150     	 str r1,[r2,r3]
2588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_state = E_EEPROM_XMC1_FIRST_BLOCK_WRITE;
 5088              	 .loc 2 2588 0
 5089 003e BA69     	 ldr r2,[r7,#24]
 5090 0040 BC23     	 mov r3,#188
 5091 0042 5B00     	 lsl r3,r3,#1
 5092 0044 0121     	 mov r1,#1
 5093 0046 D150     	 str r1,[r2,r3]
2589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 5094              	 .loc 2 2589 0
 5095 0048 0023     	 mov r3,#0
 5096 004a FB61     	 str r3,[r7,#28]
 5097              	.L375:
2590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->user_write_state)
 5098              	 .loc 2 2592 0
 5099 004c BA69     	 ldr r2,[r7,#24]
 5100 004e BC23     	 mov r3,#188
 5101 0050 5B00     	 lsl r3,r3,#1
 5102 0052 D358     	 ldr r3,[r2,r3]
 5103 0054 022B     	 cmp r3,#2
 5104 0056 02D0     	 beq .L367
 5105 0058 032B     	 cmp r3,#3
 5106 005a 12D0     	 beq .L368
 5107 005c 4AE0     	 b .L378
 5108              	.L367:
2593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_NEXT_BLOCK_WRITE:
2595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lWriteDataBlock();
 5109              	 .loc 2 2595 0
 5110 005e FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5111 0062 031C     	 mov r3,r0
 5112 0064 FB61     	 str r3,[r7,#28]
2596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == (uint32_t)0U)
 5113              	 .loc 2 2596 0
 5114 0066 FB69     	 ldr r3,[r7,#28]
 5115 0068 002B     	 cmp r3,#0
 5116 006a 09D1     	 bne .L369
2597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lPopulateNextBlock(block_number,data_buffer_ptr,block_size);
 5117              	 .loc 2 2598 0
 5118 006c FB1D     	 add r3,r7,#7
 5119 006e 1978     	 ldrb r1,[r3]
 5120 0070 3A68     	 ldr r2,[r7]
 5121 0072 FB68     	 ldr r3,[r7,#12]
 5122 0074 081C     	 mov r0,r1
 5123 0076 111C     	 mov r1,r2
 5124 0078 1A1C     	 mov r2,r3
 5125 007a FFF7FEFF 	 bl E_EEPROM_XMC1_lPopulateNextBlock
2599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5126              	 .loc 2 2600 0
 5127 007e 43E0     	 b .L370
 5128              	.L369:
 5129 0080 42E0     	 b .L370
 5130              	.L368:
2601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_LAST_BLOCK_WRITE:
2603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lWriteDataBlock();
 5131              	 .loc 2 2603 0
 5132 0082 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5133 0086 031C     	 mov r3,r0
 5134 0088 FB61     	 str r3,[r7,#28]
2604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == (uint32_t)0U)
 5135              	 .loc 2 2604 0
 5136 008a FB69     	 ldr r3,[r7,#28]
 5137 008c 002B     	 cmp r3,#0
 5138 008e 30D1     	 bne .L371
2605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Mark the block as inconsistent */
2607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
 5139              	 .loc 2 2607 0
 5140 0090 BB69     	 ldr r3,[r7,#24]
 5141 0092 D96B     	 ldr r1,[r3,#60]
 5142 0094 BB69     	 ldr r3,[r7,#24]
 5143 0096 7A69     	 ldr r2,[r7,#20]
 5144 0098 D200     	 lsl r2,r2,#3
 5145 009a D150     	 str r1,[r2,r3]
2608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].status.valid = 1U;
 5146              	 .loc 2 2608 0
 5147 009c BA69     	 ldr r2,[r7,#24]
 5148 009e 7B69     	 ldr r3,[r7,#20]
 5149 00a0 DB00     	 lsl r3,r3,#3
 5150 00a2 D318     	 add r3,r2,r3
 5151 00a4 1A79     	 ldrb r2,[r3,#4]
 5152 00a6 0121     	 mov r1,#1
 5153 00a8 0A43     	 orr r2,r1
 5154 00aa 1A71     	 strb r2,[r3,#4]
2609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].status.consistent = 1U;
 5155              	 .loc 2 2609 0
 5156 00ac BA69     	 ldr r2,[r7,#24]
 5157 00ae 7B69     	 ldr r3,[r7,#20]
 5158 00b0 DB00     	 lsl r3,r3,#3
 5159 00b2 D318     	 add r3,r2,r3
 5160 00b4 1A79     	 ldrb r2,[r3,#4]
 5161 00b6 0221     	 mov r1,#2
 5162 00b8 0A43     	 orr r2,r1
 5163 00ba 1A71     	 strb r2,[r3,#4]
2610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (E_EEPROM_XMC1_HANDLE_PTR->data_block_crc ==1U)
 5164              	 .loc 2 2610 0
 5165 00bc 274B     	 ldr r3,.L379
 5166 00be DB7A     	 ldrb r3,[r3,#11]
 5167 00c0 012B     	 cmp r3,#1
 5168 00c2 08D1     	 bne .L372
2611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* Updated Cache table Block Header status as CRC enabled block*/
2613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_info[user_block_index].status.crc = 1U;
 5169              	 .loc 2 2613 0
 5170 00c4 BA69     	 ldr r2,[r7,#24]
 5171 00c6 7B69     	 ldr r3,[r7,#20]
 5172 00c8 DB00     	 lsl r3,r3,#3
 5173 00ca D318     	 add r3,r2,r3
 5174 00cc 1A79     	 ldrb r2,[r3,#4]
 5175 00ce 0821     	 mov r1,#8
 5176 00d0 0A43     	 orr r2,r1
 5177 00d2 1A71     	 strb r2,[r3,#4]
 5178 00d4 07E0     	 b .L373
 5179              	.L372:
2614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* Updated Cache table Block Header status as CRC disabled block*/
2618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_info[user_block_index].status.crc = 0U;
 5180              	 .loc 2 2618 0
 5181 00d6 BA69     	 ldr r2,[r7,#24]
 5182 00d8 7B69     	 ldr r3,[r7,#20]
 5183 00da DB00     	 lsl r3,r3,#3
 5184 00dc D318     	 add r3,r2,r3
 5185 00de 1A79     	 ldrb r2,[r3,#4]
 5186 00e0 0821     	 mov r1,#8
 5187 00e2 8A43     	 bic r2,r1
 5188 00e4 1A71     	 strb r2,[r3,#4]
 5189              	.L373:
2619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->user_write_state = E_EEPROM_XMC1_BLOCK_WRITE_IDLE;
 5190              	 .loc 2 2621 0
 5191 00e6 BA69     	 ldr r2,[r7,#24]
 5192 00e8 BC23     	 mov r3,#188
 5193 00ea 5B00     	 lsl r3,r3,#1
 5194 00ec 0021     	 mov r1,#0
 5195 00ee D150     	 str r1,[r2,r3]
2622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5196              	 .loc 2 2623 0
 5197 00f0 0AE0     	 b .L370
 5198              	.L371:
 5199 00f2 09E0     	 b .L370
 5200              	.L378:
2624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:
2626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_
 5201              	 .loc 2 2626 0
 5202 00f4 FB1D     	 add r3,r7,#7
 5203 00f6 1978     	 ldrb r1,[r3]
 5204 00f8 3A68     	 ldr r2,[r7]
 5205 00fa FB68     	 ldr r3,[r7,#12]
 5206 00fc 081C     	 mov r0,r1
 5207 00fe 111C     	 mov r1,r2
 5208 0100 1A1C     	 mov r2,r3
 5209 0102 FFF7FEFF 	 bl E_EEPROM_XMC1_lPopulateFirstBlock
2627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5210              	 .loc 2 2627 0
 5211 0106 C046     	 mov r8,r8
 5212              	.L370:
2628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
 5213              	 .loc 2 2629 0
 5214 0108 FB69     	 ldr r3,[r7,#28]
 5215 010a 002B     	 cmp r3,#0
 5216 010c 05D1     	 bne .L374
 5217              	 .loc 2 2629 0 is_stmt 0 discriminator 1
 5218 010e BA69     	 ldr r2,[r7,#24]
 5219 0110 BC23     	 mov r3,#188
 5220 0112 5B00     	 lsl r3,r3,#1
 5221 0114 D358     	 ldr r3,[r2,r3]
 5222 0116 002B     	 cmp r3,#0
 5223 0118 98D1     	 bne .L375
 5224              	.L374:
2630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
 5225              	 .loc 2 2631 0 is_stmt 1
 5226 011a BB69     	 ldr r3,[r7,#24]
 5227 011c DA6B     	 ldr r2,[r3,#60]
2632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                    (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 5228              	 .loc 2 2632 0
 5229 011e BB69     	 ldr r3,[r7,#24]
 5230 0120 9B6C     	 ldr r3,[r3,#72]
 5231 0122 1B01     	 lsl r3,r3,#4
2631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                    (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 5232              	 .loc 2 2631 0
 5233 0124 D218     	 add r2,r2,r3
 5234 0126 BB69     	 ldr r3,[r7,#24]
 5235 0128 DA63     	 str r2,[r3,#60]
2633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status != 0U)
 5236              	 .loc 2 2633 0
 5237 012a FB69     	 ldr r3,[r7,#28]
 5238 012c 002B     	 cmp r3,#0
 5239 012e 0FD0     	 beq .L376
2634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.valid = 1U;
 5240              	 .loc 2 2635 0
 5241 0130 BA69     	 ldr r2,[r7,#24]
 5242 0132 7B69     	 ldr r3,[r7,#20]
 5243 0134 DB00     	 lsl r3,r3,#3
 5244 0136 D318     	 add r3,r2,r3
 5245 0138 1A79     	 ldrb r2,[r3,#4]
 5246 013a 0121     	 mov r1,#1
 5247 013c 0A43     	 orr r2,r1
 5248 013e 1A71     	 strb r2,[r3,#4]
2636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 0U;
 5249              	 .loc 2 2636 0
 5250 0140 BA69     	 ldr r2,[r7,#24]
 5251 0142 7B69     	 ldr r3,[r7,#20]
 5252 0144 DB00     	 lsl r3,r3,#3
 5253 0146 D318     	 add r3,r2,r3
 5254 0148 1A79     	 ldrb r2,[r3,#4]
 5255 014a 0221     	 mov r1,#2
 5256 014c 8A43     	 bic r2,r1
 5257 014e 1A71     	 strb r2,[r3,#4]
 5258              	.L376:
2637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5259              	 .loc 2 2638 0
 5260 0150 FB69     	 ldr r3,[r7,#28]
2639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5261              	 .loc 2 2639 0
 5262 0152 181C     	 mov r0,r3
 5263 0154 BD46     	 mov sp,r7
 5264 0156 08B0     	 add sp,sp,#32
 5265              	 
 5266 0158 80BD     	 pop {r7,pc}
 5267              	.L380:
 5268 015a C046     	 .align 2
 5269              	.L379:
 5270 015c 00000000 	 .word E_EEPROM_XMC1_0
 5271              	 .cfi_endproc
 5272              	.LFE93:
 5274              	 .section .text.E_EEPROM_XMC1_lHandleInvalidReq,"ax",%progbits
 5275              	 .align 2
 5276              	 .code 16
 5277              	 .thumb_func
 5279              	E_EEPROM_XMC1_lHandleInvalidReq:
 5280              	.LFB94:
2640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number - User block number / ID
2642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   user_block_index  - Index of the logical block
2643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Write one block with all data element as 0xFF to invalidate a block.
2647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t  user_block_index)
2649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5281              	 .loc 2 2649 0
 5282              	 .cfi_startproc
 5283 0000 80B5     	 push {r7,lr}
 5284              	.LCFI140:
 5285              	 .cfi_def_cfa_offset 8
 5286              	 .cfi_offset 7,-8
 5287              	 .cfi_offset 14,-4
 5288 0002 86B0     	 sub sp,sp,#24
 5289              	.LCFI141:
 5290              	 .cfi_def_cfa_offset 32
 5291 0004 00AF     	 add r7,sp,#0
 5292              	.LCFI142:
 5293              	 .cfi_def_cfa_register 7
 5294 0006 021C     	 mov r2,r0
 5295 0008 3960     	 str r1,[r7]
 5296 000a FB1D     	 add r3,r7,#7
 5297 000c 1A70     	 strb r2,[r3]
2650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_byte_count;
2652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* read_write_buffer_ptr;
2653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5298              	 .loc 2 2655 0
 5299 000e 264B     	 ldr r3,.L387
 5300 0010 5B68     	 ldr r3,[r3,#4]
 5301 0012 3B61     	 str r3,[r7,#16]
2656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5302              	 .loc 2 2656 0
 5303 0014 3B69     	 ldr r3,[r7,#16]
 5304 0016 4C33     	 add r3,r3,#76
 5305 0018 FB60     	 str r3,[r7,#12]
2657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *read_write_buffer_ptr = block_number;
 5306              	 .loc 2 2657 0
 5307 001a FB68     	 ldr r3,[r7,#12]
 5308 001c FA1D     	 add r2,r7,#7
 5309 001e 1278     	 ldrb r2,[r2]
 5310 0020 1A70     	 strb r2,[r3]
2658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
 5311              	 .loc 2 2658 0
 5312 0022 FB68     	 ldr r3,[r7,#12]
 5313 0024 0133     	 add r3,r3,#1
 5314 0026 8022     	 mov r2,#128
 5315 0028 1A70     	 strb r2,[r3]
2659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;d
 5316              	 .loc 2 2661 0
 5317 002a 0223     	 mov r3,#2
 5318 002c 7B61     	 str r3,[r7,#20]
 5319 002e 07E0     	 b .L382
 5320              	.L383:
2662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5321              	 .loc 2 2663 0 discriminator 3
 5322 0030 FA68     	 ldr r2,[r7,#12]
 5323 0032 7B69     	 ldr r3,[r7,#20]
 5324 0034 D318     	 add r3,r2,r3
 5325 0036 FF22     	 mov r2,#255
 5326 0038 1A70     	 strb r2,[r3]
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 5327              	 .loc 2 2661 0 discriminator 3
 5328 003a 7B69     	 ldr r3,[r7,#20]
 5329 003c 0133     	 add r3,r3,#1
 5330 003e 7B61     	 str r3,[r7,#20]
 5331              	.L382:
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 5332              	 .loc 2 2661 0 is_stmt 0 discriminator 1
 5333 0040 7B69     	 ldr r3,[r7,#20]
 5334 0042 0F2B     	 cmp r3,#15
 5335 0044 F4D9     	 bls .L383
2664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lWriteDataBlock();
 5336              	 .loc 2 2666 0 is_stmt 1
 5337 0046 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5338 004a 031C     	 mov r3,r0
 5339 004c BB60     	 str r3,[r7,#8]
2667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 5340              	 .loc 2 2668 0
 5341 004e BB68     	 ldr r3,[r7,#8]
 5342 0050 002B     	 cmp r3,#0
 5343 0052 0ED1     	 bne .L384
2669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 1U;
 5344              	 .loc 2 2670 0
 5345 0054 3A69     	 ldr r2,[r7,#16]
 5346 0056 3B68     	 ldr r3,[r7]
 5347 0058 DB00     	 lsl r3,r3,#3
 5348 005a D318     	 add r3,r2,r3
 5349 005c 1A79     	 ldrb r2,[r3,#4]
 5350 005e 0221     	 mov r1,#2
 5351 0060 0A43     	 orr r2,r1
 5352 0062 1A71     	 strb r2,[r3,#4]
2671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
 5353              	 .loc 2 2671 0
 5354 0064 3B69     	 ldr r3,[r7,#16]
 5355 0066 D96B     	 ldr r1,[r3,#60]
 5356 0068 3B69     	 ldr r3,[r7,#16]
 5357 006a 3A68     	 ldr r2,[r7]
 5358 006c D200     	 lsl r2,r2,#3
 5359 006e D150     	 str r1,[r2,r3]
 5360 0070 07E0     	 b .L385
 5361              	.L384:
2672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 0U;
 5362              	 .loc 2 2675 0
 5363 0072 3A69     	 ldr r2,[r7,#16]
 5364 0074 3B68     	 ldr r3,[r7]
 5365 0076 DB00     	 lsl r3,r3,#3
 5366 0078 D318     	 add r3,r2,r3
 5367 007a 1A79     	 ldrb r2,[r3,#4]
 5368 007c 0221     	 mov r1,#2
 5369 007e 8A43     	 bic r2,r1
 5370 0080 1A71     	 strb r2,[r3,#4]
 5371              	.L385:
2676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_info[user_block_index].status.valid = 0U;
 5372              	 .loc 2 2678 0
 5373 0082 3A69     	 ldr r2,[r7,#16]
 5374 0084 3B68     	 ldr r3,[r7]
 5375 0086 DB00     	 lsl r3,r3,#3
 5376 0088 D318     	 add r3,r2,r3
 5377 008a 1A79     	 ldrb r2,[r3,#4]
 5378 008c 0121     	 mov r1,#1
 5379 008e 8A43     	 bic r2,r1
 5380 0090 1A71     	 strb r2,[r3,#4]
2679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->next_free_block_addr = (E_EEPROM_XMC1_FLASH_BLOCK_SIZE + (uint32_t)(data_ptr->next_free
 5381              	 .loc 2 2679 0
 5382 0092 3B69     	 ldr r3,[r7,#16]
 5383 0094 DB6B     	 ldr r3,[r3,#60]
 5384 0096 1033     	 add r3,r3,#16
 5385 0098 1A1C     	 mov r2,r3
 5386 009a 3B69     	 ldr r3,[r7,#16]
 5387 009c DA63     	 str r2,[r3,#60]
2680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5388              	 .loc 2 2681 0
 5389 009e BB68     	 ldr r3,[r7,#8]
2682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5390              	 .loc 2 2682 0
 5391 00a0 181C     	 mov r0,r3
 5392 00a2 BD46     	 mov sp,r7
 5393 00a4 06B0     	 add sp,sp,#24
 5394              	 
 5395 00a6 80BD     	 pop {r7,pc}
 5396              	.L388:
 5397              	 .align 2
 5398              	.L387:
 5399 00a8 00000000 	 .word E_EEPROM_XMC1_0
 5400              	 .cfi_endproc
 5401              	.LFE94:
 5403              	 .section .text.E_EEPROM_XMC1_lPopulateFirstBlock,"ax",%progbits
 5404              	 .align 2
 5405              	 .code 16
 5406              	 .thumb_func
 5408              	E_EEPROM_XMC1_lPopulateFirstBlock:
 5409              	.LFB95:
2683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Data buffer address
2687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             block_size - Length of data to be read
2688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
2690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Populates the first block with data elements starting from the passed data buff
2692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number,
2694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint8_t* user_data_buffer_ptr,
2695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint32_t block_size)
2696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5410              	 .loc 2 2696 0
 5411              	 .cfi_startproc
 5412 0000 80B5     	 push {r7,lr}
 5413              	.LCFI143:
 5414              	 .cfi_def_cfa_offset 8
 5415              	 .cfi_offset 7,-8
 5416              	 .cfi_offset 14,-4
 5417 0002 8AB0     	 sub sp,sp,#40
 5418              	.LCFI144:
 5419              	 .cfi_def_cfa_offset 48
 5420 0004 00AF     	 add r7,sp,#0
 5421              	.LCFI145:
 5422              	 .cfi_def_cfa_register 7
 5423 0006 B960     	 str r1,[r7,#8]
 5424 0008 7A60     	 str r2,[r7,#4]
 5425 000a 0F23     	 mov r3,#15
 5426 000c FB18     	 add r3,r7,r3
 5427 000e 021C     	 add r2,r0,#0
 5428 0010 1A70     	 strb r2,[r3]
2697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_bit;
2698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_buffer;
2699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_byte_count;
2700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* read_write_buffer_ptr;
2701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5429              	 .loc 2 2703 0
 5430 0012 2A4B     	 ldr r3,.L394
 5431 0014 5B68     	 ldr r3,[r3,#4]
 5432 0016 3B62     	 str r3,[r7,#32]
2704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5433              	 .loc 2 2704 0
 5434 0018 3B6A     	 ldr r3,[r7,#32]
 5435 001a 4C33     	 add r3,r3,#76
 5436 001c FB61     	 str r3,[r7,#28]
2705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_state = E_EEPROM_XMC1_NEXT_BLOCK_WRITE;
 5437              	 .loc 2 2705 0
 5438 001e 3A6A     	 ldr r2,[r7,#32]
 5439 0020 BC23     	 mov r3,#188
 5440 0022 5B00     	 lsl r3,r3,#1
 5441 0024 0221     	 mov r1,#2
 5442 0026 D150     	 str r1,[r2,r3]
2706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
2708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the dat
2709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,user_data_buffer_ptr,block_size);
2710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
2711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_bit = E_EEPROM_XMC1_CRC_BIT;
2712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #else
2713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
 5443              	 .loc 2 2713 0
 5444 0028 254B     	 ldr r3,.L394+4
 5445 002a BB61     	 str r3,[r7,#24]
2714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_bit = 0U;
 5446              	 .loc 2 2714 0
 5447 002c 0023     	 mov r3,#0
 5448 002e 7B61     	 str r3,[r7,#20]
2715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
2716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for d
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
 5449              	 .loc 2 2718 0
 5450 0030 0F23     	 mov r3,#15
 5451 0032 FB18     	 add r3,r7,r3
 5452 0034 1A78     	 ldrb r2,[r3]
2719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5453              	 .loc 2 2719 0
 5454 0036 7B69     	 ldr r3,[r7,#20]
 5455 0038 C021     	 mov r1,#192
 5456 003a 0B43     	 orr r3,r1
 5457 003c 1B02     	 lsl r3,r3,#8
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5458              	 .loc 2 2718 0
 5459 003e 1A43     	 orr r2,r3
2720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
2721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT
 5460              	 .loc 2 2721 0
 5461 0040 BB69     	 ldr r3,[r7,#24]
 5462 0042 1B04     	 lsl r3,r3,#16
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5463              	 .loc 2 2718 0
 5464 0044 1A43     	 orr r2,r3
 5465 0046 FB69     	 ldr r3,[r7,#28]
 5466 0048 1A60     	 str r2,[r3]
2722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_byte_count = E_EEPROM_XMC1_FOUR_BYTES;
 5467              	 .loc 2 2722 0
 5468 004a 0423     	 mov r3,#4
 5469 004c 7B62     	 str r3,[r7,#36]
 5470              	.L392:
2723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Add data to the write buffer from the user specified pointer */
2724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->user_write_bytes_count < block_size  )
 5471              	 .loc 2 2726 0
 5472 004e 3A6A     	 ldr r2,[r7,#32]
 5473 0050 B023     	 mov r3,#176
 5474 0052 5B00     	 lsl r3,r3,#1
 5475 0054 D258     	 ldr r2,[r2,r3]
 5476 0056 7B68     	 ldr r3,[r7,#4]
 5477 0058 9A42     	 cmp r2,r3
 5478 005a 14D2     	 bcs .L390
2727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_by
 5479              	 .loc 2 2728 0
 5480 005c FA69     	 ldr r2,[r7,#28]
 5481 005e 7B6A     	 ldr r3,[r7,#36]
 5482 0060 D318     	 add r3,r2,r3
 5483 0062 396A     	 ldr r1,[r7,#32]
 5484 0064 B022     	 mov r2,#176
 5485 0066 5200     	 lsl r2,r2,#1
 5486 0068 8A58     	 ldr r2,[r1,r2]
 5487 006a B968     	 ldr r1,[r7,#8]
 5488 006c 8A18     	 add r2,r1,r2
 5489 006e 1278     	 ldrb r2,[r2]
 5490 0070 1A70     	 strb r2,[r3]
2729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        (data_ptr->user_write_bytes_count)++;
 5491              	 .loc 2 2729 0
 5492 0072 3A6A     	 ldr r2,[r7,#32]
 5493 0074 B023     	 mov r3,#176
 5494 0076 5B00     	 lsl r3,r3,#1
 5495 0078 D358     	 ldr r3,[r2,r3]
 5496 007a 591C     	 add r1,r3,#1
 5497 007c 3A6A     	 ldr r2,[r7,#32]
 5498 007e B023     	 mov r3,#176
 5499 0080 5B00     	 lsl r3,r3,#1
 5500 0082 D150     	 str r1,[r2,r3]
 5501 0084 04E0     	 b .L391
 5502              	.L390:
2730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5503              	 .loc 2 2733 0
 5504 0086 FA69     	 ldr r2,[r7,#28]
 5505 0088 7B6A     	 ldr r3,[r7,#36]
 5506 008a D318     	 add r3,r2,r3
 5507 008c FF22     	 mov r2,#255
 5508 008e 1A70     	 strb r2,[r3]
 5509              	.L391:
2734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_byte_count++;
 5510              	 .loc 2 2735 0
 5511 0090 7B6A     	 ldr r3,[r7,#36]
 5512 0092 0133     	 add r3,r3,#1
 5513 0094 7B62     	 str r3,[r7,#36]
2736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE); /* Check for block size overflow*/
 5514              	 .loc 2 2737 0
 5515 0096 7B6A     	 ldr r3,[r7,#36]
 5516 0098 102B     	 cmp r3,#16
 5517 009a D8D1     	 bne .L392
2738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->user_write_bytes_count >= block_size)
 5518              	 .loc 2 2739 0
 5519 009c 3A6A     	 ldr r2,[r7,#32]
 5520 009e B023     	 mov r3,#176
 5521 00a0 5B00     	 lsl r3,r3,#1
 5522 00a2 D258     	 ldr r2,[r2,r3]
 5523 00a4 7B68     	 ldr r3,[r7,#4]
 5524 00a6 9A42     	 cmp r2,r3
 5525 00a8 04D3     	 bcc .L389
2740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5526              	 .loc 2 2741 0
 5527 00aa 3A6A     	 ldr r2,[r7,#32]
 5528 00ac BC23     	 mov r3,#188
 5529 00ae 5B00     	 lsl r3,r3,#1
 5530 00b0 0321     	 mov r1,#3
 5531 00b2 D150     	 str r1,[r2,r3]
 5532              	.L389:
2742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5533              	 .loc 2 2743 0
 5534 00b4 BD46     	 mov sp,r7
 5535 00b6 0AB0     	 add sp,sp,#40
 5536              	 
 5537 00b8 80BD     	 pop {r7,pc}
 5538              	.L395:
 5539 00ba C046     	 .align 2
 5540              	.L394:
 5541 00bc 00000000 	 .word E_EEPROM_XMC1_0
 5542 00c0 0000A5A5 	 .word -1515913216
 5543              	 .cfi_endproc
 5544              	.LFE95:
 5546              	 .section .text.E_EEPROM_XMC1_lPopulateNextBlock,"ax",%progbits
 5547              	 .align 2
 5548              	 .code 16
 5549              	 .thumb_func
 5551              	E_EEPROM_XMC1_lPopulateNextBlock:
 5552              	.LFB96:
2744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Data buffer address
2748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             block_size - Length of data to be read
2749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
2751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Populates the successive blocks with data elements starting from the passed dat
2753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateNextBlock( uint8_t block_number ,
2755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint8_t*  const user_data_buffer_ptr ,
2756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint32_t block_size)
2757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5553              	 .loc 2 2757 0
 5554              	 .cfi_startproc
 5555 0000 80B5     	 push {r7,lr}
 5556              	.LCFI146:
 5557              	 .cfi_def_cfa_offset 8
 5558              	 .cfi_offset 7,-8
 5559              	 .cfi_offset 14,-4
 5560 0002 88B0     	 sub sp,sp,#32
 5561              	.LCFI147:
 5562              	 .cfi_def_cfa_offset 40
 5563 0004 00AF     	 add r7,sp,#0
 5564              	.LCFI148:
 5565              	 .cfi_def_cfa_register 7
 5566 0006 B960     	 str r1,[r7,#8]
 5567 0008 7A60     	 str r2,[r7,#4]
 5568 000a 0F23     	 mov r3,#15
 5569 000c FB18     	 add r3,r7,r3
 5570 000e 021C     	 add r2,r0,#0
 5571 0010 1A70     	 strb r2,[r3]
2758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  data_byte_count;
2759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t*  read_write_buffer_ptr;
2760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5572              	 .loc 2 2761 0
 5573 0012 264B     	 ldr r3,.L401
 5574 0014 5B68     	 ldr r3,[r3,#4]
 5575 0016 BB61     	 str r3,[r7,#24]
2762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5576              	 .loc 2 2763 0
 5577 0018 BB69     	 ldr r3,[r7,#24]
 5578 001a 4C33     	 add r3,r3,#76
 5579 001c 7B61     	 str r3,[r7,#20]
2764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr) = block_number;
 5580              	 .loc 2 2764 0
 5581 001e 7B69     	 ldr r3,[r7,#20]
 5582 0020 0F22     	 mov r2,#15
 5583 0022 BA18     	 add r2,r7,r2
 5584 0024 1278     	 ldrb r2,[r2]
 5585 0026 1A70     	 strb r2,[r3]
2765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr + 1U) = E_EEPROM_XMC1_VALID_BIT;
 5586              	 .loc 2 2765 0
 5587 0028 7B69     	 ldr r3,[r7,#20]
 5588 002a 0133     	 add r3,r3,#1
 5589 002c 4022     	 mov r2,#64
 5590 002e 1A70     	 strb r2,[r3]
2766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_byte_count = E_EEPROM_XMC1_TWO_BYTES;
 5591              	 .loc 2 2766 0
 5592 0030 0223     	 mov r3,#2
 5593 0032 FB61     	 str r3,[r7,#28]
 5594              	.L399:
2767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Add data to the write buffer from the user specified pointer */
2769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->user_write_bytes_count < block_size )
 5595              	 .loc 2 2771 0
 5596 0034 BA69     	 ldr r2,[r7,#24]
 5597 0036 B023     	 mov r3,#176
 5598 0038 5B00     	 lsl r3,r3,#1
 5599 003a D258     	 ldr r2,[r2,r3]
 5600 003c 7B68     	 ldr r3,[r7,#4]
 5601 003e 9A42     	 cmp r2,r3
 5602 0040 14D2     	 bcs .L397
2772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_by
 5603              	 .loc 2 2773 0
 5604 0042 7A69     	 ldr r2,[r7,#20]
 5605 0044 FB69     	 ldr r3,[r7,#28]
 5606 0046 D318     	 add r3,r2,r3
 5607 0048 B969     	 ldr r1,[r7,#24]
 5608 004a B022     	 mov r2,#176
 5609 004c 5200     	 lsl r2,r2,#1
 5610 004e 8A58     	 ldr r2,[r1,r2]
 5611 0050 B968     	 ldr r1,[r7,#8]
 5612 0052 8A18     	 add r2,r1,r2
 5613 0054 1278     	 ldrb r2,[r2]
 5614 0056 1A70     	 strb r2,[r3]
2774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->user_write_bytes_count)++;
 5615              	 .loc 2 2774 0
 5616 0058 BA69     	 ldr r2,[r7,#24]
 5617 005a B023     	 mov r3,#176
 5618 005c 5B00     	 lsl r3,r3,#1
 5619 005e D358     	 ldr r3,[r2,r3]
 5620 0060 591C     	 add r1,r3,#1
 5621 0062 BA69     	 ldr r2,[r7,#24]
 5622 0064 B023     	 mov r3,#176
 5623 0066 5B00     	 lsl r3,r3,#1
 5624 0068 D150     	 str r1,[r2,r3]
 5625 006a 09E0     	 b .L398
 5626              	.L397:
2775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5627              	 .loc 2 2778 0
 5628 006c 7A69     	 ldr r2,[r7,#20]
 5629 006e FB69     	 ldr r3,[r7,#28]
 5630 0070 D318     	 add r3,r2,r3
 5631 0072 FF22     	 mov r2,#255
 5632 0074 1A70     	 strb r2,[r3]
2779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5633              	 .loc 2 2779 0
 5634 0076 BA69     	 ldr r2,[r7,#24]
 5635 0078 BC23     	 mov r3,#188
 5636 007a 5B00     	 lsl r3,r3,#1
 5637 007c 0321     	 mov r1,#3
 5638 007e D150     	 str r1,[r2,r3]
 5639              	.L398:
2780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_byte_count++;
 5640              	 .loc 2 2781 0
 5641 0080 FB69     	 ldr r3,[r7,#28]
 5642 0082 0133     	 add r3,r3,#1
 5643 0084 FB61     	 str r3,[r7,#28]
2782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
 5644              	 .loc 2 2783 0
 5645 0086 FB69     	 ldr r3,[r7,#28]
 5646 0088 102B     	 cmp r3,#16
 5647 008a D3D1     	 bne .L399
2784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->user_write_bytes_count >= block_size)
 5648              	 .loc 2 2785 0
 5649 008c BA69     	 ldr r2,[r7,#24]
 5650 008e B023     	 mov r3,#176
 5651 0090 5B00     	 lsl r3,r3,#1
 5652 0092 D258     	 ldr r2,[r2,r3]
 5653 0094 7B68     	 ldr r3,[r7,#4]
 5654 0096 9A42     	 cmp r2,r3
 5655 0098 04D3     	 bcc .L396
2786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5656              	 .loc 2 2787 0
 5657 009a BA69     	 ldr r2,[r7,#24]
 5658 009c BC23     	 mov r3,#188
 5659 009e 5B00     	 lsl r3,r3,#1
 5660 00a0 0321     	 mov r1,#3
 5661 00a2 D150     	 str r1,[r2,r3]
 5662              	.L396:
2788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5663              	 .loc 2 2789 0
 5664 00a4 BD46     	 mov sp,r7
 5665 00a6 08B0     	 add sp,sp,#32
 5666              	 
 5667 00a8 80BD     	 pop {r7,pc}
 5668              	.L402:
 5669 00aa C046     	 .align 2
 5670              	.L401:
 5671 00ac 00000000 	 .word E_EEPROM_XMC1_0
 5672              	 .cfi_endproc
 5673              	.LFE96:
 5675              	 .section .text.E_EEPROM_XMC1_lWriteDataBlock,"ax",%progbits
 5676              	 .align 2
 5677              	 .code 16
 5678              	 .thumb_func
 5680              	E_EEPROM_XMC1_lWriteDataBlock:
 5681              	.LFB97:
2790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t - NVM_STATUS register value after read operation
2795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Writes single data block into flash
2797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void)
2799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5682              	 .loc 2 2799 0
 5683              	 .cfi_startproc
 5684 0000 80B5     	 push {r7,lr}
 5685              	.LCFI149:
 5686              	 .cfi_def_cfa_offset 8
 5687              	 .cfi_offset 7,-8
 5688              	 .cfi_offset 14,-4
 5689 0002 84B0     	 sub sp,sp,#16
 5690              	.LCFI150:
 5691              	 .cfi_def_cfa_offset 24
 5692 0004 00AF     	 add r7,sp,#0
 5693              	.LCFI151:
 5694              	 .cfi_def_cfa_register 7
2800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t src_addr;
2802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5695              	 .loc 2 2804 0
 5696 0006 104B     	 ldr r3,.L405
 5697 0008 5B68     	 ldr r3,[r3,#4]
 5698 000a FB60     	 str r3,[r7,#12]
2805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   src_addr = (uint32_t)(data_ptr->next_free_block_addr +
 5699              	 .loc 2 2806 0
 5700 000c FB68     	 ldr r3,[r7,#12]
 5701 000e DA6B     	 ldr r2,[r3,#60]
2807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****              (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
 5702              	 .loc 2 2807 0
 5703 0010 FB68     	 ldr r3,[r7,#12]
 5704 0012 9B6C     	 ldr r3,[r3,#72]
 5705 0014 1B01     	 lsl r3,r3,#4
2806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****              (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
 5706              	 .loc 2 2806 0
 5707 0016 D318     	 add r3,r2,r3
 5708 0018 BB60     	 str r3,[r7,#8]
2808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->written_block_counter)++;
 5709              	 .loc 2 2808 0
 5710 001a FB68     	 ldr r3,[r7,#12]
 5711 001c 9B6C     	 ldr r3,[r3,#72]
 5712 001e 5A1C     	 add r2,r3,#1
 5713 0020 FB68     	 ldr r3,[r7,#12]
 5714 0022 9A64     	 str r2,[r3,#72]
2809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 5715              	 .loc 2 2810 0
 5716 0024 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lWriteSingleBlock(src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
 5717              	 .loc 2 2811 0
 5718 0028 FB68     	 ldr r3,[r7,#12]
 5719 002a 4C33     	 add r3,r3,#76
 5720 002c BA68     	 ldr r2,[r7,#8]
 5721 002e 101C     	 mov r0,r2
 5722 0030 191C     	 mov r1,r3
 5723 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSingleBlock
2812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 5724              	 .loc 2 2812 0
 5725 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 5726 003a 031C     	 mov r3,r0
 5727 003c 7B60     	 str r3,[r7,#4]
2813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5728              	 .loc 2 2814 0
 5729 003e 7B68     	 ldr r3,[r7,#4]
2815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5730              	 .loc 2 2815 0
 5731 0040 181C     	 mov r0,r3
 5732 0042 BD46     	 mov sp,r7
 5733 0044 04B0     	 add sp,sp,#16
 5734              	 
 5735 0046 80BD     	 pop {r7,pc}
 5736              	.L406:
 5737              	 .align 2
 5738              	.L405:
 5739 0048 00000000 	 .word E_EEPROM_XMC1_0
 5740              	 .cfi_endproc
 5741              	.LFE97:
 5743              	 .section .text.E_EEPROM_XMC1_lReadBlockContents,"ax",%progbits
 5744              	 .align 2
 5745              	 .code 16
 5746              	 .thumb_func
 5748              	E_EEPROM_XMC1_lReadBlockContents:
 5749              	.LFB98:
2816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : data_buffer_ptr - Data buffer address
2820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length - Length of data to be read
2821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset - Offset from which the read shall start
2822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - NVM_STATUS register value after read operation
2824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Read data bytes starting from specified address (data_buffer_ptr + offset).
2826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   Read number of bytes as specified in the length parameter.
2827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *const data_buffer_ptr, uint32_t length, u
2829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5750              	 .loc 2 2829 0
 5751              	 .cfi_startproc
 5752 0000 80B5     	 push {r7,lr}
 5753              	.LCFI152:
 5754              	 .cfi_def_cfa_offset 8
 5755              	 .cfi_offset 7,-8
 5756              	 .cfi_offset 14,-4
 5757 0002 8CB0     	 sub sp,sp,#48
 5758              	.LCFI153:
 5759              	 .cfi_def_cfa_offset 56
 5760 0004 00AF     	 add r7,sp,#0
 5761              	.LCFI154:
 5762              	 .cfi_def_cfa_register 7
 5763 0006 F860     	 str r0,[r7,#12]
 5764 0008 B960     	 str r1,[r7,#8]
 5765 000a 7A60     	 str r2,[r7,#4]
2830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
2833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_address;
2834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_start_address;
2835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_bytes_in_curr_block;
2837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 5766              	 .loc 2 2838 0
 5767 000c 0023     	 mov r3,#0
 5768 000e FB62     	 str r3,[r7,#44]
2839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 5769              	 .loc 2 2839 0
 5770 0010 0023     	 mov r3,#0
 5771 0012 3B62     	 str r3,[r7,#32]
2840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = 0U;
 5772              	 .loc 2 2840 0
 5773 0014 0023     	 mov r3,#0
 5774 0016 BB62     	 str r3,[r7,#40]
2841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5775              	 .loc 2 2842 0
 5776 0018 364B     	 ldr r3,.L419
 5777 001a 5B68     	 ldr r3,[r3,#4]
 5778 001c FB61     	 str r3,[r7,#28]
2843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_start_address = data_ptr->read_start_address;
 5779              	 .loc 2 2843 0
 5780 001e FA69     	 ldr r2,[r7,#28]
 5781 0020 BE23     	 mov r3,#190
 5782 0022 5B00     	 lsl r3,r3,#1
 5783 0024 D358     	 ldr r3,[r2,r3]
 5784 0026 BB61     	 str r3,[r7,#24]
2844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first da
 5785              	 .loc 2 2845 0
 5786 0028 7B68     	 ldr r3,[r7,#4]
 5787 002a 0B2B     	 cmp r3,#11
 5788 002c 13D9     	 bls .L408
2846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count++;                        /* If not then increment block counter*/
 5789              	 .loc 2 2847 0
 5790 002e BB6A     	 ldr r3,[r7,#40]
 5791 0030 0133     	 add r3,r3,#1
 5792 0032 BB62     	 str r3,[r7,#40]
2848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12
 5793              	 .loc 2 2848 0
 5794 0034 7B68     	 ldr r3,[r7,#4]
 5795 0036 0C3B     	 sub r3,r3,#12
 5796 0038 7B60     	 str r3,[r7,#4]
2849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fi
 5797              	 .loc 2 2849 0
 5798 003a 05E0     	 b .L409
 5799              	.L410:
2850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;                        /* If not then increment block counter*/
 5800              	 .loc 2 2851 0
 5801 003c BB6A     	 ldr r3,[r7,#40]
 5802 003e 0133     	 add r3,r3,#1
 5803 0040 BB62     	 str r3,[r7,#40]
2852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14
 5804              	 .loc 2 2852 0
 5805 0042 7B68     	 ldr r3,[r7,#4]
 5806 0044 0E3B     	 sub r3,r3,#14
 5807 0046 7B60     	 str r3,[r7,#4]
 5808              	.L409:
2849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fi
 5809              	 .loc 2 2849 0
 5810 0048 7B68     	 ldr r3,[r7,#4]
 5811 004a 0D2B     	 cmp r3,#13
 5812 004c F6D8     	 bhi .L410
2853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset += E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;
 5813              	 .loc 2 2854 0
 5814 004e 7B68     	 ldr r3,[r7,#4]
 5815 0050 0233     	 add r3,r3,#2
 5816 0052 7B60     	 str r3,[r7,#4]
 5817 0054 02E0     	 b .L411
 5818              	.L408:
2855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset += E_EEPROM_XMC1_BLOCK1_DATA_OFFSET;
 5819              	 .loc 2 2858 0
 5820 0056 7B68     	 ldr r3,[r7,#4]
 5821 0058 0433     	 add r3,r3,#4
 5822 005a 7B60     	 str r3,[r7,#4]
 5823              	.L411:
2859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Remaining bytes in the block where Read offset is pointing*/
2861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_bytes_in_curr_block = E_EEPROM_XMC1_FLASH_BLOCK_SIZE - offset;
 5824              	 .loc 2 2861 0
 5825 005c 7B68     	 ldr r3,[r7,#4]
 5826 005e 1022     	 mov r2,#16
 5827 0060 D31A     	 sub r3,r2,r3
 5828 0062 7B62     	 str r3,[r7,#36]
 5829              	.L417:
2862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Calculate the Flash address of the block to be read*/
2866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     flash_address = block_start_address + ((uint32_t)block_count * E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
 5830              	 .loc 2 2866 0
 5831 0064 BB6A     	 ldr r3,[r7,#40]
 5832 0066 1A01     	 lsl r2,r3,#4
 5833 0068 BB69     	 ldr r3,[r7,#24]
 5834 006a D318     	 add r3,r2,r3
 5835 006c 7B61     	 str r3,[r7,#20]
2867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 5836              	 .loc 2 2868 0
 5837 006e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lReadSingleBlock(flash_address,(uint32_t*)(void*)data_ptr->read_write_buffer);
 5838              	 .loc 2 2869 0
 5839 0072 FB69     	 ldr r3,[r7,#28]
 5840 0074 4C33     	 add r3,r3,#76
 5841 0076 7A69     	 ldr r2,[r7,#20]
 5842 0078 101C     	 mov r0,r2
 5843 007a 191C     	 mov r1,r3
 5844 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGetFlashStatus();
 5845              	 .loc 2 2870 0
 5846 0080 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 5847 0084 031C     	 mov r3,r0
 5848 0086 3B62     	 str r3,[r7,#32]
2871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status != 0U)
 5849              	 .loc 2 2872 0
 5850 0088 3B6A     	 ldr r3,[r7,#32]
 5851 008a 002B     	 cmp r3,#0
 5852 008c 00D0     	 beq .L412
2873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5853              	 .loc 2 2874 0
 5854 008e 2BE0     	 b .L413
 5855              	.L412:
2875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Extract the data read from flash byte by byte and load into the user buffer*/
2877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     do{
2878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(data_buffer_ptr + indx) = *(data_ptr->read_write_buffer + offset);
 5856              	 .loc 2 2879 0 discriminator 2
 5857 0090 FA68     	 ldr r2,[r7,#12]
 5858 0092 FB6A     	 ldr r3,[r7,#44]
 5859 0094 D318     	 add r3,r2,r3
 5860 0096 F969     	 ldr r1,[r7,#28]
 5861 0098 4820     	 mov r0,#72
 5862 009a 7A68     	 ldr r2,[r7,#4]
 5863 009c 8A18     	 add r2,r1,r2
 5864 009e 1218     	 add r2,r2,r0
 5865 00a0 1279     	 ldrb r2,[r2,#4]
 5866 00a2 1A70     	 strb r2,[r3]
2880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       indx++;
 5867              	 .loc 2 2880 0 discriminator 2
 5868 00a4 FB6A     	 ldr r3,[r7,#44]
 5869 00a6 0133     	 add r3,r3,#1
 5870 00a8 FB62     	 str r3,[r7,#44]
2881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       offset++;
 5871              	 .loc 2 2881 0 discriminator 2
 5872 00aa 7B68     	 ldr r3,[r7,#4]
 5873 00ac 0133     	 add r3,r3,#1
 5874 00ae 7B60     	 str r3,[r7,#4]
2882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       length--;
 5875              	 .loc 2 2882 0 discriminator 2
 5876 00b0 BB68     	 ldr r3,[r7,#8]
 5877 00b2 013B     	 sub r3,r3,#1
 5878 00b4 BB60     	 str r3,[r7,#8]
2883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block--;
 5879              	 .loc 2 2883 0 discriminator 2
 5880 00b6 7B6A     	 ldr r3,[r7,#36]
 5881 00b8 013B     	 sub r3,r3,#1
 5882 00ba 7B62     	 str r3,[r7,#36]
2884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* check any of the length parameters reaches 0 */
2886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     } while ( (remaining_bytes_in_curr_block) && (length) );
 5883              	 .loc 2 2886 0 discriminator 2
 5884 00bc 7B6A     	 ldr r3,[r7,#36]
 5885 00be 002B     	 cmp r3,#0
 5886 00c0 02D0     	 beq .L414
 5887              	 .loc 2 2886 0 is_stmt 0 discriminator 1
 5888 00c2 BB68     	 ldr r3,[r7,#8]
 5889 00c4 002B     	 cmp r3,#0
 5890 00c6 E3D1     	 bne .L412
 5891              	.L414:
2887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the length of bytes pending to be read is within the range of available bytes in th
2889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (length <= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
 5892              	 .loc 2 2889 0 is_stmt 1
 5893 00c8 BB68     	 ldr r3,[r7,#8]
 5894 00ca 0E2B     	 cmp r3,#14
 5895 00cc 02D8     	 bhi .L415
2890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Force remaining bytes in current block to length remaining */
2892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block = length;
 5896              	 .loc 2 2892 0
 5897 00ce BB68     	 ldr r3,[r7,#8]
 5898 00d0 7B62     	 str r3,[r7,#36]
 5899 00d2 01E0     	 b .L416
 5900              	.L415:
2893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Force remaining bytes to next block size(14)*/
2897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block = E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
 5901              	 .loc 2 2897 0
 5902 00d4 0E23     	 mov r3,#14
 5903 00d6 7B62     	 str r3,[r7,#36]
 5904              	.L416:
2898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset = E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;     /* Shift offset by 2 counts to avoid next block 
 5905              	 .loc 2 2900 0
 5906 00d8 0223     	 mov r3,#2
 5907 00da 7B60     	 str r3,[r7,#4]
2901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count++;                        /* Increment the block count to read next block */
 5908              	 .loc 2 2901 0
 5909 00dc BB6A     	 ldr r3,[r7,#40]
 5910 00de 0133     	 add r3,r3,#1
 5911 00e0 BB62     	 str r3,[r7,#40]
2902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (length != 0U);
 5912              	 .loc 2 2903 0
 5913 00e2 BB68     	 ldr r3,[r7,#8]
 5914 00e4 002B     	 cmp r3,#0
 5915 00e6 BDD1     	 bne .L417
 5916              	.L413:
2904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5917              	 .loc 2 2905 0
 5918 00e8 3B6A     	 ldr r3,[r7,#32]
2906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5919              	 .loc 2 2906 0
 5920 00ea 181C     	 mov r0,r3
 5921 00ec BD46     	 mov sp,r7
 5922 00ee 0CB0     	 add sp,sp,#48
 5923              	 
 5924 00f0 80BD     	 pop {r7,pc}
 5925              	.L420:
 5926 00f2 C046     	 .align 2
 5927              	.L419:
 5928 00f4 00000000 	 .word E_EEPROM_XMC1_0
 5929              	 .cfi_endproc
 5930              	.LFE98:
 5932              	 .section .text.E_EEPROM_XMC1_lWriteSingleBlock,"ax",%progbits
 5933              	 .align 2
 5934              	 .code 16
 5935              	 .thumb_func
 5937              	E_EEPROM_XMC1_lWriteSingleBlock:
 5938              	.LFB99:
2907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
2909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   block_size    - size in bytes of logical block
2913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS : CRC verification succeeded
2915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   E_EEPROM_XMC1_OPERATION_STATUS_CRC_FAILED : CRC verification failed
2916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Reads 16 bit CRC from FLASH block header and verify with the calculated CRC va
2918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_lReadBlockCrcStatus( uint8_t block_number,
2920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                            uint8_t *const data_buff
2921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                            uint32_t block_size)
2922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
2923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_buffer;
2924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_index;
2925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_read_from_flash;
2926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
2928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
2930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
2931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS;
2932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
2933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
2936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read the CRC 16 bit data from flash for the particular block */
2938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   crc_read_from_flash = E_EEPROM_XMC1_lReadSingleWord((uint32_t)(data_ptr->block_info[block_index].
2939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If CRC is enabled for the block, calculate CRC else use the 16 bit dummy CRC */
2941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->block_info[block_index].status.crc == 1U)
2942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the dat
2944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,data_buffer_ptr,block_size);
2945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
2946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check the validity of CRC for the particular block */
2947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (crc_buffer != (crc_read_from_flash >> E_EEPROM_XMC1_CRC_SHIFT))
2948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_CRC_FAILED;
2950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check the availability of CRC for the particular block */
2955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN;
2956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return ((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
2959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
2960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
2961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
2964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
2965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash block(16 bytes) write operation
2969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data)
2971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5939              	 .loc 2 2971 0
 5940              	 .cfi_startproc
 5941 0000 80B5     	 push {r7,lr}
 5942              	.LCFI155:
 5943              	 .cfi_def_cfa_offset 8
 5944              	 .cfi_offset 7,-8
 5945              	 .cfi_offset 14,-4
 5946 0002 82B0     	 sub sp,sp,#8
 5947              	.LCFI156:
 5948              	 .cfi_def_cfa_offset 16
 5949 0004 00AF     	 add r7,sp,#0
 5950              	.LCFI157:
 5951              	 .cfi_def_cfa_register 7
 5952 0006 7860     	 str r0,[r7,#4]
 5953 0008 3960     	 str r1,[r7]
2972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
2973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_writeblock == 1U)
2974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(address,data);
2976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
2979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_WriteBlocks( (uint32_t*)address, (uint32_t*)data , 1U , 1U);
 5954              	 .loc 2 2980 0
 5955 000a 7A68     	 ldr r2,[r7,#4]
 5956 000c 3B68     	 ldr r3,[r7]
 5957 000e 101C     	 mov r0,r2
 5958 0010 191C     	 mov r1,r3
 5959 0012 0122     	 mov r2,#1
 5960 0014 0123     	 mov r3,#1
 5961 0016 FFF7FEFF 	 bl XMC_FLASH_WriteBlocks
2981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5962              	 .loc 2 2982 0
 5963 001a BD46     	 mov sp,r7
 5964 001c 02B0     	 add sp,sp,#8
 5965              	 
 5966 001e 80BD     	 pop {r7,pc}
 5967              	 .cfi_endproc
 5968              	.LFE99:
 5970              	 .section .text.E_EEPROM_XMC1_lReadSingleBlock,"ax",%progbits
 5971              	 .align 2
 5972              	 .code 16
 5973              	 .thumb_func
 5975              	E_EEPROM_XMC1_lReadSingleBlock:
 5976              	.LFB100:
2983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
2986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
2987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash block(16 bytes) read operation
2991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data)
2993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5977              	 .loc 2 2993 0
 5978              	 .cfi_startproc
 5979 0000 80B5     	 push {r7,lr}
 5980              	.LCFI158:
 5981              	 .cfi_def_cfa_offset 8
 5982              	 .cfi_offset 7,-8
 5983              	 .cfi_offset 14,-4
 5984 0002 82B0     	 sub sp,sp,#8
 5985              	.LCFI159:
 5986              	 .cfi_def_cfa_offset 16
 5987 0004 00AF     	 add r7,sp,#0
 5988              	.LCFI160:
 5989              	 .cfi_def_cfa_register 7
 5990 0006 7860     	 str r0,[r7,#4]
 5991 0008 3960     	 str r1,[r7]
2994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
2995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_readblock == 1U)
2996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(address,data);
2998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ReadBlocks( (uint32_t*)address , (uint32_t*)data , 1U);
 5992              	 .loc 2 3002 0
 5993 000a 7A68     	 ldr r2,[r7,#4]
 5994 000c 3B68     	 ldr r3,[r7]
 5995 000e 101C     	 mov r0,r2
 5996 0010 191C     	 mov r1,r3
 5997 0012 0122     	 mov r2,#1
 5998 0014 FFF7FEFF 	 bl XMC_FLASH_ReadBlocks
3003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5999              	 .loc 2 3004 0
 6000 0018 BD46     	 mov sp,r7
 6001 001a 02B0     	 add sp,sp,#8
 6002              	 
 6003 001c 80BD     	 pop {r7,pc}
 6004              	 .cfi_endproc
 6005              	.LFE100:
 6007 001e C046     	 .section .text.E_EEPROM_XMC1_lWriteSinglePage,"ax",%progbits
 6008              	 .align 2
 6009              	 .code 16
 6010              	 .thumb_func
 6012              	E_EEPROM_XMC1_lWriteSinglePage:
 6013              	.LFB101:
3005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Function Name   : E_EEPROM_XMC1_lWriteSinglePage
3008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
3011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
3013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash page(256 bytes) write operation
3015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data)
3017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6014              	 .loc 2 3017 0
 6015              	 .cfi_startproc
 6016 0000 80B5     	 push {r7,lr}
 6017              	.LCFI161:
 6018              	 .cfi_def_cfa_offset 8
 6019              	 .cfi_offset 7,-8
 6020              	 .cfi_offset 14,-4
 6021 0002 82B0     	 sub sp,sp,#8
 6022              	.LCFI162:
 6023              	 .cfi_def_cfa_offset 16
 6024 0004 00AF     	 add r7,sp,#0
 6025              	.LCFI163:
 6026              	 .cfi_def_cfa_register 7
 6027 0006 7860     	 str r0,[r7,#4]
 6028 0008 3960     	 str r1,[r7]
3018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_writepage == 1U)
3020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(address,data);
3022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ProgramPage( (uint32_t*)address , (uint32_t*)data);
 6029              	 .loc 2 3026 0
 6030 000a 7A68     	 ldr r2,[r7,#4]
 6031 000c 3B68     	 ldr r3,[r7]
 6032 000e 101C     	 mov r0,r2
 6033 0010 191C     	 mov r1,r3
 6034 0012 FFF7FEFF 	 bl XMC_FLASH_ProgramPage
3027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6035              	 .loc 2 3028 0
 6036 0016 BD46     	 mov sp,r7
 6037 0018 02B0     	 add sp,sp,#8
 6038              	 
 6039 001a 80BD     	 pop {r7,pc}
 6040              	 .cfi_endproc
 6041              	.LFE101:
 6043              	 .section .text.E_EEPROM_XMC1_lEraseSinglePage,"ax",%progbits
 6044              	 .align 2
 6045              	 .code 16
 6046              	 .thumb_func
 6048              	E_EEPROM_XMC1_lEraseSinglePage:
 6049              	.LFB102:
3029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
3034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Erases single flash page(256 bytes)
3036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address)
3038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6050              	 .loc 2 3038 0
 6051              	 .cfi_startproc
 6052 0000 80B5     	 push {r7,lr}
 6053              	.LCFI164:
 6054              	 .cfi_def_cfa_offset 8
 6055              	 .cfi_offset 7,-8
 6056              	 .cfi_offset 14,-4
 6057 0002 82B0     	 sub sp,sp,#8
 6058              	.LCFI165:
 6059              	 .cfi_def_cfa_offset 16
 6060 0004 00AF     	 add r7,sp,#0
 6061              	.LCFI166:
 6062              	 .cfi_def_cfa_register 7
 6063 0006 7860     	 str r0,[r7,#4]
3039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_erasepage == 1U)
3041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(address);
3043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ErasePages( (uint32_t*)address , 1U);
 6064              	 .loc 2 3047 0
 6065 0008 7B68     	 ldr r3,[r7,#4]
 6066 000a 181C     	 mov r0,r3
 6067 000c 0121     	 mov r1,#1
 6068 000e FFF7FEFF 	 bl XMC_FLASH_ErasePages
3048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6069              	 .loc 2 3049 0
 6070 0012 BD46     	 mov sp,r7
 6071 0014 02B0     	 add sp,sp,#8
 6072              	 
 6073 0016 80BD     	 pop {r7,pc}
 6074              	 .cfi_endproc
 6075              	.LFE102:
 6077              	 .section .text.E_EEPROM_XMC1_lReadSingleWord,"ax",%progbits
 6078              	 .align 2
 6079              	 .code 16
 6080              	 .thumb_func
 6082              	E_EEPROM_XMC1_lReadSingleWord:
 6083              	.LFB103:
3050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t  - Word data read from flash address
3055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single word(4 bytes) read operation from flash
3057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadSingleWord(uint32_t const address)
3059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6084              	 .loc 2 3059 0
 6085              	 .cfi_startproc
 6086 0000 80B5     	 push {r7,lr}
 6087              	.LCFI167:
 6088              	 .cfi_def_cfa_offset 8
 6089              	 .cfi_offset 7,-8
 6090              	 .cfi_offset 14,-4
 6091 0002 84B0     	 sub sp,sp,#16
 6092              	.LCFI168:
 6093              	 .cfi_def_cfa_offset 24
 6094 0004 00AF     	 add r7,sp,#0
 6095              	.LCFI169:
 6096              	 .cfi_def_cfa_register 7
 6097 0006 7860     	 str r0,[r7,#4]
3060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_word;
3061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_readword == 1U)
3063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word = E_EEPROM_XMC1_TEST_HOOK_ReadSingleWord(address);
3065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word = XMC_FLASH_ReadWord((uint32_t*)address);
 6098              	 .loc 2 3069 0
 6099 0008 7B68     	 ldr r3,[r7,#4]
 6100 000a 181C     	 mov r0,r3
 6101 000c FFF7FEFF 	 bl XMC_FLASH_ReadWord
 6102 0010 031C     	 mov r3,r0
 6103 0012 FB60     	 str r3,[r7,#12]
3070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (read_word);
 6104              	 .loc 2 3071 0
 6105 0014 FB68     	 ldr r3,[r7,#12]
3072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6106              	 .loc 2 3072 0
 6107 0016 181C     	 mov r0,r3
 6108 0018 BD46     	 mov sp,r7
 6109 001a 04B0     	 add sp,sp,#16
 6110              	 
 6111 001c 80BD     	 pop {r7,pc}
 6112              	 .cfi_endproc
 6113              	.LFE103:
 6115 001e C046     	 .section .text.E_EEPROM_XMC1_lGetFlashStatus,"ax",%progbits
 6116              	 .align 2
 6117              	 .code 16
 6118              	 .thumb_func
 6120              	E_EEPROM_XMC1_lGetFlashStatus:
 6121              	.LFB104:
3073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
3076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t  - Flash NVM_STATUS register value
3078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Reads the flash status from hardware to check whether any error exist or not.
3080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void)
3082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6122              	 .loc 2 3082 0
 6123              	 .cfi_startproc
 6124 0000 80B5     	 push {r7,lr}
 6125              	.LCFI170:
 6126              	 .cfi_def_cfa_offset 8
 6127              	 .cfi_offset 7,-8
 6128              	 .cfi_offset 14,-4
 6129 0002 82B0     	 sub sp,sp,#8
 6130              	.LCFI171:
 6131              	 .cfi_def_cfa_offset 16
 6132 0004 00AF     	 add r7,sp,#0
 6133              	.LCFI172:
 6134              	 .cfi_def_cfa_register 7
3083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
3084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_getflashstatus == 1U)
3086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus();
3088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = XMC_FLASH_GetStatus();
 6135              	 .loc 2 3092 0
 6136 0006 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 6137 000a 031C     	 mov r3,r0
 6138 000c 7B60     	 str r3,[r7,#4]
3093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 6139              	 .loc 2 3094 0
 6140 000e 7B68     	 ldr r3,[r7,#4]
3095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6141              	 .loc 2 3095 0
 6142 0010 181C     	 mov r0,r3
 6143 0012 BD46     	 mov sp,r7
 6144 0014 02B0     	 add sp,sp,#8
 6145              	 
 6146 0016 80BD     	 pop {r7,pc}
 6147              	 .cfi_endproc
 6148              	.LFE104:
 6150              	 .text
 6151              	.Letext0:
 6152              	 .file 3 "c:\\workspaces\\4.5.0\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6153              	 .file 4 "c:\\workspaces\\4.5.0\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6154              	 .file 5 "C:/Workspaces/DAVE_WS/USB_Changer/Libraries/CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 6155              	 .file 6 "C:/Workspaces/DAVE_WS/USB_Changer/Dave/Generated/DAVE_Common.h"
 6156              	 .file 7 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.h"
 6157              	 .file 8 "C:/Workspaces/DAVE_WS/USB_Changer/Libraries/CMSIS/Include/cmsis_gcc.h"
 6158              	 .file 9 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 e_eeprom_xmc1.c
    {standard input}:18     .text.XMC_FLASH_ReadWord:00000000 $t
    {standard input}:22     .text.XMC_FLASH_ReadWord:00000000 XMC_FLASH_ReadWord
    {standard input}:52     .text.XMC_FLASH_SetHardReadLevel:00000000 $t
    {standard input}:56     .text.XMC_FLASH_SetHardReadLevel:00000000 XMC_FLASH_SetHardReadLevel
    {standard input}:104    .text.XMC_FLASH_SetHardReadLevel:0000003c $d
    {standard input}:109    .text.E_EEPROM_XMC1_GetAppVersion:00000000 $t
    {standard input}:114    .text.E_EEPROM_XMC1_GetAppVersion:00000000 E_EEPROM_XMC1_GetAppVersion
    {standard input}:180    .text.E_EEPROM_XMC1_GetAppVersion:00000058 $d
    {standard input}:186    .text.E_EEPROM_XMC1_Init:00000000 $t
    {standard input}:191    .text.E_EEPROM_XMC1_Init:00000000 E_EEPROM_XMC1_Init
    {standard input}:4300   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000000 E_EEPROM_XMC1_lReadMarkerBlocks
    {standard input}:1398   .text.E_EEPROM_XMC1_lInitGc:00000000 E_EEPROM_XMC1_lInitGc
    {standard input}:391    .text.E_EEPROM_XMC1_Write:00000000 $t
    {standard input}:396    .text.E_EEPROM_XMC1_Write:00000000 E_EEPROM_XMC1_Write
    {standard input}:4861   .text.E_EEPROM_XMC1_lLocalWrite:00000000 E_EEPROM_XMC1_lLocalWrite
    {standard input}:457    .text.E_EEPROM_XMC1_Write:00000050 $d
    {standard input}:462    .text.E_EEPROM_XMC1_InvalidateBlock:00000000 $t
    {standard input}:467    .text.E_EEPROM_XMC1_InvalidateBlock:00000000 E_EEPROM_XMC1_InvalidateBlock
    {standard input}:531    .text.E_EEPROM_XMC1_InvalidateBlock:00000054 $d
    {standard input}:536    .text.E_EEPROM_XMC1_Read:00000000 $t
    {standard input}:541    .text.E_EEPROM_XMC1_Read:00000000 E_EEPROM_XMC1_Read
    {standard input}:3996   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:00000000 E_EEPROM_XMC1_lGetUsrBlockIndex
    {standard input}:5748   .text.E_EEPROM_XMC1_lReadBlockContents:00000000 E_EEPROM_XMC1_lReadBlockContents
    {standard input}:684    .text.E_EEPROM_XMC1_Read:000000dc $d
    {standard input}:689    .text.E_EEPROM_XMC1_StartGarbageCollection:00000000 $t
    {standard input}:694    .text.E_EEPROM_XMC1_StartGarbageCollection:00000000 E_EEPROM_XMC1_StartGarbageCollection
    {standard input}:2476   .text.E_EEPROM_XMC1_lGarbageCollection:00000000 E_EEPROM_XMC1_lGarbageCollection
    {standard input}:762    .text.E_EEPROM_XMC1_StartGarbageCollection:00000054 $d
    {standard input}:767    .text.E_EEPROM_XMC1_GetStatus:00000000 $t
    {standard input}:772    .text.E_EEPROM_XMC1_GetStatus:00000000 E_EEPROM_XMC1_GetStatus
    {standard input}:834    .text.E_EEPROM_XMC1_GetStatus:00000048 $d
    {standard input}:839    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000000 $t
    {standard input}:844    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000000 E_EEPROM_XMC1_IsGarbageCollectionNeeded
    {standard input}:4082   .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:00000000 E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
    {standard input}:4146   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:00000000 E_EEPROM_XMC1_lGetFreeDFLASHBlocks
    {standard input}:916    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000064 $d
    {standard input}:921    .text.E_EEPROM_XMC1_GetPreviousData:00000000 $t
    {standard input}:926    .text.E_EEPROM_XMC1_GetPreviousData:00000000 E_EEPROM_XMC1_GetPreviousData
    {standard input}:1065   .text.E_EEPROM_XMC1_lGetPrevData:00000000 E_EEPROM_XMC1_lGetPrevData
    {standard input}:1056   .text.E_EEPROM_XMC1_GetPreviousData:000000c0 $d
    {standard input}:1061   .text.E_EEPROM_XMC1_lGetPrevData:00000000 $t
    {standard input}:1212   .text.E_EEPROM_XMC1_lSearchBlockCopy:00000000 E_EEPROM_XMC1_lSearchBlockCopy
    {standard input}:1201   .text.E_EEPROM_XMC1_lGetPrevData:000000c4 $d
    {standard input}:1208   .text.E_EEPROM_XMC1_lSearchBlockCopy:00000000 $t
    {standard input}:6082   .text.E_EEPROM_XMC1_lReadSingleWord:00000000 E_EEPROM_XMC1_lReadSingleWord
    {standard input}:6120   .text.E_EEPROM_XMC1_lGetFlashStatus:00000000 E_EEPROM_XMC1_lGetFlashStatus
    {standard input}:1389   .text.E_EEPROM_XMC1_lSearchBlockCopy:000000fc $d
    {standard input}:1394   .text.E_EEPROM_XMC1_lInitGc:00000000 $t
    {standard input}:1516   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000000 E_EEPROM_XMC1_lInitllegalStateMachine
    {standard input}:1574   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:00000000 E_EEPROM_XMC1_lInitDirtyStateMachine
    {standard input}:1705   .text.E_EEPROM_XMC1_lInitNormalStateMachine:00000000 E_EEPROM_XMC1_lInitNormalStateMachine
    {standard input}:1507   .text.E_EEPROM_XMC1_lInitGc:000000a0 $d
    {standard input}:1512   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000000 $t
    {standard input}:2115   .text.E_EEPROM_XMC1_lInitGcNormalStates:00000000 E_EEPROM_XMC1_lInitGcNormalStates
    {standard input}:1565   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000034 $d
    {standard input}:1570   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:00000000 $t
    {standard input}:2289   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000000 E_EEPROM_XMC1_lErasedDirtyStateRecovery
    {standard input}:2379   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:00000000 E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
    {standard input}:1696   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:000000a4 $d
    {standard input}:1701   .text.E_EEPROM_XMC1_lInitNormalStateMachine:00000000 $t
    {standard input}:1744   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000000 E_EEPROM_XMC1_lInitBank0NormalStateMachine
    {standard input}:1867   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000000 E_EEPROM_XMC1_lInitBank1NormalStateMachine
    {standard input}:1990   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000000 E_EEPROM_XMC1_lInitOtherNormalStateMachine
    {standard input}:1740   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000000 $t
    {standard input}:2196   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000000 E_EEPROM_XMC1_lInitGcDataCopyState
    {standard input}:1858   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000094 $d
    {standard input}:1863   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000000 $t
    {standard input}:1981   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000094 $d
    {standard input}:1986   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000000 $t
    {standard input}:2106   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000098 $d
    {standard input}:2111   .text.E_EEPROM_XMC1_lInitGcNormalStates:00000000 $t
    {standard input}:4212   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000000 E_EEPROM_XMC1_lUpdateCurrBankInfo
    {standard input}:3213   .text.E_EEPROM_XMC1_lPrepareDFlash:00000000 E_EEPROM_XMC1_lPrepareDFlash
    {standard input}:3398   .text.E_EEPROM_XMC1_lUpdateCache:00000000 E_EEPROM_XMC1_lUpdateCache
    {standard input}:2187   .text.E_EEPROM_XMC1_lInitGcNormalStates:0000005c $d
    {standard input}:2192   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000000 $t
    {standard input}:4735   .text.E_EEPROM_XMC1_lEraseBank:00000000 E_EEPROM_XMC1_lEraseBank
    {standard input}:4556   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000000 E_EEPROM_XMC1_lSetMarkerBlockBuffer
    {standard input}:4808   .text.E_EEPROM_XMC1_lGCWrite:00000000 E_EEPROM_XMC1_lGCWrite
    {standard input}:2280   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000074 $d
    {standard input}:2285   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000000 $t
    {standard input}:2370   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000070 $d
    {standard input}:2375   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:00000000 $t
    {standard input}:4617   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000000 E_EEPROM_XMC1_lSetMarkerPageBuffer
    {standard input}:6012   .text.E_EEPROM_XMC1_lWriteSinglePage:00000000 E_EEPROM_XMC1_lWriteSinglePage
    {standard input}:2467   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:0000007c $d
    {standard input}:2472   .text.E_EEPROM_XMC1_lGarbageCollection:00000000 $t
    {standard input}:2509   .rodata.E_EEPROM_XMC1_lGarbageCollection:00000000 $d
    {standard input}:2723   .text.E_EEPROM_XMC1_lHandleGcStartCopy:00000000 E_EEPROM_XMC1_lHandleGcStartCopy
    {standard input}:2880   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:00000000 E_EEPROM_XMC1_lHandleGcCopyWrite
    {standard input}:5975   .text.E_EEPROM_XMC1_lReadSingleBlock:00000000 E_EEPROM_XMC1_lReadSingleBlock
    {standard input}:3043   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000000 E_EEPROM_XMC1_lHandleGcEndOfCopy
    {standard input}:3117   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000000 E_EEPROM_XMC1_lHandleGcOtherStates
    {standard input}:2617   .text.E_EEPROM_XMC1_lHandleGcRequested:00000000 E_EEPROM_XMC1_lHandleGcRequested
    {standard input}:2607   .text.E_EEPROM_XMC1_lGarbageCollection:00000098 $d
    {standard input}:2613   .text.E_EEPROM_XMC1_lHandleGcRequested:00000000 $t
    {standard input}:2714   .text.E_EEPROM_XMC1_lHandleGcRequested:00000084 $d
    {standard input}:2719   .text.E_EEPROM_XMC1_lHandleGcStartCopy:00000000 $t
    {standard input}:2871   .text.E_EEPROM_XMC1_lHandleGcStartCopy:000000d0 $d
    {standard input}:2876   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:00000000 $t
    {standard input}:3034   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:000000e8 $d
    {standard input}:3039   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000000 $t
    {standard input}:3108   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000054 $d
    {standard input}:3113   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000000 $t
    {standard input}:3204   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000078 $d
    {standard input}:3209   .text.E_EEPROM_XMC1_lPrepareDFlash:00000000 $t
    {standard input}:3387   .text.E_EEPROM_XMC1_lPrepareDFlash:000000f4 $d
    {standard input}:3394   .text.E_EEPROM_XMC1_lUpdateCache:00000000 $t
    {standard input}:3575   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:00000000 E_EEPROM_XMC1_lCacheEmptyBlkEval
    {standard input}:3714   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000000 E_EEPROM_XMC1_lEvalBlockStatus
    {standard input}:3933   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000000 E_EEPROM_XMC1_lUpdateCacheBlockRead
    {standard input}:3564   .text.E_EEPROM_XMC1_lUpdateCache:000000ec $d
    {standard input}:3571   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:00000000 $t
    {standard input}:3705   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:000000b8 $d
    {standard input}:3710   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000000 $t
    {standard input}:3924   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000134 $d
    {standard input}:3929   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000000 $t
    {standard input}:3987   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000044 $d
    {standard input}:3992   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:00000000 $t
    {standard input}:4073   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:0000005c $d
    {standard input}:4078   .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:00000000 $t
    {standard input}:4142   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:00000000 $t
    {standard input}:4201   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:0000003c $d
    {standard input}:4208   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000000 $t
    {standard input}:4287   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000058 $d
    {standard input}:4296   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000000 $t
    {standard input}:4413   .text.E_EEPROM_XMC1_lReadVerifyMarker:00000000 E_EEPROM_XMC1_lReadVerifyMarker
    {standard input}:4404   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000088 $d
    {standard input}:4409   .text.E_EEPROM_XMC1_lReadVerifyMarker:00000000 $t
    {standard input}:4546   .text.E_EEPROM_XMC1_lReadVerifyMarker:000000b0 $d
    {standard input}:4552   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000000 $t
    {standard input}:4608   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000038 $d
    {standard input}:4613   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000000 $t
    {standard input}:4726   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000084 $d
    {standard input}:4731   .text.E_EEPROM_XMC1_lEraseBank:00000000 $t
    {standard input}:6048   .text.E_EEPROM_XMC1_lEraseSinglePage:00000000 E_EEPROM_XMC1_lEraseSinglePage
    {standard input}:4804   .text.E_EEPROM_XMC1_lGCWrite:00000000 $t
    {standard input}:5937   .text.E_EEPROM_XMC1_lWriteSingleBlock:00000000 E_EEPROM_XMC1_lWriteSingleBlock
    {standard input}:4852   .text.E_EEPROM_XMC1_lGCWrite:00000034 $d
    {standard input}:4857   .text.E_EEPROM_XMC1_lLocalWrite:00000000 $t
    {standard input}:5279   .text.E_EEPROM_XMC1_lHandleInvalidReq:00000000 E_EEPROM_XMC1_lHandleInvalidReq
    {standard input}:5041   .text.E_EEPROM_XMC1_lHandleWriteReq:00000000 E_EEPROM_XMC1_lHandleWriteReq
    {standard input}:5032   .text.E_EEPROM_XMC1_lLocalWrite:00000100 $d
    {standard input}:5037   .text.E_EEPROM_XMC1_lHandleWriteReq:00000000 $t
    {standard input}:5680   .text.E_EEPROM_XMC1_lWriteDataBlock:00000000 E_EEPROM_XMC1_lWriteDataBlock
    {standard input}:5551   .text.E_EEPROM_XMC1_lPopulateNextBlock:00000000 E_EEPROM_XMC1_lPopulateNextBlock
    {standard input}:5408   .text.E_EEPROM_XMC1_lPopulateFirstBlock:00000000 E_EEPROM_XMC1_lPopulateFirstBlock
    {standard input}:5270   .text.E_EEPROM_XMC1_lHandleWriteReq:0000015c $d
    {standard input}:5275   .text.E_EEPROM_XMC1_lHandleInvalidReq:00000000 $t
    {standard input}:5399   .text.E_EEPROM_XMC1_lHandleInvalidReq:000000a8 $d
    {standard input}:5404   .text.E_EEPROM_XMC1_lPopulateFirstBlock:00000000 $t
    {standard input}:5541   .text.E_EEPROM_XMC1_lPopulateFirstBlock:000000bc $d
    {standard input}:5547   .text.E_EEPROM_XMC1_lPopulateNextBlock:00000000 $t
    {standard input}:5671   .text.E_EEPROM_XMC1_lPopulateNextBlock:000000ac $d
    {standard input}:5676   .text.E_EEPROM_XMC1_lWriteDataBlock:00000000 $t
    {standard input}:5739   .text.E_EEPROM_XMC1_lWriteDataBlock:00000048 $d
    {standard input}:5744   .text.E_EEPROM_XMC1_lReadBlockContents:00000000 $t
    {standard input}:5928   .text.E_EEPROM_XMC1_lReadBlockContents:000000f4 $d
    {standard input}:5933   .text.E_EEPROM_XMC1_lWriteSingleBlock:00000000 $t
    {standard input}:5971   .text.E_EEPROM_XMC1_lReadSingleBlock:00000000 $t
    {standard input}:6008   .text.E_EEPROM_XMC1_lWriteSinglePage:00000000 $t
    {standard input}:6044   .text.E_EEPROM_XMC1_lEraseSinglePage:00000000 $t
    {standard input}:6078   .text.E_EEPROM_XMC1_lReadSingleWord:00000000 $t
    {standard input}:6116   .text.E_EEPROM_XMC1_lGetFlashStatus:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
E_EEPROM_XMC1_0
XMC_FLASH_ClearStatus
XMC_FLASH_WriteBlocks
XMC_FLASH_ReadBlocks
XMC_FLASH_ProgramPage
XMC_FLASH_ErasePages
XMC_FLASH_GetStatus
