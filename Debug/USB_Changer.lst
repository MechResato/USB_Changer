
USB_Changer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b64  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  10007b64  10007b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000110  2000000c  10007b64  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000404  2000011c  00000000  0000011c  2**0
                  ALLOC
  4 .data         00000120  20000520  10007c74  00008520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000198  20000640  00000524  00008640  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003ee0  0000011c  2**2
                  ALLOC
  7 .debug_aranges 00000850  00000000  00000000  00008640  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001057c  00000000  00000000  00008e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000264b  00000000  00000000  0001940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000047ab  00000000  00000000  0001ba57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002108  00000000  00000000  00020204  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005c74  00000000  00000000  0002230c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002844  00000000  00000000  00027f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000698  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000a2d  00000000  00000000  0002ae60  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	20 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10      .. ............
10001010:	00 04 01 00 00 00 00 80                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10007b64 	.word	0x10007b64
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	2000011c 	.word	0x2000011c
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10007c74 	.word	0x10007c74
	ldr	r2, =__data_start
10001074:	20000520 	.word	0x20000520
	ldr	r3, =__data_end
10001078:	20000640 	.word	0x20000640
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10007d94 	.word	0x10007d94
	ldr	r2, =__ram_code_start
10001080:	20000640 	.word	0x20000640
	ldr	r3, =__ram_code_end
10001084:	20000640 	.word	0x20000640
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000640 	.word	0x20000640
	ldr	r2, =__bss_end
1000108c:	200007d4 	.word	0x200007d4
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10004025 	.word	0x10004025
    blx  r0
#endif

    ldr  r0, =main
10001094:	100036f1 	.word	0x100036f1

10001098 <CCU40_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <CCU40_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f001 fcc4 	bl	10002a2c <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f001 fd08 	bl	10002ab8 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreClockUpdate>:
  
  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b0:	4b12      	ldr	r3, [pc, #72]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010b2:	681a      	ldr	r2, [r3, #0]
100010b4:	23ff      	movs	r3, #255	; 0xff
100010b6:	021b      	lsls	r3, r3, #8
100010b8:	4013      	ands	r3, r2
100010ba:	0a1a      	lsrs	r2, r3, #8
100010bc:	4b10      	ldr	r3, [pc, #64]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010be:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010c0:	4b0e      	ldr	r3, [pc, #56]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010c2:	681b      	ldr	r3, [r3, #0]
100010c4:	22ff      	movs	r2, #255	; 0xff
100010c6:	401a      	ands	r2, r3
100010c8:	4b0e      	ldr	r3, [pc, #56]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010ca:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
100010cc:	4b0c      	ldr	r3, [pc, #48]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	2b00      	cmp	r3, #0
100010d2:	d00e      	beq.n	100010f2 <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010d4:	4b0a      	ldr	r3, [pc, #40]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010d6:	681b      	ldr	r3, [r3, #0]
100010d8:	021a      	lsls	r2, r3, #8
100010da:	4b0a      	ldr	r3, [pc, #40]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	18d3      	adds	r3, r2, r3
100010e0:	4809      	ldr	r0, [pc, #36]	; (10001108 <SystemCoreClockUpdate+0x5c>)
100010e2:	1c19      	adds	r1, r3, #0
100010e4:	f002 fdf8 	bl	10003cd8 <__aeabi_uidiv>
100010e8:	1c03      	adds	r3, r0, #0
100010ea:	005a      	lsls	r2, r3, #1
100010ec:	4b07      	ldr	r3, [pc, #28]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010ee:	601a      	str	r2, [r3, #0]
100010f0:	e002      	b.n	100010f8 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010f2:	4b06      	ldr	r3, [pc, #24]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010f4:	4a06      	ldr	r2, [pc, #24]	; (10001110 <SystemCoreClockUpdate+0x64>)
100010f6:	601a      	str	r2, [r3, #0]
  }
}
100010f8:	46bd      	mov	sp, r7
100010fa:	bd80      	pop	{r7, pc}
100010fc:	40010300 	.word	0x40010300
10001100:	20000640 	.word	0x20000640
10001104:	20000644 	.word	0x20000644
10001108:	f4240000 	.word	0xf4240000
1000110c:	20003ffc 	.word	0x20003ffc
10001110:	01e84800 	.word	0x01e84800

10001114 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001114:	b590      	push	{r4, r7, lr}
10001116:	b085      	sub	sp, #20
10001118:	af00      	add	r7, sp, #0
1000111a:	60f8      	str	r0, [r7, #12]
1000111c:	607a      	str	r2, [r7, #4]
1000111e:	230b      	movs	r3, #11
10001120:	18fb      	adds	r3, r7, r3
10001122:	1c0a      	adds	r2, r1, #0
10001124:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001126:	230b      	movs	r3, #11
10001128:	18fb      	adds	r3, r7, r3
1000112a:	781b      	ldrb	r3, [r3, #0]
1000112c:	089b      	lsrs	r3, r3, #2
1000112e:	b2db      	uxtb	r3, r3
10001130:	1c18      	adds	r0, r3, #0
10001132:	230b      	movs	r3, #11
10001134:	18fb      	adds	r3, r7, r3
10001136:	781b      	ldrb	r3, [r3, #0]
10001138:	089b      	lsrs	r3, r3, #2
1000113a:	b2db      	uxtb	r3, r3
1000113c:	1c1a      	adds	r2, r3, #0
1000113e:	68fb      	ldr	r3, [r7, #12]
10001140:	3204      	adds	r2, #4
10001142:	0092      	lsls	r2, r2, #2
10001144:	58d3      	ldr	r3, [r2, r3]
10001146:	220b      	movs	r2, #11
10001148:	18ba      	adds	r2, r7, r2
1000114a:	7812      	ldrb	r2, [r2, #0]
1000114c:	2103      	movs	r1, #3
1000114e:	400a      	ands	r2, r1
10001150:	00d2      	lsls	r2, r2, #3
10001152:	1c11      	adds	r1, r2, #0
10001154:	22f8      	movs	r2, #248	; 0xf8
10001156:	408a      	lsls	r2, r1
10001158:	43d2      	mvns	r2, r2
1000115a:	401a      	ands	r2, r3
1000115c:	1c11      	adds	r1, r2, #0
1000115e:	68fb      	ldr	r3, [r7, #12]
10001160:	1d02      	adds	r2, r0, #4
10001162:	0092      	lsls	r2, r2, #2
10001164:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001166:	68fb      	ldr	r3, [r7, #12]
10001168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000116a:	220b      	movs	r2, #11
1000116c:	18ba      	adds	r2, r7, r2
1000116e:	7812      	ldrb	r2, [r2, #0]
10001170:	0052      	lsls	r2, r2, #1
10001172:	1c11      	adds	r1, r2, #0
10001174:	2203      	movs	r2, #3
10001176:	408a      	lsls	r2, r1
10001178:	43d2      	mvns	r2, r2
1000117a:	401a      	ands	r2, r3
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001180:	230b      	movs	r3, #11
10001182:	18fb      	adds	r3, r7, r3
10001184:	781b      	ldrb	r3, [r3, #0]
10001186:	08db      	lsrs	r3, r3, #3
10001188:	b2db      	uxtb	r3, r3
1000118a:	1c18      	adds	r0, r3, #0
1000118c:	230b      	movs	r3, #11
1000118e:	18fb      	adds	r3, r7, r3
10001190:	781b      	ldrb	r3, [r3, #0]
10001192:	08db      	lsrs	r3, r3, #3
10001194:	b2db      	uxtb	r3, r3
10001196:	1c1a      	adds	r2, r3, #0
10001198:	68fb      	ldr	r3, [r7, #12]
1000119a:	3210      	adds	r2, #16
1000119c:	0092      	lsls	r2, r2, #2
1000119e:	58d3      	ldr	r3, [r2, r3]
100011a0:	220b      	movs	r2, #11
100011a2:	18ba      	adds	r2, r7, r2
100011a4:	7812      	ldrb	r2, [r2, #0]
100011a6:	2107      	movs	r1, #7
100011a8:	400a      	ands	r2, r1
100011aa:	0092      	lsls	r2, r2, #2
100011ac:	1c11      	adds	r1, r2, #0
100011ae:	2204      	movs	r2, #4
100011b0:	408a      	lsls	r2, r1
100011b2:	43d2      	mvns	r2, r2
100011b4:	401a      	ands	r2, r3
100011b6:	1c11      	adds	r1, r2, #0
100011b8:	68fb      	ldr	r3, [r7, #12]
100011ba:	1c02      	adds	r2, r0, #0
100011bc:	3210      	adds	r2, #16
100011be:	0092      	lsls	r2, r2, #2
100011c0:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
100011c2:	230b      	movs	r3, #11
100011c4:	18fb      	adds	r3, r7, r3
100011c6:	781b      	ldrb	r3, [r3, #0]
100011c8:	08db      	lsrs	r3, r3, #3
100011ca:	b2db      	uxtb	r3, r3
100011cc:	1c18      	adds	r0, r3, #0
100011ce:	230b      	movs	r3, #11
100011d0:	18fb      	adds	r3, r7, r3
100011d2:	781b      	ldrb	r3, [r3, #0]
100011d4:	08db      	lsrs	r3, r3, #3
100011d6:	b2db      	uxtb	r3, r3
100011d8:	1c1a      	adds	r2, r3, #0
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	3210      	adds	r2, #16
100011de:	0092      	lsls	r2, r2, #2
100011e0:	58d2      	ldr	r2, [r2, r3]
100011e2:	687b      	ldr	r3, [r7, #4]
100011e4:	785b      	ldrb	r3, [r3, #1]
100011e6:	1c1c      	adds	r4, r3, #0
100011e8:	230b      	movs	r3, #11
100011ea:	18fb      	adds	r3, r7, r3
100011ec:	781b      	ldrb	r3, [r3, #0]
100011ee:	2107      	movs	r1, #7
100011f0:	400b      	ands	r3, r1
100011f2:	009b      	lsls	r3, r3, #2
100011f4:	409c      	lsls	r4, r3
100011f6:	1c23      	adds	r3, r4, #0
100011f8:	431a      	orrs	r2, r3
100011fa:	1c11      	adds	r1, r2, #0
100011fc:	68fb      	ldr	r3, [r7, #12]
100011fe:	1c02      	adds	r2, r0, #0
10001200:	3210      	adds	r2, #16
10001202:	0092      	lsls	r2, r2, #2
10001204:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001206:	68fb      	ldr	r3, [r7, #12]
10001208:	4a20      	ldr	r2, [pc, #128]	; (1000128c <XMC_GPIO_Init+0x178>)
1000120a:	4293      	cmp	r3, r2
1000120c:	d10b      	bne.n	10001226 <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
1000120e:	68fb      	ldr	r3, [r7, #12]
10001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001212:	220b      	movs	r2, #11
10001214:	18ba      	adds	r2, r7, r2
10001216:	7812      	ldrb	r2, [r2, #0]
10001218:	2101      	movs	r1, #1
1000121a:	4091      	lsls	r1, r2
1000121c:	1c0a      	adds	r2, r1, #0
1000121e:	43d2      	mvns	r2, r2
10001220:	401a      	ands	r2, r3
10001222:	68fb      	ldr	r3, [r7, #12]
10001224:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	781b      	ldrb	r3, [r3, #0]
1000122a:	b2db      	uxtb	r3, r3
1000122c:	b25b      	sxtb	r3, r3
1000122e:	2b00      	cmp	r3, #0
10001230:	da07      	bge.n	10001242 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
10001232:	687b      	ldr	r3, [r7, #4]
10001234:	685a      	ldr	r2, [r3, #4]
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	409a      	lsls	r2, r3
1000123e:	68fb      	ldr	r3, [r7, #12]
10001240:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	089b      	lsrs	r3, r3, #2
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c18      	adds	r0, r3, #0
1000124e:	230b      	movs	r3, #11
10001250:	18fb      	adds	r3, r7, r3
10001252:	781b      	ldrb	r3, [r3, #0]
10001254:	089b      	lsrs	r3, r3, #2
10001256:	b2db      	uxtb	r3, r3
10001258:	1c1a      	adds	r2, r3, #0
1000125a:	68fb      	ldr	r3, [r7, #12]
1000125c:	3204      	adds	r2, #4
1000125e:	0092      	lsls	r2, r2, #2
10001260:	58d2      	ldr	r2, [r2, r3]
10001262:	687b      	ldr	r3, [r7, #4]
10001264:	781b      	ldrb	r3, [r3, #0]
10001266:	1c1c      	adds	r4, r3, #0
10001268:	230b      	movs	r3, #11
1000126a:	18fb      	adds	r3, r7, r3
1000126c:	781b      	ldrb	r3, [r3, #0]
1000126e:	2103      	movs	r1, #3
10001270:	400b      	ands	r3, r1
10001272:	00db      	lsls	r3, r3, #3
10001274:	409c      	lsls	r4, r3
10001276:	1c23      	adds	r3, r4, #0
10001278:	431a      	orrs	r2, r3
1000127a:	1c11      	adds	r1, r2, #0
1000127c:	68fb      	ldr	r3, [r7, #12]
1000127e:	1d02      	adds	r2, r0, #4
10001280:	0092      	lsls	r2, r2, #2
10001282:	50d1      	str	r1, [r2, r3]
}
10001284:	46bd      	mov	sp, r7
10001286:	b005      	add	sp, #20
10001288:	bd90      	pop	{r4, r7, pc}
1000128a:	46c0      	nop			; (mov r8, r8)
1000128c:	40040200 	.word	0x40040200

10001290 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001290:	b580      	push	{r7, lr}
10001292:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001294:	4b02      	ldr	r3, [pc, #8]	; (100012a0 <XMC_SCU_LockProtectedBits+0x10>)
10001296:	22c3      	movs	r2, #195	; 0xc3
10001298:	625a      	str	r2, [r3, #36]	; 0x24
}
1000129a:	46bd      	mov	sp, r7
1000129c:	bd80      	pop	{r7, pc}
1000129e:	46c0      	nop			; (mov r8, r8)
100012a0:	40010000 	.word	0x40010000

100012a4 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
100012a4:	b580      	push	{r7, lr}
100012a6:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100012a8:	4b05      	ldr	r3, [pc, #20]	; (100012c0 <XMC_SCU_UnlockProtectedBits+0x1c>)
100012aa:	22c0      	movs	r2, #192	; 0xc0
100012ac:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100012ae:	46c0      	nop			; (mov r8, r8)
100012b0:	4b03      	ldr	r3, [pc, #12]	; (100012c0 <XMC_SCU_UnlockProtectedBits+0x1c>)
100012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100012b4:	2204      	movs	r2, #4
100012b6:	4013      	ands	r3, r2
100012b8:	d1fa      	bne.n	100012b0 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100012ba:	46bd      	mov	sp, r7
100012bc:	bd80      	pop	{r7, pc}
100012be:	46c0      	nop			; (mov r8, r8)
100012c0:	40010000 	.word	0x40010000

100012c4 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100012c4:	b580      	push	{r7, lr}
100012c6:	b082      	sub	sp, #8
100012c8:	af00      	add	r7, sp, #0
100012ca:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100012cc:	f7ff ffea 	bl	100012a4 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012d0:	4a0c      	ldr	r2, [pc, #48]	; (10001304 <XMC_SCU_CLOCK_Init+0x40>)
100012d2:	4b0c      	ldr	r3, [pc, #48]	; (10001304 <XMC_SCU_CLOCK_Init+0x40>)
100012d4:	681b      	ldr	r3, [r3, #0]
100012d6:	490c      	ldr	r1, [pc, #48]	; (10001308 <XMC_SCU_CLOCK_Init+0x44>)
100012d8:	4019      	ands	r1, r3
                   config->rtc_src |
100012da:	687b      	ldr	r3, [r7, #4]
100012dc:	689b      	ldr	r3, [r3, #8]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012de:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
100012e0:	687b      	ldr	r3, [r7, #4]
100012e2:	685b      	ldr	r3, [r3, #4]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
100012e4:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012e6:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
100012e8:	f7ff ffd2 	bl	10001290 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
100012ec:	687b      	ldr	r3, [r7, #4]
100012ee:	785b      	ldrb	r3, [r3, #1]
100012f0:	1c1a      	adds	r2, r3, #0
100012f2:	687b      	ldr	r3, [r7, #4]
100012f4:	781b      	ldrb	r3, [r3, #0]
100012f6:	1c10      	adds	r0, r2, #0
100012f8:	1c19      	adds	r1, r3, #0
100012fa:	f000 f825 	bl	10001348 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
100012fe:	46bd      	mov	sp, r7
10001300:	b002      	add	sp, #8
10001302:	bd80      	pop	{r7, pc}
10001304:	40010300 	.word	0x40010300
10001308:	fff0ffff 	.word	0xfff0ffff

1000130c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
1000130c:	b580      	push	{r7, lr}
1000130e:	b082      	sub	sp, #8
10001310:	af00      	add	r7, sp, #0
10001312:	1c02      	adds	r2, r0, #0
10001314:	1dbb      	adds	r3, r7, #6
10001316:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
10001318:	f7ff ffc4 	bl	100012a4 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
1000131c:	4b09      	ldr	r3, [pc, #36]	; (10001344 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
1000131e:	4a09      	ldr	r2, [pc, #36]	; (10001344 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001320:	6911      	ldr	r1, [r2, #16]
10001322:	1dba      	adds	r2, r7, #6
10001324:	8812      	ldrh	r2, [r2, #0]
10001326:	430a      	orrs	r2, r1
10001328:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000132a:	46c0      	nop			; (mov r8, r8)
1000132c:	4b05      	ldr	r3, [pc, #20]	; (10001344 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
1000132e:	681a      	ldr	r2, [r3, #0]
10001330:	2380      	movs	r3, #128	; 0x80
10001332:	05db      	lsls	r3, r3, #23
10001334:	4013      	ands	r3, r2
10001336:	d1f9      	bne.n	1000132c <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10001338:	f7ff ffaa 	bl	10001290 <XMC_SCU_LockProtectedBits>
}
1000133c:	46bd      	mov	sp, r7
1000133e:	b002      	add	sp, #8
10001340:	bd80      	pop	{r7, pc}
10001342:	46c0      	nop			; (mov r8, r8)
10001344:	40010300 	.word	0x40010300

10001348 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001348:	b580      	push	{r7, lr}
1000134a:	b084      	sub	sp, #16
1000134c:	af00      	add	r7, sp, #0
1000134e:	6078      	str	r0, [r7, #4]
10001350:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001352:	f7ff ffa7 	bl	100012a4 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001356:	4b21      	ldr	r3, [pc, #132]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001358:	681a      	ldr	r2, [r3, #0]
1000135a:	23ff      	movs	r3, #255	; 0xff
1000135c:	021b      	lsls	r3, r3, #8
1000135e:	4013      	ands	r3, r2
10001360:	0a1b      	lsrs	r3, r3, #8
10001362:	60fb      	str	r3, [r7, #12]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001364:	4b1d      	ldr	r3, [pc, #116]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001366:	4a1d      	ldr	r2, [pc, #116]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001368:	6812      	ldr	r2, [r2, #0]
1000136a:	491d      	ldr	r1, [pc, #116]	; (100013e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)
1000136c:	4011      	ands	r1, r2
1000136e:	683a      	ldr	r2, [r7, #0]
10001370:	430a      	orrs	r2, r1
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
10001372:	491c      	ldr	r1, [pc, #112]	; (100013e4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
10001374:	430a      	orrs	r2, r1

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001376:	601a      	str	r2, [r3, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001378:	46c0      	nop			; (mov r8, r8)
1000137a:	4b18      	ldr	r3, [pc, #96]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000137c:	681a      	ldr	r2, [r3, #0]
1000137e:	2380      	movs	r3, #128	; 0x80
10001380:	05db      	lsls	r3, r3, #23
10001382:	4013      	ands	r3, r2
10001384:	d1f9      	bne.n	1000137a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x32>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
10001386:	68fa      	ldr	r2, [r7, #12]
10001388:	687b      	ldr	r3, [r7, #4]
1000138a:	429a      	cmp	r2, r3
1000138c:	d806      	bhi.n	1000139c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x54>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
1000138e:	68fa      	ldr	r2, [r7, #12]
10001390:	687b      	ldr	r3, [r7, #4]
10001392:	1c10      	adds	r0, r2, #0
10001394:	1c19      	adds	r1, r3, #0
10001396:	f000 f853 	bl	10001440 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000139a:	e005      	b.n	100013a8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
1000139c:	68fa      	ldr	r2, [r7, #12]
1000139e:	687b      	ldr	r3, [r7, #4]
100013a0:	1c10      	adds	r0, r2, #0
100013a2:	1c19      	adds	r1, r3, #0
100013a4:	f000 f822 	bl	100013ec <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013a8:	4b0c      	ldr	r3, [pc, #48]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013aa:	4a0c      	ldr	r2, [pc, #48]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013ac:	6812      	ldr	r2, [r2, #0]
100013ae:	490e      	ldr	r1, [pc, #56]	; (100013e8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
100013b0:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013b2:	687a      	ldr	r2, [r7, #4]
100013b4:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013b6:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013b8:	490a      	ldr	r1, [pc, #40]	; (100013e4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
100013ba:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013bc:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100013be:	46c0      	nop			; (mov r8, r8)
100013c0:	4b06      	ldr	r3, [pc, #24]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013c2:	681a      	ldr	r2, [r3, #0]
100013c4:	2380      	movs	r3, #128	; 0x80
100013c6:	05db      	lsls	r3, r3, #23
100013c8:	4013      	ands	r3, r2
100013ca:	d1f9      	bne.n	100013c0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
100013cc:	f7ff ff60 	bl	10001290 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
100013d0:	f7ff fe6c 	bl	100010ac <SystemCoreClockUpdate>

}
100013d4:	46bd      	mov	sp, r7
100013d6:	b004      	add	sp, #16
100013d8:	bd80      	pop	{r7, pc}
100013da:	46c0      	nop			; (mov r8, r8)
100013dc:	40010300 	.word	0x40010300
100013e0:	c00fff00 	.word	0xc00fff00
100013e4:	3ff00000 	.word	0x3ff00000
100013e8:	c00f00ff 	.word	0xc00f00ff

100013ec <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100013ec:	b580      	push	{r7, lr}
100013ee:	b082      	sub	sp, #8
100013f0:	af00      	add	r7, sp, #0
100013f2:	6078      	str	r0, [r7, #4]
100013f4:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100013f6:	e014      	b.n	10001422 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100013f8:	687b      	ldr	r3, [r7, #4]
100013fa:	089b      	lsrs	r3, r3, #2
100013fc:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013fe:	4b0d      	ldr	r3, [pc, #52]	; (10001434 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001400:	4a0c      	ldr	r2, [pc, #48]	; (10001434 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001402:	6812      	ldr	r2, [r2, #0]
10001404:	490c      	ldr	r1, [pc, #48]	; (10001438 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
10001406:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001408:	687a      	ldr	r2, [r7, #4]
1000140a:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000140c:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000140e:	490b      	ldr	r1, [pc, #44]	; (1000143c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001410:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001412:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001414:	46c0      	nop			; (mov r8, r8)
10001416:	4b07      	ldr	r3, [pc, #28]	; (10001434 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001418:	681a      	ldr	r2, [r3, #0]
1000141a:	2380      	movs	r3, #128	; 0x80
1000141c:	05db      	lsls	r3, r3, #23
1000141e:	4013      	ands	r3, r2
10001420:	d1f9      	bne.n	10001416 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001422:	683b      	ldr	r3, [r7, #0]
10001424:	009a      	lsls	r2, r3, #2
10001426:	687b      	ldr	r3, [r7, #4]
10001428:	429a      	cmp	r2, r3
1000142a:	d3e5      	bcc.n	100013f8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000142c:	46bd      	mov	sp, r7
1000142e:	b002      	add	sp, #8
10001430:	bd80      	pop	{r7, pc}
10001432:	46c0      	nop			; (mov r8, r8)
10001434:	40010300 	.word	0x40010300
10001438:	c00f00ff 	.word	0xc00f00ff
1000143c:	3ff00000 	.word	0x3ff00000

10001440 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001440:	b580      	push	{r7, lr}
10001442:	b082      	sub	sp, #8
10001444:	af00      	add	r7, sp, #0
10001446:	6078      	str	r0, [r7, #4]
10001448:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
1000144a:	e019      	b.n	10001480 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	2b00      	cmp	r3, #0
10001450:	d101      	bne.n	10001456 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10001452:	2301      	movs	r3, #1
10001454:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
10001456:	687b      	ldr	r3, [r7, #4]
10001458:	009b      	lsls	r3, r3, #2
1000145a:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000145c:	4b0c      	ldr	r3, [pc, #48]	; (10001490 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000145e:	4a0c      	ldr	r2, [pc, #48]	; (10001490 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001460:	6812      	ldr	r2, [r2, #0]
10001462:	490c      	ldr	r1, [pc, #48]	; (10001494 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001464:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001466:	687a      	ldr	r2, [r7, #4]
10001468:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000146a:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000146c:	490a      	ldr	r1, [pc, #40]	; (10001498 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
1000146e:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001470:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001472:	46c0      	nop			; (mov r8, r8)
10001474:	4b06      	ldr	r3, [pc, #24]	; (10001490 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001476:	681a      	ldr	r2, [r3, #0]
10001478:	2380      	movs	r3, #128	; 0x80
1000147a:	05db      	lsls	r3, r3, #23
1000147c:	4013      	ands	r3, r2
1000147e:	d1f9      	bne.n	10001474 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001480:	687b      	ldr	r3, [r7, #4]
10001482:	009a      	lsls	r2, r3, #2
10001484:	683b      	ldr	r3, [r7, #0]
10001486:	429a      	cmp	r2, r3
10001488:	d3e0      	bcc.n	1000144c <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000148a:	46bd      	mov	sp, r7
1000148c:	b002      	add	sp, #8
1000148e:	bd80      	pop	{r7, pc}
10001490:	40010300 	.word	0x40010300
10001494:	c00f00ff 	.word	0xc00f00ff
10001498:	3ff00000 	.word	0x3ff00000

1000149c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
1000149c:	b580      	push	{r7, lr}
1000149e:	b082      	sub	sp, #8
100014a0:	af00      	add	r7, sp, #0
100014a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
100014a4:	687b      	ldr	r3, [r7, #4]
100014a6:	2280      	movs	r2, #128	; 0x80
100014a8:	0052      	lsls	r2, r2, #1
100014aa:	60da      	str	r2, [r3, #12]
}
100014ac:	46bd      	mov	sp, r7
100014ae:	b002      	add	sp, #8
100014b0:	bd80      	pop	{r7, pc}
100014b2:	46c0      	nop			; (mov r8, r8)

100014b4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100014b4:	b580      	push	{r7, lr}
100014b6:	b082      	sub	sp, #8
100014b8:	af00      	add	r7, sp, #0
100014ba:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100014bc:	687b      	ldr	r3, [r7, #4]
100014be:	4a04      	ldr	r2, [pc, #16]	; (100014d0 <XMC_CCU4_lUngateClock+0x1c>)
100014c0:	4293      	cmp	r3, r2
100014c2:	d102      	bne.n	100014ca <XMC_CCU4_lUngateClock+0x16>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100014c4:	2004      	movs	r0, #4
100014c6:	f7ff ff21 	bl	1000130c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
100014ca:	46bd      	mov	sp, r7
100014cc:	b002      	add	sp, #8
100014ce:	bd80      	pop	{r7, pc}
100014d0:	48040000 	.word	0x48040000

100014d4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
100014dc:	687b      	ldr	r3, [r7, #4]
100014de:	1c18      	adds	r0, r3, #0
100014e0:	f7ff ffe8 	bl	100014b4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
100014e4:	46bd      	mov	sp, r7
100014e6:	b002      	add	sp, #8
100014e8:	bd80      	pop	{r7, pc}
100014ea:	46c0      	nop			; (mov r8, r8)

100014ec <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100014ec:	b580      	push	{r7, lr}
100014ee:	b084      	sub	sp, #16
100014f0:	af00      	add	r7, sp, #0
100014f2:	6078      	str	r0, [r7, #4]
100014f4:	1c0a      	adds	r2, r1, #0
100014f6:	1cfb      	adds	r3, r7, #3
100014f8:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
100014fa:	687b      	ldr	r3, [r7, #4]
100014fc:	1c18      	adds	r0, r3, #0
100014fe:	f7ff ffe9 	bl	100014d4 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001502:	687b      	ldr	r3, [r7, #4]
10001504:	1c18      	adds	r0, r3, #0
10001506:	f7ff ffc9 	bl	1000149c <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
1000150a:	687b      	ldr	r3, [r7, #4]
1000150c:	681b      	ldr	r3, [r3, #0]
1000150e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001510:	68fb      	ldr	r3, [r7, #12]
10001512:	4a07      	ldr	r2, [pc, #28]	; (10001530 <XMC_CCU4_Init+0x44>)
10001514:	4013      	ands	r3, r2
10001516:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001518:	1cfb      	adds	r3, r7, #3
1000151a:	781b      	ldrb	r3, [r3, #0]
1000151c:	039b      	lsls	r3, r3, #14
1000151e:	68fa      	ldr	r2, [r7, #12]
10001520:	4313      	orrs	r3, r2
10001522:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10001524:	687b      	ldr	r3, [r7, #4]
10001526:	68fa      	ldr	r2, [r7, #12]
10001528:	601a      	str	r2, [r3, #0]
}
1000152a:	46bd      	mov	sp, r7
1000152c:	b004      	add	sp, #16
1000152e:	bd80      	pop	{r7, pc}
10001530:	ffff3fff 	.word	0xffff3fff

10001534 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
10001534:	b580      	push	{r7, lr}
10001536:	b084      	sub	sp, #16
10001538:	af00      	add	r7, sp, #0
1000153a:	6078      	str	r0, [r7, #4]
1000153c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));

  gctrl = module->GCTRL;
1000153e:	687b      	ldr	r3, [r7, #4]
10001540:	681b      	ldr	r3, [r3, #0]
10001542:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001544:	683b      	ldr	r3, [r7, #0]
10001546:	0c1b      	lsrs	r3, r3, #16
10001548:	43da      	mvns	r2, r3
1000154a:	68fb      	ldr	r3, [r7, #12]
1000154c:	4013      	ands	r3, r2
1000154e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10001550:	683b      	ldr	r3, [r7, #0]
10001552:	041b      	lsls	r3, r3, #16
10001554:	0c1b      	lsrs	r3, r3, #16
10001556:	68fa      	ldr	r2, [r7, #12]
10001558:	4313      	orrs	r3, r2
1000155a:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
1000155c:	687b      	ldr	r3, [r7, #4]
1000155e:	68fa      	ldr	r2, [r7, #12]
10001560:	601a      	str	r2, [r3, #0]
}
10001562:	46bd      	mov	sp, r7
10001564:	b004      	add	sp, #16
10001566:	bd80      	pop	{r7, pc}

10001568 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001568:	b580      	push	{r7, lr}
1000156a:	b082      	sub	sp, #8
1000156c:	af00      	add	r7, sp, #0
1000156e:	6078      	str	r0, [r7, #4]
10001570:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001572:	683b      	ldr	r3, [r7, #0]
10001574:	681a      	ldr	r2, [r3, #0]
10001576:	687b      	ldr	r3, [r7, #4]
10001578:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000157a:	683b      	ldr	r3, [r7, #0]
1000157c:	795b      	ldrb	r3, [r3, #5]
1000157e:	069b      	lsls	r3, r3, #26
10001580:	0fdb      	lsrs	r3, r3, #31
10001582:	b2db      	uxtb	r3, r3
10001584:	051a      	lsls	r2, r3, #20
10001586:	687b      	ldr	r3, [r7, #4]
10001588:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000158a:	683b      	ldr	r3, [r7, #0]
1000158c:	791b      	ldrb	r3, [r3, #4]
1000158e:	071b      	lsls	r3, r3, #28
10001590:	0f1b      	lsrs	r3, r3, #28
10001592:	b2db      	uxtb	r3, r3
10001594:	1c1a      	adds	r2, r3, #0
10001596:	687b      	ldr	r3, [r7, #4]
10001598:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000159a:	683b      	ldr	r3, [r7, #0]
1000159c:	795b      	ldrb	r3, [r3, #5]
1000159e:	071b      	lsls	r3, r3, #28
100015a0:	0f1b      	lsrs	r3, r3, #28
100015a2:	b2db      	uxtb	r3, r3
100015a4:	1c1a      	adds	r2, r3, #0
100015a6:	687b      	ldr	r3, [r7, #4]
100015a8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
100015aa:	683b      	ldr	r3, [r7, #0]
100015ac:	795b      	ldrb	r3, [r3, #5]
100015ae:	06db      	lsls	r3, r3, #27
100015b0:	0fdb      	lsrs	r3, r3, #31
100015b2:	b2db      	uxtb	r3, r3
100015b4:	1c1a      	adds	r2, r3, #0
100015b6:	687b      	ldr	r3, [r7, #4]
100015b8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100015ba:	683b      	ldr	r3, [r7, #0]
100015bc:	791b      	ldrb	r3, [r3, #4]
100015be:	061b      	lsls	r3, r3, #24
100015c0:	0f1b      	lsrs	r3, r3, #28
100015c2:	b2db      	uxtb	r3, r3
100015c4:	1c1a      	adds	r2, r3, #0
100015c6:	687b      	ldr	r3, [r7, #4]
100015c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
100015ca:	46bd      	mov	sp, r7
100015cc:	b002      	add	sp, #8
100015ce:	bd80      	pop	{r7, pc}

100015d0 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
100015d0:	b580      	push	{r7, lr}
100015d2:	b084      	sub	sp, #16
100015d4:	af00      	add	r7, sp, #0
100015d6:	6078      	str	r0, [r7, #4]
100015d8:	1c08      	adds	r0, r1, #0
100015da:	1c11      	adds	r1, r2, #0
100015dc:	1cfb      	adds	r3, r7, #3
100015de:	1c02      	adds	r2, r0, #0
100015e0:	701a      	strb	r2, [r3, #0]
100015e2:	1cbb      	adds	r3, r7, #2
100015e4:	1c0a      	adds	r2, r1, #0
100015e6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) || \
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
100015e8:	687b      	ldr	r3, [r7, #4]
100015ea:	685b      	ldr	r3, [r3, #4]
100015ec:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
100015ee:	68bb      	ldr	r3, [r7, #8]
100015f0:	2203      	movs	r2, #3
100015f2:	4393      	bics	r3, r2
100015f4:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
100015f6:	1cfb      	adds	r3, r7, #3
100015f8:	781b      	ldrb	r3, [r3, #0]
100015fa:	68ba      	ldr	r2, [r7, #8]
100015fc:	4313      	orrs	r3, r2
100015fe:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001600:	687b      	ldr	r3, [r7, #4]
10001602:	68ba      	ldr	r2, [r7, #8]
10001604:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
10001606:	687b      	ldr	r3, [r7, #4]
10001608:	695b      	ldr	r3, [r3, #20]
1000160a:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
1000160c:	1cbb      	adds	r3, r7, #2
1000160e:	781b      	ldrb	r3, [r3, #0]
10001610:	2b01      	cmp	r3, #1
10001612:	d105      	bne.n	10001620 <XMC_CCU4_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
10001614:	68fb      	ldr	r3, [r7, #12]
10001616:	2280      	movs	r2, #128	; 0x80
10001618:	00d2      	lsls	r2, r2, #3
1000161a:	4313      	orrs	r3, r2
1000161c:	60fb      	str	r3, [r7, #12]
1000161e:	e003      	b.n	10001628 <XMC_CCU4_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
10001620:	68fb      	ldr	r3, [r7, #12]
10001622:	4a04      	ldr	r2, [pc, #16]	; (10001634 <XMC_CCU4_SLICE_StartConfig+0x64>)
10001624:	4013      	ands	r3, r2
10001626:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001628:	687b      	ldr	r3, [r7, #4]
1000162a:	68fa      	ldr	r2, [r7, #12]
1000162c:	615a      	str	r2, [r3, #20]
}
1000162e:	46bd      	mov	sp, r7
10001630:	b004      	add	sp, #16
10001632:	bd80      	pop	{r7, pc}
10001634:	fffffbff 	.word	0xfffffbff

10001638 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
10001638:	b580      	push	{r7, lr}
1000163a:	b084      	sub	sp, #16
1000163c:	af00      	add	r7, sp, #0
1000163e:	6078      	str	r0, [r7, #4]
10001640:	1c08      	adds	r0, r1, #0
10001642:	1c11      	adds	r1, r2, #0
10001644:	1cfb      	adds	r3, r7, #3
10001646:	1c02      	adds	r2, r0, #0
10001648:	701a      	strb	r2, [r3, #0]
1000164a:	1cbb      	adds	r3, r7, #2
1000164c:	1c0a      	adds	r2, r1, #0
1000164e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));

  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001650:	687b      	ldr	r3, [r7, #4]
10001652:	685b      	ldr	r3, [r3, #4]
10001654:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
10001656:	68fb      	ldr	r3, [r7, #12]
10001658:	220c      	movs	r2, #12
1000165a:	4393      	bics	r3, r2
1000165c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
1000165e:	1cfb      	adds	r3, r7, #3
10001660:	781b      	ldrb	r3, [r3, #0]
10001662:	009b      	lsls	r3, r3, #2
10001664:	68fa      	ldr	r2, [r7, #12]
10001666:	4313      	orrs	r3, r2
10001668:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000166a:	687b      	ldr	r3, [r7, #4]
1000166c:	68fa      	ldr	r2, [r7, #12]
1000166e:	605a      	str	r2, [r3, #4]

  /* Next, Configure the stop mode */
  tc = slice->TC;
10001670:	687b      	ldr	r3, [r7, #4]
10001672:	695b      	ldr	r3, [r3, #20]
10001674:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
10001676:	68bb      	ldr	r3, [r7, #8]
10001678:	4a07      	ldr	r2, [pc, #28]	; (10001698 <XMC_CCU4_SLICE_StopConfig+0x60>)
1000167a:	4013      	ands	r3, r2
1000167c:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
1000167e:	1cbb      	adds	r3, r7, #2
10001680:	781b      	ldrb	r3, [r3, #0]
10001682:	021b      	lsls	r3, r3, #8
10001684:	68ba      	ldr	r2, [r7, #8]
10001686:	4313      	orrs	r3, r2
10001688:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
1000168a:	687b      	ldr	r3, [r7, #4]
1000168c:	68ba      	ldr	r2, [r7, #8]
1000168e:	615a      	str	r2, [r3, #20]
}
10001690:	46bd      	mov	sp, r7
10001692:	b004      	add	sp, #16
10001694:	bd80      	pop	{r7, pc}
10001696:	46c0      	nop			; (mov r8, r8)
10001698:	fffffcff 	.word	0xfffffcff

1000169c <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
1000169c:	b580      	push	{r7, lr}
1000169e:	b084      	sub	sp, #16
100016a0:	af00      	add	r7, sp, #0
100016a2:	6078      	str	r0, [r7, #4]
100016a4:	1c0a      	adds	r2, r1, #0
100016a6:	1cfb      	adds	r3, r7, #3
100016a8:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the load function */
  cmc = slice->CMC;
100016aa:	687b      	ldr	r3, [r7, #4]
100016ac:	685b      	ldr	r3, [r3, #4]
100016ae:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
100016b0:	68fb      	ldr	r3, [r7, #12]
100016b2:	4a07      	ldr	r2, [pc, #28]	; (100016d0 <XMC_CCU4_SLICE_LoadConfig+0x34>)
100016b4:	4013      	ands	r3, r2
100016b6:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
100016b8:	1cfb      	adds	r3, r7, #3
100016ba:	781b      	ldrb	r3, [r3, #0]
100016bc:	031b      	lsls	r3, r3, #12
100016be:	68fa      	ldr	r2, [r7, #12]
100016c0:	4313      	orrs	r3, r2
100016c2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100016c4:	687b      	ldr	r3, [r7, #4]
100016c6:	68fa      	ldr	r2, [r7, #12]
100016c8:	605a      	str	r2, [r3, #4]
}
100016ca:	46bd      	mov	sp, r7
100016cc:	b004      	add	sp, #16
100016ce:	bd80      	pop	{r7, pc}
100016d0:	ffffcfff 	.word	0xffffcfff

100016d4 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
100016d4:	b590      	push	{r4, r7, lr}
100016d6:	b085      	sub	sp, #20
100016d8:	af00      	add	r7, sp, #0
100016da:	6078      	str	r0, [r7, #4]
100016dc:	1c0c      	adds	r4, r1, #0
100016de:	1c10      	adds	r0, r2, #0
100016e0:	1c19      	adds	r1, r3, #0
100016e2:	1cfb      	adds	r3, r7, #3
100016e4:	1c22      	adds	r2, r4, #0
100016e6:	701a      	strb	r2, [r3, #0]
100016e8:	1cbb      	adds	r3, r7, #2
100016ea:	1c02      	adds	r2, r0, #0
100016ec:	701a      	strb	r2, [r3, #0]
100016ee:	1c7b      	adds	r3, r7, #1
100016f0:	1c0a      	adds	r2, r1, #0
100016f2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) || \
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));

  tc  = slice->TC;
100016f4:	687b      	ldr	r3, [r7, #4]
100016f6:	695b      	ldr	r3, [r3, #20]
100016f8:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	685b      	ldr	r3, [r3, #4]
100016fe:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
10001700:	68bb      	ldr	r3, [r7, #8]
10001702:	4a17      	ldr	r2, [pc, #92]	; (10001760 <XMC_CCU4_SLICE_ModulationConfig+0x8c>)
10001704:	4013      	ands	r3, r2
10001706:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
10001708:	1cfb      	adds	r3, r7, #3
1000170a:	781b      	ldrb	r3, [r3, #0]
1000170c:	049b      	lsls	r3, r3, #18
1000170e:	68ba      	ldr	r2, [r7, #8]
10001710:	4313      	orrs	r3, r2
10001712:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001714:	687b      	ldr	r3, [r7, #4]
10001716:	68ba      	ldr	r2, [r7, #8]
10001718:	605a      	str	r2, [r3, #4]

  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
1000171a:	1cbb      	adds	r3, r7, #2
1000171c:	781b      	ldrb	r3, [r3, #0]
1000171e:	2b01      	cmp	r3, #1
10001720:	d105      	bne.n	1000172e <XMC_CCU4_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
10001722:	68fb      	ldr	r3, [r7, #12]
10001724:	2280      	movs	r2, #128	; 0x80
10001726:	0452      	lsls	r2, r2, #17
10001728:	4313      	orrs	r3, r2
1000172a:	60fb      	str	r3, [r7, #12]
1000172c:	e003      	b.n	10001736 <XMC_CCU4_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
1000172e:	68fb      	ldr	r3, [r7, #12]
10001730:	4a0c      	ldr	r2, [pc, #48]	; (10001764 <XMC_CCU4_SLICE_ModulationConfig+0x90>)
10001732:	4013      	ands	r3, r2
10001734:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
10001736:	1c7b      	adds	r3, r7, #1
10001738:	781b      	ldrb	r3, [r3, #0]
1000173a:	2b00      	cmp	r3, #0
1000173c:	d005      	beq.n	1000174a <XMC_CCU4_SLICE_ModulationConfig+0x76>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
1000173e:	68fb      	ldr	r3, [r7, #12]
10001740:	2280      	movs	r2, #128	; 0x80
10001742:	0412      	lsls	r2, r2, #16
10001744:	4313      	orrs	r3, r2
10001746:	60fb      	str	r3, [r7, #12]
10001748:	e003      	b.n	10001752 <XMC_CCU4_SLICE_ModulationConfig+0x7e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
1000174a:	68fb      	ldr	r3, [r7, #12]
1000174c:	4a06      	ldr	r2, [pc, #24]	; (10001768 <XMC_CCU4_SLICE_ModulationConfig+0x94>)
1000174e:	4013      	ands	r3, r2
10001750:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001752:	687b      	ldr	r3, [r7, #4]
10001754:	68fa      	ldr	r2, [r7, #12]
10001756:	615a      	str	r2, [r3, #20]
}
10001758:	46bd      	mov	sp, r7
1000175a:	b005      	add	sp, #20
1000175c:	bd90      	pop	{r4, r7, pc}
1000175e:	46c0      	nop			; (mov r8, r8)
10001760:	fff3ffff 	.word	0xfff3ffff
10001764:	feffffff 	.word	0xfeffffff
10001768:	ff7fffff 	.word	0xff7fffff

1000176c <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b084      	sub	sp, #16
10001770:	af00      	add	r7, sp, #0
10001772:	6078      	str	r0, [r7, #4]
10001774:	1c0a      	adds	r2, r1, #0
10001776:	1cfb      	adds	r3, r7, #3
10001778:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
1000177a:	687b      	ldr	r3, [r7, #4]
1000177c:	685b      	ldr	r3, [r3, #4]
1000177e:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
10001780:	68fb      	ldr	r3, [r7, #12]
10001782:	4a07      	ldr	r2, [pc, #28]	; (100017a0 <XMC_CCU4_SLICE_CountConfig+0x34>)
10001784:	4013      	ands	r3, r2
10001786:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
10001788:	1cfb      	adds	r3, r7, #3
1000178a:	781b      	ldrb	r3, [r3, #0]
1000178c:	039b      	lsls	r3, r3, #14
1000178e:	68fa      	ldr	r2, [r7, #12]
10001790:	4313      	orrs	r3, r2
10001792:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001794:	687b      	ldr	r3, [r7, #4]
10001796:	68fa      	ldr	r2, [r7, #12]
10001798:	605a      	str	r2, [r3, #4]
}
1000179a:	46bd      	mov	sp, r7
1000179c:	b004      	add	sp, #16
1000179e:	bd80      	pop	{r7, pc}
100017a0:	ffff3fff 	.word	0xffff3fff

100017a4 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100017a4:	b580      	push	{r7, lr}
100017a6:	b084      	sub	sp, #16
100017a8:	af00      	add	r7, sp, #0
100017aa:	6078      	str	r0, [r7, #4]
100017ac:	1c0a      	adds	r2, r1, #0
100017ae:	1cfb      	adds	r3, r7, #3
100017b0:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
100017b2:	687b      	ldr	r3, [r7, #4]
100017b4:	685b      	ldr	r3, [r3, #4]
100017b6:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
100017b8:	68fb      	ldr	r3, [r7, #12]
100017ba:	4a07      	ldr	r2, [pc, #28]	; (100017d8 <XMC_CCU4_SLICE_GateConfig+0x34>)
100017bc:	4013      	ands	r3, r2
100017be:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
100017c0:	1cfb      	adds	r3, r7, #3
100017c2:	781b      	ldrb	r3, [r3, #0]
100017c4:	021b      	lsls	r3, r3, #8
100017c6:	68fa      	ldr	r2, [r7, #12]
100017c8:	4313      	orrs	r3, r2
100017ca:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100017cc:	687b      	ldr	r3, [r7, #4]
100017ce:	68fa      	ldr	r2, [r7, #12]
100017d0:	605a      	str	r2, [r3, #4]
}
100017d2:	46bd      	mov	sp, r7
100017d4:	b004      	add	sp, #16
100017d6:	bd80      	pop	{r7, pc}
100017d8:	fffffcff 	.word	0xfffffcff

100017dc <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100017dc:	b580      	push	{r7, lr}
100017de:	b084      	sub	sp, #16
100017e0:	af00      	add	r7, sp, #0
100017e2:	6078      	str	r0, [r7, #4]
100017e4:	1c0a      	adds	r2, r1, #0
100017e6:	1cfb      	adds	r3, r7, #3
100017e8:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the direction function */
  cmc = slice->CMC;
100017ea:	687b      	ldr	r3, [r7, #4]
100017ec:	685b      	ldr	r3, [r3, #4]
100017ee:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
100017f0:	68fb      	ldr	r3, [r7, #12]
100017f2:	4a07      	ldr	r2, [pc, #28]	; (10001810 <XMC_CCU4_SLICE_DirectionConfig+0x34>)
100017f4:	4013      	ands	r3, r2
100017f6:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
100017f8:	1cfb      	adds	r3, r7, #3
100017fa:	781b      	ldrb	r3, [r3, #0]
100017fc:	029b      	lsls	r3, r3, #10
100017fe:	68fa      	ldr	r2, [r7, #12]
10001800:	4313      	orrs	r3, r2
10001802:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001804:	687b      	ldr	r3, [r7, #4]
10001806:	68fa      	ldr	r2, [r7, #12]
10001808:	605a      	str	r2, [r3, #4]
}
1000180a:	46bd      	mov	sp, r7
1000180c:	b004      	add	sp, #16
1000180e:	bd80      	pop	{r7, pc}
10001810:	fffff3ff 	.word	0xfffff3ff

10001814 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
10001814:	b580      	push	{r7, lr}
10001816:	b084      	sub	sp, #16
10001818:	af00      	add	r7, sp, #0
1000181a:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  /* Bind the event with the override function */
  cmc = slice->CMC;
1000181c:	687b      	ldr	r3, [r7, #4]
1000181e:	685b      	ldr	r3, [r3, #4]
10001820:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
10001822:	68fb      	ldr	r3, [r7, #12]
10001824:	4a06      	ldr	r2, [pc, #24]	; (10001840 <XMC_CCU4_SLICE_StatusBitOverrideConfig+0x2c>)
10001826:	4013      	ands	r3, r2
10001828:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
1000182a:	68fb      	ldr	r3, [r7, #12]
1000182c:	2280      	movs	r2, #128	; 0x80
1000182e:	0252      	lsls	r2, r2, #9
10001830:	4313      	orrs	r3, r2
10001832:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001834:	687b      	ldr	r3, [r7, #4]
10001836:	68fa      	ldr	r2, [r7, #12]
10001838:	605a      	str	r2, [r3, #4]
}
1000183a:	46bd      	mov	sp, r7
1000183c:	b004      	add	sp, #16
1000183e:	bd80      	pop	{r7, pc}
10001840:	fffeffff 	.word	0xfffeffff

10001844 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
10001844:	b580      	push	{r7, lr}
10001846:	b084      	sub	sp, #16
10001848:	af00      	add	r7, sp, #0
1000184a:	6078      	str	r0, [r7, #4]
1000184c:	1c08      	adds	r0, r1, #0
1000184e:	1c11      	adds	r1, r2, #0
10001850:	1cfb      	adds	r3, r7, #3
10001852:	1c02      	adds	r2, r0, #0
10001854:	701a      	strb	r2, [r3, #0]
10001856:	1cbb      	adds	r3, r7, #2
10001858:	1c0a      	adds	r2, r1, #0
1000185a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));

  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
1000185c:	687b      	ldr	r3, [r7, #4]
1000185e:	685b      	ldr	r3, [r3, #4]
10001860:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
10001862:	68bb      	ldr	r3, [r7, #8]
10001864:	4a17      	ldr	r2, [pc, #92]	; (100018c4 <XMC_CCU4_SLICE_TrapConfig+0x80>)
10001866:	4013      	ands	r3, r2
10001868:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
1000186a:	68bb      	ldr	r3, [r7, #8]
1000186c:	2280      	movs	r2, #128	; 0x80
1000186e:	0292      	lsls	r2, r2, #10
10001870:	4313      	orrs	r3, r2
10001872:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001874:	687b      	ldr	r3, [r7, #4]
10001876:	68ba      	ldr	r2, [r7, #8]
10001878:	605a      	str	r2, [r3, #4]

  /* Next, Configure synchronization option */
  tc = slice->TC;
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	695b      	ldr	r3, [r3, #20]
1000187e:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
10001880:	1cbb      	adds	r3, r7, #2
10001882:	781b      	ldrb	r3, [r3, #0]
10001884:	2b00      	cmp	r3, #0
10001886:	d005      	beq.n	10001894 <XMC_CCU4_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
10001888:	68fb      	ldr	r3, [r7, #12]
1000188a:	2280      	movs	r2, #128	; 0x80
1000188c:	0392      	lsls	r2, r2, #14
1000188e:	4313      	orrs	r3, r2
10001890:	60fb      	str	r3, [r7, #12]
10001892:	e003      	b.n	1000189c <XMC_CCU4_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
10001894:	68fb      	ldr	r3, [r7, #12]
10001896:	4a0c      	ldr	r2, [pc, #48]	; (100018c8 <XMC_CCU4_SLICE_TrapConfig+0x84>)
10001898:	4013      	ands	r3, r2
1000189a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
1000189c:	1cfb      	adds	r3, r7, #3
1000189e:	781b      	ldrb	r3, [r3, #0]
100018a0:	2b01      	cmp	r3, #1
100018a2:	d105      	bne.n	100018b0 <XMC_CCU4_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
100018a4:	68fb      	ldr	r3, [r7, #12]
100018a6:	2280      	movs	r2, #128	; 0x80
100018a8:	03d2      	lsls	r2, r2, #15
100018aa:	4313      	orrs	r3, r2
100018ac:	60fb      	str	r3, [r7, #12]
100018ae:	e003      	b.n	100018b8 <XMC_CCU4_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
100018b0:	68fb      	ldr	r3, [r7, #12]
100018b2:	4a06      	ldr	r2, [pc, #24]	; (100018cc <XMC_CCU4_SLICE_TrapConfig+0x88>)
100018b4:	4013      	ands	r3, r2
100018b6:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
100018b8:	687b      	ldr	r3, [r7, #4]
100018ba:	68fa      	ldr	r2, [r7, #12]
100018bc:	615a      	str	r2, [r3, #20]
}
100018be:	46bd      	mov	sp, r7
100018c0:	b004      	add	sp, #16
100018c2:	bd80      	pop	{r7, pc}
100018c4:	fffdffff 	.word	0xfffdffff
100018c8:	ffdfffff 	.word	0xffdfffff
100018cc:	ffbfffff 	.word	0xffbfffff

100018d0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
100018d0:	b580      	push	{r7, lr}
100018d2:	b086      	sub	sp, #24
100018d4:	af00      	add	r7, sp, #0
100018d6:	60f8      	str	r0, [r7, #12]
100018d8:	60b9      	str	r1, [r7, #8]
100018da:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;

  slice->INS1 = ins;
#else
  ins = slice->INS;
100018dc:	68fb      	ldr	r3, [r7, #12]
100018de:	681b      	ldr	r3, [r3, #0]
100018e0:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
100018e2:	697b      	ldr	r3, [r7, #20]
100018e4:	4a2a      	ldr	r2, [pc, #168]	; (10001990 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc0>)
100018e6:	4013      	ands	r3, r2
100018e8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
100018ea:	68bb      	ldr	r3, [r7, #8]
100018ec:	785b      	ldrb	r3, [r3, #1]
100018ee:	049b      	lsls	r3, r3, #18
100018f0:	697a      	ldr	r2, [r7, #20]
100018f2:	4313      	orrs	r3, r2
100018f4:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
100018f6:	697b      	ldr	r3, [r7, #20]
100018f8:	4a26      	ldr	r2, [pc, #152]	; (10001994 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc4>)
100018fa:	4013      	ands	r3, r2
100018fc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
100018fe:	687b      	ldr	r3, [r7, #4]
10001900:	785b      	ldrb	r3, [r3, #1]
10001902:	051b      	lsls	r3, r3, #20
10001904:	697a      	ldr	r2, [r7, #20]
10001906:	4313      	orrs	r3, r2
10001908:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
1000190a:	697b      	ldr	r3, [r7, #20]
1000190c:	4a22      	ldr	r2, [pc, #136]	; (10001998 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc8>)
1000190e:	4013      	ands	r3, r2
10001910:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
10001912:	68bb      	ldr	r3, [r7, #8]
10001914:	789b      	ldrb	r3, [r3, #2]
10001916:	05db      	lsls	r3, r3, #23
10001918:	697a      	ldr	r2, [r7, #20]
1000191a:	4313      	orrs	r3, r2
1000191c:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
1000191e:	697b      	ldr	r3, [r7, #20]
10001920:	4a1e      	ldr	r2, [pc, #120]	; (1000199c <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xcc>)
10001922:	4013      	ands	r3, r2
10001924:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
10001926:	687b      	ldr	r3, [r7, #4]
10001928:	789b      	ldrb	r3, [r3, #2]
1000192a:	061b      	lsls	r3, r3, #24
1000192c:	697a      	ldr	r2, [r7, #20]
1000192e:	4313      	orrs	r3, r2
10001930:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
10001932:	697b      	ldr	r3, [r7, #20]
10001934:	4a1a      	ldr	r2, [pc, #104]	; (100019a0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
10001936:	4013      	ands	r3, r2
10001938:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
1000193a:	68bb      	ldr	r3, [r7, #8]
1000193c:	78db      	ldrb	r3, [r3, #3]
1000193e:	06db      	lsls	r3, r3, #27
10001940:	697a      	ldr	r2, [r7, #20]
10001942:	4313      	orrs	r3, r2
10001944:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
10001946:	697b      	ldr	r3, [r7, #20]
10001948:	4a16      	ldr	r2, [pc, #88]	; (100019a4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
1000194a:	4013      	ands	r3, r2
1000194c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
1000194e:	687b      	ldr	r3, [r7, #4]
10001950:	78db      	ldrb	r3, [r3, #3]
10001952:	075b      	lsls	r3, r3, #29
10001954:	697a      	ldr	r2, [r7, #20]
10001956:	4313      	orrs	r3, r2
10001958:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
1000195a:	697b      	ldr	r3, [r7, #20]
1000195c:	22f0      	movs	r2, #240	; 0xf0
1000195e:	4393      	bics	r3, r2
10001960:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
10001962:	68bb      	ldr	r3, [r7, #8]
10001964:	781b      	ldrb	r3, [r3, #0]
10001966:	011b      	lsls	r3, r3, #4
10001968:	697a      	ldr	r2, [r7, #20]
1000196a:	4313      	orrs	r3, r2
1000196c:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
1000196e:	697b      	ldr	r3, [r7, #20]
10001970:	4a0d      	ldr	r2, [pc, #52]	; (100019a8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
10001972:	4013      	ands	r3, r2
10001974:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
10001976:	687b      	ldr	r3, [r7, #4]
10001978:	781b      	ldrb	r3, [r3, #0]
1000197a:	021b      	lsls	r3, r3, #8
1000197c:	697a      	ldr	r2, [r7, #20]
1000197e:	4313      	orrs	r3, r2
10001980:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
10001982:	68fb      	ldr	r3, [r7, #12]
10001984:	697a      	ldr	r2, [r7, #20]
10001986:	601a      	str	r2, [r3, #0]
#endif
}
10001988:	46bd      	mov	sp, r7
1000198a:	b006      	add	sp, #24
1000198c:	bd80      	pop	{r7, pc}
1000198e:	46c0      	nop			; (mov r8, r8)
10001990:	fff3ffff 	.word	0xfff3ffff
10001994:	ffcfffff 	.word	0xffcfffff
10001998:	ff7fffff 	.word	0xff7fffff
1000199c:	feffffff 	.word	0xfeffffff
100019a0:	e7ffffff 	.word	0xe7ffffff
100019a4:	9fffffff 	.word	0x9fffffff
100019a8:	fffff0ff 	.word	0xfffff0ff

100019ac <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
100019ac:	b580      	push	{r7, lr}
100019ae:	b088      	sub	sp, #32
100019b0:	af00      	add	r7, sp, #0
100019b2:	60f8      	str	r0, [r7, #12]
100019b4:	607a      	str	r2, [r7, #4]
100019b6:	230b      	movs	r3, #11
100019b8:	18fb      	adds	r3, r7, r3
100019ba:	1c0a      	adds	r2, r1, #0
100019bc:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
100019be:	231f      	movs	r3, #31
100019c0:	18fb      	adds	r3, r7, r3
100019c2:	220b      	movs	r2, #11
100019c4:	18ba      	adds	r2, r7, r2
100019c6:	7812      	ldrb	r2, [r2, #0]
100019c8:	3a01      	subs	r2, #1
100019ca:	701a      	strb	r2, [r3, #0]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
100019cc:	68fb      	ldr	r3, [r7, #12]
100019ce:	681b      	ldr	r3, [r3, #0]
100019d0:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
100019d2:	231f      	movs	r3, #31
100019d4:	18fb      	adds	r3, r7, r3
100019d6:	781b      	ldrb	r3, [r3, #0]
100019d8:	18db      	adds	r3, r3, r3
100019da:	b2da      	uxtb	r2, r3
100019dc:	2317      	movs	r3, #23
100019de:	18fb      	adds	r3, r7, r3
100019e0:	3210      	adds	r2, #16
100019e2:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
100019e4:	2317      	movs	r3, #23
100019e6:	18fb      	adds	r3, r7, r3
100019e8:	781b      	ldrb	r3, [r3, #0]
100019ea:	2203      	movs	r2, #3
100019ec:	409a      	lsls	r2, r3
100019ee:	1c13      	adds	r3, r2, #0
100019f0:	43da      	mvns	r2, r3
100019f2:	69bb      	ldr	r3, [r7, #24]
100019f4:	4013      	ands	r3, r2
100019f6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
100019f8:	687b      	ldr	r3, [r7, #4]
100019fa:	785b      	ldrb	r3, [r3, #1]
100019fc:	1c1a      	adds	r2, r3, #0
100019fe:	2317      	movs	r3, #23
10001a00:	18fb      	adds	r3, r7, r3
10001a02:	781b      	ldrb	r3, [r3, #0]
10001a04:	409a      	lsls	r2, r3
10001a06:	1c13      	adds	r3, r2, #0
10001a08:	69ba      	ldr	r2, [r7, #24]
10001a0a:	4313      	orrs	r3, r2
10001a0c:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
10001a0e:	2317      	movs	r3, #23
10001a10:	18fb      	adds	r3, r7, r3
10001a12:	221f      	movs	r2, #31
10001a14:	18ba      	adds	r2, r7, r2
10001a16:	7812      	ldrb	r2, [r2, #0]
10001a18:	3216      	adds	r2, #22
10001a1a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001a1c:	2317      	movs	r3, #23
10001a1e:	18fb      	adds	r3, r7, r3
10001a20:	781b      	ldrb	r3, [r3, #0]
10001a22:	2201      	movs	r2, #1
10001a24:	409a      	lsls	r2, r3
10001a26:	1c13      	adds	r3, r2, #0
10001a28:	43da      	mvns	r2, r3
10001a2a:	69bb      	ldr	r3, [r7, #24]
10001a2c:	4013      	ands	r3, r2
10001a2e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
10001a30:	687b      	ldr	r3, [r7, #4]
10001a32:	789b      	ldrb	r3, [r3, #2]
10001a34:	1c1a      	adds	r2, r3, #0
10001a36:	2317      	movs	r3, #23
10001a38:	18fb      	adds	r3, r7, r3
10001a3a:	781b      	ldrb	r3, [r3, #0]
10001a3c:	409a      	lsls	r2, r3
10001a3e:	1c13      	adds	r3, r2, #0
10001a40:	69ba      	ldr	r2, [r7, #24]
10001a42:	4313      	orrs	r3, r2
10001a44:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
10001a46:	231f      	movs	r3, #31
10001a48:	18fb      	adds	r3, r7, r3
10001a4a:	781b      	ldrb	r3, [r3, #0]
10001a4c:	18db      	adds	r3, r3, r3
10001a4e:	b2da      	uxtb	r2, r3
10001a50:	2317      	movs	r3, #23
10001a52:	18fb      	adds	r3, r7, r3
10001a54:	3219      	adds	r2, #25
10001a56:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001a58:	2317      	movs	r3, #23
10001a5a:	18fb      	adds	r3, r7, r3
10001a5c:	781b      	ldrb	r3, [r3, #0]
10001a5e:	2203      	movs	r2, #3
10001a60:	409a      	lsls	r2, r3
10001a62:	1c13      	adds	r3, r2, #0
10001a64:	43da      	mvns	r2, r3
10001a66:	69bb      	ldr	r3, [r7, #24]
10001a68:	4013      	ands	r3, r2
10001a6a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001a6c:	687b      	ldr	r3, [r7, #4]
10001a6e:	78db      	ldrb	r3, [r3, #3]
10001a70:	1c1a      	adds	r2, r3, #0
10001a72:	2317      	movs	r3, #23
10001a74:	18fb      	adds	r3, r7, r3
10001a76:	781b      	ldrb	r3, [r3, #0]
10001a78:	409a      	lsls	r2, r3
10001a7a:	1c13      	adds	r3, r2, #0
10001a7c:	69ba      	ldr	r2, [r7, #24]
10001a7e:	4313      	orrs	r3, r2
10001a80:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
10001a82:	2317      	movs	r3, #23
10001a84:	18fb      	adds	r3, r7, r3
10001a86:	221f      	movs	r2, #31
10001a88:	18ba      	adds	r2, r7, r2
10001a8a:	7812      	ldrb	r2, [r2, #0]
10001a8c:	0092      	lsls	r2, r2, #2
10001a8e:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001a90:	2317      	movs	r3, #23
10001a92:	18fb      	adds	r3, r7, r3
10001a94:	781b      	ldrb	r3, [r3, #0]
10001a96:	220f      	movs	r2, #15
10001a98:	409a      	lsls	r2, r3
10001a9a:	1c13      	adds	r3, r2, #0
10001a9c:	43da      	mvns	r2, r3
10001a9e:	69bb      	ldr	r3, [r7, #24]
10001aa0:	4013      	ands	r3, r2
10001aa2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10001aa4:	687b      	ldr	r3, [r7, #4]
10001aa6:	781b      	ldrb	r3, [r3, #0]
10001aa8:	1c1a      	adds	r2, r3, #0
10001aaa:	2317      	movs	r3, #23
10001aac:	18fb      	adds	r3, r7, r3
10001aae:	781b      	ldrb	r3, [r3, #0]
10001ab0:	409a      	lsls	r2, r3
10001ab2:	1c13      	adds	r3, r2, #0
10001ab4:	69ba      	ldr	r2, [r7, #24]
10001ab6:	4313      	orrs	r3, r2
10001ab8:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
10001aba:	68fb      	ldr	r3, [r7, #12]
10001abc:	69ba      	ldr	r2, [r7, #24]
10001abe:	601a      	str	r2, [r3, #0]
#endif
}
10001ac0:	46bd      	mov	sp, r7
10001ac2:	b008      	add	sp, #32
10001ac4:	bd80      	pop	{r7, pc}
10001ac6:	46c0      	nop			; (mov r8, r8)

10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001ac8:	b580      	push	{r7, lr}
10001aca:	b086      	sub	sp, #24
10001acc:	af00      	add	r7, sp, #0
10001ace:	6078      	str	r0, [r7, #4]
10001ad0:	1c08      	adds	r0, r1, #0
10001ad2:	1c11      	adds	r1, r2, #0
10001ad4:	1cfb      	adds	r3, r7, #3
10001ad6:	1c02      	adds	r2, r0, #0
10001ad8:	701a      	strb	r2, [r3, #0]
10001ada:	1cbb      	adds	r3, r7, #2
10001adc:	1c0a      	adds	r2, r1, #0
10001ade:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001ae0:	1cfb      	adds	r3, r7, #3
10001ae2:	781b      	ldrb	r3, [r3, #0]
10001ae4:	2b0b      	cmp	r3, #11
10001ae6:	d820      	bhi.n	10001b2a <XMC_CCU4_SLICE_SetInterruptNode+0x62>
10001ae8:	009a      	lsls	r2, r3, #2
10001aea:	4b20      	ldr	r3, [pc, #128]	; (10001b6c <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10001aec:	18d3      	adds	r3, r2, r3
10001aee:	681b      	ldr	r3, [r3, #0]
10001af0:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001af2:	2303      	movs	r3, #3
10001af4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001af6:	2300      	movs	r3, #0
10001af8:	617b      	str	r3, [r7, #20]
      break;
10001afa:	e01b      	b.n	10001b34 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001afc:	230c      	movs	r3, #12
10001afe:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001b00:	2302      	movs	r3, #2
10001b02:	617b      	str	r3, [r7, #20]
      break;
10001b04:	e016      	b.n	10001b34 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001b06:	23c0      	movs	r3, #192	; 0xc0
10001b08:	009b      	lsls	r3, r3, #2
10001b0a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001b0c:	2308      	movs	r3, #8
10001b0e:	617b      	str	r3, [r7, #20]
      break;
10001b10:	e010      	b.n	10001b34 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001b12:	23c0      	movs	r3, #192	; 0xc0
10001b14:	011b      	lsls	r3, r3, #4
10001b16:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001b18:	230a      	movs	r3, #10
10001b1a:	617b      	str	r3, [r7, #20]
      break;
10001b1c:	e00a      	b.n	10001b34 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001b1e:	23c0      	movs	r3, #192	; 0xc0
10001b20:	019b      	lsls	r3, r3, #6
10001b22:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001b24:	230c      	movs	r3, #12
10001b26:	617b      	str	r3, [r7, #20]
      break;
10001b28:	e004      	b.n	10001b34 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
10001b2a:	2300      	movs	r3, #0
10001b2c:	613b      	str	r3, [r7, #16]
	  pos = 0;
10001b2e:	2300      	movs	r3, #0
10001b30:	617b      	str	r3, [r7, #20]
	  break;
10001b32:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001b34:	693b      	ldr	r3, [r7, #16]
10001b36:	2b00      	cmp	r3, #0
10001b38:	d014      	beq.n	10001b64 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
10001b3a:	687b      	ldr	r3, [r7, #4]
10001b3c:	22a8      	movs	r2, #168	; 0xa8
10001b3e:	589b      	ldr	r3, [r3, r2]
10001b40:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001b42:	693b      	ldr	r3, [r7, #16]
10001b44:	43da      	mvns	r2, r3
10001b46:	68fb      	ldr	r3, [r7, #12]
10001b48:	4013      	ands	r3, r2
10001b4a:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10001b4c:	1cbb      	adds	r3, r7, #2
10001b4e:	781a      	ldrb	r2, [r3, #0]
10001b50:	697b      	ldr	r3, [r7, #20]
10001b52:	409a      	lsls	r2, r3
10001b54:	1c13      	adds	r3, r2, #0
10001b56:	68fa      	ldr	r2, [r7, #12]
10001b58:	4313      	orrs	r3, r2
10001b5a:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10001b5c:	687b      	ldr	r3, [r7, #4]
10001b5e:	21a8      	movs	r1, #168	; 0xa8
10001b60:	68fa      	ldr	r2, [r7, #12]
10001b62:	505a      	str	r2, [r3, r1]
  }
}
10001b64:	46bd      	mov	sp, r7
10001b66:	b006      	add	sp, #24
10001b68:	bd80      	pop	{r7, pc}
10001b6a:	46c0      	nop			; (mov r8, r8)
10001b6c:	10007824 	.word	0x10007824

10001b70 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001b70:	b580      	push	{r7, lr}
10001b72:	b082      	sub	sp, #8
10001b74:	af00      	add	r7, sp, #0
10001b76:	6078      	str	r0, [r7, #4]
10001b78:	1c08      	adds	r0, r1, #0
10001b7a:	1c11      	adds	r1, r2, #0
10001b7c:	1cfb      	adds	r3, r7, #3
10001b7e:	1c02      	adds	r2, r0, #0
10001b80:	701a      	strb	r2, [r3, #0]
10001b82:	1cbb      	adds	r3, r7, #2
10001b84:	1c0a      	adds	r2, r1, #0
10001b86:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001b88:	687b      	ldr	r3, [r7, #4]
10001b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001b8c:	1cfa      	adds	r2, r7, #3
10001b8e:	7812      	ldrb	r2, [r2, #0]
10001b90:	0052      	lsls	r2, r2, #1
10001b92:	1c11      	adds	r1, r2, #0
10001b94:	2203      	movs	r2, #3
10001b96:	408a      	lsls	r2, r1
10001b98:	43d2      	mvns	r2, r2
10001b9a:	401a      	ands	r2, r3
10001b9c:	687b      	ldr	r3, [r7, #4]
10001b9e:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001ba0:	687b      	ldr	r3, [r7, #4]
10001ba2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001ba4:	1cbb      	adds	r3, r7, #2
10001ba6:	781b      	ldrb	r3, [r3, #0]
10001ba8:	1cf9      	adds	r1, r7, #3
10001baa:	7809      	ldrb	r1, [r1, #0]
10001bac:	0049      	lsls	r1, r1, #1
10001bae:	408b      	lsls	r3, r1
10001bb0:	431a      	orrs	r2, r3
10001bb2:	687b      	ldr	r3, [r7, #4]
10001bb4:	675a      	str	r2, [r3, #116]	; 0x74
}
10001bb6:	46bd      	mov	sp, r7
10001bb8:	b002      	add	sp, #8
10001bba:	bd80      	pop	{r7, pc}

10001bbc <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10001bbc:	b580      	push	{r7, lr}
10001bbe:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10001bc0:	2001      	movs	r0, #1
10001bc2:	f7ff fba3 	bl	1000130c <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10001bc6:	46bd      	mov	sp, r7
10001bc8:	bd80      	pop	{r7, pc}
10001bca:	46c0      	nop			; (mov r8, r8)

10001bcc <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10001bcc:	b580      	push	{r7, lr}
10001bce:	b084      	sub	sp, #16
10001bd0:	af00      	add	r7, sp, #0
10001bd2:	6078      	str	r0, [r7, #4]
10001bd4:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10001bd6:	f7ff fff1 	bl	10001bbc <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10001bda:	683b      	ldr	r3, [r7, #0]
10001bdc:	691a      	ldr	r2, [r3, #16]
10001bde:	687b      	ldr	r3, [r7, #4]
10001be0:	601a      	str	r2, [r3, #0]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10001be2:	683b      	ldr	r3, [r7, #0]
10001be4:	685a      	ldr	r2, [r3, #4]
10001be6:	687b      	ldr	r3, [r7, #4]
10001be8:	21a0      	movs	r1, #160	; 0xa0
10001bea:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10001bec:	683b      	ldr	r3, [r7, #0]
10001bee:	689a      	ldr	r2, [r3, #8]
10001bf0:	687b      	ldr	r3, [r7, #4]
10001bf2:	21a4      	movs	r1, #164	; 0xa4
10001bf4:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
10001bf6:	683b      	ldr	r3, [r7, #0]
10001bf8:	68d9      	ldr	r1, [r3, #12]
10001bfa:	687a      	ldr	r2, [r7, #4]
10001bfc:	23a0      	movs	r3, #160	; 0xa0
10001bfe:	009b      	lsls	r3, r3, #2
10001c00:	50d1      	str	r1, [r2, r3]

  /* Configure the SHS register that are needed for XMC11xx devices*/
#if (XMC_VADC_GROUP_AVAILABLE == 0U)

  /* Enabling the Analog part of the converter*/
  reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
10001c02:	4b09      	ldr	r3, [pc, #36]	; (10001c28 <XMC_VADC_GLOBAL_Init+0x5c>)
10001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001c06:	2280      	movs	r2, #128	; 0x80
10001c08:	0212      	lsls	r2, r2, #8
10001c0a:	4313      	orrs	r3, r2
10001c0c:	60fb      	str	r3, [r7, #12]
  reg &= ~(SHS_SHSCFG_ANOFF_Msk);
10001c0e:	68fb      	ldr	r3, [r7, #12]
10001c10:	4a06      	ldr	r2, [pc, #24]	; (10001c2c <XMC_VADC_GLOBAL_Init+0x60>)
10001c12:	4013      	ands	r3, r2
10001c14:	60fb      	str	r3, [r7, #12]
  SHS0->SHSCFG = reg;
10001c16:	4b04      	ldr	r3, [pc, #16]	; (10001c28 <XMC_VADC_GLOBAL_Init+0x5c>)
10001c18:	68fa      	ldr	r2, [r7, #12]
10001c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
10001c1c:	4b04      	ldr	r3, [pc, #16]	; (10001c30 <XMC_VADC_GLOBAL_Init+0x64>)
10001c1e:	2201      	movs	r2, #1
10001c20:	601a      	str	r2, [r3, #0]
#endif

}
10001c22:	46bd      	mov	sp, r7
10001c24:	b004      	add	sp, #16
10001c26:	bd80      	pop	{r7, pc}
10001c28:	48034000 	.word	0x48034000
10001c2c:	ffffefff 	.word	0xffffefff
10001c30:	40010500 	.word	0x40010500

10001c34 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10001c34:	b580      	push	{r7, lr}
10001c36:	b084      	sub	sp, #16
10001c38:	af00      	add	r7, sp, #0
10001c3a:	60f8      	str	r0, [r7, #12]
10001c3c:	60b9      	str	r1, [r7, #8]
10001c3e:	603b      	str	r3, [r7, #0]
10001c40:	1dfb      	adds	r3, r7, #7
10001c42:	701a      	strb	r2, [r3, #0]
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
10001c44:	68bb      	ldr	r3, [r7, #8]
10001c46:	4a05      	ldr	r2, [pc, #20]	; (10001c5c <XMC_VADC_GLOBAL_InputClassInit+0x28>)
10001c48:	4013      	ands	r3, r2
10001c4a:	1c19      	adds	r1, r3, #0
10001c4c:	68fb      	ldr	r3, [r7, #12]
10001c4e:	683a      	ldr	r2, [r7, #0]
10001c50:	3228      	adds	r2, #40	; 0x28
10001c52:	0092      	lsls	r2, r2, #2
10001c54:	50d1      	str	r1, [r2, r3]
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
  }
#endif
}
10001c56:	46bd      	mov	sp, r7
10001c58:	b004      	add	sp, #16
10001c5a:	bd80      	pop	{r7, pc}
10001c5c:	0000071f 	.word	0x0000071f

10001c60 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
10001c60:	b580      	push	{r7, lr}
10001c62:	b082      	sub	sp, #8
10001c64:	af00      	add	r7, sp, #0
10001c66:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10001c68:	687b      	ldr	r3, [r7, #4]
10001c6a:	2280      	movs	r2, #128	; 0x80
10001c6c:	589b      	ldr	r3, [r3, r2]
10001c6e:	2280      	movs	r2, #128	; 0x80
10001c70:	0612      	lsls	r2, r2, #24
10001c72:	431a      	orrs	r2, r3
10001c74:	687b      	ldr	r3, [r7, #4]
10001c76:	2180      	movs	r1, #128	; 0x80
10001c78:	505a      	str	r2, [r3, r1]
    }
  }
#else

  /* Loop until calibration is started */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
10001c7a:	e000      	b.n	10001c7e <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
  {
    __NOP();
10001c7c:	46c0      	nop			; (mov r8, r8)
    }
  }
#else

  /* Loop until calibration is started */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
10001c7e:	4b07      	ldr	r3, [pc, #28]	; (10001c9c <XMC_VADC_GLOBAL_StartupCalibration+0x3c>)
10001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001c82:	0f1b      	lsrs	r3, r3, #28
10001c84:	2b03      	cmp	r3, #3
10001c86:	d1f9      	bne.n	10001c7c <XMC_VADC_GLOBAL_StartupCalibration+0x1c>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
  {
    __NOP();
  }
  /* Loop until it finishes calibration */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
10001c88:	e000      	b.n	10001c8c <XMC_VADC_GLOBAL_StartupCalibration+0x2c>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
10001c8a:	46c0      	nop			; (mov r8, r8)
         XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
  {
    __NOP();
  }
  /* Loop until it finishes calibration */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
10001c8c:	4b03      	ldr	r3, [pc, #12]	; (10001c9c <XMC_VADC_GLOBAL_StartupCalibration+0x3c>)
10001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001c90:	0f1b      	lsrs	r3, r3, #28
10001c92:	2b03      	cmp	r3, #3
10001c94:	d0f9      	beq.n	10001c8a <XMC_VADC_GLOBAL_StartupCalibration+0x2a>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
10001c96:	46bd      	mov	sp, r7
10001c98:	b002      	add	sp, #8
10001c9a:	bd80      	pop	{r7, pc}
10001c9c:	48034000 	.word	0x48034000

10001ca0 <XMC_VADC_GLOBAL_SetResultEventInterruptNode>:
}
#endif

/* API to bind result event with a service request line */
void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
10001ca0:	b580      	push	{r7, lr}
10001ca2:	b084      	sub	sp, #16
10001ca4:	af00      	add	r7, sp, #0
10001ca6:	6078      	str	r0, [r7, #4]
10001ca8:	1c0a      	adds	r2, r1, #0
10001caa:	1cfb      	adds	r3, r7, #3
10001cac:	701a      	strb	r2, [r3, #0]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHARED_SR3))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
10001cae:	1cfb      	adds	r3, r7, #3
10001cb0:	781b      	ldrb	r3, [r3, #0]
10001cb2:	2b03      	cmp	r3, #3
10001cb4:	d904      	bls.n	10001cc0 <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x20>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
10001cb6:	1cfb      	adds	r3, r7, #3
10001cb8:	781b      	ldrb	r3, [r3, #0]
10001cba:	3b04      	subs	r3, #4
10001cbc:	60fb      	str	r3, [r7, #12]
10001cbe:	e002      	b.n	10001cc6 <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x26>
  }
  else
  {
    node = (uint32_t)sr;
10001cc0:	1cfb      	adds	r3, r7, #3
10001cc2:	781b      	ldrb	r3, [r3, #0]
10001cc4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
10001cc6:	687a      	ldr	r2, [r7, #4]
10001cc8:	23a0      	movs	r3, #160	; 0xa0
10001cca:	005b      	lsls	r3, r3, #1
10001ccc:	58d3      	ldr	r3, [r2, r3]
10001cce:	4a0b      	ldr	r2, [pc, #44]	; (10001cfc <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x5c>)
10001cd0:	4013      	ands	r3, r2
10001cd2:	1c19      	adds	r1, r3, #0
10001cd4:	687a      	ldr	r2, [r7, #4]
10001cd6:	23a0      	movs	r3, #160	; 0xa0
10001cd8:	005b      	lsls	r3, r3, #1
10001cda:	50d1      	str	r1, [r2, r3]
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
10001cdc:	687a      	ldr	r2, [r7, #4]
10001cde:	23a0      	movs	r3, #160	; 0xa0
10001ce0:	005b      	lsls	r3, r3, #1
10001ce2:	58d2      	ldr	r2, [r2, r3]
10001ce4:	68fb      	ldr	r3, [r7, #12]
10001ce6:	041b      	lsls	r3, r3, #16
10001ce8:	431a      	orrs	r2, r3
10001cea:	1c11      	adds	r1, r2, #0
10001cec:	687a      	ldr	r2, [r7, #4]
10001cee:	23a0      	movs	r3, #160	; 0xa0
10001cf0:	005b      	lsls	r3, r3, #1
10001cf2:	50d1      	str	r1, [r2, r3]
}
10001cf4:	46bd      	mov	sp, r7
10001cf6:	b004      	add	sp, #16
10001cf8:	bd80      	pop	{r7, pc}
10001cfa:	46c0      	nop			; (mov r8, r8)
10001cfc:	fff0ffff 	.word	0xfff0ffff

10001d00 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
10001d00:	b580      	push	{r7, lr}
10001d02:	b082      	sub	sp, #8
10001d04:	af00      	add	r7, sp, #0
10001d06:	6078      	str	r0, [r7, #4]
10001d08:	6039      	str	r1, [r7, #0]

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
10001d0a:	683b      	ldr	r3, [r7, #0]
10001d0c:	685b      	ldr	r3, [r3, #4]
10001d0e:	4a09      	ldr	r2, [pc, #36]	; (10001d34 <XMC_VADC_GLOBAL_BackgroundInit+0x34>)
10001d10:	431a      	orrs	r2, r3
10001d12:	1c11      	adds	r1, r2, #0
10001d14:	687a      	ldr	r2, [r7, #4]
10001d16:	2380      	movs	r3, #128	; 0x80
10001d18:	009b      	lsls	r3, r3, #2
10001d1a:	50d1      	str	r1, [r2, r3]

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
10001d1c:	683b      	ldr	r3, [r7, #0]
10001d1e:	689b      	ldr	r3, [r3, #8]
10001d20:	2201      	movs	r2, #1
10001d22:	431a      	orrs	r2, r3
10001d24:	1c11      	adds	r1, r2, #0
10001d26:	687a      	ldr	r2, [r7, #4]
10001d28:	2381      	movs	r3, #129	; 0x81
10001d2a:	009b      	lsls	r3, r3, #2
10001d2c:	50d1      	str	r1, [r2, r3]
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
10001d2e:	46bd      	mov	sp, r7
10001d30:	b002      	add	sp, #8
10001d32:	bd80      	pop	{r7, pc}
10001d34:	00808000 	.word	0x00808000

10001d38 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
10001d38:	b580      	push	{r7, lr}
10001d3a:	b084      	sub	sp, #16
10001d3c:	af00      	add	r7, sp, #0
10001d3e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10001d40:	4b14      	ldr	r3, [pc, #80]	; (10001d94 <_sbrk+0x5c>)
10001d42:	681b      	ldr	r3, [r3, #0]
10001d44:	2b00      	cmp	r3, #0
10001d46:	d102      	bne.n	10001d4e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
10001d48:	4b12      	ldr	r3, [pc, #72]	; (10001d94 <_sbrk+0x5c>)
10001d4a:	4a13      	ldr	r2, [pc, #76]	; (10001d98 <_sbrk+0x60>)
10001d4c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
10001d4e:	4b11      	ldr	r3, [pc, #68]	; (10001d94 <_sbrk+0x5c>)
10001d50:	681b      	ldr	r3, [r3, #0]
10001d52:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
10001d54:	687b      	ldr	r3, [r7, #4]
10001d56:	3303      	adds	r3, #3
10001d58:	2203      	movs	r2, #3
10001d5a:	4393      	bics	r3, r2
10001d5c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
10001d5e:	4b0d      	ldr	r3, [pc, #52]	; (10001d94 <_sbrk+0x5c>)
10001d60:	681a      	ldr	r2, [r3, #0]
10001d62:	687b      	ldr	r3, [r7, #4]
10001d64:	18d2      	adds	r2, r2, r3
10001d66:	4b0d      	ldr	r3, [pc, #52]	; (10001d9c <_sbrk+0x64>)
10001d68:	429a      	cmp	r2, r3
10001d6a:	d207      	bcs.n	10001d7c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
10001d6c:	4b09      	ldr	r3, [pc, #36]	; (10001d94 <_sbrk+0x5c>)
10001d6e:	681a      	ldr	r2, [r3, #0]
10001d70:	687b      	ldr	r3, [r7, #4]
10001d72:	18d2      	adds	r2, r2, r3
10001d74:	4b07      	ldr	r3, [pc, #28]	; (10001d94 <_sbrk+0x5c>)
10001d76:	601a      	str	r2, [r3, #0]
    return (base);
10001d78:	68fb      	ldr	r3, [r7, #12]
10001d7a:	e006      	b.n	10001d8a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
10001d7c:	f002 f94c 	bl	10004018 <__errno>
10001d80:	1c03      	adds	r3, r0, #0
10001d82:	220c      	movs	r2, #12
10001d84:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
10001d86:	2301      	movs	r3, #1
10001d88:	425b      	negs	r3, r3
  }
}
10001d8a:	1c18      	adds	r0, r3, #0
10001d8c:	46bd      	mov	sp, r7
10001d8e:	b004      	add	sp, #16
10001d90:	bd80      	pop	{r7, pc}
10001d92:	46c0      	nop			; (mov r8, r8)
10001d94:	20000648 	.word	0x20000648
10001d98:	200007d8 	.word	0x200007d8
10001d9c:	20003ffc 	.word	0x20003ffc

10001da0 <_init>:

/* Init */
void _init(void)
{}
10001da0:	b580      	push	{r7, lr}
10001da2:	af00      	add	r7, sp, #0
10001da4:	46bd      	mov	sp, r7
10001da6:	bd80      	pop	{r7, pc}

10001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001da8:	b5b0      	push	{r4, r5, r7, lr}
10001daa:	b082      	sub	sp, #8
10001dac:	af00      	add	r7, sp, #0
10001dae:	1c02      	adds	r2, r0, #0
10001db0:	6039      	str	r1, [r7, #0]
10001db2:	1dfb      	adds	r3, r7, #7
10001db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10001db6:	1dfb      	adds	r3, r7, #7
10001db8:	781b      	ldrb	r3, [r3, #0]
10001dba:	2b7f      	cmp	r3, #127	; 0x7f
10001dbc:	d827      	bhi.n	10001e0e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001dbe:	4c2d      	ldr	r4, [pc, #180]	; (10001e74 <__NVIC_SetPriority+0xcc>)
10001dc0:	1dfb      	adds	r3, r7, #7
10001dc2:	781b      	ldrb	r3, [r3, #0]
10001dc4:	b25b      	sxtb	r3, r3
10001dc6:	089b      	lsrs	r3, r3, #2
10001dc8:	492a      	ldr	r1, [pc, #168]	; (10001e74 <__NVIC_SetPriority+0xcc>)
10001dca:	1dfa      	adds	r2, r7, #7
10001dcc:	7812      	ldrb	r2, [r2, #0]
10001dce:	b252      	sxtb	r2, r2
10001dd0:	0892      	lsrs	r2, r2, #2
10001dd2:	32c0      	adds	r2, #192	; 0xc0
10001dd4:	0092      	lsls	r2, r2, #2
10001dd6:	5852      	ldr	r2, [r2, r1]
10001dd8:	1df9      	adds	r1, r7, #7
10001dda:	7809      	ldrb	r1, [r1, #0]
10001ddc:	1c08      	adds	r0, r1, #0
10001dde:	2103      	movs	r1, #3
10001de0:	4001      	ands	r1, r0
10001de2:	00c9      	lsls	r1, r1, #3
10001de4:	1c08      	adds	r0, r1, #0
10001de6:	21ff      	movs	r1, #255	; 0xff
10001de8:	4081      	lsls	r1, r0
10001dea:	43c9      	mvns	r1, r1
10001dec:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001dee:	683a      	ldr	r2, [r7, #0]
10001df0:	0192      	lsls	r2, r2, #6
10001df2:	20ff      	movs	r0, #255	; 0xff
10001df4:	4002      	ands	r2, r0
10001df6:	1df8      	adds	r0, r7, #7
10001df8:	7800      	ldrb	r0, [r0, #0]
10001dfa:	1c05      	adds	r5, r0, #0
10001dfc:	2003      	movs	r0, #3
10001dfe:	4028      	ands	r0, r5
10001e00:	00c0      	lsls	r0, r0, #3
10001e02:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001e04:	430a      	orrs	r2, r1
10001e06:	33c0      	adds	r3, #192	; 0xc0
10001e08:	009b      	lsls	r3, r3, #2
10001e0a:	511a      	str	r2, [r3, r4]
10001e0c:	e02e      	b.n	10001e6c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001e0e:	4c1a      	ldr	r4, [pc, #104]	; (10001e78 <__NVIC_SetPriority+0xd0>)
10001e10:	1dfb      	adds	r3, r7, #7
10001e12:	781b      	ldrb	r3, [r3, #0]
10001e14:	1c1a      	adds	r2, r3, #0
10001e16:	230f      	movs	r3, #15
10001e18:	4013      	ands	r3, r2
10001e1a:	3b08      	subs	r3, #8
10001e1c:	0899      	lsrs	r1, r3, #2
10001e1e:	4a16      	ldr	r2, [pc, #88]	; (10001e78 <__NVIC_SetPriority+0xd0>)
10001e20:	1dfb      	adds	r3, r7, #7
10001e22:	781b      	ldrb	r3, [r3, #0]
10001e24:	1c18      	adds	r0, r3, #0
10001e26:	230f      	movs	r3, #15
10001e28:	4003      	ands	r3, r0
10001e2a:	3b08      	subs	r3, #8
10001e2c:	089b      	lsrs	r3, r3, #2
10001e2e:	3306      	adds	r3, #6
10001e30:	009b      	lsls	r3, r3, #2
10001e32:	18d3      	adds	r3, r2, r3
10001e34:	685b      	ldr	r3, [r3, #4]
10001e36:	1dfa      	adds	r2, r7, #7
10001e38:	7812      	ldrb	r2, [r2, #0]
10001e3a:	1c10      	adds	r0, r2, #0
10001e3c:	2203      	movs	r2, #3
10001e3e:	4002      	ands	r2, r0
10001e40:	00d2      	lsls	r2, r2, #3
10001e42:	1c10      	adds	r0, r2, #0
10001e44:	22ff      	movs	r2, #255	; 0xff
10001e46:	4082      	lsls	r2, r0
10001e48:	43d2      	mvns	r2, r2
10001e4a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001e4c:	683b      	ldr	r3, [r7, #0]
10001e4e:	019b      	lsls	r3, r3, #6
10001e50:	20ff      	movs	r0, #255	; 0xff
10001e52:	4003      	ands	r3, r0
10001e54:	1df8      	adds	r0, r7, #7
10001e56:	7800      	ldrb	r0, [r0, #0]
10001e58:	1c05      	adds	r5, r0, #0
10001e5a:	2003      	movs	r0, #3
10001e5c:	4028      	ands	r0, r5
10001e5e:	00c0      	lsls	r0, r0, #3
10001e60:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001e62:	431a      	orrs	r2, r3
10001e64:	1d8b      	adds	r3, r1, #6
10001e66:	009b      	lsls	r3, r3, #2
10001e68:	18e3      	adds	r3, r4, r3
10001e6a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10001e6c:	46bd      	mov	sp, r7
10001e6e:	b002      	add	sp, #8
10001e70:	bdb0      	pop	{r4, r5, r7, pc}
10001e72:	46c0      	nop			; (mov r8, r8)
10001e74:	e000e100 	.word	0xe000e100
10001e78:	e000ed00 	.word	0xe000ed00

10001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001e7c:	b580      	push	{r7, lr}
10001e7e:	b082      	sub	sp, #8
10001e80:	af00      	add	r7, sp, #0
10001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001e84:	687b      	ldr	r3, [r7, #4]
10001e86:	3b01      	subs	r3, #1
10001e88:	4a0c      	ldr	r2, [pc, #48]	; (10001ebc <SysTick_Config+0x40>)
10001e8a:	4293      	cmp	r3, r2
10001e8c:	d901      	bls.n	10001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10001e8e:	2301      	movs	r3, #1
10001e90:	e010      	b.n	10001eb4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10001e92:	4b0b      	ldr	r3, [pc, #44]	; (10001ec0 <SysTick_Config+0x44>)
10001e94:	687a      	ldr	r2, [r7, #4]
10001e96:	3a01      	subs	r2, #1
10001e98:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001e9a:	2301      	movs	r3, #1
10001e9c:	425b      	negs	r3, r3
10001e9e:	1c18      	adds	r0, r3, #0
10001ea0:	2103      	movs	r1, #3
10001ea2:	f7ff ff81 	bl	10001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001ea6:	4b06      	ldr	r3, [pc, #24]	; (10001ec0 <SysTick_Config+0x44>)
10001ea8:	2200      	movs	r2, #0
10001eaa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001eac:	4b04      	ldr	r3, [pc, #16]	; (10001ec0 <SysTick_Config+0x44>)
10001eae:	2207      	movs	r2, #7
10001eb0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10001eb2:	2300      	movs	r3, #0
}
10001eb4:	1c18      	adds	r0, r3, #0
10001eb6:	46bd      	mov	sp, r7
10001eb8:	b002      	add	sp, #8
10001eba:	bd80      	pop	{r7, pc}
10001ebc:	00ffffff 	.word	0x00ffffff
10001ec0:	e000e010 	.word	0xe000e010

10001ec4 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
10001ec4:	b590      	push	{r4, r7, lr}
10001ec6:	b087      	sub	sp, #28
10001ec8:	af00      	add	r7, sp, #0
10001eca:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
10001ecc:	230f      	movs	r3, #15
10001ece:	18fb      	adds	r3, r7, r3
10001ed0:	2200      	movs	r2, #0
10001ed2:	701a      	strb	r2, [r3, #0]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
10001ed4:	496b      	ldr	r1, [pc, #428]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001ed6:	687a      	ldr	r2, [r7, #4]
10001ed8:	1c13      	adds	r3, r2, #0
10001eda:	00db      	lsls	r3, r3, #3
10001edc:	189b      	adds	r3, r3, r2
10001ede:	009b      	lsls	r3, r3, #2
10001ee0:	18cb      	adds	r3, r1, r3
10001ee2:	3318      	adds	r3, #24
10001ee4:	681b      	ldr	r3, [r3, #0]
10001ee6:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
10001ee8:	4b67      	ldr	r3, [pc, #412]	; (10002088 <SYSTIMER_lInsertTimerList+0x1c4>)
10001eea:	681b      	ldr	r3, [r3, #0]
10001eec:	2b00      	cmp	r3, #0
10001eee:	d109      	bne.n	10001f04 <SYSTIMER_lInsertTimerList+0x40>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
10001ef0:	687a      	ldr	r2, [r7, #4]
10001ef2:	1c13      	adds	r3, r2, #0
10001ef4:	00db      	lsls	r3, r3, #3
10001ef6:	189b      	adds	r3, r3, r2
10001ef8:	009b      	lsls	r3, r3, #2
10001efa:	4a62      	ldr	r2, [pc, #392]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001efc:	189a      	adds	r2, r3, r2
10001efe:	4b62      	ldr	r3, [pc, #392]	; (10002088 <SYSTIMER_lInsertTimerList+0x1c4>)
10001f00:	601a      	str	r2, [r3, #0]
10001f02:	e0bc      	b.n	1000207e <SYSTIMER_lInsertTimerList+0x1ba>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
10001f04:	4b60      	ldr	r3, [pc, #384]	; (10002088 <SYSTIMER_lInsertTimerList+0x1c4>)
10001f06:	681b      	ldr	r3, [r3, #0]
10001f08:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
10001f0a:	68bb      	ldr	r3, [r7, #8]
10001f0c:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
10001f0e:	e0aa      	b.n	10002066 <SYSTIMER_lInsertTimerList+0x1a2>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
10001f10:	697b      	ldr	r3, [r7, #20]
10001f12:	699b      	ldr	r3, [r3, #24]
10001f14:	1c1a      	adds	r2, r3, #0
10001f16:	693b      	ldr	r3, [r7, #16]
10001f18:	1a9b      	subs	r3, r3, r2
10001f1a:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
10001f1c:	693b      	ldr	r3, [r7, #16]
10001f1e:	2b00      	cmp	r3, #0
10001f20:	dc77      	bgt.n	10002012 <SYSTIMER_lInsertTimerList+0x14e>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
10001f22:	697b      	ldr	r3, [r7, #20]
10001f24:	685b      	ldr	r3, [r3, #4]
10001f26:	2b00      	cmp	r3, #0
10001f28:	d025      	beq.n	10001f76 <SYSTIMER_lInsertTimerList+0xb2>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
10001f2a:	697b      	ldr	r3, [r7, #20]
10001f2c:	685a      	ldr	r2, [r3, #4]
10001f2e:	6879      	ldr	r1, [r7, #4]
10001f30:	1c0b      	adds	r3, r1, #0
10001f32:	00db      	lsls	r3, r3, #3
10001f34:	185b      	adds	r3, r3, r1
10001f36:	009b      	lsls	r3, r3, #2
10001f38:	4952      	ldr	r1, [pc, #328]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001f3a:	185b      	adds	r3, r3, r1
10001f3c:	6013      	str	r3, [r2, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
10001f3e:	697b      	ldr	r3, [r7, #20]
10001f40:	6859      	ldr	r1, [r3, #4]
10001f42:	4850      	ldr	r0, [pc, #320]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001f44:	687a      	ldr	r2, [r7, #4]
10001f46:	1c13      	adds	r3, r2, #0
10001f48:	00db      	lsls	r3, r3, #3
10001f4a:	189b      	adds	r3, r3, r2
10001f4c:	009b      	lsls	r3, r3, #2
10001f4e:	18c3      	adds	r3, r0, r3
10001f50:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
10001f52:	494c      	ldr	r1, [pc, #304]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001f54:	687a      	ldr	r2, [r7, #4]
10001f56:	1c13      	adds	r3, r2, #0
10001f58:	00db      	lsls	r3, r3, #3
10001f5a:	189b      	adds	r3, r3, r2
10001f5c:	009b      	lsls	r3, r3, #2
10001f5e:	697a      	ldr	r2, [r7, #20]
10001f60:	505a      	str	r2, [r3, r1]
          object_ptr->prev = &g_timer_tbl[tbl_index];
10001f62:	687a      	ldr	r2, [r7, #4]
10001f64:	1c13      	adds	r3, r2, #0
10001f66:	00db      	lsls	r3, r3, #3
10001f68:	189b      	adds	r3, r3, r2
10001f6a:	009b      	lsls	r3, r3, #2
10001f6c:	4a45      	ldr	r2, [pc, #276]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001f6e:	189a      	adds	r2, r3, r2
10001f70:	697b      	ldr	r3, [r7, #20]
10001f72:	605a      	str	r2, [r3, #4]
10001f74:	e01b      	b.n	10001fae <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
10001f76:	4b44      	ldr	r3, [pc, #272]	; (10002088 <SYSTIMER_lInsertTimerList+0x1c4>)
10001f78:	6818      	ldr	r0, [r3, #0]
10001f7a:	4942      	ldr	r1, [pc, #264]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001f7c:	687a      	ldr	r2, [r7, #4]
10001f7e:	1c13      	adds	r3, r2, #0
10001f80:	00db      	lsls	r3, r3, #3
10001f82:	189b      	adds	r3, r3, r2
10001f84:	009b      	lsls	r3, r3, #2
10001f86:	5058      	str	r0, [r3, r1]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
10001f88:	4b3f      	ldr	r3, [pc, #252]	; (10002088 <SYSTIMER_lInsertTimerList+0x1c4>)
10001f8a:	681a      	ldr	r2, [r3, #0]
10001f8c:	6879      	ldr	r1, [r7, #4]
10001f8e:	1c0b      	adds	r3, r1, #0
10001f90:	00db      	lsls	r3, r3, #3
10001f92:	185b      	adds	r3, r3, r1
10001f94:	009b      	lsls	r3, r3, #2
10001f96:	493b      	ldr	r1, [pc, #236]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001f98:	185b      	adds	r3, r3, r1
10001f9a:	6053      	str	r3, [r2, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
10001f9c:	687a      	ldr	r2, [r7, #4]
10001f9e:	1c13      	adds	r3, r2, #0
10001fa0:	00db      	lsls	r3, r3, #3
10001fa2:	189b      	adds	r3, r3, r2
10001fa4:	009b      	lsls	r3, r3, #2
10001fa6:	4a37      	ldr	r2, [pc, #220]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001fa8:	189a      	adds	r2, r3, r2
10001faa:	4b37      	ldr	r3, [pc, #220]	; (10002088 <SYSTIMER_lInsertTimerList+0x1c4>)
10001fac:	601a      	str	r2, [r3, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
10001fae:	4935      	ldr	r1, [pc, #212]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001fb0:	687a      	ldr	r2, [r7, #4]
10001fb2:	1c13      	adds	r3, r2, #0
10001fb4:	00db      	lsls	r3, r3, #3
10001fb6:	189b      	adds	r3, r3, r2
10001fb8:	009b      	lsls	r3, r3, #2
10001fba:	585b      	ldr	r3, [r3, r1]
10001fbc:	699a      	ldr	r2, [r3, #24]
10001fbe:	693b      	ldr	r3, [r7, #16]
10001fc0:	18d1      	adds	r1, r2, r3
10001fc2:	4830      	ldr	r0, [pc, #192]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001fc4:	687a      	ldr	r2, [r7, #4]
10001fc6:	1c13      	adds	r3, r2, #0
10001fc8:	00db      	lsls	r3, r3, #3
10001fca:	189b      	adds	r3, r3, r2
10001fcc:	009b      	lsls	r3, r3, #2
10001fce:	18c3      	adds	r3, r0, r3
10001fd0:	3318      	adds	r3, #24
10001fd2:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
10001fd4:	492b      	ldr	r1, [pc, #172]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001fd6:	687a      	ldr	r2, [r7, #4]
10001fd8:	1c13      	adds	r3, r2, #0
10001fda:	00db      	lsls	r3, r3, #3
10001fdc:	189b      	adds	r3, r3, r2
10001fde:	009b      	lsls	r3, r3, #2
10001fe0:	585a      	ldr	r2, [r3, r1]
10001fe2:	4828      	ldr	r0, [pc, #160]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001fe4:	6879      	ldr	r1, [r7, #4]
10001fe6:	1c0b      	adds	r3, r1, #0
10001fe8:	00db      	lsls	r3, r3, #3
10001fea:	185b      	adds	r3, r3, r1
10001fec:	009b      	lsls	r3, r3, #2
10001fee:	581b      	ldr	r3, [r3, r0]
10001ff0:	6998      	ldr	r0, [r3, #24]
10001ff2:	4c24      	ldr	r4, [pc, #144]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10001ff4:	6879      	ldr	r1, [r7, #4]
10001ff6:	1c0b      	adds	r3, r1, #0
10001ff8:	00db      	lsls	r3, r3, #3
10001ffa:	185b      	adds	r3, r3, r1
10001ffc:	009b      	lsls	r3, r3, #2
10001ffe:	18e3      	adds	r3, r4, r3
10002000:	3318      	adds	r3, #24
10002002:	681b      	ldr	r3, [r3, #0]
10002004:	1ac3      	subs	r3, r0, r3
10002006:	6193      	str	r3, [r2, #24]
        found_flag = true;
10002008:	230f      	movs	r3, #15
1000200a:	18fb      	adds	r3, r7, r3
1000200c:	2201      	movs	r2, #1
1000200e:	701a      	strb	r2, [r3, #0]
10002010:	e026      	b.n	10002060 <SYSTIMER_lInsertTimerList+0x19c>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
10002012:	693b      	ldr	r3, [r7, #16]
10002014:	2b00      	cmp	r3, #0
10002016:	dd23      	ble.n	10002060 <SYSTIMER_lInsertTimerList+0x19c>
10002018:	697b      	ldr	r3, [r7, #20]
1000201a:	681b      	ldr	r3, [r3, #0]
1000201c:	2b00      	cmp	r3, #0
1000201e:	d11f      	bne.n	10002060 <SYSTIMER_lInsertTimerList+0x19c>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
10002020:	4918      	ldr	r1, [pc, #96]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10002022:	687a      	ldr	r2, [r7, #4]
10002024:	1c13      	adds	r3, r2, #0
10002026:	00db      	lsls	r3, r3, #3
10002028:	189b      	adds	r3, r3, r2
1000202a:	009b      	lsls	r3, r3, #2
1000202c:	18cb      	adds	r3, r1, r3
1000202e:	697a      	ldr	r2, [r7, #20]
10002030:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
10002032:	687a      	ldr	r2, [r7, #4]
10002034:	1c13      	adds	r3, r2, #0
10002036:	00db      	lsls	r3, r3, #3
10002038:	189b      	adds	r3, r3, r2
1000203a:	009b      	lsls	r3, r3, #2
1000203c:	4a11      	ldr	r2, [pc, #68]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
1000203e:	189a      	adds	r2, r3, r2
10002040:	697b      	ldr	r3, [r7, #20]
10002042:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
10002044:	6939      	ldr	r1, [r7, #16]
10002046:	480f      	ldr	r0, [pc, #60]	; (10002084 <SYSTIMER_lInsertTimerList+0x1c0>)
10002048:	687a      	ldr	r2, [r7, #4]
1000204a:	1c13      	adds	r3, r2, #0
1000204c:	00db      	lsls	r3, r3, #3
1000204e:	189b      	adds	r3, r3, r2
10002050:	009b      	lsls	r3, r3, #2
10002052:	18c3      	adds	r3, r0, r3
10002054:	3318      	adds	r3, #24
10002056:	6019      	str	r1, [r3, #0]
          found_flag = true;
10002058:	230f      	movs	r3, #15
1000205a:	18fb      	adds	r3, r7, r3
1000205c:	2201      	movs	r2, #1
1000205e:	701a      	strb	r2, [r3, #0]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
10002060:	697b      	ldr	r3, [r7, #20]
10002062:	681b      	ldr	r3, [r3, #0]
10002064:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
10002066:	697b      	ldr	r3, [r7, #20]
10002068:	2b00      	cmp	r3, #0
1000206a:	d008      	beq.n	1000207e <SYSTIMER_lInsertTimerList+0x1ba>
1000206c:	230f      	movs	r3, #15
1000206e:	18fb      	adds	r3, r7, r3
10002070:	781b      	ldrb	r3, [r3, #0]
10002072:	2201      	movs	r2, #1
10002074:	4053      	eors	r3, r2
10002076:	b2db      	uxtb	r3, r3
10002078:	2b00      	cmp	r3, #0
1000207a:	d000      	beq.n	1000207e <SYSTIMER_lInsertTimerList+0x1ba>
1000207c:	e748      	b.n	10001f10 <SYSTIMER_lInsertTimerList+0x4c>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
1000207e:	46bd      	mov	sp, r7
10002080:	b007      	add	sp, #28
10002082:	bd90      	pop	{r4, r7, pc}
10002084:	200006ac 	.word	0x200006ac
10002088:	2000064c 	.word	0x2000064c

1000208c <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
1000208c:	b580      	push	{r7, lr}
1000208e:	b084      	sub	sp, #16
10002090:	af00      	add	r7, sp, #0
10002092:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
10002094:	687a      	ldr	r2, [r7, #4]
10002096:	1c13      	adds	r3, r2, #0
10002098:	00db      	lsls	r3, r3, #3
1000209a:	189b      	adds	r3, r3, r2
1000209c:	009b      	lsls	r3, r3, #2
1000209e:	4a28      	ldr	r2, [pc, #160]	; (10002140 <SYSTIMER_lRemoveTimerList+0xb4>)
100020a0:	189b      	adds	r3, r3, r2
100020a2:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
100020a4:	68fb      	ldr	r3, [r7, #12]
100020a6:	685b      	ldr	r3, [r3, #4]
100020a8:	2b00      	cmp	r3, #0
100020aa:	d107      	bne.n	100020bc <SYSTIMER_lRemoveTimerList+0x30>
100020ac:	68fb      	ldr	r3, [r7, #12]
100020ae:	681b      	ldr	r3, [r3, #0]
100020b0:	2b00      	cmp	r3, #0
100020b2:	d103      	bne.n	100020bc <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
100020b4:	4b23      	ldr	r3, [pc, #140]	; (10002144 <SYSTIMER_lRemoveTimerList+0xb8>)
100020b6:	2200      	movs	r2, #0
100020b8:	601a      	str	r2, [r3, #0]
100020ba:	e03d      	b.n	10002138 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
100020bc:	68fb      	ldr	r3, [r7, #12]
100020be:	685b      	ldr	r3, [r3, #4]
100020c0:	2b00      	cmp	r3, #0
100020c2:	d114      	bne.n	100020ee <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
100020c4:	68fb      	ldr	r3, [r7, #12]
100020c6:	681a      	ldr	r2, [r3, #0]
100020c8:	4b1e      	ldr	r3, [pc, #120]	; (10002144 <SYSTIMER_lRemoveTimerList+0xb8>)
100020ca:	601a      	str	r2, [r3, #0]
    g_timer_list->prev = NULL;
100020cc:	4b1d      	ldr	r3, [pc, #116]	; (10002144 <SYSTIMER_lRemoveTimerList+0xb8>)
100020ce:	681b      	ldr	r3, [r3, #0]
100020d0:	2200      	movs	r2, #0
100020d2:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
100020d4:	4b1b      	ldr	r3, [pc, #108]	; (10002144 <SYSTIMER_lRemoveTimerList+0xb8>)
100020d6:	681b      	ldr	r3, [r3, #0]
100020d8:	4a1a      	ldr	r2, [pc, #104]	; (10002144 <SYSTIMER_lRemoveTimerList+0xb8>)
100020da:	6812      	ldr	r2, [r2, #0]
100020dc:	6991      	ldr	r1, [r2, #24]
100020de:	68fa      	ldr	r2, [r7, #12]
100020e0:	6992      	ldr	r2, [r2, #24]
100020e2:	188a      	adds	r2, r1, r2
100020e4:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
100020e6:	68fb      	ldr	r3, [r7, #12]
100020e8:	2200      	movs	r2, #0
100020ea:	601a      	str	r2, [r3, #0]
100020ec:	e024      	b.n	10002138 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
100020ee:	68fb      	ldr	r3, [r7, #12]
100020f0:	681b      	ldr	r3, [r3, #0]
100020f2:	2b00      	cmp	r3, #0
100020f4:	d107      	bne.n	10002106 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
100020f6:	68fb      	ldr	r3, [r7, #12]
100020f8:	685b      	ldr	r3, [r3, #4]
100020fa:	2200      	movs	r2, #0
100020fc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
100020fe:	68fb      	ldr	r3, [r7, #12]
10002100:	2200      	movs	r2, #0
10002102:	605a      	str	r2, [r3, #4]
10002104:	e018      	b.n	10002138 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
10002106:	68fb      	ldr	r3, [r7, #12]
10002108:	685b      	ldr	r3, [r3, #4]
1000210a:	68fa      	ldr	r2, [r7, #12]
1000210c:	6812      	ldr	r2, [r2, #0]
1000210e:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
10002110:	68fb      	ldr	r3, [r7, #12]
10002112:	681b      	ldr	r3, [r3, #0]
10002114:	68fa      	ldr	r2, [r7, #12]
10002116:	6852      	ldr	r2, [r2, #4]
10002118:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
1000211a:	68fb      	ldr	r3, [r7, #12]
1000211c:	681b      	ldr	r3, [r3, #0]
1000211e:	68fa      	ldr	r2, [r7, #12]
10002120:	6812      	ldr	r2, [r2, #0]
10002122:	6991      	ldr	r1, [r2, #24]
10002124:	68fa      	ldr	r2, [r7, #12]
10002126:	6992      	ldr	r2, [r2, #24]
10002128:	188a      	adds	r2, r1, r2
1000212a:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
1000212c:	68fb      	ldr	r3, [r7, #12]
1000212e:	2200      	movs	r2, #0
10002130:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
10002132:	68fb      	ldr	r3, [r7, #12]
10002134:	2200      	movs	r2, #0
10002136:	605a      	str	r2, [r3, #4]
  }
}
10002138:	46bd      	mov	sp, r7
1000213a:	b004      	add	sp, #16
1000213c:	bd80      	pop	{r7, pc}
1000213e:	46c0      	nop			; (mov r8, r8)
10002140:	200006ac 	.word	0x200006ac
10002144:	2000064c 	.word	0x2000064c

10002148 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
10002148:	b580      	push	{r7, lr}
1000214a:	b082      	sub	sp, #8
1000214c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
1000214e:	4b2f      	ldr	r3, [pc, #188]	; (1000220c <SYSTIMER_lTimerHandler+0xc4>)
10002150:	681b      	ldr	r3, [r3, #0]
10002152:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
10002154:	e050      	b.n	100021f8 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
10002156:	687b      	ldr	r3, [r7, #4]
10002158:	2220      	movs	r2, #32
1000215a:	5c9b      	ldrb	r3, [r3, r2]
1000215c:	2b00      	cmp	r3, #0
1000215e:	d013      	beq.n	10002188 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10002160:	687b      	ldr	r3, [r7, #4]
10002162:	695b      	ldr	r3, [r3, #20]
10002164:	1c18      	adds	r0, r3, #0
10002166:	f7ff ff91 	bl	1000208c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
1000216a:	687b      	ldr	r3, [r7, #4]
1000216c:	2200      	movs	r2, #0
1000216e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
10002170:	687b      	ldr	r3, [r7, #4]
10002172:	695b      	ldr	r3, [r3, #20]
10002174:	1c1a      	adds	r2, r3, #0
10002176:	2301      	movs	r3, #1
10002178:	4093      	lsls	r3, r2
1000217a:	43da      	mvns	r2, r3
1000217c:	4b24      	ldr	r3, [pc, #144]	; (10002210 <SYSTIMER_lTimerHandler+0xc8>)
1000217e:	681b      	ldr	r3, [r3, #0]
10002180:	401a      	ands	r2, r3
10002182:	4b23      	ldr	r3, [pc, #140]	; (10002210 <SYSTIMER_lTimerHandler+0xc8>)
10002184:	601a      	str	r2, [r3, #0]
10002186:	e034      	b.n	100021f2 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
10002188:	687b      	ldr	r3, [r7, #4]
1000218a:	7b1b      	ldrb	r3, [r3, #12]
1000218c:	2b00      	cmp	r3, #0
1000218e:	d112      	bne.n	100021b6 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
10002190:	687b      	ldr	r3, [r7, #4]
10002192:	7b5b      	ldrb	r3, [r3, #13]
10002194:	2b01      	cmp	r3, #1
10002196:	d12c      	bne.n	100021f2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10002198:	687b      	ldr	r3, [r7, #4]
1000219a:	695b      	ldr	r3, [r3, #20]
1000219c:	1c18      	adds	r0, r3, #0
1000219e:	f7ff ff75 	bl	1000208c <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
100021a2:	687b      	ldr	r3, [r7, #4]
100021a4:	2202      	movs	r2, #2
100021a6:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
100021a8:	687b      	ldr	r3, [r7, #4]
100021aa:	689a      	ldr	r2, [r3, #8]
100021ac:	687b      	ldr	r3, [r7, #4]
100021ae:	691b      	ldr	r3, [r3, #16]
100021b0:	1c18      	adds	r0, r3, #0
100021b2:	4790      	blx	r2
100021b4:	e01d      	b.n	100021f2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
100021b6:	687b      	ldr	r3, [r7, #4]
100021b8:	7b1b      	ldrb	r3, [r3, #12]
100021ba:	2b01      	cmp	r3, #1
100021bc:	d118      	bne.n	100021f0 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
100021be:	687b      	ldr	r3, [r7, #4]
100021c0:	7b5b      	ldrb	r3, [r3, #13]
100021c2:	2b01      	cmp	r3, #1
100021c4:	d115      	bne.n	100021f2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
100021c6:	687b      	ldr	r3, [r7, #4]
100021c8:	695b      	ldr	r3, [r3, #20]
100021ca:	1c18      	adds	r0, r3, #0
100021cc:	f7ff ff5e 	bl	1000208c <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
100021d0:	687b      	ldr	r3, [r7, #4]
100021d2:	69da      	ldr	r2, [r3, #28]
100021d4:	687b      	ldr	r3, [r7, #4]
100021d6:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
100021d8:	687b      	ldr	r3, [r7, #4]
100021da:	695b      	ldr	r3, [r3, #20]
100021dc:	1c18      	adds	r0, r3, #0
100021de:	f7ff fe71 	bl	10001ec4 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
100021e2:	687b      	ldr	r3, [r7, #4]
100021e4:	689a      	ldr	r2, [r3, #8]
100021e6:	687b      	ldr	r3, [r7, #4]
100021e8:	691b      	ldr	r3, [r3, #16]
100021ea:	1c18      	adds	r0, r3, #0
100021ec:	4790      	blx	r2
100021ee:	e000      	b.n	100021f2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
100021f0:	e009      	b.n	10002206 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
100021f2:	4b06      	ldr	r3, [pc, #24]	; (1000220c <SYSTIMER_lTimerHandler+0xc4>)
100021f4:	681b      	ldr	r3, [r3, #0]
100021f6:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
100021f8:	687b      	ldr	r3, [r7, #4]
100021fa:	2b00      	cmp	r3, #0
100021fc:	d003      	beq.n	10002206 <SYSTIMER_lTimerHandler+0xbe>
100021fe:	687b      	ldr	r3, [r7, #4]
10002200:	699b      	ldr	r3, [r3, #24]
10002202:	2b00      	cmp	r3, #0
10002204:	d0a7      	beq.n	10002156 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
10002206:	46bd      	mov	sp, r7
10002208:	b002      	add	sp, #8
1000220a:	bd80      	pop	{r7, pc}
1000220c:	2000064c 	.word	0x2000064c
10002210:	20000650 	.word	0x20000650

10002214 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
10002214:	b580      	push	{r7, lr}
10002216:	b082      	sub	sp, #8
10002218:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
1000221a:	4b0e      	ldr	r3, [pc, #56]	; (10002254 <SysTick_Handler+0x40>)
1000221c:	681b      	ldr	r3, [r3, #0]
1000221e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
10002220:	4b0d      	ldr	r3, [pc, #52]	; (10002258 <SysTick_Handler+0x44>)
10002222:	681b      	ldr	r3, [r3, #0]
10002224:	1c5a      	adds	r2, r3, #1
10002226:	4b0c      	ldr	r3, [pc, #48]	; (10002258 <SysTick_Handler+0x44>)
10002228:	601a      	str	r2, [r3, #0]

  if (NULL != object_ptr)
1000222a:	687b      	ldr	r3, [r7, #4]
1000222c:	2b00      	cmp	r3, #0
1000222e:	d00e      	beq.n	1000224e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	699b      	ldr	r3, [r3, #24]
10002234:	2b01      	cmp	r3, #1
10002236:	d905      	bls.n	10002244 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
10002238:	687b      	ldr	r3, [r7, #4]
1000223a:	699b      	ldr	r3, [r3, #24]
1000223c:	1e5a      	subs	r2, r3, #1
1000223e:	687b      	ldr	r3, [r7, #4]
10002240:	619a      	str	r2, [r3, #24]
10002242:	e004      	b.n	1000224e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
10002244:	687b      	ldr	r3, [r7, #4]
10002246:	2200      	movs	r2, #0
10002248:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
1000224a:	f7ff ff7d 	bl	10002148 <SYSTIMER_lTimerHandler>
    }
  }
}
1000224e:	46bd      	mov	sp, r7
10002250:	b002      	add	sp, #8
10002252:	bd80      	pop	{r7, pc}
10002254:	2000064c 	.word	0x2000064c
10002258:	20000654 	.word	0x20000654

1000225c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
1000225c:	b580      	push	{r7, lr}
1000225e:	b084      	sub	sp, #16
10002260:	af00      	add	r7, sp, #0
10002262:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
10002264:	230f      	movs	r3, #15
10002266:	18fb      	adds	r3, r7, r3
10002268:	2200      	movs	r2, #0
1000226a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
1000226c:	687b      	ldr	r3, [r7, #4]
1000226e:	781b      	ldrb	r3, [r3, #0]
10002270:	2201      	movs	r2, #1
10002272:	4053      	eors	r3, r2
10002274:	b2db      	uxtb	r3, r3
10002276:	2b00      	cmp	r3, #0
10002278:	d020      	beq.n	100022bc <SYSTIMER_Init+0x60>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
1000227a:	4b14      	ldr	r3, [pc, #80]	; (100022cc <SYSTIMER_Init+0x70>)
1000227c:	2200      	movs	r2, #0
1000227e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
10002280:	23fa      	movs	r3, #250	; 0xfa
10002282:	01db      	lsls	r3, r3, #7
10002284:	1c18      	adds	r0, r3, #0
10002286:	f7ff fdf9 	bl	10001e7c <SysTick_Config>
1000228a:	1c02      	adds	r2, r0, #0
1000228c:	230f      	movs	r3, #15
1000228e:	18fb      	adds	r3, r7, r3
10002290:	701a      	strb	r2, [r3, #0]

    if (SYSTIMER_STATUS_FAILURE == status)
10002292:	230f      	movs	r3, #15
10002294:	18fb      	adds	r3, r7, r3
10002296:	781b      	ldrb	r3, [r3, #0]
10002298:	2b01      	cmp	r3, #1
1000229a:	d00f      	beq.n	100022bc <SYSTIMER_Init+0x60>
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
1000229c:	2301      	movs	r3, #1
1000229e:	425b      	negs	r3, r3
100022a0:	1c18      	adds	r0, r3, #0
100022a2:	2103      	movs	r1, #3
100022a4:	f7ff fd80 	bl	10001da8 <__NVIC_SetPriority>
#endif      
      g_timer_tracker = 0U;
100022a8:	4b09      	ldr	r3, [pc, #36]	; (100022d0 <SYSTIMER_Init+0x74>)
100022aa:	2200      	movs	r2, #0
100022ac:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
100022ae:	687b      	ldr	r3, [r7, #4]
100022b0:	2201      	movs	r2, #1
100022b2:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
100022b4:	230f      	movs	r3, #15
100022b6:	18fb      	adds	r3, r7, r3
100022b8:	2200      	movs	r2, #0
100022ba:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
100022bc:	230f      	movs	r3, #15
100022be:	18fb      	adds	r3, r7, r3
100022c0:	781b      	ldrb	r3, [r3, #0]
}
100022c2:	1c18      	adds	r0, r3, #0
100022c4:	46bd      	mov	sp, r7
100022c6:	b004      	add	sp, #16
100022c8:	bd80      	pop	{r7, pc}
100022ca:	46c0      	nop			; (mov r8, r8)
100022cc:	2000064c 	.word	0x2000064c
100022d0:	20000650 	.word	0x20000650

100022d4 <SYSTIMER_GetTime>:

/*
 *  API to get the current SysTick time in microsecond.
 */
uint32_t SYSTIMER_GetTime(void)
{
100022d4:	b580      	push	{r7, lr}
100022d6:	af00      	add	r7, sp, #0
  return (g_systick_count * SYSTIMER_TICK_PERIOD_US);
100022d8:	4b03      	ldr	r3, [pc, #12]	; (100022e8 <SYSTIMER_GetTime+0x14>)
100022da:	681b      	ldr	r3, [r3, #0]
100022dc:	22fa      	movs	r2, #250	; 0xfa
100022de:	0092      	lsls	r2, r2, #2
100022e0:	4353      	muls	r3, r2
}
100022e2:	1c18      	adds	r0, r3, #0
100022e4:	46bd      	mov	sp, r7
100022e6:	bd80      	pop	{r7, pc}
100022e8:	20000654 	.word	0x20000654

100022ec <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
100022ec:	b580      	push	{r7, lr}
100022ee:	b082      	sub	sp, #8
100022f0:	af00      	add	r7, sp, #0
100022f2:	6078      	str	r0, [r7, #4]
100022f4:	1c0a      	adds	r2, r1, #0
100022f6:	1cfb      	adds	r3, r7, #3
100022f8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
100022fa:	1cfb      	adds	r3, r7, #3
100022fc:	781b      	ldrb	r3, [r3, #0]
100022fe:	2201      	movs	r2, #1
10002300:	409a      	lsls	r2, r3
10002302:	687b      	ldr	r3, [r7, #4]
10002304:	60da      	str	r2, [r3, #12]
}
10002306:	46bd      	mov	sp, r7
10002308:	b002      	add	sp, #8
1000230a:	bd80      	pop	{r7, pc}

1000230c <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
1000230c:	b580      	push	{r7, lr}
1000230e:	b082      	sub	sp, #8
10002310:	af00      	add	r7, sp, #0
10002312:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
10002314:	687b      	ldr	r3, [r7, #4]
10002316:	695b      	ldr	r3, [r3, #20]
10002318:	2280      	movs	r2, #128	; 0x80
1000231a:	0292      	lsls	r2, r2, #10
1000231c:	431a      	orrs	r2, r3
1000231e:	687b      	ldr	r3, [r7, #4]
10002320:	615a      	str	r2, [r3, #20]
}
10002322:	46bd      	mov	sp, r7
10002324:	b002      	add	sp, #8
10002326:	bd80      	pop	{r7, pc}

10002328 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002328:	b580      	push	{r7, lr}
1000232a:	b082      	sub	sp, #8
1000232c:	af00      	add	r7, sp, #0
1000232e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002330:	687b      	ldr	r3, [r7, #4]
10002332:	2201      	movs	r2, #1
10002334:	60da      	str	r2, [r3, #12]
}
10002336:	46bd      	mov	sp, r7
10002338:	b002      	add	sp, #8
1000233a:	bd80      	pop	{r7, pc}

1000233c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
1000233c:	b580      	push	{r7, lr}
1000233e:	b082      	sub	sp, #8
10002340:	af00      	add	r7, sp, #0
10002342:	6078      	str	r0, [r7, #4]
10002344:	1c0a      	adds	r2, r1, #0
10002346:	1cbb      	adds	r3, r7, #2
10002348:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000234a:	1cbb      	adds	r3, r7, #2
1000234c:	881a      	ldrh	r2, [r3, #0]
1000234e:	687b      	ldr	r3, [r7, #4]
10002350:	635a      	str	r2, [r3, #52]	; 0x34
}
10002352:	46bd      	mov	sp, r7
10002354:	b002      	add	sp, #8
10002356:	bd80      	pop	{r7, pc}

10002358 <XMC_CCU4_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
{
10002358:	b580      	push	{r7, lr}
1000235a:	b082      	sub	sp, #8
1000235c:	af00      	add	r7, sp, #0
1000235e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return ((uint16_t)slice->PR);
10002360:	687b      	ldr	r3, [r7, #4]
10002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002364:	b29b      	uxth	r3, r3
}
10002366:	1c18      	adds	r0, r3, #0
10002368:	46bd      	mov	sp, r7
1000236a:	b002      	add	sp, #8
1000236c:	bd80      	pop	{r7, pc}
1000236e:	46c0      	nop			; (mov r8, r8)

10002370 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002370:	b580      	push	{r7, lr}
10002372:	b082      	sub	sp, #8
10002374:	af00      	add	r7, sp, #0
10002376:	6078      	str	r0, [r7, #4]
10002378:	1c0a      	adds	r2, r1, #0
1000237a:	1cbb      	adds	r3, r7, #2
1000237c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000237e:	1cbb      	adds	r3, r7, #2
10002380:	881a      	ldrh	r2, [r3, #0]
10002382:	687b      	ldr	r3, [r7, #4]
10002384:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002386:	46bd      	mov	sp, r7
10002388:	b002      	add	sp, #8
1000238a:	bd80      	pop	{r7, pc}

1000238c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
1000238c:	b580      	push	{r7, lr}
1000238e:	b082      	sub	sp, #8
10002390:	af00      	add	r7, sp, #0
10002392:	6078      	str	r0, [r7, #4]
10002394:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002396:	687b      	ldr	r3, [r7, #4]
10002398:	683a      	ldr	r2, [r7, #0]
1000239a:	611a      	str	r2, [r3, #16]
}
1000239c:	46bd      	mov	sp, r7
1000239e:	b002      	add	sp, #8
100023a0:	bd80      	pop	{r7, pc}
100023a2:	46c0      	nop			; (mov r8, r8)

100023a4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100023a4:	b580      	push	{r7, lr}
100023a6:	b082      	sub	sp, #8
100023a8:	af00      	add	r7, sp, #0
100023aa:	6078      	str	r0, [r7, #4]
100023ac:	1c0a      	adds	r2, r1, #0
100023ae:	1cfb      	adds	r3, r7, #3
100023b0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	22a4      	movs	r2, #164	; 0xa4
100023b6:	589a      	ldr	r2, [r3, r2]
100023b8:	1cfb      	adds	r3, r7, #3
100023ba:	781b      	ldrb	r3, [r3, #0]
100023bc:	2101      	movs	r1, #1
100023be:	4099      	lsls	r1, r3
100023c0:	1c0b      	adds	r3, r1, #0
100023c2:	431a      	orrs	r2, r3
100023c4:	687b      	ldr	r3, [r7, #4]
100023c6:	21a4      	movs	r1, #164	; 0xa4
100023c8:	505a      	str	r2, [r3, r1]
}
100023ca:	46bd      	mov	sp, r7
100023cc:	b002      	add	sp, #8
100023ce:	bd80      	pop	{r7, pc}

100023d0 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
100023d0:	b590      	push	{r4, r7, lr}
100023d2:	b087      	sub	sp, #28
100023d4:	af00      	add	r7, sp, #0
100023d6:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
100023d8:	2317      	movs	r3, #23
100023da:	18fb      	adds	r3, r7, r3
100023dc:	2201      	movs	r2, #1
100023de:	701a      	strb	r2, [r3, #0]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
100023e0:	2316      	movs	r3, #22
100023e2:	18fb      	adds	r3, r7, r3
100023e4:	2201      	movs	r2, #1
100023e6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
100023e8:	687b      	ldr	r3, [r7, #4]
100023ea:	7f1b      	ldrb	r3, [r3, #28]
100023ec:	2b00      	cmp	r3, #0
100023ee:	d000      	beq.n	100023f2 <PWM_CCU4_Init+0x22>
100023f0:	e097      	b.n	10002522 <PWM_CCU4_Init+0x152>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
100023f2:	687b      	ldr	r3, [r7, #4]
100023f4:	681b      	ldr	r3, [r3, #0]
100023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100023f8:	2216      	movs	r2, #22
100023fa:	18bc      	adds	r4, r7, r2
100023fc:	1c18      	adds	r0, r3, #0
100023fe:	f000 fa95 	bl	1000292c <GLOBAL_CCU4_Init>
10002402:	1c03      	adds	r3, r0, #0
10002404:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
10002406:	2316      	movs	r3, #22
10002408:	18fb      	adds	r3, r7, r3
1000240a:	781b      	ldrb	r3, [r3, #0]
1000240c:	2b00      	cmp	r3, #0
1000240e:	d000      	beq.n	10002412 <PWM_CCU4_Init+0x42>
10002410:	e083      	b.n	1000251a <PWM_CCU4_Init+0x14a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
10002412:	687b      	ldr	r3, [r7, #4]
10002414:	689a      	ldr	r2, [r3, #8]
10002416:	687b      	ldr	r3, [r7, #4]
10002418:	681b      	ldr	r3, [r3, #0]
1000241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000241c:	1c10      	adds	r0, r2, #0
1000241e:	1c19      	adds	r1, r3, #0
10002420:	f7ff f8a2 	bl	10001568 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
10002424:	687b      	ldr	r3, [r7, #4]
10002426:	689a      	ldr	r2, [r3, #8]
10002428:	687b      	ldr	r3, [r7, #4]
1000242a:	681b      	ldr	r3, [r3, #0]
1000242c:	885b      	ldrh	r3, [r3, #2]
1000242e:	1c10      	adds	r0, r2, #0
10002430:	1c19      	adds	r1, r3, #0
10002432:	f7ff ff83 	bl	1000233c <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
10002436:	687b      	ldr	r3, [r7, #4]
10002438:	689a      	ldr	r2, [r3, #8]
1000243a:	687b      	ldr	r3, [r7, #4]
1000243c:	681b      	ldr	r3, [r3, #0]
1000243e:	889b      	ldrh	r3, [r3, #4]
10002440:	1c10      	adds	r0, r2, #0
10002442:	1c19      	adds	r1, r3, #0
10002444:	f7ff ff94 	bl	10002370 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
10002448:	687b      	ldr	r3, [r7, #4]
1000244a:	681b      	ldr	r3, [r3, #0]
1000244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000244e:	78db      	ldrb	r3, [r3, #3]
10002450:	2202      	movs	r2, #2
10002452:	4013      	ands	r3, r2
10002454:	b2db      	uxtb	r3, r3
10002456:	2b00      	cmp	r3, #0
10002458:	d008      	beq.n	1000246c <PWM_CCU4_Init+0x9c>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
1000245a:	687b      	ldr	r3, [r7, #4]
1000245c:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
1000245e:	687b      	ldr	r3, [r7, #4]
10002460:	681b      	ldr	r3, [r3, #0]
10002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
10002464:	1c10      	adds	r0, r2, #0
10002466:	1c19      	adds	r1, r3, #0
10002468:	f7ff f864 	bl	10001534 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
1000246c:	687b      	ldr	r3, [r7, #4]
1000246e:	685a      	ldr	r2, [r3, #4]
10002470:	687b      	ldr	r3, [r7, #4]
10002472:	691b      	ldr	r3, [r3, #16]
10002474:	1c10      	adds	r0, r2, #0
10002476:	1c19      	adds	r1, r3, #0
10002478:	f7ff ff88 	bl	1000238c <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
1000247c:	687b      	ldr	r3, [r7, #4]
1000247e:	685a      	ldr	r2, [r3, #4]
10002480:	687b      	ldr	r3, [r7, #4]
10002482:	695b      	ldr	r3, [r3, #20]
10002484:	1c10      	adds	r0, r2, #0
10002486:	1c19      	adds	r1, r3, #0
10002488:	f7ff ff80 	bl	1000238c <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
1000248c:	687b      	ldr	r3, [r7, #4]
1000248e:	1c18      	adds	r0, r3, #0
10002490:	f000 f8ec 	bl	1000266c <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
10002494:	687b      	ldr	r3, [r7, #4]
10002496:	1c18      	adds	r0, r3, #0
10002498:	f000 f84e 	bl	10002538 <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
1000249c:	687b      	ldr	r3, [r7, #4]
1000249e:	681b      	ldr	r3, [r3, #0]
100024a0:	223c      	movs	r2, #60	; 0x3c
100024a2:	5c9b      	ldrb	r3, [r3, r2]
100024a4:	2b00      	cmp	r3, #0
100024a6:	d00e      	beq.n	100024c6 <PWM_CCU4_Init+0xf6>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
100024a8:	687b      	ldr	r3, [r7, #4]
100024aa:	681b      	ldr	r3, [r3, #0]
100024ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
100024ae:	687b      	ldr	r3, [r7, #4]
100024b0:	681b      	ldr	r3, [r3, #0]
100024b2:	2244      	movs	r2, #68	; 0x44
100024b4:	5c9a      	ldrb	r2, [r3, r2]
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
100024b6:	687b      	ldr	r3, [r7, #4]
100024b8:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
100024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100024bc:	1c08      	adds	r0, r1, #0
100024be:	1c11      	adds	r1, r2, #0
100024c0:	1c1a      	adds	r2, r3, #0
100024c2:	f7fe fe27 	bl	10001114 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
100024c6:	687b      	ldr	r3, [r7, #4]
100024c8:	681b      	ldr	r3, [r3, #0]
100024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100024cc:	681b      	ldr	r3, [r3, #0]
100024ce:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
100024d0:	687b      	ldr	r3, [r7, #4]
100024d2:	681b      	ldr	r3, [r3, #0]
100024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100024d6:	791b      	ldrb	r3, [r3, #4]
100024d8:	071b      	lsls	r3, r3, #28
100024da:	0f1b      	lsrs	r3, r3, #28
100024dc:	b2db      	uxtb	r3, r3
100024de:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
100024e0:	68fb      	ldr	r3, [r7, #12]
100024e2:	693a      	ldr	r2, [r7, #16]
100024e4:	40da      	lsrs	r2, r3
100024e6:	1c13      	adds	r3, r2, #0
100024e8:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
100024ea:	687b      	ldr	r3, [r7, #4]
100024ec:	693a      	ldr	r2, [r7, #16]
100024ee:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
100024f0:	687b      	ldr	r3, [r7, #4]
100024f2:	2201      	movs	r2, #1
100024f4:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
100024f6:	2317      	movs	r3, #23
100024f8:	18fb      	adds	r3, r7, r3
100024fa:	2200      	movs	r2, #0
100024fc:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
100024fe:	687b      	ldr	r3, [r7, #4]
10002500:	681b      	ldr	r3, [r3, #0]
10002502:	781b      	ldrb	r3, [r3, #0]
10002504:	2b00      	cmp	r3, #0
10002506:	d010      	beq.n	1000252a <PWM_CCU4_Init+0x15a>
      {
        status = PWM_CCU4_Start(handle_ptr);
10002508:	2317      	movs	r3, #23
1000250a:	18fc      	adds	r4, r7, r3
1000250c:	687b      	ldr	r3, [r7, #4]
1000250e:	1c18      	adds	r0, r3, #0
10002510:	f000 f98a 	bl	10002828 <PWM_CCU4_Start>
10002514:	1c03      	adds	r3, r0, #0
10002516:	7023      	strb	r3, [r4, #0]
10002518:	e007      	b.n	1000252a <PWM_CCU4_Init+0x15a>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
1000251a:	687b      	ldr	r3, [r7, #4]
1000251c:	2200      	movs	r2, #0
1000251e:	771a      	strb	r2, [r3, #28]
10002520:	e003      	b.n	1000252a <PWM_CCU4_Init+0x15a>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
10002522:	2317      	movs	r3, #23
10002524:	18fb      	adds	r3, r7, r3
10002526:	2202      	movs	r2, #2
10002528:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
1000252a:	2317      	movs	r3, #23
1000252c:	18fb      	adds	r3, r7, r3
1000252e:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Init() api */
10002530:	1c18      	adds	r0, r3, #0
10002532:	46bd      	mov	sp, r7
10002534:	b007      	add	sp, #28
10002536:	bd90      	pop	{r4, r7, pc}

10002538 <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
10002538:	b580      	push	{r7, lr}
1000253a:	b082      	sub	sp, #8
1000253c:	af00      	add	r7, sp, #0
1000253e:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
10002540:	687b      	ldr	r3, [r7, #4]
10002542:	681b      	ldr	r3, [r3, #0]
10002544:	799b      	ldrb	r3, [r3, #6]
10002546:	2b00      	cmp	r3, #0
10002548:	d00f      	beq.n	1000256a <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000254a:	687b      	ldr	r3, [r7, #4]
1000254c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
1000254e:	687b      	ldr	r3, [r7, #4]
10002550:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002552:	7b5b      	ldrb	r3, [r3, #13]
10002554:	1c10      	adds	r0, r2, #0
10002556:	2100      	movs	r1, #0
10002558:	1c1a      	adds	r2, r3, #0
1000255a:	f7ff fab5 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
1000255e:	687b      	ldr	r3, [r7, #4]
10002560:	689b      	ldr	r3, [r3, #8]
10002562:	1c18      	adds	r0, r3, #0
10002564:	2100      	movs	r1, #0
10002566:	f7ff ff1d 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
1000256a:	687b      	ldr	r3, [r7, #4]
1000256c:	681b      	ldr	r3, [r3, #0]
1000256e:	79db      	ldrb	r3, [r3, #7]
10002570:	2b00      	cmp	r3, #0
10002572:	d00f      	beq.n	10002594 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002574:	687b      	ldr	r3, [r7, #4]
10002576:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
10002578:	687b      	ldr	r3, [r7, #4]
1000257a:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
1000257c:	7b9b      	ldrb	r3, [r3, #14]
1000257e:	1c10      	adds	r0, r2, #0
10002580:	2102      	movs	r1, #2
10002582:	1c1a      	adds	r2, r3, #0
10002584:	f7ff faa0 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10002588:	687b      	ldr	r3, [r7, #4]
1000258a:	689b      	ldr	r3, [r3, #8]
1000258c:	1c18      	adds	r0, r3, #0
1000258e:	2102      	movs	r1, #2
10002590:	f7ff ff08 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
10002594:	687b      	ldr	r3, [r7, #4]
10002596:	681b      	ldr	r3, [r3, #0]
10002598:	7a1b      	ldrb	r3, [r3, #8]
1000259a:	2b00      	cmp	r3, #0
1000259c:	d00f      	beq.n	100025be <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
1000259e:	687b      	ldr	r3, [r7, #4]
100025a0:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
100025a2:	687b      	ldr	r3, [r7, #4]
100025a4:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
100025a6:	7bdb      	ldrb	r3, [r3, #15]
100025a8:	1c10      	adds	r0, r2, #0
100025aa:	2103      	movs	r1, #3
100025ac:	1c1a      	adds	r2, r3, #0
100025ae:	f7ff fa8b 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
100025b2:	687b      	ldr	r3, [r7, #4]
100025b4:	689b      	ldr	r3, [r3, #8]
100025b6:	1c18      	adds	r0, r3, #0
100025b8:	2103      	movs	r1, #3
100025ba:	f7ff fef3 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
100025be:	687b      	ldr	r3, [r7, #4]
100025c0:	681b      	ldr	r3, [r3, #0]
100025c2:	7a5b      	ldrb	r3, [r3, #9]
100025c4:	2b00      	cmp	r3, #0
100025c6:	d00f      	beq.n	100025e8 <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
100025c8:	687b      	ldr	r3, [r7, #4]
100025ca:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
100025cc:	687b      	ldr	r3, [r7, #4]
100025ce:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
100025d0:	7c1b      	ldrb	r3, [r3, #16]
100025d2:	1c10      	adds	r0, r2, #0
100025d4:	2101      	movs	r1, #1
100025d6:	1c1a      	adds	r2, r3, #0
100025d8:	f7ff fa76 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
100025dc:	687b      	ldr	r3, [r7, #4]
100025de:	689b      	ldr	r3, [r3, #8]
100025e0:	1c18      	adds	r0, r3, #0
100025e2:	2101      	movs	r1, #1
100025e4:	f7ff fede 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
100025e8:	687b      	ldr	r3, [r7, #4]
100025ea:	681b      	ldr	r3, [r3, #0]
100025ec:	7a9b      	ldrb	r3, [r3, #10]
100025ee:	2b00      	cmp	r3, #0
100025f0:	d00f      	beq.n	10002612 <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
100025f2:	687b      	ldr	r3, [r7, #4]
100025f4:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
100025f6:	687b      	ldr	r3, [r7, #4]
100025f8:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
100025fa:	7c5b      	ldrb	r3, [r3, #17]
100025fc:	1c10      	adds	r0, r2, #0
100025fe:	2108      	movs	r1, #8
10002600:	1c1a      	adds	r2, r3, #0
10002602:	f7ff fa61 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
10002606:	687b      	ldr	r3, [r7, #4]
10002608:	689b      	ldr	r3, [r3, #8]
1000260a:	1c18      	adds	r0, r3, #0
1000260c:	2108      	movs	r1, #8
1000260e:	f7ff fec9 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
10002612:	687b      	ldr	r3, [r7, #4]
10002614:	681b      	ldr	r3, [r3, #0]
10002616:	7adb      	ldrb	r3, [r3, #11]
10002618:	2b00      	cmp	r3, #0
1000261a:	d00f      	beq.n	1000263c <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
1000261c:	687b      	ldr	r3, [r7, #4]
1000261e:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
10002620:	687b      	ldr	r3, [r7, #4]
10002622:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
10002624:	7c9b      	ldrb	r3, [r3, #18]
10002626:	1c10      	adds	r0, r2, #0
10002628:	2109      	movs	r1, #9
1000262a:	1c1a      	adds	r2, r3, #0
1000262c:	f7ff fa4c 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
10002630:	687b      	ldr	r3, [r7, #4]
10002632:	689b      	ldr	r3, [r3, #8]
10002634:	1c18      	adds	r0, r3, #0
10002636:	2109      	movs	r1, #9
10002638:	f7ff feb4 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
1000263c:	687b      	ldr	r3, [r7, #4]
1000263e:	681b      	ldr	r3, [r3, #0]
10002640:	7b1b      	ldrb	r3, [r3, #12]
10002642:	2b00      	cmp	r3, #0
10002644:	d00f      	beq.n	10002666 <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
10002646:	687b      	ldr	r3, [r7, #4]
10002648:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
1000264a:	687b      	ldr	r3, [r7, #4]
1000264c:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
1000264e:	7cdb      	ldrb	r3, [r3, #19]
10002650:	1c10      	adds	r0, r2, #0
10002652:	210a      	movs	r1, #10
10002654:	1c1a      	adds	r2, r3, #0
10002656:	f7ff fa37 	bl	10001ac8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
1000265a:	687b      	ldr	r3, [r7, #4]
1000265c:	689b      	ldr	r3, [r3, #8]
1000265e:	1c18      	adds	r0, r3, #0
10002660:	210a      	movs	r1, #10
10002662:	f7ff fe9f 	bl	100023a4 <XMC_CCU4_SLICE_EnableEvent>
  }
}
10002666:	46bd      	mov	sp, r7
10002668:	b002      	add	sp, #8
1000266a:	bd80      	pop	{r7, pc}

1000266c <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
1000266c:	b590      	push	{r4, r7, lr}
1000266e:	b083      	sub	sp, #12
10002670:	af00      	add	r7, sp, #0
10002672:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10002674:	687b      	ldr	r3, [r7, #4]
10002676:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
10002678:	687b      	ldr	r3, [r7, #4]
1000267a:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
1000267c:	695b      	ldr	r3, [r3, #20]
1000267e:	1c10      	adds	r0, r2, #0
10002680:	2101      	movs	r1, #1
10002682:	1c1a      	adds	r2, r3, #0
10002684:	f7ff f992 	bl	100019ac <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10002688:	687b      	ldr	r3, [r7, #4]
1000268a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
1000268c:	687b      	ldr	r3, [r7, #4]
1000268e:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10002690:	699b      	ldr	r3, [r3, #24]
10002692:	1c10      	adds	r0, r2, #0
10002694:	2102      	movs	r1, #2
10002696:	1c1a      	adds	r2, r3, #0
10002698:	f7ff f988 	bl	100019ac <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
1000269c:	687b      	ldr	r3, [r7, #4]
1000269e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
100026a0:	687b      	ldr	r3, [r7, #4]
100026a2:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
100026a4:	69db      	ldr	r3, [r3, #28]
100026a6:	1c10      	adds	r0, r2, #0
100026a8:	2103      	movs	r1, #3
100026aa:	1c1a      	adds	r2, r3, #0
100026ac:	f7ff f97e 	bl	100019ac <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
100026b0:	687b      	ldr	r3, [r7, #4]
100026b2:	681b      	ldr	r3, [r3, #0]
100026b4:	2220      	movs	r2, #32
100026b6:	5c9b      	ldrb	r3, [r3, r2]
100026b8:	2b00      	cmp	r3, #0
100026ba:	d00c      	beq.n	100026d6 <PWM_CCU4_lConfigure_Events+0x6a>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
100026bc:	687b      	ldr	r3, [r7, #4]
100026be:	6898      	ldr	r0, [r3, #8]
100026c0:	687b      	ldr	r3, [r7, #4]
100026c2:	681b      	ldr	r3, [r3, #0]
100026c4:	2220      	movs	r2, #32
100026c6:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
100026c8:	687b      	ldr	r3, [r7, #4]
100026ca:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
100026cc:	2221      	movs	r2, #33	; 0x21
100026ce:	5c9b      	ldrb	r3, [r3, r2]
100026d0:	1c1a      	adds	r2, r3, #0
100026d2:	f7fe ff7d 	bl	100015d0 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
100026d6:	687b      	ldr	r3, [r7, #4]
100026d8:	681b      	ldr	r3, [r3, #0]
100026da:	2222      	movs	r2, #34	; 0x22
100026dc:	5c9b      	ldrb	r3, [r3, r2]
100026de:	2b00      	cmp	r3, #0
100026e0:	d00c      	beq.n	100026fc <PWM_CCU4_lConfigure_Events+0x90>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
100026e2:	687b      	ldr	r3, [r7, #4]
100026e4:	6898      	ldr	r0, [r3, #8]
100026e6:	687b      	ldr	r3, [r7, #4]
100026e8:	681b      	ldr	r3, [r3, #0]
100026ea:	2222      	movs	r2, #34	; 0x22
100026ec:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
100026ee:	687b      	ldr	r3, [r7, #4]
100026f0:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
100026f2:	2223      	movs	r2, #35	; 0x23
100026f4:	5c9b      	ldrb	r3, [r3, r2]
100026f6:	1c1a      	adds	r2, r3, #0
100026f8:	f7fe ff9e 	bl	10001638 <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
100026fc:	687b      	ldr	r3, [r7, #4]
100026fe:	681b      	ldr	r3, [r3, #0]
10002700:	2224      	movs	r2, #36	; 0x24
10002702:	5c9b      	ldrb	r3, [r3, r2]
10002704:	2b00      	cmp	r3, #0
10002706:	d009      	beq.n	1000271c <PWM_CCU4_lConfigure_Events+0xb0>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
10002708:	687b      	ldr	r3, [r7, #4]
1000270a:	6899      	ldr	r1, [r3, #8]
1000270c:	687b      	ldr	r3, [r7, #4]
1000270e:	681b      	ldr	r3, [r3, #0]
10002710:	2224      	movs	r2, #36	; 0x24
10002712:	5c9b      	ldrb	r3, [r3, r2]
10002714:	1c08      	adds	r0, r1, #0
10002716:	1c19      	adds	r1, r3, #0
10002718:	f7ff f860 	bl	100017dc <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
1000271c:	687b      	ldr	r3, [r7, #4]
1000271e:	681b      	ldr	r3, [r3, #0]
10002720:	2225      	movs	r2, #37	; 0x25
10002722:	5c9b      	ldrb	r3, [r3, r2]
10002724:	2b00      	cmp	r3, #0
10002726:	d009      	beq.n	1000273c <PWM_CCU4_lConfigure_Events+0xd0>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
10002728:	687b      	ldr	r3, [r7, #4]
1000272a:	6899      	ldr	r1, [r3, #8]
1000272c:	687b      	ldr	r3, [r7, #4]
1000272e:	681b      	ldr	r3, [r3, #0]
10002730:	2225      	movs	r2, #37	; 0x25
10002732:	5c9b      	ldrb	r3, [r3, r2]
10002734:	1c08      	adds	r0, r1, #0
10002736:	1c19      	adds	r1, r3, #0
10002738:	f7ff f834 	bl	100017a4 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
1000273c:	687b      	ldr	r3, [r7, #4]
1000273e:	681b      	ldr	r3, [r3, #0]
10002740:	2226      	movs	r2, #38	; 0x26
10002742:	5c9b      	ldrb	r3, [r3, r2]
10002744:	2b00      	cmp	r3, #0
10002746:	d009      	beq.n	1000275c <PWM_CCU4_lConfigure_Events+0xf0>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
10002748:	687b      	ldr	r3, [r7, #4]
1000274a:	6899      	ldr	r1, [r3, #8]
1000274c:	687b      	ldr	r3, [r7, #4]
1000274e:	681b      	ldr	r3, [r3, #0]
10002750:	2226      	movs	r2, #38	; 0x26
10002752:	5c9b      	ldrb	r3, [r3, r2]
10002754:	1c08      	adds	r0, r1, #0
10002756:	1c19      	adds	r1, r3, #0
10002758:	f7ff f808 	bl	1000176c <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
1000275c:	687b      	ldr	r3, [r7, #4]
1000275e:	681b      	ldr	r3, [r3, #0]
10002760:	2227      	movs	r2, #39	; 0x27
10002762:	5c9b      	ldrb	r3, [r3, r2]
10002764:	2b00      	cmp	r3, #0
10002766:	d009      	beq.n	1000277c <PWM_CCU4_lConfigure_Events+0x110>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
10002768:	687b      	ldr	r3, [r7, #4]
1000276a:	6899      	ldr	r1, [r3, #8]
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	681b      	ldr	r3, [r3, #0]
10002770:	2227      	movs	r2, #39	; 0x27
10002772:	5c9b      	ldrb	r3, [r3, r2]
10002774:	1c08      	adds	r0, r1, #0
10002776:	1c19      	adds	r1, r3, #0
10002778:	f7fe ff90 	bl	1000169c <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
1000277c:	687b      	ldr	r3, [r7, #4]
1000277e:	681b      	ldr	r3, [r3, #0]
10002780:	2228      	movs	r2, #40	; 0x28
10002782:	5c9b      	ldrb	r3, [r3, r2]
10002784:	2b00      	cmp	r3, #0
10002786:	d010      	beq.n	100027aa <PWM_CCU4_lConfigure_Events+0x13e>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002788:	687b      	ldr	r3, [r7, #4]
1000278a:	6898      	ldr	r0, [r3, #8]
1000278c:	687b      	ldr	r3, [r7, #4]
1000278e:	681b      	ldr	r3, [r3, #0]
10002790:	2228      	movs	r2, #40	; 0x28
10002792:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10002794:	687b      	ldr	r3, [r7, #4]
10002796:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002798:	2229      	movs	r2, #41	; 0x29
1000279a:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
1000279c:	687b      	ldr	r3, [r7, #4]
1000279e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
100027a0:	222a      	movs	r2, #42	; 0x2a
100027a2:	5c9b      	ldrb	r3, [r3, r2]
100027a4:	1c22      	adds	r2, r4, #0
100027a6:	f7fe ff95 	bl	100016d4 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
100027aa:	687b      	ldr	r3, [r7, #4]
100027ac:	681b      	ldr	r3, [r3, #0]
100027ae:	222e      	movs	r2, #46	; 0x2e
100027b0:	5c9b      	ldrb	r3, [r3, r2]
100027b2:	2b03      	cmp	r3, #3
100027b4:	d117      	bne.n	100027e6 <PWM_CCU4_lConfigure_Events+0x17a>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
100027b6:	687b      	ldr	r3, [r7, #4]
100027b8:	6898      	ldr	r0, [r3, #8]
100027ba:	687b      	ldr	r3, [r7, #4]
100027bc:	681b      	ldr	r3, [r3, #0]
100027be:	2230      	movs	r2, #48	; 0x30
100027c0:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
100027c2:	687b      	ldr	r3, [r7, #4]
100027c4:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
100027c6:	222f      	movs	r2, #47	; 0x2f
100027c8:	5c9b      	ldrb	r3, [r3, r2]
100027ca:	1c1a      	adds	r2, r3, #0
100027cc:	f7ff f83a 	bl	10001844 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
100027d0:	687b      	ldr	r3, [r7, #4]
100027d2:	681b      	ldr	r3, [r3, #0]
100027d4:	222d      	movs	r2, #45	; 0x2d
100027d6:	5c9b      	ldrb	r3, [r3, r2]
100027d8:	2b00      	cmp	r3, #0
100027da:	d004      	beq.n	100027e6 <PWM_CCU4_lConfigure_Events+0x17a>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
100027dc:	687b      	ldr	r3, [r7, #4]
100027de:	689b      	ldr	r3, [r3, #8]
100027e0:	1c18      	adds	r0, r3, #0
100027e2:	f7ff fd93 	bl	1000230c <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
100027e6:	687b      	ldr	r3, [r7, #4]
100027e8:	681b      	ldr	r3, [r3, #0]
100027ea:	222b      	movs	r2, #43	; 0x2b
100027ec:	5c9b      	ldrb	r3, [r3, r2]
100027ee:	2b02      	cmp	r3, #2
100027f0:	d117      	bne.n	10002822 <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
100027f2:	687b      	ldr	r3, [r7, #4]
100027f4:	681b      	ldr	r3, [r3, #0]
100027f6:	222c      	movs	r2, #44	; 0x2c
100027f8:	5c9b      	ldrb	r3, [r3, r2]
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
100027fa:	2b03      	cmp	r3, #3
100027fc:	d111      	bne.n	10002822 <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
100027fe:	687b      	ldr	r3, [r7, #4]
10002800:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
10002802:	687b      	ldr	r3, [r7, #4]
10002804:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10002806:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
10002808:	687b      	ldr	r3, [r7, #4]
1000280a:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
1000280c:	69db      	ldr	r3, [r3, #28]
1000280e:	1c08      	adds	r0, r1, #0
10002810:	1c11      	adds	r1, r2, #0
10002812:	1c1a      	adds	r2, r3, #0
10002814:	f7ff f85c 	bl	100018d0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
10002818:	687b      	ldr	r3, [r7, #4]
1000281a:	689b      	ldr	r3, [r3, #8]
1000281c:	1c18      	adds	r0, r3, #0
1000281e:	f7fe fff9 	bl	10001814 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
10002822:	46bd      	mov	sp, r7
10002824:	b003      	add	sp, #12
10002826:	bd90      	pop	{r4, r7, pc}

10002828 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
10002828:	b580      	push	{r7, lr}
1000282a:	b084      	sub	sp, #16
1000282c:	af00      	add	r7, sp, #0
1000282e:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
10002830:	230f      	movs	r3, #15
10002832:	18fb      	adds	r3, r7, r3
10002834:	2201      	movs	r2, #1
10002836:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
10002838:	687b      	ldr	r3, [r7, #4]
1000283a:	7f1b      	ldrb	r3, [r3, #28]
1000283c:	2b01      	cmp	r3, #1
1000283e:	d003      	beq.n	10002848 <PWM_CCU4_Start+0x20>
10002840:	687b      	ldr	r3, [r7, #4]
10002842:	7f1b      	ldrb	r3, [r3, #28]
10002844:	2b03      	cmp	r3, #3
10002846:	d119      	bne.n	1000287c <PWM_CCU4_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
10002848:	687b      	ldr	r3, [r7, #4]
1000284a:	685a      	ldr	r2, [r3, #4]
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	7b5b      	ldrb	r3, [r3, #13]
10002850:	1c10      	adds	r0, r2, #0
10002852:	1c19      	adds	r1, r3, #0
10002854:	f7ff fd4a 	bl	100022ec <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
10002858:	687b      	ldr	r3, [r7, #4]
1000285a:	681b      	ldr	r3, [r3, #0]
1000285c:	2220      	movs	r2, #32
1000285e:	5c9b      	ldrb	r3, [r3, r2]
10002860:	2b00      	cmp	r3, #0
10002862:	d104      	bne.n	1000286e <PWM_CCU4_Start+0x46>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10002864:	687b      	ldr	r3, [r7, #4]
10002866:	689b      	ldr	r3, [r3, #8]
10002868:	1c18      	adds	r0, r3, #0
1000286a:	f7ff fd5d 	bl	10002328 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
1000286e:	687b      	ldr	r3, [r7, #4]
10002870:	2202      	movs	r2, #2
10002872:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
10002874:	230f      	movs	r3, #15
10002876:	18fb      	adds	r3, r7, r3
10002878:	2200      	movs	r2, #0
1000287a:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
1000287c:	230f      	movs	r3, #15
1000287e:	18fb      	adds	r3, r7, r3
10002880:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Start() api */
10002882:	1c18      	adds	r0, r3, #0
10002884:	46bd      	mov	sp, r7
10002886:	b004      	add	sp, #16
10002888:	bd80      	pop	{r7, pc}
1000288a:	46c0      	nop			; (mov r8, r8)

1000288c <PWM_CCU4_SetDutyCycle>:

/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_SetDutyCycle(PWM_CCU4_t* handle_ptr, uint32_t duty_cycle)
{
1000288c:	b580      	push	{r7, lr}
1000288e:	b086      	sub	sp, #24
10002890:	af00      	add	r7, sp, #0
10002892:	6078      	str	r0, [r7, #4]
10002894:	6039      	str	r1, [r7, #0]
  PWM_CCU4_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU4_STATUS_FAILURE;
10002896:	2317      	movs	r3, #23
10002898:	18fb      	adds	r3, r7, r3
1000289a:	2201      	movs	r2, #1
1000289c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_SetDutyCycle:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
1000289e:	687b      	ldr	r3, [r7, #4]
100028a0:	7f1b      	ldrb	r3, [r3, #28]
100028a2:	2b00      	cmp	r3, #0
100028a4:	d02d      	beq.n	10002902 <PWM_CCU4_SetDutyCycle+0x76>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU4_SYM_DUTY_MAX))
100028a6:	683b      	ldr	r3, [r7, #0]
100028a8:	4a19      	ldr	r2, [pc, #100]	; (10002910 <PWM_CCU4_SetDutyCycle+0x84>)
100028aa:	4293      	cmp	r3, r2
100028ac:	d829      	bhi.n	10002902 <PWM_CCU4_SetDutyCycle+0x76>
    {
      XMC_DEBUG("PWM_CCU4_SetDutyCycle:Cannot set duty cycle > 100%%");
    }
    else
    {
      period = (uint32_t) XMC_CCU4_SLICE_GetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr) + 1U;
100028ae:	687b      	ldr	r3, [r7, #4]
100028b0:	689b      	ldr	r3, [r3, #8]
100028b2:	1c18      	adds	r0, r3, #0
100028b4:	f7ff fd50 	bl	10002358 <XMC_CCU4_SLICE_GetTimerPeriodMatch>
100028b8:	1c03      	adds	r3, r0, #0
100028ba:	3301      	adds	r3, #1
100028bc:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_CCU4_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU4_DUTY_FULL_SCALE);
100028be:	683b      	ldr	r3, [r7, #0]
100028c0:	4a13      	ldr	r2, [pc, #76]	; (10002910 <PWM_CCU4_SetDutyCycle+0x84>)
100028c2:	1ad3      	subs	r3, r2, r3
100028c4:	693a      	ldr	r2, [r7, #16]
100028c6:	4353      	muls	r3, r2
100028c8:	1c18      	adds	r0, r3, #0
100028ca:	4911      	ldr	r1, [pc, #68]	; (10002910 <PWM_CCU4_SetDutyCycle+0x84>)
100028cc:	f001 fa04 	bl	10003cd8 <__aeabi_uidiv>
100028d0:	1c03      	adds	r3, r0, #0
100028d2:	60fb      	str	r3, [r7, #12]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) compare);
100028d4:	687b      	ldr	r3, [r7, #4]
100028d6:	689a      	ldr	r2, [r3, #8]
100028d8:	68fb      	ldr	r3, [r7, #12]
100028da:	b29b      	uxth	r3, r3
100028dc:	1c10      	adds	r0, r2, #0
100028de:	1c19      	adds	r1, r3, #0
100028e0:	f7ff fd46 	bl	10002370 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
100028e4:	687b      	ldr	r3, [r7, #4]
100028e6:	685a      	ldr	r2, [r3, #4]
100028e8:	687b      	ldr	r3, [r7, #4]
100028ea:	691b      	ldr	r3, [r3, #16]
100028ec:	1c10      	adds	r0, r2, #0
100028ee:	1c19      	adds	r1, r3, #0
100028f0:	f7ff fd4c 	bl	1000238c <XMC_CCU4_EnableShadowTransfer>

      handle_ptr->sym_duty = duty_cycle;
100028f4:	687b      	ldr	r3, [r7, #4]
100028f6:	683a      	ldr	r2, [r7, #0]
100028f8:	625a      	str	r2, [r3, #36]	; 0x24

      XMC_DEBUG("PWM_CCU4_SetDutyCycle:dutycycle set");
      status = PWM_CCU4_STATUS_SUCCESS;
100028fa:	2317      	movs	r3, #23
100028fc:	18fb      	adds	r3, r7, r3
100028fe:	2200      	movs	r2, #0
10002900:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002902:	2317      	movs	r3, #23
10002904:	18fb      	adds	r3, r7, r3
10002906:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_SetDutyCycle() api */
10002908:	1c18      	adds	r0, r3, #0
1000290a:	46bd      	mov	sp, r7
1000290c:	b006      	add	sp, #24
1000290e:	bd80      	pop	{r7, pc}
10002910:	00002710 	.word	0x00002710

10002914 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002914:	b580      	push	{r7, lr}
10002916:	b082      	sub	sp, #8
10002918:	af00      	add	r7, sp, #0
1000291a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000291c:	687b      	ldr	r3, [r7, #4]
1000291e:	2280      	movs	r2, #128	; 0x80
10002920:	0052      	lsls	r2, r2, #1
10002922:	60da      	str	r2, [r3, #12]
}
10002924:	46bd      	mov	sp, r7
10002926:	b002      	add	sp, #8
10002928:	bd80      	pop	{r7, pc}
1000292a:	46c0      	nop			; (mov r8, r8)

1000292c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
1000292c:	b580      	push	{r7, lr}
1000292e:	b082      	sub	sp, #8
10002930:	af00      	add	r7, sp, #0
10002932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10002934:	687b      	ldr	r3, [r7, #4]
10002936:	7b5b      	ldrb	r3, [r3, #13]
10002938:	2201      	movs	r2, #1
1000293a:	4053      	eors	r3, r2
1000293c:	b2db      	uxtb	r3, r3
1000293e:	2b00      	cmp	r3, #0
10002940:	d00f      	beq.n	10002962 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10002942:	687b      	ldr	r3, [r7, #4]
10002944:	689a      	ldr	r2, [r3, #8]
10002946:	687b      	ldr	r3, [r7, #4]
10002948:	7b1b      	ldrb	r3, [r3, #12]
1000294a:	1c10      	adds	r0, r2, #0
1000294c:	1c19      	adds	r1, r3, #0
1000294e:	f7fe fdcd 	bl	100014ec <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10002952:	687b      	ldr	r3, [r7, #4]
10002954:	689b      	ldr	r3, [r3, #8]
10002956:	1c18      	adds	r0, r3, #0
10002958:	f7ff ffdc 	bl	10002914 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
1000295c:	687b      	ldr	r3, [r7, #4]
1000295e:	2201      	movs	r2, #1
10002960:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10002962:	2300      	movs	r3, #0
}
10002964:	1c18      	adds	r0, r3, #0
10002966:	46bd      	mov	sp, r7
10002968:	b002      	add	sp, #8
1000296a:	bd80      	pop	{r7, pc}

1000296c <XMC_VADC_GLOBAL_SHS_SetAnalogReference>:
 * \par<b>Related APIs:</b><BR>
 * None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
    const XMC_VADC_GLOBAL_SHS_AREF_t aref)
{
1000296c:	b580      	push	{r7, lr}
1000296e:	b082      	sub	sp, #8
10002970:	af00      	add	r7, sp, #0
10002972:	6078      	str	r0, [r7, #4]
10002974:	1c0a      	adds	r2, r1, #0
10002976:	1cbb      	adds	r3, r7, #2
10002978:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))

  shs_ptr->SHSCFG = (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHSCFG_SCWC_Msk;
1000297a:	687b      	ldr	r3, [r7, #4]
1000297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000297e:	4a06      	ldr	r2, [pc, #24]	; (10002998 <XMC_VADC_GLOBAL_SHS_SetAnalogReference+0x2c>)
10002980:	401a      	ands	r2, r3
10002982:	1cbb      	adds	r3, r7, #2
10002984:	881b      	ldrh	r3, [r3, #0]
10002986:	4313      	orrs	r3, r2
10002988:	2280      	movs	r2, #128	; 0x80
1000298a:	0212      	lsls	r2, r2, #8
1000298c:	431a      	orrs	r2, r3
1000298e:	687b      	ldr	r3, [r7, #4]
10002990:	641a      	str	r2, [r3, #64]	; 0x40
}
10002992:	46bd      	mov	sp, r7
10002994:	b002      	add	sp, #8
10002996:	bd80      	pop	{r7, pc}
10002998:	fffff3ff 	.word	0xfffff3ff

1000299c <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
1000299c:	b580      	push	{r7, lr}
1000299e:	b082      	sub	sp, #8
100029a0:	af00      	add	r7, sp, #0
100029a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
100029a4:	687b      	ldr	r3, [r7, #4]
100029a6:	7c1b      	ldrb	r3, [r3, #16]
100029a8:	2b02      	cmp	r3, #2
100029aa:	d119      	bne.n	100029e0 <GLOBAL_ADC_Init+0x44>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
100029ac:	687b      	ldr	r3, [r7, #4]
100029ae:	685a      	ldr	r2, [r3, #4]
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	681b      	ldr	r3, [r3, #0]
100029b4:	1c10      	adds	r0, r2, #0
100029b6:	1c19      	adds	r1, r3, #0
100029b8:	f7ff f908 	bl	10001bcc <XMC_VADC_GLOBAL_Init>
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
100029bc:	687b      	ldr	r3, [r7, #4]
100029be:	689b      	ldr	r3, [r3, #8]
100029c0:	1c18      	adds	r0, r3, #0
100029c2:	2100      	movs	r1, #0
100029c4:	f7ff ffd2 	bl	1000296c <XMC_VADC_GLOBAL_SHS_SetAnalogReference>
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	7c5b      	ldrb	r3, [r3, #17]
100029cc:	2b00      	cmp	r3, #0
100029ce:	d004      	beq.n	100029da <GLOBAL_ADC_Init+0x3e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
100029d0:	687b      	ldr	r3, [r7, #4]
100029d2:	685b      	ldr	r3, [r3, #4]
100029d4:	1c18      	adds	r0, r3, #0
100029d6:	f7ff f943 	bl	10001c60 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
100029da:	687b      	ldr	r3, [r7, #4]
100029dc:	2200      	movs	r2, #0
100029de:	741a      	strb	r2, [r3, #16]
  }
  return (handle_ptr->init_state);
100029e0:	687b      	ldr	r3, [r7, #4]
100029e2:	7c1b      	ldrb	r3, [r3, #16]
}
100029e4:	1c18      	adds	r0, r3, #0
100029e6:	46bd      	mov	sp, r7
100029e8:	b002      	add	sp, #8
100029ea:	bd80      	pop	{r7, pc}

100029ec <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
100029ec:	b580      	push	{r7, lr}
100029ee:	b082      	sub	sp, #8
100029f0:	af00      	add	r7, sp, #0
100029f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	6819      	ldr	r1, [r3, #0]
100029f8:	687b      	ldr	r3, [r7, #4]
100029fa:	7b1a      	ldrb	r2, [r3, #12]
100029fc:	687b      	ldr	r3, [r7, #4]
100029fe:	3304      	adds	r3, #4
10002a00:	1c08      	adds	r0, r1, #0
10002a02:	1c11      	adds	r1, r2, #0
10002a04:	1c1a      	adds	r2, r3, #0
10002a06:	f7fe fb85 	bl	10001114 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10002a0a:	687b      	ldr	r3, [r7, #4]
10002a0c:	6819      	ldr	r1, [r3, #0]
10002a0e:	687b      	ldr	r3, [r7, #4]
10002a10:	7b1a      	ldrb	r2, [r3, #12]
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	7b5b      	ldrb	r3, [r3, #13]
10002a16:	1c08      	adds	r0, r1, #0
10002a18:	1c11      	adds	r1, r2, #0
10002a1a:	1c1a      	adds	r2, r3, #0
10002a1c:	f7ff f8a8 	bl	10001b70 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10002a20:	2300      	movs	r3, #0
}
10002a22:	1c18      	adds	r0, r3, #0
10002a24:	46bd      	mov	sp, r7
10002a26:	b002      	add	sp, #8
10002a28:	bd80      	pop	{r7, pc}
10002a2a:	46c0      	nop			; (mov r8, r8)

10002a2c <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10002a2c:	b580      	push	{r7, lr}
10002a2e:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
#endif
}
10002a30:	46bd      	mov	sp, r7
10002a32:	bd80      	pop	{r7, pc}

10002a34 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10002a34:	b580      	push	{r7, lr}
10002a36:	b084      	sub	sp, #16
10002a38:	af00      	add	r7, sp, #0
10002a3a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10002a3c:	230f      	movs	r3, #15
10002a3e:	18fb      	adds	r3, r7, r3
10002a40:	2200      	movs	r2, #0
10002a42:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10002a44:	230e      	movs	r3, #14
10002a46:	18fb      	adds	r3, r7, r3
10002a48:	2200      	movs	r2, #0
10002a4a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10002a4c:	230d      	movs	r3, #13
10002a4e:	18fb      	adds	r3, r7, r3
10002a50:	2200      	movs	r2, #0
10002a52:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10002a54:	230c      	movs	r3, #12
10002a56:	18fb      	adds	r3, r7, r3
10002a58:	2200      	movs	r2, #0
10002a5a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10002a5c:	230b      	movs	r3, #11
10002a5e:	18fb      	adds	r3, r7, r3
10002a60:	2200      	movs	r2, #0
10002a62:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10002a64:	687b      	ldr	r3, [r7, #4]
10002a66:	781b      	ldrb	r3, [r3, #0]
10002a68:	2201      	movs	r2, #1
10002a6a:	4053      	eors	r3, r2
10002a6c:	b2db      	uxtb	r3, r3
10002a6e:	2b00      	cmp	r3, #0
10002a70:	d01b      	beq.n	10002aaa <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10002a72:	230e      	movs	r3, #14
10002a74:	18fa      	adds	r2, r7, r3
10002a76:	230d      	movs	r3, #13
10002a78:	18fb      	adds	r3, r7, r3
10002a7a:	7812      	ldrb	r2, [r2, #0]
10002a7c:	781b      	ldrb	r3, [r3, #0]
10002a7e:	4313      	orrs	r3, r2
10002a80:	b2da      	uxtb	r2, r3
10002a82:	230c      	movs	r3, #12
10002a84:	18fb      	adds	r3, r7, r3
10002a86:	781b      	ldrb	r3, [r3, #0]
10002a88:	4313      	orrs	r3, r2
10002a8a:	b2d9      	uxtb	r1, r3
10002a8c:	230f      	movs	r3, #15
10002a8e:	18fb      	adds	r3, r7, r3
10002a90:	220b      	movs	r2, #11
10002a92:	18ba      	adds	r2, r7, r2
10002a94:	7812      	ldrb	r2, [r2, #0]
10002a96:	430a      	orrs	r2, r1
10002a98:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10002a9a:	230f      	movs	r3, #15
10002a9c:	18fb      	adds	r3, r7, r3
10002a9e:	781b      	ldrb	r3, [r3, #0]
10002aa0:	2b00      	cmp	r3, #0
10002aa2:	d102      	bne.n	10002aaa <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10002aa4:	687b      	ldr	r3, [r7, #4]
10002aa6:	2201      	movs	r2, #1
10002aa8:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002aaa:	230f      	movs	r3, #15
10002aac:	18fb      	adds	r3, r7, r3
10002aae:	781b      	ldrb	r3, [r3, #0]
}
10002ab0:	1c18      	adds	r0, r3, #0
10002ab2:	46bd      	mov	sp, r7
10002ab4:	b004      	add	sp, #16
10002ab6:	bd80      	pop	{r7, pc}

10002ab8 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002ab8:	b590      	push	{r4, r7, lr}
10002aba:	b085      	sub	sp, #20
10002abc:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10002abe:	1d3b      	adds	r3, r7, #4
10002ac0:	4a04      	ldr	r2, [pc, #16]	; (10002ad4 <SystemCoreClockSetup+0x1c>)
10002ac2:	ca13      	ldmia	r2!, {r0, r1, r4}
10002ac4:	c313      	stmia	r3!, {r0, r1, r4}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10002ac6:	1d3b      	adds	r3, r7, #4
10002ac8:	1c18      	adds	r0, r3, #0
10002aca:	f7fe fbfb 	bl	100012c4 <XMC_SCU_CLOCK_Init>
}
10002ace:	46bd      	mov	sp, r7
10002ad0:	b005      	add	sp, #20
10002ad2:	bd90      	pop	{r4, r7, pc}
10002ad4:	1000797c 	.word	0x1000797c

10002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002ad8:	b580      	push	{r7, lr}
10002ada:	b082      	sub	sp, #8
10002adc:	af00      	add	r7, sp, #0
10002ade:	1c02      	adds	r2, r0, #0
10002ae0:	1dfb      	adds	r3, r7, #7
10002ae2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002ae4:	1dfb      	adds	r3, r7, #7
10002ae6:	781b      	ldrb	r3, [r3, #0]
10002ae8:	2b7f      	cmp	r3, #127	; 0x7f
10002aea:	d809      	bhi.n	10002b00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002aec:	4b06      	ldr	r3, [pc, #24]	; (10002b08 <__NVIC_EnableIRQ+0x30>)
10002aee:	1dfa      	adds	r2, r7, #7
10002af0:	7812      	ldrb	r2, [r2, #0]
10002af2:	1c11      	adds	r1, r2, #0
10002af4:	221f      	movs	r2, #31
10002af6:	400a      	ands	r2, r1
10002af8:	2101      	movs	r1, #1
10002afa:	4091      	lsls	r1, r2
10002afc:	1c0a      	adds	r2, r1, #0
10002afe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002b00:	46bd      	mov	sp, r7
10002b02:	b002      	add	sp, #8
10002b04:	bd80      	pop	{r7, pc}
10002b06:	46c0      	nop			; (mov r8, r8)
10002b08:	e000e100 	.word	0xe000e100

10002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002b0c:	b5b0      	push	{r4, r5, r7, lr}
10002b0e:	b082      	sub	sp, #8
10002b10:	af00      	add	r7, sp, #0
10002b12:	1c02      	adds	r2, r0, #0
10002b14:	6039      	str	r1, [r7, #0]
10002b16:	1dfb      	adds	r3, r7, #7
10002b18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002b1a:	1dfb      	adds	r3, r7, #7
10002b1c:	781b      	ldrb	r3, [r3, #0]
10002b1e:	2b7f      	cmp	r3, #127	; 0x7f
10002b20:	d827      	bhi.n	10002b72 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b22:	4c2d      	ldr	r4, [pc, #180]	; (10002bd8 <__NVIC_SetPriority+0xcc>)
10002b24:	1dfb      	adds	r3, r7, #7
10002b26:	781b      	ldrb	r3, [r3, #0]
10002b28:	b25b      	sxtb	r3, r3
10002b2a:	089b      	lsrs	r3, r3, #2
10002b2c:	492a      	ldr	r1, [pc, #168]	; (10002bd8 <__NVIC_SetPriority+0xcc>)
10002b2e:	1dfa      	adds	r2, r7, #7
10002b30:	7812      	ldrb	r2, [r2, #0]
10002b32:	b252      	sxtb	r2, r2
10002b34:	0892      	lsrs	r2, r2, #2
10002b36:	32c0      	adds	r2, #192	; 0xc0
10002b38:	0092      	lsls	r2, r2, #2
10002b3a:	5852      	ldr	r2, [r2, r1]
10002b3c:	1df9      	adds	r1, r7, #7
10002b3e:	7809      	ldrb	r1, [r1, #0]
10002b40:	1c08      	adds	r0, r1, #0
10002b42:	2103      	movs	r1, #3
10002b44:	4001      	ands	r1, r0
10002b46:	00c9      	lsls	r1, r1, #3
10002b48:	1c08      	adds	r0, r1, #0
10002b4a:	21ff      	movs	r1, #255	; 0xff
10002b4c:	4081      	lsls	r1, r0
10002b4e:	43c9      	mvns	r1, r1
10002b50:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002b52:	683a      	ldr	r2, [r7, #0]
10002b54:	0192      	lsls	r2, r2, #6
10002b56:	20ff      	movs	r0, #255	; 0xff
10002b58:	4002      	ands	r2, r0
10002b5a:	1df8      	adds	r0, r7, #7
10002b5c:	7800      	ldrb	r0, [r0, #0]
10002b5e:	1c05      	adds	r5, r0, #0
10002b60:	2003      	movs	r0, #3
10002b62:	4028      	ands	r0, r5
10002b64:	00c0      	lsls	r0, r0, #3
10002b66:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b68:	430a      	orrs	r2, r1
10002b6a:	33c0      	adds	r3, #192	; 0xc0
10002b6c:	009b      	lsls	r3, r3, #2
10002b6e:	511a      	str	r2, [r3, r4]
10002b70:	e02e      	b.n	10002bd0 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b72:	4c1a      	ldr	r4, [pc, #104]	; (10002bdc <__NVIC_SetPriority+0xd0>)
10002b74:	1dfb      	adds	r3, r7, #7
10002b76:	781b      	ldrb	r3, [r3, #0]
10002b78:	1c1a      	adds	r2, r3, #0
10002b7a:	230f      	movs	r3, #15
10002b7c:	4013      	ands	r3, r2
10002b7e:	3b08      	subs	r3, #8
10002b80:	0899      	lsrs	r1, r3, #2
10002b82:	4a16      	ldr	r2, [pc, #88]	; (10002bdc <__NVIC_SetPriority+0xd0>)
10002b84:	1dfb      	adds	r3, r7, #7
10002b86:	781b      	ldrb	r3, [r3, #0]
10002b88:	1c18      	adds	r0, r3, #0
10002b8a:	230f      	movs	r3, #15
10002b8c:	4003      	ands	r3, r0
10002b8e:	3b08      	subs	r3, #8
10002b90:	089b      	lsrs	r3, r3, #2
10002b92:	3306      	adds	r3, #6
10002b94:	009b      	lsls	r3, r3, #2
10002b96:	18d3      	adds	r3, r2, r3
10002b98:	685b      	ldr	r3, [r3, #4]
10002b9a:	1dfa      	adds	r2, r7, #7
10002b9c:	7812      	ldrb	r2, [r2, #0]
10002b9e:	1c10      	adds	r0, r2, #0
10002ba0:	2203      	movs	r2, #3
10002ba2:	4002      	ands	r2, r0
10002ba4:	00d2      	lsls	r2, r2, #3
10002ba6:	1c10      	adds	r0, r2, #0
10002ba8:	22ff      	movs	r2, #255	; 0xff
10002baa:	4082      	lsls	r2, r0
10002bac:	43d2      	mvns	r2, r2
10002bae:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002bb0:	683b      	ldr	r3, [r7, #0]
10002bb2:	019b      	lsls	r3, r3, #6
10002bb4:	20ff      	movs	r0, #255	; 0xff
10002bb6:	4003      	ands	r3, r0
10002bb8:	1df8      	adds	r0, r7, #7
10002bba:	7800      	ldrb	r0, [r0, #0]
10002bbc:	1c05      	adds	r5, r0, #0
10002bbe:	2003      	movs	r0, #3
10002bc0:	4028      	ands	r0, r5
10002bc2:	00c0      	lsls	r0, r0, #3
10002bc4:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002bc6:	431a      	orrs	r2, r3
10002bc8:	1d8b      	adds	r3, r1, #6
10002bca:	009b      	lsls	r3, r3, #2
10002bcc:	18e3      	adds	r3, r4, r3
10002bce:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002bd0:	46bd      	mov	sp, r7
10002bd2:	b002      	add	sp, #8
10002bd4:	bdb0      	pop	{r4, r5, r7, pc}
10002bd6:	46c0      	nop			; (mov r8, r8)
10002bd8:	e000e100 	.word	0xe000e100
10002bdc:	e000ed00 	.word	0xe000ed00

10002be0 <XMC_VADC_GLOBAL_ResultInit>:
 * None
 *
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_CONFIG_t *config)
{
10002be0:	b580      	push	{r7, lr}
10002be2:	b082      	sub	sp, #8
10002be4:	af00      	add	r7, sp, #0
10002be6:	6078      	str	r0, [r7, #4]
10002be8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))

  /* Configure GLOBRCR*/
  global_ptr->GLOBRCR = config->g_rcr;
10002bea:	683b      	ldr	r3, [r7, #0]
10002bec:	6819      	ldr	r1, [r3, #0]
10002bee:	687a      	ldr	r2, [r7, #4]
10002bf0:	23a0      	movs	r3, #160	; 0xa0
10002bf2:	009b      	lsls	r3, r3, #2
10002bf4:	50d1      	str	r1, [r2, r3]
}
10002bf6:	46bd      	mov	sp, r7
10002bf8:	b002      	add	sp, #8
10002bfa:	bd80      	pop	{r7, pc}

10002bfc <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
10002bfc:	b580      	push	{r7, lr}
10002bfe:	b082      	sub	sp, #8
10002c00:	af00      	add	r7, sp, #0
10002c02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
10002c04:	687a      	ldr	r2, [r7, #4]
10002c06:	2381      	movs	r3, #129	; 0x81
10002c08:	009b      	lsls	r3, r3, #2
10002c0a:	58d3      	ldr	r3, [r2, r3]
10002c0c:	2280      	movs	r2, #128	; 0x80
10002c0e:	0092      	lsls	r2, r2, #2
10002c10:	431a      	orrs	r2, r3
10002c12:	1c11      	adds	r1, r2, #0
10002c14:	687a      	ldr	r2, [r7, #4]
10002c16:	2381      	movs	r3, #129	; 0x81
10002c18:	009b      	lsls	r3, r3, #2
10002c1a:	50d1      	str	r1, [r2, r3]
}
10002c1c:	46bd      	mov	sp, r7
10002c1e:	b002      	add	sp, #8
10002c20:	bd80      	pop	{r7, pc}
10002c22:	46c0      	nop			; (mov r8, r8)

10002c24 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
10002c24:	b580      	push	{r7, lr}
10002c26:	b084      	sub	sp, #16
10002c28:	af00      	add	r7, sp, #0
10002c2a:	60f8      	str	r0, [r7, #12]
10002c2c:	60b9      	str	r1, [r7, #8]
10002c2e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
10002c30:	68fb      	ldr	r3, [r7, #12]
10002c32:	68ba      	ldr	r2, [r7, #8]
10002c34:	3260      	adds	r2, #96	; 0x60
10002c36:	0092      	lsls	r2, r2, #2
10002c38:	58d2      	ldr	r2, [r2, r3]
10002c3a:	687b      	ldr	r3, [r7, #4]
10002c3c:	2101      	movs	r1, #1
10002c3e:	4099      	lsls	r1, r3
10002c40:	1c0b      	adds	r3, r1, #0
10002c42:	431a      	orrs	r2, r3
10002c44:	1c11      	adds	r1, r2, #0
10002c46:	68fb      	ldr	r3, [r7, #12]
10002c48:	68ba      	ldr	r2, [r7, #8]
10002c4a:	3260      	adds	r2, #96	; 0x60
10002c4c:	0092      	lsls	r2, r2, #2
10002c4e:	50d1      	str	r1, [r2, r3]
}
10002c50:	46bd      	mov	sp, r7
10002c52:	b004      	add	sp, #16
10002c54:	bd80      	pop	{r7, pc}
10002c56:	46c0      	nop			; (mov r8, r8)

10002c58 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
10002c58:	b590      	push	{r4, r7, lr}
10002c5a:	b085      	sub	sp, #20
10002c5c:	af00      	add	r7, sp, #0
10002c5e:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
10002c60:	687b      	ldr	r3, [r7, #4]
10002c62:	7e1b      	ldrb	r3, [r3, #24]
10002c64:	2b02      	cmp	r3, #2
10002c66:	d000      	beq.n	10002c6a <ADC_MEASUREMENT_Init+0x12>
10002c68:	e08b      	b.n	10002d82 <ADC_MEASUREMENT_Init+0x12a>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
10002c6a:	687b      	ldr	r3, [r7, #4]
10002c6c:	68db      	ldr	r3, [r3, #12]
10002c6e:	220e      	movs	r2, #14
10002c70:	18bc      	adds	r4, r7, r2
10002c72:	1c18      	adds	r0, r3, #0
10002c74:	f7ff fe92 	bl	1000299c <GLOBAL_ADC_Init>
10002c78:	1c03      	adds	r3, r0, #0
10002c7a:	7023      	strb	r3, [r4, #0]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10002c7c:	687b      	ldr	r3, [r7, #4]
10002c7e:	68db      	ldr	r3, [r3, #12]
10002c80:	685a      	ldr	r2, [r3, #4]
10002c82:	687b      	ldr	r3, [r7, #4]
10002c84:	689b      	ldr	r3, [r3, #8]
10002c86:	681b      	ldr	r3, [r3, #0]
10002c88:	1c10      	adds	r0, r2, #0
10002c8a:	1c19      	adds	r1, r3, #0
10002c8c:	2200      	movs	r2, #0
10002c8e:	2300      	movs	r3, #0
10002c90:	f7fe ffd0 	bl	10001c34 <XMC_VADC_GLOBAL_InputClassInit>
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM);
#if (UC_SERIES == XMC11)
    /*Initialize the Global Conversion class 1*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10002c94:	687b      	ldr	r3, [r7, #4]
10002c96:	68db      	ldr	r3, [r3, #12]
10002c98:	685a      	ldr	r2, [r3, #4]
10002c9a:	687b      	ldr	r3, [r7, #4]
10002c9c:	689b      	ldr	r3, [r3, #8]
10002c9e:	681b      	ldr	r3, [r3, #0]
10002ca0:	1c10      	adds	r0, r2, #0
10002ca2:	1c19      	adds	r1, r3, #0
10002ca4:	2200      	movs	r2, #0
10002ca6:	2301      	movs	r3, #1
10002ca8:	f7fe ffc4 	bl	10001c34 <XMC_VADC_GLOBAL_InputClassInit>
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
10002cac:	687b      	ldr	r3, [r7, #4]
10002cae:	68db      	ldr	r3, [r3, #12]
10002cb0:	685a      	ldr	r2, [r3, #4]
10002cb2:	687b      	ldr	r3, [r7, #4]
10002cb4:	685b      	ldr	r3, [r3, #4]
10002cb6:	1c10      	adds	r0, r2, #0
10002cb8:	1c19      	adds	r1, r3, #0
10002cba:	f7ff f821 	bl	10001d00 <XMC_VADC_GLOBAL_BackgroundInit>
  
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
10002cbe:	687b      	ldr	r3, [r7, #4]
10002cc0:	68db      	ldr	r3, [r3, #12]
10002cc2:	685a      	ldr	r2, [r3, #4]
10002cc4:	687b      	ldr	r3, [r7, #4]
10002cc6:	681b      	ldr	r3, [r3, #0]
10002cc8:	685b      	ldr	r3, [r3, #4]
10002cca:	1c10      	adds	r0, r2, #0
10002ccc:	1c19      	adds	r1, r3, #0
10002cce:	f7ff ff87 	bl	10002be0 <XMC_VADC_GLOBAL_ResultInit>
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10002cd2:	230f      	movs	r3, #15
10002cd4:	18fb      	adds	r3, r7, r3
10002cd6:	2200      	movs	r2, #0
10002cd8:	701a      	strb	r2, [r3, #0]
10002cda:	e01a      	b.n	10002d12 <ADC_MEASUREMENT_Init+0xba>
    {
      indexed = handle_ptr->array->channel_array[j];
10002cdc:	687b      	ldr	r3, [r7, #4]
10002cde:	681b      	ldr	r3, [r3, #0]
10002ce0:	220f      	movs	r2, #15
10002ce2:	18ba      	adds	r2, r7, r2
10002ce4:	7812      	ldrb	r2, [r2, #0]
10002ce6:	0092      	lsls	r2, r2, #2
10002ce8:	58d3      	ldr	r3, [r2, r3]
10002cea:	60bb      	str	r3, [r7, #8]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002cec:	687b      	ldr	r3, [r7, #4]
10002cee:	68db      	ldr	r3, [r3, #12]
10002cf0:	685a      	ldr	r2, [r3, #4]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10002cf2:	68bb      	ldr	r3, [r7, #8]
10002cf4:	781b      	ldrb	r3, [r3, #0]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002cf6:	1c19      	adds	r1, r3, #0
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10002cf8:	68bb      	ldr	r3, [r7, #8]
10002cfa:	785b      	ldrb	r3, [r3, #1]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002cfc:	1c10      	adds	r0, r2, #0
10002cfe:	1c1a      	adds	r2, r3, #0
10002d00:	f7ff ff90 	bl	10002c24 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10002d04:	230f      	movs	r3, #15
10002d06:	18fb      	adds	r3, r7, r3
10002d08:	781a      	ldrb	r2, [r3, #0]
10002d0a:	230f      	movs	r3, #15
10002d0c:	18fb      	adds	r3, r7, r3
10002d0e:	3201      	adds	r2, #1
10002d10:	701a      	strb	r2, [r3, #0]
10002d12:	230f      	movs	r3, #15
10002d14:	18fb      	adds	r3, r7, r3
10002d16:	781b      	ldrb	r3, [r3, #0]
10002d18:	2b00      	cmp	r3, #0
10002d1a:	d0df      	beq.n	10002cdc <ADC_MEASUREMENT_Init+0x84>
  XMC_SCU_SetInterruptControl(handle_ptr->req_src_intr_handle->node_id,
                              ((handle_ptr->req_src_intr_handle->node_id << 8) | handle_ptr->req_src_intr_handle->irqctrl));
#endif
    }
#else /* Selected device is XMC11*/
    XMC_VADC_GLOBAL_SetResultEventInterruptNode(handle_ptr->global_handle->module_ptr, handle_ptr->srv_req_node );
10002d1c:	687b      	ldr	r3, [r7, #4]
10002d1e:	68db      	ldr	r3, [r3, #12]
10002d20:	685a      	ldr	r2, [r3, #4]
10002d22:	687b      	ldr	r3, [r7, #4]
10002d24:	7e5b      	ldrb	r3, [r3, #25]
10002d26:	1c10      	adds	r0, r2, #0
10002d28:	1c19      	adds	r1, r3, #0
10002d2a:	f7fe ffb9 	bl	10001ca0 <XMC_VADC_GLOBAL_SetResultEventInterruptNode>
#ifdef ADC_MEASUREMENT_CPU_1X /* End of single measurement is enabled*/
    NVIC_SetPriority((IRQn_Type)handle_ptr->result_intr_handle->node_id,
10002d2e:	687b      	ldr	r3, [r7, #4]
10002d30:	691b      	ldr	r3, [r3, #16]
10002d32:	681b      	ldr	r3, [r3, #0]
10002d34:	b2da      	uxtb	r2, r3
                            handle_ptr->result_intr_handle->priority);
10002d36:	687b      	ldr	r3, [r7, #4]
10002d38:	691b      	ldr	r3, [r3, #16]
#endif
    }
#else /* Selected device is XMC11*/
    XMC_VADC_GLOBAL_SetResultEventInterruptNode(handle_ptr->global_handle->module_ptr, handle_ptr->srv_req_node );
#ifdef ADC_MEASUREMENT_CPU_1X /* End of single measurement is enabled*/
    NVIC_SetPriority((IRQn_Type)handle_ptr->result_intr_handle->node_id,
10002d3a:	685b      	ldr	r3, [r3, #4]
10002d3c:	b252      	sxtb	r2, r2
10002d3e:	1c10      	adds	r0, r2, #0
10002d40:	1c19      	adds	r1, r3, #0
10002d42:	f7ff fee3 	bl	10002b0c <__NVIC_SetPriority>
                            handle_ptr->result_intr_handle->priority);

    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
10002d46:	687b      	ldr	r3, [r7, #4]
10002d48:	691b      	ldr	r3, [r3, #16]
10002d4a:	681b      	ldr	r3, [r3, #0]
10002d4c:	b2db      	uxtb	r3, r3
10002d4e:	b25b      	sxtb	r3, r3
10002d50:	1c18      	adds	r0, r3, #0
10002d52:	f7ff fec1 	bl	10002ad8 <__NVIC_EnableIRQ>
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
10002d56:	687b      	ldr	r3, [r7, #4]
10002d58:	695b      	ldr	r3, [r3, #20]
10002d5a:	2b00      	cmp	r3, #0
10002d5c:	d002      	beq.n	10002d64 <ADC_MEASUREMENT_Init+0x10c>
    {
      (handle_ptr->mux_config)();
10002d5e:	687b      	ldr	r3, [r7, #4]
10002d60:	695b      	ldr	r3, [r3, #20]
10002d62:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
10002d64:	687b      	ldr	r3, [r7, #4]
10002d66:	7e9b      	ldrb	r3, [r3, #26]
10002d68:	2b00      	cmp	r3, #0
10002d6a:	d005      	beq.n	10002d78 <ADC_MEASUREMENT_Init+0x120>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10002d6c:	687b      	ldr	r3, [r7, #4]
10002d6e:	68db      	ldr	r3, [r3, #12]
10002d70:	685b      	ldr	r3, [r3, #4]
10002d72:	1c18      	adds	r0, r3, #0
10002d74:	f7ff ff42 	bl	10002bfc <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
10002d78:	687b      	ldr	r3, [r7, #4]
10002d7a:	220e      	movs	r2, #14
10002d7c:	18ba      	adds	r2, r7, r2
10002d7e:	7812      	ldrb	r2, [r2, #0]
10002d80:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10002d82:	687b      	ldr	r3, [r7, #4]
10002d84:	7e1b      	ldrb	r3, [r3, #24]
}
10002d86:	1c18      	adds	r0, r3, #0
10002d88:	46bd      	mov	sp, r7
10002d8a:	b005      	add	sp, #20
10002d8c:	bd90      	pop	{r4, r7, pc}
10002d8e:	46c0      	nop			; (mov r8, r8)

10002d90 <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
10002d90:	b580      	push	{r7, lr}
10002d92:	b082      	sub	sp, #8
10002d94:	af00      	add	r7, sp, #0
10002d96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL));

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10002d98:	687b      	ldr	r3, [r7, #4]
10002d9a:	68db      	ldr	r3, [r3, #12]
10002d9c:	685b      	ldr	r3, [r3, #4]
10002d9e:	1c18      	adds	r0, r3, #0
10002da0:	f7ff ff2c 	bl	10002bfc <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
10002da4:	46bd      	mov	sp, r7
10002da6:	b002      	add	sp, #8
10002da8:	bd80      	pop	{r7, pc}
10002daa:	46c0      	nop			; (mov r8, r8)

10002dac <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10002dac:	b590      	push	{r4, r7, lr}
10002dae:	b083      	sub	sp, #12
10002db0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10002db2:	1dfb      	adds	r3, r7, #7
10002db4:	2200      	movs	r2, #0
10002db6:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10002db8:	1dfc      	adds	r4, r7, #7
10002dba:	4b53      	ldr	r3, [pc, #332]	; (10002f08 <DAVE_Init+0x15c>)
10002dbc:	1c18      	adds	r0, r3, #0
10002dbe:	f7ff fe39 	bl	10002a34 <CLOCK_XMC1_Init>
10002dc2:	1c03      	adds	r3, r0, #0
10002dc4:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10002dc6:	1dfb      	adds	r3, r7, #7
10002dc8:	781b      	ldrb	r3, [r3, #0]
10002dca:	2b00      	cmp	r3, #0
10002dcc:	d106      	bne.n	10002ddc <DAVE_Init+0x30>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_SENSOR */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_SENSOR); 
10002dce:	1dfc      	adds	r4, r7, #7
10002dd0:	4b4e      	ldr	r3, [pc, #312]	; (10002f0c <DAVE_Init+0x160>)
10002dd2:	1c18      	adds	r0, r3, #0
10002dd4:	f7ff ff40 	bl	10002c58 <ADC_MEASUREMENT_Init>
10002dd8:	1c03      	adds	r3, r0, #0
10002dda:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ddc:	1dfb      	adds	r3, r7, #7
10002dde:	781b      	ldrb	r3, [r3, #0]
10002de0:	2b00      	cmp	r3, #0
10002de2:	d106      	bne.n	10002df2 <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USB_SI */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USB_SI); 
10002de4:	1dfc      	adds	r4, r7, #7
10002de6:	4b4a      	ldr	r3, [pc, #296]	; (10002f10 <DAVE_Init+0x164>)
10002de8:	1c18      	adds	r0, r3, #0
10002dea:	f7ff fdff 	bl	100029ec <DIGITAL_IO_Init>
10002dee:	1c03      	adds	r3, r0, #0
10002df0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002df2:	1dfb      	adds	r3, r7, #7
10002df4:	781b      	ldrb	r3, [r3, #0]
10002df6:	2b00      	cmp	r3, #0
10002df8:	d106      	bne.n	10002e08 <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USB_OE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USB_OE); 
10002dfa:	1dfc      	adds	r4, r7, #7
10002dfc:	4b45      	ldr	r3, [pc, #276]	; (10002f14 <DAVE_Init+0x168>)
10002dfe:	1c18      	adds	r0, r3, #0
10002e00:	f7ff fdf4 	bl	100029ec <DIGITAL_IO_Init>
10002e04:	1c03      	adds	r3, r0, #0
10002e06:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e08:	1dfb      	adds	r3, r7, #7
10002e0a:	781b      	ldrb	r3, [r3, #0]
10002e0c:	2b00      	cmp	r3, #0
10002e0e:	d106      	bne.n	10002e1e <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_LED_R_STATUS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_LED_R_STATUS); 
10002e10:	1dfc      	adds	r4, r7, #7
10002e12:	4b41      	ldr	r3, [pc, #260]	; (10002f18 <DAVE_Init+0x16c>)
10002e14:	1c18      	adds	r0, r3, #0
10002e16:	f7ff fde9 	bl	100029ec <DIGITAL_IO_Init>
10002e1a:	1c03      	adds	r3, r0, #0
10002e1c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e1e:	1dfb      	adds	r3, r7, #7
10002e20:	781b      	ldrb	r3, [r3, #0]
10002e22:	2b00      	cmp	r3, #0
10002e24:	d106      	bne.n	10002e34 <DAVE_Init+0x88>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_SW_USB */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_SW_USB); 
10002e26:	1dfc      	adds	r4, r7, #7
10002e28:	4b3c      	ldr	r3, [pc, #240]	; (10002f1c <DAVE_Init+0x170>)
10002e2a:	1c18      	adds	r0, r3, #0
10002e2c:	f7ff fdde 	bl	100029ec <DIGITAL_IO_Init>
10002e30:	1c03      	adds	r3, r0, #0
10002e32:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e34:	1dfb      	adds	r3, r7, #7
10002e36:	781b      	ldrb	r3, [r3, #0]
10002e38:	2b00      	cmp	r3, #0
10002e3a:	d106      	bne.n	10002e4a <DAVE_Init+0x9e>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_SW_UP */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_SW_UP); 
10002e3c:	1dfc      	adds	r4, r7, #7
10002e3e:	4b38      	ldr	r3, [pc, #224]	; (10002f20 <DAVE_Init+0x174>)
10002e40:	1c18      	adds	r0, r3, #0
10002e42:	f7ff fdd3 	bl	100029ec <DIGITAL_IO_Init>
10002e46:	1c03      	adds	r3, r0, #0
10002e48:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e4a:	1dfb      	adds	r3, r7, #7
10002e4c:	781b      	ldrb	r3, [r3, #0]
10002e4e:	2b00      	cmp	r3, #0
10002e50:	d106      	bne.n	10002e60 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_SW_DOWN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_SW_DOWN); 
10002e52:	1dfc      	adds	r4, r7, #7
10002e54:	4b33      	ldr	r3, [pc, #204]	; (10002f24 <DAVE_Init+0x178>)
10002e56:	1c18      	adds	r0, r3, #0
10002e58:	f7ff fdc8 	bl	100029ec <DIGITAL_IO_Init>
10002e5c:	1c03      	adds	r3, r0, #0
10002e5e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e60:	1dfb      	adds	r3, r7, #7
10002e62:	781b      	ldrb	r3, [r3, #0]
10002e64:	2b00      	cmp	r3, #0
10002e66:	d106      	bne.n	10002e76 <DAVE_Init+0xca>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USBPWR_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USBPWR_2); 
10002e68:	1dfc      	adds	r4, r7, #7
10002e6a:	4b2f      	ldr	r3, [pc, #188]	; (10002f28 <DAVE_Init+0x17c>)
10002e6c:	1c18      	adds	r0, r3, #0
10002e6e:	f7ff fdbd 	bl	100029ec <DIGITAL_IO_Init>
10002e72:	1c03      	adds	r3, r0, #0
10002e74:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e76:	1dfb      	adds	r3, r7, #7
10002e78:	781b      	ldrb	r3, [r3, #0]
10002e7a:	2b00      	cmp	r3, #0
10002e7c:	d106      	bne.n	10002e8c <DAVE_Init+0xe0>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USBPWR_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USBPWR_1); 
10002e7e:	1dfc      	adds	r4, r7, #7
10002e80:	4b2a      	ldr	r3, [pc, #168]	; (10002f2c <DAVE_Init+0x180>)
10002e82:	1c18      	adds	r0, r3, #0
10002e84:	f7ff fdb2 	bl	100029ec <DIGITAL_IO_Init>
10002e88:	1c03      	adds	r3, r0, #0
10002e8a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e8c:	1dfb      	adds	r3, r7, #7
10002e8e:	781b      	ldrb	r3, [r3, #0]
10002e90:	2b00      	cmp	r3, #0
10002e92:	d106      	bne.n	10002ea2 <DAVE_Init+0xf6>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_RELAY */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_RELAY); 
10002e94:	1dfc      	adds	r4, r7, #7
10002e96:	4b26      	ldr	r3, [pc, #152]	; (10002f30 <DAVE_Init+0x184>)
10002e98:	1c18      	adds	r0, r3, #0
10002e9a:	f7ff fda7 	bl	100029ec <DIGITAL_IO_Init>
10002e9e:	1c03      	adds	r3, r0, #0
10002ea0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ea2:	1dfb      	adds	r3, r7, #7
10002ea4:	781b      	ldrb	r3, [r3, #0]
10002ea6:	2b00      	cmp	r3, #0
10002ea8:	d106      	bne.n	10002eb8 <DAVE_Init+0x10c>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_LED_USB2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_LED_USB2); 
10002eaa:	1dfc      	adds	r4, r7, #7
10002eac:	4b21      	ldr	r3, [pc, #132]	; (10002f34 <DAVE_Init+0x188>)
10002eae:	1c18      	adds	r0, r3, #0
10002eb0:	f7ff fd9c 	bl	100029ec <DIGITAL_IO_Init>
10002eb4:	1c03      	adds	r3, r0, #0
10002eb6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002eb8:	1dfb      	adds	r3, r7, #7
10002eba:	781b      	ldrb	r3, [r3, #0]
10002ebc:	2b00      	cmp	r3, #0
10002ebe:	d106      	bne.n	10002ece <DAVE_Init+0x122>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_LED_USB1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_LED_USB1); 
10002ec0:	1dfc      	adds	r4, r7, #7
10002ec2:	4b1d      	ldr	r3, [pc, #116]	; (10002f38 <DAVE_Init+0x18c>)
10002ec4:	1c18      	adds	r0, r3, #0
10002ec6:	f7ff fd91 	bl	100029ec <DIGITAL_IO_Init>
10002eca:	1c03      	adds	r3, r0, #0
10002ecc:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ece:	1dfb      	adds	r3, r7, #7
10002ed0:	781b      	ldrb	r3, [r3, #0]
10002ed2:	2b00      	cmp	r3, #0
10002ed4:	d106      	bne.n	10002ee4 <DAVE_Init+0x138>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
10002ed6:	1dfc      	adds	r4, r7, #7
10002ed8:	4b18      	ldr	r3, [pc, #96]	; (10002f3c <DAVE_Init+0x190>)
10002eda:	1c18      	adds	r0, r3, #0
10002edc:	f7ff f9be 	bl	1000225c <SYSTIMER_Init>
10002ee0:	1c03      	adds	r3, r0, #0
10002ee2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ee4:	1dfb      	adds	r3, r7, #7
10002ee6:	781b      	ldrb	r3, [r3, #0]
10002ee8:	2b00      	cmp	r3, #0
10002eea:	d106      	bne.n	10002efa <DAVE_Init+0x14e>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_CCU4_LED_STATUS */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_CCU4_LED_STATUS); 
10002eec:	1dfc      	adds	r4, r7, #7
10002eee:	4b14      	ldr	r3, [pc, #80]	; (10002f40 <DAVE_Init+0x194>)
10002ef0:	1c18      	adds	r0, r3, #0
10002ef2:	f7ff fa6d 	bl	100023d0 <PWM_CCU4_Init>
10002ef6:	1c03      	adds	r3, r0, #0
10002ef8:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10002efa:	1dfb      	adds	r3, r7, #7
10002efc:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10002efe:	1c18      	adds	r0, r3, #0
10002f00:	46bd      	mov	sp, r7
10002f02:	b003      	add	sp, #12
10002f04:	bd90      	pop	{r4, r7, pc}
10002f06:	46c0      	nop			; (mov r8, r8)
10002f08:	2000065c 	.word	0x2000065c
10002f0c:	20000578 	.word	0x20000578
10002f10:	100078cc 	.word	0x100078cc
10002f14:	100078dc 	.word	0x100078dc
10002f18:	100078ec 	.word	0x100078ec
10002f1c:	100078fc 	.word	0x100078fc
10002f20:	1000790c 	.word	0x1000790c
10002f24:	1000791c 	.word	0x1000791c
10002f28:	1000792c 	.word	0x1000792c
10002f2c:	1000793c 	.word	0x1000793c
10002f30:	1000794c 	.word	0x1000794c
10002f34:	1000795c 	.word	0x1000795c
10002f38:	1000796c 	.word	0x1000796c
10002f3c:	20000658 	.word	0x20000658
10002f40:	20000520 	.word	0x20000520

10002f44 <XMC_VADC_GLOBAL_GetDetailedResult>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GLOBAL_GetResult()
 */
__STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
{
10002f44:	b580      	push	{r7, lr}
10002f46:	b082      	sub	sp, #8
10002f48:	af00      	add	r7, sp, #0
10002f4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))

  return (global_ptr->GLOBRES);
10002f4c:	687a      	ldr	r2, [r7, #4]
10002f4e:	23c0      	movs	r3, #192	; 0xc0
10002f50:	009b      	lsls	r3, r3, #2
10002f52:	58d3      	ldr	r3, [r2, r3]
}
10002f54:	1c18      	adds	r0, r3, #0
10002f56:	46bd      	mov	sp, r7
10002f58:	b002      	add	sp, #8
10002f5a:	bd80      	pop	{r7, pc}

10002f5c <ADC_MEASUREMENT_GetGlobalDetailedResult>:
    return 0;
  }
 @endcode
 */
__STATIC_INLINE uint32_t ADC_MEASUREMENT_GetGlobalDetailedResult(void)
{
10002f5c:	b580      	push	{r7, lr}
10002f5e:	b082      	sub	sp, #8
10002f60:	af00      	add	r7, sp, #0
  uint32_t result;
  result = XMC_VADC_GLOBAL_GetDetailedResult(ADC_MEASUREMENT_MODULE_PTR);
10002f62:	4b05      	ldr	r3, [pc, #20]	; (10002f78 <ADC_MEASUREMENT_GetGlobalDetailedResult+0x1c>)
10002f64:	1c18      	adds	r0, r3, #0
10002f66:	f7ff ffed 	bl	10002f44 <XMC_VADC_GLOBAL_GetDetailedResult>
10002f6a:	1c03      	adds	r3, r0, #0
10002f6c:	607b      	str	r3, [r7, #4]

  return (result);
10002f6e:	687b      	ldr	r3, [r7, #4]
}
10002f70:	1c18      	adds	r0, r3, #0
10002f72:	46bd      	mov	sp, r7
10002f74:	b002      	add	sp, #8
10002f76:	bd80      	pop	{r7, pc}
10002f78:	48030000 	.word	0x48030000

10002f7c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002f7c:	b580      	push	{r7, lr}
10002f7e:	b082      	sub	sp, #8
10002f80:	af00      	add	r7, sp, #0
10002f82:	6078      	str	r0, [r7, #4]
10002f84:	1c0a      	adds	r2, r1, #0
10002f86:	1cfb      	adds	r3, r7, #3
10002f88:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10002f8a:	1cfb      	adds	r3, r7, #3
10002f8c:	781b      	ldrb	r3, [r3, #0]
10002f8e:	2201      	movs	r2, #1
10002f90:	409a      	lsls	r2, r3
10002f92:	687b      	ldr	r3, [r7, #4]
10002f94:	605a      	str	r2, [r3, #4]
}
10002f96:	46bd      	mov	sp, r7
10002f98:	b002      	add	sp, #8
10002f9a:	bd80      	pop	{r7, pc}

10002f9c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002f9c:	b580      	push	{r7, lr}
10002f9e:	b082      	sub	sp, #8
10002fa0:	af00      	add	r7, sp, #0
10002fa2:	6078      	str	r0, [r7, #4]
10002fa4:	1c0a      	adds	r2, r1, #0
10002fa6:	1cfb      	adds	r3, r7, #3
10002fa8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10002faa:	1cfb      	adds	r3, r7, #3
10002fac:	781b      	ldrb	r3, [r3, #0]
10002fae:	2280      	movs	r2, #128	; 0x80
10002fb0:	0252      	lsls	r2, r2, #9
10002fb2:	409a      	lsls	r2, r3
10002fb4:	687b      	ldr	r3, [r7, #4]
10002fb6:	605a      	str	r2, [r3, #4]
}
10002fb8:	46bd      	mov	sp, r7
10002fba:	b002      	add	sp, #8
10002fbc:	bd80      	pop	{r7, pc}
10002fbe:	46c0      	nop			; (mov r8, r8)

10002fc0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002fc0:	b580      	push	{r7, lr}
10002fc2:	b082      	sub	sp, #8
10002fc4:	af00      	add	r7, sp, #0
10002fc6:	6078      	str	r0, [r7, #4]
10002fc8:	1c0a      	adds	r2, r1, #0
10002fca:	1cfb      	adds	r3, r7, #3
10002fcc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10002fce:	687b      	ldr	r3, [r7, #4]
10002fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002fd2:	1cfb      	adds	r3, r7, #3
10002fd4:	781b      	ldrb	r3, [r3, #0]
10002fd6:	40da      	lsrs	r2, r3
10002fd8:	1c13      	adds	r3, r2, #0
10002fda:	2201      	movs	r2, #1
10002fdc:	4013      	ands	r3, r2
}
10002fde:	1c18      	adds	r0, r3, #0
10002fe0:	46bd      	mov	sp, r7
10002fe2:	b002      	add	sp, #8
10002fe4:	bd80      	pop	{r7, pc}
10002fe6:	46c0      	nop			; (mov r8, r8)

10002fe8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10002fe8:	b580      	push	{r7, lr}
10002fea:	b082      	sub	sp, #8
10002fec:	af00      	add	r7, sp, #0
10002fee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10002ff0:	687b      	ldr	r3, [r7, #4]
10002ff2:	681a      	ldr	r2, [r3, #0]
10002ff4:	687b      	ldr	r3, [r7, #4]
10002ff6:	7b1b      	ldrb	r3, [r3, #12]
10002ff8:	1c10      	adds	r0, r2, #0
10002ffa:	1c19      	adds	r1, r3, #0
10002ffc:	f7ff ffbe 	bl	10002f7c <XMC_GPIO_SetOutputHigh>
}
10003000:	46bd      	mov	sp, r7
10003002:	b002      	add	sp, #8
10003004:	bd80      	pop	{r7, pc}
10003006:	46c0      	nop			; (mov r8, r8)

10003008 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10003008:	b580      	push	{r7, lr}
1000300a:	b082      	sub	sp, #8
1000300c:	af00      	add	r7, sp, #0
1000300e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10003010:	687b      	ldr	r3, [r7, #4]
10003012:	681a      	ldr	r2, [r3, #0]
10003014:	687b      	ldr	r3, [r7, #4]
10003016:	7b1b      	ldrb	r3, [r3, #12]
10003018:	1c10      	adds	r0, r2, #0
1000301a:	1c19      	adds	r1, r3, #0
1000301c:	f7ff ffbe 	bl	10002f9c <XMC_GPIO_SetOutputLow>
}
10003020:	46bd      	mov	sp, r7
10003022:	b002      	add	sp, #8
10003024:	bd80      	pop	{r7, pc}
10003026:	46c0      	nop			; (mov r8, r8)

10003028 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10003028:	b580      	push	{r7, lr}
1000302a:	b082      	sub	sp, #8
1000302c:	af00      	add	r7, sp, #0
1000302e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
10003030:	687b      	ldr	r3, [r7, #4]
10003032:	681a      	ldr	r2, [r3, #0]
10003034:	687b      	ldr	r3, [r7, #4]
10003036:	7b1b      	ldrb	r3, [r3, #12]
10003038:	1c10      	adds	r0, r2, #0
1000303a:	1c19      	adds	r1, r3, #0
1000303c:	f7ff ffc0 	bl	10002fc0 <XMC_GPIO_GetInput>
10003040:	1c03      	adds	r3, r0, #0
}
10003042:	1c18      	adds	r0, r3, #0
10003044:	46bd      	mov	sp, r7
10003046:	b002      	add	sp, #8
10003048:	bd80      	pop	{r7, pc}
1000304a:	46c0      	nop			; (mov r8, r8)

1000304c <reset_status_led_to_relay_state>:
}

//****************************************************************************
// reset_status_led_to_relay_state - gets state of relay and sets relay led according
//****************************************************************************
void reset_status_led_to_relay_state(){
1000304c:	b580      	push	{r7, lr}
1000304e:	b082      	sub	sp, #8
10003050:	af00      	add	r7, sp, #0
	uint32_t state = DIGITAL_IO_GetInput(&IO_RELAY);
10003052:	4b0f      	ldr	r3, [pc, #60]	; (10003090 <reset_status_led_to_relay_state+0x44>)
10003054:	1c18      	adds	r0, r3, #0
10003056:	f7ff ffe7 	bl	10003028 <DIGITAL_IO_GetInput>
1000305a:	1c03      	adds	r3, r0, #0
1000305c:	607b      	str	r3, [r7, #4]
	if(state == 0){
1000305e:	687b      	ldr	r3, [r7, #4]
10003060:	2b00      	cmp	r3, #0
10003062:	d109      	bne.n	10003078 <reset_status_led_to_relay_state+0x2c>
		led_status_pattern = LED_OFF;
10003064:	4b0b      	ldr	r3, [pc, #44]	; (10003094 <reset_status_led_to_relay_state+0x48>)
10003066:	2200      	movs	r2, #0
10003068:	701a      	strb	r2, [r3, #0]
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
1000306a:	4b0b      	ldr	r3, [pc, #44]	; (10003098 <reset_status_led_to_relay_state+0x4c>)
1000306c:	4a0b      	ldr	r2, [pc, #44]	; (1000309c <reset_status_led_to_relay_state+0x50>)
1000306e:	1c18      	adds	r0, r3, #0
10003070:	1c11      	adds	r1, r2, #0
10003072:	f7ff fc0b 	bl	1000288c <PWM_CCU4_SetDutyCycle>
10003076:	e007      	b.n	10003088 <reset_status_led_to_relay_state+0x3c>
	}
	else{
		led_status_pattern = LED_ON;
10003078:	4b06      	ldr	r3, [pc, #24]	; (10003094 <reset_status_led_to_relay_state+0x48>)
1000307a:	2201      	movs	r2, #1
1000307c:	701a      	strb	r2, [r3, #0]
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
1000307e:	4b06      	ldr	r3, [pc, #24]	; (10003098 <reset_status_led_to_relay_state+0x4c>)
10003080:	1c18      	adds	r0, r3, #0
10003082:	2100      	movs	r1, #0
10003084:	f7ff fc02 	bl	1000288c <PWM_CCU4_SetDutyCycle>
	}
}
10003088:	46bd      	mov	sp, r7
1000308a:	b002      	add	sp, #8
1000308c:	bd80      	pop	{r7, pc}
1000308e:	46c0      	nop			; (mov r8, r8)
10003090:	1000794c 	.word	0x1000794c
10003094:	20000664 	.word	0x20000664
10003098:	20000520 	.word	0x20000520
1000309c:	00002710 	.word	0x00002710

100030a0 <manage_status_led>:

//****************************************************************************
// manage_status_led - blink the status led according to the given pattern and (user interface)
//****************************************************************************
void manage_status_led(){
100030a0:	b580      	push	{r7, lr}
100030a2:	af00      	add	r7, sp, #0
	static uint16_t led_pattern_state_length;

	static uint16_t fade_duty_step;

	// Check target pattern an initiate
	if(led_status_pattern != led_status_pattern_last){
100030a4:	4ba9      	ldr	r3, [pc, #676]	; (1000334c <manage_status_led+0x2ac>)
100030a6:	781a      	ldrb	r2, [r3, #0]
100030a8:	4ba9      	ldr	r3, [pc, #676]	; (10003350 <manage_status_led+0x2b0>)
100030aa:	781b      	ldrb	r3, [r3, #0]
100030ac:	429a      	cmp	r2, r3
100030ae:	d100      	bne.n	100030b2 <manage_status_led+0x12>
100030b0:	e087      	b.n	100031c2 <manage_status_led+0x122>
		switch (led_status_pattern){
100030b2:	4ba6      	ldr	r3, [pc, #664]	; (1000334c <manage_status_led+0x2ac>)
100030b4:	781b      	ldrb	r3, [r3, #0]
100030b6:	2b05      	cmp	r3, #5
100030b8:	d900      	bls.n	100030bc <manage_status_led+0x1c>
100030ba:	e07e      	b.n	100031ba <manage_status_led+0x11a>
100030bc:	009a      	lsls	r2, r3, #2
100030be:	4ba5      	ldr	r3, [pc, #660]	; (10003354 <manage_status_led+0x2b4>)
100030c0:	18d3      	adds	r3, r2, r3
100030c2:	681b      	ldr	r3, [r3, #0]
100030c4:	469f      	mov	pc, r3
			case LED_OFF:
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
100030c6:	4ba4      	ldr	r3, [pc, #656]	; (10003358 <manage_status_led+0x2b8>)
100030c8:	4aa4      	ldr	r2, [pc, #656]	; (1000335c <manage_status_led+0x2bc>)
100030ca:	1c18      	adds	r0, r3, #0
100030cc:	1c11      	adds	r1, r2, #0
100030ce:	f7ff fbdd 	bl	1000288c <PWM_CCU4_SetDutyCycle>
				break;
100030d2:	e072      	b.n	100031ba <manage_status_led+0x11a>
			case LED_ON:
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
100030d4:	4ba0      	ldr	r3, [pc, #640]	; (10003358 <manage_status_led+0x2b8>)
100030d6:	1c18      	adds	r0, r3, #0
100030d8:	2100      	movs	r1, #0
100030da:	f7ff fbd7 	bl	1000288c <PWM_CCU4_SetDutyCycle>
				break;
100030de:	e06c      	b.n	100031ba <manage_status_led+0x11a>
			case LED_NUMBER:
				if(led_number >= 1){
100030e0:	4b9f      	ldr	r3, [pc, #636]	; (10003360 <manage_status_led+0x2c0>)
100030e2:	881b      	ldrh	r3, [r3, #0]
100030e4:	2b00      	cmp	r3, #0
100030e6:	d011      	beq.n	1000310c <manage_status_led+0x6c>
					led_pattern_state_timestamp = SYSTIMER_GetTime();
100030e8:	f7ff f8f4 	bl	100022d4 <SYSTIMER_GetTime>
100030ec:	1c02      	adds	r2, r0, #0
100030ee:	4b9d      	ldr	r3, [pc, #628]	; (10003364 <manage_status_led+0x2c4>)
100030f0:	601a      	str	r2, [r3, #0]
					led_pattern_state_length = LED_PULSE_SHORT;
100030f2:	4b9d      	ldr	r3, [pc, #628]	; (10003368 <manage_status_led+0x2c8>)
100030f4:	22c8      	movs	r2, #200	; 0xc8
100030f6:	801a      	strh	r2, [r3, #0]
					PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
100030f8:	4b97      	ldr	r3, [pc, #604]	; (10003358 <manage_status_led+0x2b8>)
100030fa:	4a98      	ldr	r2, [pc, #608]	; (1000335c <manage_status_led+0x2bc>)
100030fc:	1c18      	adds	r0, r3, #0
100030fe:	1c11      	adds	r1, r2, #0
10003100:	f7ff fbc4 	bl	1000288c <PWM_CCU4_SetDutyCycle>
					led_pattern_state = 0;
10003104:	4b99      	ldr	r3, [pc, #612]	; (1000336c <manage_status_led+0x2cc>)
10003106:	2200      	movs	r2, #0
10003108:	801a      	strh	r2, [r3, #0]
				}
				break;
1000310a:	e056      	b.n	100031ba <manage_status_led+0x11a>
1000310c:	e055      	b.n	100031ba <manage_status_led+0x11a>
			case LED_FADE_DOWN:
				if(led_fadetime > 0){
1000310e:	4b98      	ldr	r3, [pc, #608]	; (10003370 <manage_status_led+0x2d0>)
10003110:	881b      	ldrh	r3, [r3, #0]
10003112:	2b00      	cmp	r3, #0
10003114:	d023      	beq.n	1000315e <manage_status_led+0xbe>
					led_pattern_state_timestamp = SYSTIMER_GetTime();
10003116:	f7ff f8dd 	bl	100022d4 <SYSTIMER_GetTime>
1000311a:	1c02      	adds	r2, r0, #0
1000311c:	4b91      	ldr	r3, [pc, #580]	; (10003364 <manage_status_led+0x2c4>)
1000311e:	601a      	str	r2, [r3, #0]
					led_pattern_state_length = led_fadetime/led_fadesteps;
10003120:	4b93      	ldr	r3, [pc, #588]	; (10003370 <manage_status_led+0x2d0>)
10003122:	881a      	ldrh	r2, [r3, #0]
10003124:	4b93      	ldr	r3, [pc, #588]	; (10003374 <manage_status_led+0x2d4>)
10003126:	881b      	ldrh	r3, [r3, #0]
10003128:	1c10      	adds	r0, r2, #0
1000312a:	1c19      	adds	r1, r3, #0
1000312c:	f000 fdd4 	bl	10003cd8 <__aeabi_uidiv>
10003130:	1c03      	adds	r3, r0, #0
10003132:	b29a      	uxth	r2, r3
10003134:	4b8c      	ldr	r3, [pc, #560]	; (10003368 <manage_status_led+0x2c8>)
10003136:	801a      	strh	r2, [r3, #0]
					fade_duty_step = PWM_FULL_OFF/led_fadesteps;
10003138:	4b8e      	ldr	r3, [pc, #568]	; (10003374 <manage_status_led+0x2d4>)
1000313a:	881b      	ldrh	r3, [r3, #0]
1000313c:	4887      	ldr	r0, [pc, #540]	; (1000335c <manage_status_led+0x2bc>)
1000313e:	1c19      	adds	r1, r3, #0
10003140:	f000 fdca 	bl	10003cd8 <__aeabi_uidiv>
10003144:	1c03      	adds	r3, r0, #0
10003146:	b29a      	uxth	r2, r3
10003148:	4b8b      	ldr	r3, [pc, #556]	; (10003378 <manage_status_led+0x2d8>)
1000314a:	801a      	strh	r2, [r3, #0]
					PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
1000314c:	4b82      	ldr	r3, [pc, #520]	; (10003358 <manage_status_led+0x2b8>)
1000314e:	1c18      	adds	r0, r3, #0
10003150:	2100      	movs	r1, #0
10003152:	f7ff fb9b 	bl	1000288c <PWM_CCU4_SetDutyCycle>
					led_pattern_state = 0;
10003156:	4b85      	ldr	r3, [pc, #532]	; (1000336c <manage_status_led+0x2cc>)
10003158:	2200      	movs	r2, #0
1000315a:	801a      	strh	r2, [r3, #0]
				}
				break;
1000315c:	e02d      	b.n	100031ba <manage_status_led+0x11a>
1000315e:	e02c      	b.n	100031ba <manage_status_led+0x11a>
			case LED_FADE_UP:
				if(led_fadetime > 0){
10003160:	4b83      	ldr	r3, [pc, #524]	; (10003370 <manage_status_led+0x2d0>)
10003162:	881b      	ldrh	r3, [r3, #0]
10003164:	2b00      	cmp	r3, #0
10003166:	d024      	beq.n	100031b2 <manage_status_led+0x112>
					led_pattern_state_timestamp = SYSTIMER_GetTime();
10003168:	f7ff f8b4 	bl	100022d4 <SYSTIMER_GetTime>
1000316c:	1c02      	adds	r2, r0, #0
1000316e:	4b7d      	ldr	r3, [pc, #500]	; (10003364 <manage_status_led+0x2c4>)
10003170:	601a      	str	r2, [r3, #0]
					led_pattern_state_length = led_fadetime/led_fadesteps;
10003172:	4b7f      	ldr	r3, [pc, #508]	; (10003370 <manage_status_led+0x2d0>)
10003174:	881a      	ldrh	r2, [r3, #0]
10003176:	4b7f      	ldr	r3, [pc, #508]	; (10003374 <manage_status_led+0x2d4>)
10003178:	881b      	ldrh	r3, [r3, #0]
1000317a:	1c10      	adds	r0, r2, #0
1000317c:	1c19      	adds	r1, r3, #0
1000317e:	f000 fdab 	bl	10003cd8 <__aeabi_uidiv>
10003182:	1c03      	adds	r3, r0, #0
10003184:	b29a      	uxth	r2, r3
10003186:	4b78      	ldr	r3, [pc, #480]	; (10003368 <manage_status_led+0x2c8>)
10003188:	801a      	strh	r2, [r3, #0]
					fade_duty_step = PWM_FULL_OFF/led_fadesteps;
1000318a:	4b7a      	ldr	r3, [pc, #488]	; (10003374 <manage_status_led+0x2d4>)
1000318c:	881b      	ldrh	r3, [r3, #0]
1000318e:	4873      	ldr	r0, [pc, #460]	; (1000335c <manage_status_led+0x2bc>)
10003190:	1c19      	adds	r1, r3, #0
10003192:	f000 fda1 	bl	10003cd8 <__aeabi_uidiv>
10003196:	1c03      	adds	r3, r0, #0
10003198:	b29a      	uxth	r2, r3
1000319a:	4b77      	ldr	r3, [pc, #476]	; (10003378 <manage_status_led+0x2d8>)
1000319c:	801a      	strh	r2, [r3, #0]
					PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
1000319e:	4b6e      	ldr	r3, [pc, #440]	; (10003358 <manage_status_led+0x2b8>)
100031a0:	4a6e      	ldr	r2, [pc, #440]	; (1000335c <manage_status_led+0x2bc>)
100031a2:	1c18      	adds	r0, r3, #0
100031a4:	1c11      	adds	r1, r2, #0
100031a6:	f7ff fb71 	bl	1000288c <PWM_CCU4_SetDutyCycle>
					led_pattern_state = 0;
100031aa:	4b70      	ldr	r3, [pc, #448]	; (1000336c <manage_status_led+0x2cc>)
100031ac:	2200      	movs	r2, #0
100031ae:	801a      	strh	r2, [r3, #0]
				}
				break;
100031b0:	e003      	b.n	100031ba <manage_status_led+0x11a>
100031b2:	e002      	b.n	100031ba <manage_status_led+0x11a>
			case LED_MATCH_RELAY_STATE:
				reset_status_led_to_relay_state();
100031b4:	f7ff ff4a 	bl	1000304c <reset_status_led_to_relay_state>
				break;
100031b8:	46c0      	nop			; (mov r8, r8)
		}
		led_status_pattern_last = led_status_pattern;
100031ba:	4b64      	ldr	r3, [pc, #400]	; (1000334c <manage_status_led+0x2ac>)
100031bc:	781a      	ldrb	r2, [r3, #0]
100031be:	4b64      	ldr	r3, [pc, #400]	; (10003350 <manage_status_led+0x2b0>)
100031c0:	701a      	strb	r2, [r3, #0]
	}

	// Handle LED_NUMBER pattern
	if(led_status_pattern == LED_NUMBER){
100031c2:	4b62      	ldr	r3, [pc, #392]	; (1000334c <manage_status_led+0x2ac>)
100031c4:	781b      	ldrb	r3, [r3, #0]
100031c6:	2b02      	cmp	r3, #2
100031c8:	d160      	bne.n	1000328c <manage_status_led+0x1ec>
		if((SYSTIMER_GetTime() - led_pattern_state_timestamp) / 1000 >= led_pattern_state_length){
100031ca:	f7ff f883 	bl	100022d4 <SYSTIMER_GetTime>
100031ce:	1c02      	adds	r2, r0, #0
100031d0:	4b64      	ldr	r3, [pc, #400]	; (10003364 <manage_status_led+0x2c4>)
100031d2:	681b      	ldr	r3, [r3, #0]
100031d4:	1ad3      	subs	r3, r2, r3
100031d6:	1c18      	adds	r0, r3, #0
100031d8:	23fa      	movs	r3, #250	; 0xfa
100031da:	0099      	lsls	r1, r3, #2
100031dc:	f000 fd7c 	bl	10003cd8 <__aeabi_uidiv>
100031e0:	1c03      	adds	r3, r0, #0
100031e2:	1c1a      	adds	r2, r3, #0
100031e4:	4b60      	ldr	r3, [pc, #384]	; (10003368 <manage_status_led+0x2c8>)
100031e6:	881b      	ldrh	r3, [r3, #0]
100031e8:	429a      	cmp	r2, r3
100031ea:	d200      	bcs.n	100031ee <manage_status_led+0x14e>
100031ec:	e129      	b.n	10003442 <manage_status_led+0x3a2>
			// Next state
			led_pattern_state++;
100031ee:	4b5f      	ldr	r3, [pc, #380]	; (1000336c <manage_status_led+0x2cc>)
100031f0:	881b      	ldrh	r3, [r3, #0]
100031f2:	3301      	adds	r3, #1
100031f4:	b29a      	uxth	r2, r3
100031f6:	4b5d      	ldr	r3, [pc, #372]	; (1000336c <manage_status_led+0x2cc>)
100031f8:	801a      	strh	r2, [r3, #0]

			// Check if LED must be powered on or off for this state
			if(led_pattern_state % 2)
100031fa:	4b5c      	ldr	r3, [pc, #368]	; (1000336c <manage_status_led+0x2cc>)
100031fc:	881b      	ldrh	r3, [r3, #0]
100031fe:	2201      	movs	r2, #1
10003200:	4013      	ands	r3, r2
10003202:	b29b      	uxth	r3, r3
10003204:	2b00      	cmp	r3, #0
10003206:	d005      	beq.n	10003214 <manage_status_led+0x174>
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10003208:	4b53      	ldr	r3, [pc, #332]	; (10003358 <manage_status_led+0x2b8>)
1000320a:	1c18      	adds	r0, r3, #0
1000320c:	2100      	movs	r1, #0
1000320e:	f7ff fb3d 	bl	1000288c <PWM_CCU4_SetDutyCycle>
10003212:	e005      	b.n	10003220 <manage_status_led+0x180>
			else
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10003214:	4b50      	ldr	r3, [pc, #320]	; (10003358 <manage_status_led+0x2b8>)
10003216:	4a51      	ldr	r2, [pc, #324]	; (1000335c <manage_status_led+0x2bc>)
10003218:	1c18      	adds	r0, r3, #0
1000321a:	1c11      	adds	r1, r2, #0
1000321c:	f7ff fb36 	bl	1000288c <PWM_CCU4_SetDutyCycle>

			// Detect last low phase and make it longer
			if(led_pattern_state == (led_number*2) && led_pattern_mode == LED_PATTERN_CONTINUOUS)
10003220:	4b52      	ldr	r3, [pc, #328]	; (1000336c <manage_status_led+0x2cc>)
10003222:	881b      	ldrh	r3, [r3, #0]
10003224:	1c1a      	adds	r2, r3, #0
10003226:	4b4e      	ldr	r3, [pc, #312]	; (10003360 <manage_status_led+0x2c0>)
10003228:	881b      	ldrh	r3, [r3, #0]
1000322a:	005b      	lsls	r3, r3, #1
1000322c:	429a      	cmp	r2, r3
1000322e:	d107      	bne.n	10003240 <manage_status_led+0x1a0>
10003230:	4b52      	ldr	r3, [pc, #328]	; (1000337c <manage_status_led+0x2dc>)
10003232:	781b      	ldrb	r3, [r3, #0]
10003234:	2b00      	cmp	r3, #0
10003236:	d103      	bne.n	10003240 <manage_status_led+0x1a0>
				led_pattern_state_length = LED_PULSE_LONG;
10003238:	4b4b      	ldr	r3, [pc, #300]	; (10003368 <manage_status_led+0x2c8>)
1000323a:	4a51      	ldr	r2, [pc, #324]	; (10003380 <manage_status_led+0x2e0>)
1000323c:	801a      	strh	r2, [r3, #0]
1000323e:	e002      	b.n	10003246 <manage_status_led+0x1a6>
			else
				led_pattern_state_length = LED_PULSE_SHORT;
10003240:	4b49      	ldr	r3, [pc, #292]	; (10003368 <manage_status_led+0x2c8>)
10003242:	22c8      	movs	r2, #200	; 0xc8
10003244:	801a      	strh	r2, [r3, #0]

			// Store current time
			led_pattern_state_timestamp = SYSTIMER_GetTime();
10003246:	f7ff f845 	bl	100022d4 <SYSTIMER_GetTime>
1000324a:	1c02      	adds	r2, r0, #0
1000324c:	4b45      	ldr	r3, [pc, #276]	; (10003364 <manage_status_led+0x2c4>)
1000324e:	601a      	str	r2, [r3, #0]

			// Check if LED pattern is finished
			if(led_pattern_state > led_number*2){
10003250:	4b46      	ldr	r3, [pc, #280]	; (1000336c <manage_status_led+0x2cc>)
10003252:	881b      	ldrh	r3, [r3, #0]
10003254:	1c1a      	adds	r2, r3, #0
10003256:	4b42      	ldr	r3, [pc, #264]	; (10003360 <manage_status_led+0x2c0>)
10003258:	881b      	ldrh	r3, [r3, #0]
1000325a:	005b      	lsls	r3, r3, #1
1000325c:	429a      	cmp	r2, r3
1000325e:	dc00      	bgt.n	10003262 <manage_status_led+0x1c2>
10003260:	e0ef      	b.n	10003442 <manage_status_led+0x3a2>
				if(led_pattern_mode == LED_PATTERN_CONTINUOUS) // Repeat pattern
10003262:	4b46      	ldr	r3, [pc, #280]	; (1000337c <manage_status_led+0x2dc>)
10003264:	781b      	ldrb	r3, [r3, #0]
10003266:	2b00      	cmp	r3, #0
10003268:	d103      	bne.n	10003272 <manage_status_led+0x1d2>
					led_pattern_state = 1;
1000326a:	4b40      	ldr	r3, [pc, #256]	; (1000336c <manage_status_led+0x2cc>)
1000326c:	2201      	movs	r2, #1
1000326e:	801a      	strh	r2, [r3, #0]
10003270:	e0e7      	b.n	10003442 <manage_status_led+0x3a2>
				else if(led_pattern_mode == LED_PATTERN_SINGLE){ // Reset led and pattern mode
10003272:	4b42      	ldr	r3, [pc, #264]	; (1000337c <manage_status_led+0x2dc>)
10003274:	781b      	ldrb	r3, [r3, #0]
10003276:	2b01      	cmp	r3, #1
10003278:	d000      	beq.n	1000327c <manage_status_led+0x1dc>
1000327a:	e0e2      	b.n	10003442 <manage_status_led+0x3a2>
					led_pattern_mode = LED_PATTERN_CONTINUOUS;
1000327c:	4b3f      	ldr	r3, [pc, #252]	; (1000337c <manage_status_led+0x2dc>)
1000327e:	2200      	movs	r2, #0
10003280:	701a      	strb	r2, [r3, #0]
					led_status_pattern = led_status_pattern_after_single;
10003282:	4b40      	ldr	r3, [pc, #256]	; (10003384 <manage_status_led+0x2e4>)
10003284:	781a      	ldrb	r2, [r3, #0]
10003286:	4b31      	ldr	r3, [pc, #196]	; (1000334c <manage_status_led+0x2ac>)
10003288:	701a      	strb	r2, [r3, #0]
1000328a:	e0da      	b.n	10003442 <manage_status_led+0x3a2>
			}
		}
	}

	// Handle LED_FADE_UP pattern
	else if(led_status_pattern == LED_FADE_DOWN){
1000328c:	4b2f      	ldr	r3, [pc, #188]	; (1000334c <manage_status_led+0x2ac>)
1000328e:	781b      	ldrb	r3, [r3, #0]
10003290:	2b03      	cmp	r3, #3
10003292:	d000      	beq.n	10003296 <manage_status_led+0x1f6>
10003294:	e078      	b.n	10003388 <manage_status_led+0x2e8>
		if((SYSTIMER_GetTime() - led_pattern_state_timestamp) / 1000 >= led_pattern_state_length){
10003296:	f7ff f81d 	bl	100022d4 <SYSTIMER_GetTime>
1000329a:	1c02      	adds	r2, r0, #0
1000329c:	4b31      	ldr	r3, [pc, #196]	; (10003364 <manage_status_led+0x2c4>)
1000329e:	681b      	ldr	r3, [r3, #0]
100032a0:	1ad3      	subs	r3, r2, r3
100032a2:	1c18      	adds	r0, r3, #0
100032a4:	23fa      	movs	r3, #250	; 0xfa
100032a6:	0099      	lsls	r1, r3, #2
100032a8:	f000 fd16 	bl	10003cd8 <__aeabi_uidiv>
100032ac:	1c03      	adds	r3, r0, #0
100032ae:	1c1a      	adds	r2, r3, #0
100032b0:	4b2d      	ldr	r3, [pc, #180]	; (10003368 <manage_status_led+0x2c8>)
100032b2:	881b      	ldrh	r3, [r3, #0]
100032b4:	429a      	cmp	r2, r3
100032b6:	d200      	bcs.n	100032ba <manage_status_led+0x21a>
100032b8:	e0c3      	b.n	10003442 <manage_status_led+0x3a2>
			//
			PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, (led_pattern_state*fade_duty_step) + PWM_FULL_ON);
100032ba:	4b2c      	ldr	r3, [pc, #176]	; (1000336c <manage_status_led+0x2cc>)
100032bc:	881b      	ldrh	r3, [r3, #0]
100032be:	1c1a      	adds	r2, r3, #0
100032c0:	4b2d      	ldr	r3, [pc, #180]	; (10003378 <manage_status_led+0x2d8>)
100032c2:	881b      	ldrh	r3, [r3, #0]
100032c4:	4353      	muls	r3, r2
100032c6:	1c1a      	adds	r2, r3, #0
100032c8:	4b23      	ldr	r3, [pc, #140]	; (10003358 <manage_status_led+0x2b8>)
100032ca:	1c18      	adds	r0, r3, #0
100032cc:	1c11      	adds	r1, r2, #0
100032ce:	f7ff fadd 	bl	1000288c <PWM_CCU4_SetDutyCycle>

			// Store current time
			led_pattern_state_timestamp = SYSTIMER_GetTime();
100032d2:	f7fe ffff 	bl	100022d4 <SYSTIMER_GetTime>
100032d6:	1c02      	adds	r2, r0, #0
100032d8:	4b22      	ldr	r3, [pc, #136]	; (10003364 <manage_status_led+0x2c4>)
100032da:	601a      	str	r2, [r3, #0]

			// Next state
			led_pattern_state++;
100032dc:	4b23      	ldr	r3, [pc, #140]	; (1000336c <manage_status_led+0x2cc>)
100032de:	881b      	ldrh	r3, [r3, #0]
100032e0:	3301      	adds	r3, #1
100032e2:	b29a      	uxth	r2, r3
100032e4:	4b21      	ldr	r3, [pc, #132]	; (1000336c <manage_status_led+0x2cc>)
100032e6:	801a      	strh	r2, [r3, #0]

			// Make last state longer
			if(led_pattern_state == led_fadesteps-1)
100032e8:	4b20      	ldr	r3, [pc, #128]	; (1000336c <manage_status_led+0x2cc>)
100032ea:	881b      	ldrh	r3, [r3, #0]
100032ec:	1c1a      	adds	r2, r3, #0
100032ee:	4b21      	ldr	r3, [pc, #132]	; (10003374 <manage_status_led+0x2d4>)
100032f0:	881b      	ldrh	r3, [r3, #0]
100032f2:	3b01      	subs	r3, #1
100032f4:	429a      	cmp	r2, r3
100032f6:	d106      	bne.n	10003306 <manage_status_led+0x266>
				led_pattern_state_length = led_pattern_state_length + 400;
100032f8:	4b1b      	ldr	r3, [pc, #108]	; (10003368 <manage_status_led+0x2c8>)
100032fa:	881b      	ldrh	r3, [r3, #0]
100032fc:	3391      	adds	r3, #145	; 0x91
100032fe:	33ff      	adds	r3, #255	; 0xff
10003300:	b29a      	uxth	r2, r3
10003302:	4b19      	ldr	r3, [pc, #100]	; (10003368 <manage_status_led+0x2c8>)
10003304:	801a      	strh	r2, [r3, #0]

			// Check if LED pattern is finished
			if(led_pattern_state >= led_fadesteps){
10003306:	4b19      	ldr	r3, [pc, #100]	; (1000336c <manage_status_led+0x2cc>)
10003308:	881a      	ldrh	r2, [r3, #0]
1000330a:	4b1a      	ldr	r3, [pc, #104]	; (10003374 <manage_status_led+0x2d4>)
1000330c:	881b      	ldrh	r3, [r3, #0]
1000330e:	429a      	cmp	r2, r3
10003310:	d200      	bcs.n	10003314 <manage_status_led+0x274>
10003312:	e096      	b.n	10003442 <manage_status_led+0x3a2>
				if(led_pattern_mode == LED_PATTERN_CONTINUOUS){ // Repeat pattern
10003314:	4b19      	ldr	r3, [pc, #100]	; (1000337c <manage_status_led+0x2dc>)
10003316:	781b      	ldrb	r3, [r3, #0]
10003318:	2b00      	cmp	r3, #0
1000331a:	d10a      	bne.n	10003332 <manage_status_led+0x292>
					led_pattern_state_length = led_pattern_state_length - 400;
1000331c:	4b12      	ldr	r3, [pc, #72]	; (10003368 <manage_status_led+0x2c8>)
1000331e:	881b      	ldrh	r3, [r3, #0]
10003320:	3b91      	subs	r3, #145	; 0x91
10003322:	3bff      	subs	r3, #255	; 0xff
10003324:	b29a      	uxth	r2, r3
10003326:	4b10      	ldr	r3, [pc, #64]	; (10003368 <manage_status_led+0x2c8>)
10003328:	801a      	strh	r2, [r3, #0]
					led_pattern_state = 0;
1000332a:	4b10      	ldr	r3, [pc, #64]	; (1000336c <manage_status_led+0x2cc>)
1000332c:	2200      	movs	r2, #0
1000332e:	801a      	strh	r2, [r3, #0]
10003330:	e087      	b.n	10003442 <manage_status_led+0x3a2>
				}
				else if(led_pattern_mode == LED_PATTERN_SINGLE){ // Reset led and pattern mode
10003332:	4b12      	ldr	r3, [pc, #72]	; (1000337c <manage_status_led+0x2dc>)
10003334:	781b      	ldrb	r3, [r3, #0]
10003336:	2b01      	cmp	r3, #1
10003338:	d000      	beq.n	1000333c <manage_status_led+0x29c>
1000333a:	e082      	b.n	10003442 <manage_status_led+0x3a2>
					led_pattern_mode = LED_PATTERN_CONTINUOUS;
1000333c:	4b0f      	ldr	r3, [pc, #60]	; (1000337c <manage_status_led+0x2dc>)
1000333e:	2200      	movs	r2, #0
10003340:	701a      	strb	r2, [r3, #0]
					led_status_pattern = led_status_pattern_after_single;
10003342:	4b10      	ldr	r3, [pc, #64]	; (10003384 <manage_status_led+0x2e4>)
10003344:	781a      	ldrb	r2, [r3, #0]
10003346:	4b01      	ldr	r3, [pc, #4]	; (1000334c <manage_status_led+0x2ac>)
10003348:	701a      	strb	r2, [r3, #0]
1000334a:	e07a      	b.n	10003442 <manage_status_led+0x3a2>
1000334c:	20000664 	.word	0x20000664
10003350:	20000665 	.word	0x20000665
10003354:	100079a0 	.word	0x100079a0
10003358:	20000520 	.word	0x20000520
1000335c:	00002710 	.word	0x00002710
10003360:	20000668 	.word	0x20000668
10003364:	20000698 	.word	0x20000698
10003368:	2000069c 	.word	0x2000069c
1000336c:	2000069e 	.word	0x2000069e
10003370:	200005a0 	.word	0x200005a0
10003374:	200005a2 	.word	0x200005a2
10003378:	200006a0 	.word	0x200006a0
1000337c:	20000666 	.word	0x20000666
10003380:	0000044c 	.word	0x0000044c
10003384:	20000667 	.word	0x20000667
			}
		}
	}

	// Handle LED_FADE_DOWN pattern
	else if(led_status_pattern == LED_FADE_UP){
10003388:	4b2f      	ldr	r3, [pc, #188]	; (10003448 <manage_status_led+0x3a8>)
1000338a:	781b      	ldrb	r3, [r3, #0]
1000338c:	2b04      	cmp	r3, #4
1000338e:	d158      	bne.n	10003442 <manage_status_led+0x3a2>
		if((SYSTIMER_GetTime() - led_pattern_state_timestamp) / 1000 >= led_pattern_state_length){
10003390:	f7fe ffa0 	bl	100022d4 <SYSTIMER_GetTime>
10003394:	1c02      	adds	r2, r0, #0
10003396:	4b2d      	ldr	r3, [pc, #180]	; (1000344c <manage_status_led+0x3ac>)
10003398:	681b      	ldr	r3, [r3, #0]
1000339a:	1ad3      	subs	r3, r2, r3
1000339c:	1c18      	adds	r0, r3, #0
1000339e:	23fa      	movs	r3, #250	; 0xfa
100033a0:	0099      	lsls	r1, r3, #2
100033a2:	f000 fc99 	bl	10003cd8 <__aeabi_uidiv>
100033a6:	1c03      	adds	r3, r0, #0
100033a8:	1c1a      	adds	r2, r3, #0
100033aa:	4b29      	ldr	r3, [pc, #164]	; (10003450 <manage_status_led+0x3b0>)
100033ac:	881b      	ldrh	r3, [r3, #0]
100033ae:	429a      	cmp	r2, r3
100033b0:	d347      	bcc.n	10003442 <manage_status_led+0x3a2>
			//
			PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF - (led_pattern_state*fade_duty_step) );
100033b2:	4b28      	ldr	r3, [pc, #160]	; (10003454 <manage_status_led+0x3b4>)
100033b4:	881b      	ldrh	r3, [r3, #0]
100033b6:	1c1a      	adds	r2, r3, #0
100033b8:	4b27      	ldr	r3, [pc, #156]	; (10003458 <manage_status_led+0x3b8>)
100033ba:	881b      	ldrh	r3, [r3, #0]
100033bc:	4353      	muls	r3, r2
100033be:	1c1a      	adds	r2, r3, #0
100033c0:	4b26      	ldr	r3, [pc, #152]	; (1000345c <manage_status_led+0x3bc>)
100033c2:	1a9b      	subs	r3, r3, r2
100033c4:	4a26      	ldr	r2, [pc, #152]	; (10003460 <manage_status_led+0x3c0>)
100033c6:	1c10      	adds	r0, r2, #0
100033c8:	1c19      	adds	r1, r3, #0
100033ca:	f7ff fa5f 	bl	1000288c <PWM_CCU4_SetDutyCycle>

			// Store current time
			led_pattern_state_timestamp = SYSTIMER_GetTime();
100033ce:	f7fe ff81 	bl	100022d4 <SYSTIMER_GetTime>
100033d2:	1c02      	adds	r2, r0, #0
100033d4:	4b1d      	ldr	r3, [pc, #116]	; (1000344c <manage_status_led+0x3ac>)
100033d6:	601a      	str	r2, [r3, #0]

			// Next state
			led_pattern_state++;
100033d8:	4b1e      	ldr	r3, [pc, #120]	; (10003454 <manage_status_led+0x3b4>)
100033da:	881b      	ldrh	r3, [r3, #0]
100033dc:	3301      	adds	r3, #1
100033de:	b29a      	uxth	r2, r3
100033e0:	4b1c      	ldr	r3, [pc, #112]	; (10003454 <manage_status_led+0x3b4>)
100033e2:	801a      	strh	r2, [r3, #0]

			// Make last state longer
			if(led_pattern_state == led_fadesteps-1)
100033e4:	4b1b      	ldr	r3, [pc, #108]	; (10003454 <manage_status_led+0x3b4>)
100033e6:	881b      	ldrh	r3, [r3, #0]
100033e8:	1c1a      	adds	r2, r3, #0
100033ea:	4b1e      	ldr	r3, [pc, #120]	; (10003464 <manage_status_led+0x3c4>)
100033ec:	881b      	ldrh	r3, [r3, #0]
100033ee:	3b01      	subs	r3, #1
100033f0:	429a      	cmp	r2, r3
100033f2:	d106      	bne.n	10003402 <manage_status_led+0x362>
				led_pattern_state_length = led_pattern_state_length + 400;
100033f4:	4b16      	ldr	r3, [pc, #88]	; (10003450 <manage_status_led+0x3b0>)
100033f6:	881b      	ldrh	r3, [r3, #0]
100033f8:	3391      	adds	r3, #145	; 0x91
100033fa:	33ff      	adds	r3, #255	; 0xff
100033fc:	b29a      	uxth	r2, r3
100033fe:	4b14      	ldr	r3, [pc, #80]	; (10003450 <manage_status_led+0x3b0>)
10003400:	801a      	strh	r2, [r3, #0]

			// Check if LED pattern is finished
			if(led_pattern_state >= led_fadesteps){
10003402:	4b14      	ldr	r3, [pc, #80]	; (10003454 <manage_status_led+0x3b4>)
10003404:	881a      	ldrh	r2, [r3, #0]
10003406:	4b17      	ldr	r3, [pc, #92]	; (10003464 <manage_status_led+0x3c4>)
10003408:	881b      	ldrh	r3, [r3, #0]
1000340a:	429a      	cmp	r2, r3
1000340c:	d319      	bcc.n	10003442 <manage_status_led+0x3a2>
				if(led_pattern_mode == LED_PATTERN_CONTINUOUS){ // Repeat pattern
1000340e:	4b16      	ldr	r3, [pc, #88]	; (10003468 <manage_status_led+0x3c8>)
10003410:	781b      	ldrb	r3, [r3, #0]
10003412:	2b00      	cmp	r3, #0
10003414:	d10a      	bne.n	1000342c <manage_status_led+0x38c>
					led_pattern_state_length = led_pattern_state_length - 400;
10003416:	4b0e      	ldr	r3, [pc, #56]	; (10003450 <manage_status_led+0x3b0>)
10003418:	881b      	ldrh	r3, [r3, #0]
1000341a:	3b91      	subs	r3, #145	; 0x91
1000341c:	3bff      	subs	r3, #255	; 0xff
1000341e:	b29a      	uxth	r2, r3
10003420:	4b0b      	ldr	r3, [pc, #44]	; (10003450 <manage_status_led+0x3b0>)
10003422:	801a      	strh	r2, [r3, #0]
					led_pattern_state = 0;
10003424:	4b0b      	ldr	r3, [pc, #44]	; (10003454 <manage_status_led+0x3b4>)
10003426:	2200      	movs	r2, #0
10003428:	801a      	strh	r2, [r3, #0]
1000342a:	e00a      	b.n	10003442 <manage_status_led+0x3a2>
				}
				else if(led_pattern_mode == LED_PATTERN_SINGLE){ // Reset led and pattern mode
1000342c:	4b0e      	ldr	r3, [pc, #56]	; (10003468 <manage_status_led+0x3c8>)
1000342e:	781b      	ldrb	r3, [r3, #0]
10003430:	2b01      	cmp	r3, #1
10003432:	d106      	bne.n	10003442 <manage_status_led+0x3a2>
					led_pattern_mode = LED_PATTERN_CONTINUOUS;
10003434:	4b0c      	ldr	r3, [pc, #48]	; (10003468 <manage_status_led+0x3c8>)
10003436:	2200      	movs	r2, #0
10003438:	701a      	strb	r2, [r3, #0]
					led_status_pattern = led_status_pattern_after_single;
1000343a:	4b0c      	ldr	r3, [pc, #48]	; (1000346c <manage_status_led+0x3cc>)
1000343c:	781a      	ldrb	r2, [r3, #0]
1000343e:	4b02      	ldr	r3, [pc, #8]	; (10003448 <manage_status_led+0x3a8>)
10003440:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
10003442:	46bd      	mov	sp, r7
10003444:	bd80      	pop	{r7, pc}
10003446:	46c0      	nop			; (mov r8, r8)
10003448:	20000664 	.word	0x20000664
1000344c:	20000698 	.word	0x20000698
10003450:	2000069c 	.word	0x2000069c
10003454:	2000069e 	.word	0x2000069e
10003458:	200006a0 	.word	0x200006a0
1000345c:	00002710 	.word	0x00002710
10003460:	20000520 	.word	0x20000520
10003464:	200005a2 	.word	0x200005a2
10003468:	20000666 	.word	0x20000666
1000346c:	20000667 	.word	0x20000667

10003470 <manage_buttons>:

//****************************************************************************
// main - function to manage, debounce and interpret button presses
//****************************************************************************
void manage_buttons(void)
{
10003470:	b580      	push	{r7, lr}
10003472:	af00      	add	r7, sp, #0
	/// Detect start of press and save current system time
	if(button_usb_pressed_timestamp == 0 && DIGITAL_IO_GetInput(&IO_SW_USB) == SW_ON)
10003474:	4b8f      	ldr	r3, [pc, #572]	; (100036b4 <manage_buttons+0x244>)
10003476:	681b      	ldr	r3, [r3, #0]
10003478:	2b00      	cmp	r3, #0
1000347a:	d10a      	bne.n	10003492 <manage_buttons+0x22>
1000347c:	4b8e      	ldr	r3, [pc, #568]	; (100036b8 <manage_buttons+0x248>)
1000347e:	1c18      	adds	r0, r3, #0
10003480:	f7ff fdd2 	bl	10003028 <DIGITAL_IO_GetInput>
10003484:	1e03      	subs	r3, r0, #0
10003486:	d104      	bne.n	10003492 <manage_buttons+0x22>
		button_usb_pressed_timestamp = SYSTIMER_GetTime();
10003488:	f7fe ff24 	bl	100022d4 <SYSTIMER_GetTime>
1000348c:	1c02      	adds	r2, r0, #0
1000348e:	4b89      	ldr	r3, [pc, #548]	; (100036b4 <manage_buttons+0x244>)
10003490:	601a      	str	r2, [r3, #0]
	if(button_up_pressed_timestamp == 0 && DIGITAL_IO_GetInput(&IO_SW_UP) == SW_ON)
10003492:	4b8a      	ldr	r3, [pc, #552]	; (100036bc <manage_buttons+0x24c>)
10003494:	681b      	ldr	r3, [r3, #0]
10003496:	2b00      	cmp	r3, #0
10003498:	d10a      	bne.n	100034b0 <manage_buttons+0x40>
1000349a:	4b89      	ldr	r3, [pc, #548]	; (100036c0 <manage_buttons+0x250>)
1000349c:	1c18      	adds	r0, r3, #0
1000349e:	f7ff fdc3 	bl	10003028 <DIGITAL_IO_GetInput>
100034a2:	1e03      	subs	r3, r0, #0
100034a4:	d104      	bne.n	100034b0 <manage_buttons+0x40>
		button_up_pressed_timestamp = SYSTIMER_GetTime();
100034a6:	f7fe ff15 	bl	100022d4 <SYSTIMER_GetTime>
100034aa:	1c02      	adds	r2, r0, #0
100034ac:	4b83      	ldr	r3, [pc, #524]	; (100036bc <manage_buttons+0x24c>)
100034ae:	601a      	str	r2, [r3, #0]
	if(button_down_pressed_timestamp == 0 && DIGITAL_IO_GetInput(&IO_SW_DOWN) == SW_ON)
100034b0:	4b84      	ldr	r3, [pc, #528]	; (100036c4 <manage_buttons+0x254>)
100034b2:	681b      	ldr	r3, [r3, #0]
100034b4:	2b00      	cmp	r3, #0
100034b6:	d10a      	bne.n	100034ce <manage_buttons+0x5e>
100034b8:	4b83      	ldr	r3, [pc, #524]	; (100036c8 <manage_buttons+0x258>)
100034ba:	1c18      	adds	r0, r3, #0
100034bc:	f7ff fdb4 	bl	10003028 <DIGITAL_IO_GetInput>
100034c0:	1e03      	subs	r3, r0, #0
100034c2:	d104      	bne.n	100034ce <manage_buttons+0x5e>
		button_down_pressed_timestamp = SYSTIMER_GetTime();
100034c4:	f7fe ff06 	bl	100022d4 <SYSTIMER_GetTime>
100034c8:	1c02      	adds	r2, r0, #0
100034ca:	4b7e      	ldr	r3, [pc, #504]	; (100036c4 <manage_buttons+0x254>)
100034cc:	601a      	str	r2, [r3, #0]

	// USB BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_usb_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_USB) == SW_OFF){
100034ce:	4b79      	ldr	r3, [pc, #484]	; (100036b4 <manage_buttons+0x244>)
100034d0:	681b      	ldr	r3, [r3, #0]
100034d2:	2b00      	cmp	r3, #0
100034d4:	d033      	beq.n	1000353e <manage_buttons+0xce>
100034d6:	4b78      	ldr	r3, [pc, #480]	; (100036b8 <manage_buttons+0x248>)
100034d8:	1c18      	adds	r0, r3, #0
100034da:	f7ff fda5 	bl	10003028 <DIGITAL_IO_GetInput>
100034de:	1e03      	subs	r3, r0, #0
100034e0:	2b01      	cmp	r3, #1
100034e2:	d12c      	bne.n	1000353e <manage_buttons+0xce>
		button_usb_pressed_duration = (SYSTIMER_GetTime() - button_usb_pressed_timestamp) / 1000; // convert us to ms
100034e4:	f7fe fef6 	bl	100022d4 <SYSTIMER_GetTime>
100034e8:	1c02      	adds	r2, r0, #0
100034ea:	4b72      	ldr	r3, [pc, #456]	; (100036b4 <manage_buttons+0x244>)
100034ec:	681b      	ldr	r3, [r3, #0]
100034ee:	1ad3      	subs	r3, r2, r3
100034f0:	1c18      	adds	r0, r3, #0
100034f2:	23fa      	movs	r3, #250	; 0xfa
100034f4:	0099      	lsls	r1, r3, #2
100034f6:	f000 fbef 	bl	10003cd8 <__aeabi_uidiv>
100034fa:	1c03      	adds	r3, r0, #0
100034fc:	b29a      	uxth	r2, r3
100034fe:	4b73      	ldr	r3, [pc, #460]	; (100036cc <manage_buttons+0x25c>)
10003500:	801a      	strh	r2, [r3, #0]
		button_usb_pressed_timestamp = 0;
10003502:	4b6c      	ldr	r3, [pc, #432]	; (100036b4 <manage_buttons+0x244>)
10003504:	2200      	movs	r2, #0
10003506:	601a      	str	r2, [r3, #0]
		// Interpret button press and activate "button pressed" marker
		if(button_usb_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
10003508:	4b70      	ldr	r3, [pc, #448]	; (100036cc <manage_buttons+0x25c>)
1000350a:	881b      	ldrh	r3, [r3, #0]
1000350c:	4a70      	ldr	r2, [pc, #448]	; (100036d0 <manage_buttons+0x260>)
1000350e:	4293      	cmp	r3, r2
10003510:	d903      	bls.n	1000351a <manage_buttons+0xaa>
			buttonpress_usb = BTNPRESS_NOT; // In this case the press is already handled
10003512:	4b70      	ldr	r3, [pc, #448]	; (100036d4 <manage_buttons+0x264>)
10003514:	2200      	movs	r2, #0
10003516:	701a      	strb	r2, [r3, #0]
10003518:	e010      	b.n	1000353c <manage_buttons+0xcc>
		else if(button_usb_pressed_duration >= BTN_LONG_PRESS_DURATION)
1000351a:	4b6c      	ldr	r3, [pc, #432]	; (100036cc <manage_buttons+0x25c>)
1000351c:	881b      	ldrh	r3, [r3, #0]
1000351e:	4a6e      	ldr	r2, [pc, #440]	; (100036d8 <manage_buttons+0x268>)
10003520:	4293      	cmp	r3, r2
10003522:	d903      	bls.n	1000352c <manage_buttons+0xbc>
			buttonpress_usb = BTNPRESS_LONG;
10003524:	4b6b      	ldr	r3, [pc, #428]	; (100036d4 <manage_buttons+0x264>)
10003526:	2202      	movs	r2, #2
10003528:	701a      	strb	r2, [r3, #0]
1000352a:	e007      	b.n	1000353c <manage_buttons+0xcc>
		else if(button_usb_pressed_duration >= BTN_STD_PRESS_DURATION)
1000352c:	4b67      	ldr	r3, [pc, #412]	; (100036cc <manage_buttons+0x25c>)
1000352e:	881b      	ldrh	r3, [r3, #0]
10003530:	2b3b      	cmp	r3, #59	; 0x3b
10003532:	d903      	bls.n	1000353c <manage_buttons+0xcc>
			buttonpress_usb = BTNPRESS_STD;
10003534:	4b67      	ldr	r3, [pc, #412]	; (100036d4 <manage_buttons+0x264>)
10003536:	2201      	movs	r2, #1
10003538:	701a      	strb	r2, [r3, #0]
	// USB BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_usb_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_USB) == SW_OFF){
		button_usb_pressed_duration = (SYSTIMER_GetTime() - button_usb_pressed_timestamp) / 1000; // convert us to ms
		button_usb_pressed_timestamp = 0;
		// Interpret button press and activate "button pressed" marker
		if(button_usb_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
1000353a:	e018      	b.n	1000356e <manage_buttons+0xfe>
1000353c:	e017      	b.n	1000356e <manage_buttons+0xfe>
			buttonpress_usb = BTNPRESS_LONG;
		else if(button_usb_pressed_duration >= BTN_STD_PRESS_DURATION)
			buttonpress_usb = BTNPRESS_STD;
	}
	// USB BUTTON: If press is to long reset (simulate that press ended)
	else if(button_usb_pressed_timestamp != 0 && button_usb_pressed_timestamp != TIMESTAMP_DEACTIVATED && ((SYSTIMER_GetTime() - button_usb_pressed_timestamp) / 1000) > BTN_LONGEST_PRESS_DURATION){
1000353e:	4b5d      	ldr	r3, [pc, #372]	; (100036b4 <manage_buttons+0x244>)
10003540:	681b      	ldr	r3, [r3, #0]
10003542:	2b00      	cmp	r3, #0
10003544:	d013      	beq.n	1000356e <manage_buttons+0xfe>
10003546:	4b5b      	ldr	r3, [pc, #364]	; (100036b4 <manage_buttons+0x244>)
10003548:	681b      	ldr	r3, [r3, #0]
1000354a:	3301      	adds	r3, #1
1000354c:	d00f      	beq.n	1000356e <manage_buttons+0xfe>
1000354e:	f7fe fec1 	bl	100022d4 <SYSTIMER_GetTime>
10003552:	1c02      	adds	r2, r0, #0
10003554:	4b57      	ldr	r3, [pc, #348]	; (100036b4 <manage_buttons+0x244>)
10003556:	681b      	ldr	r3, [r3, #0]
10003558:	1ad3      	subs	r3, r2, r3
1000355a:	4a60      	ldr	r2, [pc, #384]	; (100036dc <manage_buttons+0x26c>)
1000355c:	4293      	cmp	r3, r2
1000355e:	d906      	bls.n	1000356e <manage_buttons+0xfe>
		button_usb_pressed_timestamp = TIMESTAMP_DEACTIVATED; // deactivate timestamp till button is released
10003560:	4b54      	ldr	r3, [pc, #336]	; (100036b4 <manage_buttons+0x244>)
10003562:	2201      	movs	r2, #1
10003564:	4252      	negs	r2, r2
10003566:	601a      	str	r2, [r3, #0]
		buttonpress_usb = BTNPRESS_LONGEST;
10003568:	4b5a      	ldr	r3, [pc, #360]	; (100036d4 <manage_buttons+0x264>)
1000356a:	2203      	movs	r2, #3
1000356c:	701a      	strb	r2, [r3, #0]
	}

	// UP BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_up_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_UP) == SW_OFF){
1000356e:	4b53      	ldr	r3, [pc, #332]	; (100036bc <manage_buttons+0x24c>)
10003570:	681b      	ldr	r3, [r3, #0]
10003572:	2b00      	cmp	r3, #0
10003574:	d033      	beq.n	100035de <manage_buttons+0x16e>
10003576:	4b52      	ldr	r3, [pc, #328]	; (100036c0 <manage_buttons+0x250>)
10003578:	1c18      	adds	r0, r3, #0
1000357a:	f7ff fd55 	bl	10003028 <DIGITAL_IO_GetInput>
1000357e:	1e03      	subs	r3, r0, #0
10003580:	2b01      	cmp	r3, #1
10003582:	d12c      	bne.n	100035de <manage_buttons+0x16e>
		button_up_pressed_duration = (SYSTIMER_GetTime() - button_up_pressed_timestamp) / 1000; // convert us to ms
10003584:	f7fe fea6 	bl	100022d4 <SYSTIMER_GetTime>
10003588:	1c02      	adds	r2, r0, #0
1000358a:	4b4c      	ldr	r3, [pc, #304]	; (100036bc <manage_buttons+0x24c>)
1000358c:	681b      	ldr	r3, [r3, #0]
1000358e:	1ad3      	subs	r3, r2, r3
10003590:	1c18      	adds	r0, r3, #0
10003592:	23fa      	movs	r3, #250	; 0xfa
10003594:	0099      	lsls	r1, r3, #2
10003596:	f000 fb9f 	bl	10003cd8 <__aeabi_uidiv>
1000359a:	1c03      	adds	r3, r0, #0
1000359c:	b29a      	uxth	r2, r3
1000359e:	4b50      	ldr	r3, [pc, #320]	; (100036e0 <manage_buttons+0x270>)
100035a0:	801a      	strh	r2, [r3, #0]
		button_up_pressed_timestamp = 0;
100035a2:	4b46      	ldr	r3, [pc, #280]	; (100036bc <manage_buttons+0x24c>)
100035a4:	2200      	movs	r2, #0
100035a6:	601a      	str	r2, [r3, #0]
		// Interpret button press and activate "button pressed" marker
		if(button_up_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
100035a8:	4b4d      	ldr	r3, [pc, #308]	; (100036e0 <manage_buttons+0x270>)
100035aa:	881b      	ldrh	r3, [r3, #0]
100035ac:	4a48      	ldr	r2, [pc, #288]	; (100036d0 <manage_buttons+0x260>)
100035ae:	4293      	cmp	r3, r2
100035b0:	d903      	bls.n	100035ba <manage_buttons+0x14a>
			buttonpress_up = BTNPRESS_NOT; // In this case the press is already handled
100035b2:	4b4c      	ldr	r3, [pc, #304]	; (100036e4 <manage_buttons+0x274>)
100035b4:	2200      	movs	r2, #0
100035b6:	701a      	strb	r2, [r3, #0]
100035b8:	e010      	b.n	100035dc <manage_buttons+0x16c>
		else if(button_up_pressed_duration >= BTN_LONG_PRESS_DURATION)
100035ba:	4b49      	ldr	r3, [pc, #292]	; (100036e0 <manage_buttons+0x270>)
100035bc:	881b      	ldrh	r3, [r3, #0]
100035be:	4a46      	ldr	r2, [pc, #280]	; (100036d8 <manage_buttons+0x268>)
100035c0:	4293      	cmp	r3, r2
100035c2:	d903      	bls.n	100035cc <manage_buttons+0x15c>
			buttonpress_up = BTNPRESS_LONG;
100035c4:	4b47      	ldr	r3, [pc, #284]	; (100036e4 <manage_buttons+0x274>)
100035c6:	2202      	movs	r2, #2
100035c8:	701a      	strb	r2, [r3, #0]
100035ca:	e007      	b.n	100035dc <manage_buttons+0x16c>
		else if(button_up_pressed_duration >= BTN_STD_PRESS_DURATION)
100035cc:	4b44      	ldr	r3, [pc, #272]	; (100036e0 <manage_buttons+0x270>)
100035ce:	881b      	ldrh	r3, [r3, #0]
100035d0:	2b3b      	cmp	r3, #59	; 0x3b
100035d2:	d903      	bls.n	100035dc <manage_buttons+0x16c>
			buttonpress_up = BTNPRESS_STD;
100035d4:	4b43      	ldr	r3, [pc, #268]	; (100036e4 <manage_buttons+0x274>)
100035d6:	2201      	movs	r2, #1
100035d8:	701a      	strb	r2, [r3, #0]
	// UP BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_up_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_UP) == SW_OFF){
		button_up_pressed_duration = (SYSTIMER_GetTime() - button_up_pressed_timestamp) / 1000; // convert us to ms
		button_up_pressed_timestamp = 0;
		// Interpret button press and activate "button pressed" marker
		if(button_up_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
100035da:	e018      	b.n	1000360e <manage_buttons+0x19e>
100035dc:	e017      	b.n	1000360e <manage_buttons+0x19e>
		else if(button_up_pressed_duration >= BTN_STD_PRESS_DURATION)
			buttonpress_up = BTNPRESS_STD;

	}
	// UP BUTTON: If press is to long reset (simulate that press ended)
	else if(button_up_pressed_timestamp != 0 && button_up_pressed_timestamp != TIMESTAMP_DEACTIVATED && ((SYSTIMER_GetTime() - button_up_pressed_timestamp) / 1000) > BTN_LONGEST_PRESS_DURATION){
100035de:	4b37      	ldr	r3, [pc, #220]	; (100036bc <manage_buttons+0x24c>)
100035e0:	681b      	ldr	r3, [r3, #0]
100035e2:	2b00      	cmp	r3, #0
100035e4:	d013      	beq.n	1000360e <manage_buttons+0x19e>
100035e6:	4b35      	ldr	r3, [pc, #212]	; (100036bc <manage_buttons+0x24c>)
100035e8:	681b      	ldr	r3, [r3, #0]
100035ea:	3301      	adds	r3, #1
100035ec:	d00f      	beq.n	1000360e <manage_buttons+0x19e>
100035ee:	f7fe fe71 	bl	100022d4 <SYSTIMER_GetTime>
100035f2:	1c02      	adds	r2, r0, #0
100035f4:	4b31      	ldr	r3, [pc, #196]	; (100036bc <manage_buttons+0x24c>)
100035f6:	681b      	ldr	r3, [r3, #0]
100035f8:	1ad3      	subs	r3, r2, r3
100035fa:	4a38      	ldr	r2, [pc, #224]	; (100036dc <manage_buttons+0x26c>)
100035fc:	4293      	cmp	r3, r2
100035fe:	d906      	bls.n	1000360e <manage_buttons+0x19e>
		button_up_pressed_timestamp = TIMESTAMP_DEACTIVATED;
10003600:	4b2e      	ldr	r3, [pc, #184]	; (100036bc <manage_buttons+0x24c>)
10003602:	2201      	movs	r2, #1
10003604:	4252      	negs	r2, r2
10003606:	601a      	str	r2, [r3, #0]
		buttonpress_up = BTNPRESS_LONGEST;
10003608:	4b36      	ldr	r3, [pc, #216]	; (100036e4 <manage_buttons+0x274>)
1000360a:	2203      	movs	r2, #3
1000360c:	701a      	strb	r2, [r3, #0]
	}

	// DOWN BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_down_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_DOWN) == SW_OFF){
1000360e:	4b2d      	ldr	r3, [pc, #180]	; (100036c4 <manage_buttons+0x254>)
10003610:	681b      	ldr	r3, [r3, #0]
10003612:	2b00      	cmp	r3, #0
10003614:	d033      	beq.n	1000367e <manage_buttons+0x20e>
10003616:	4b2c      	ldr	r3, [pc, #176]	; (100036c8 <manage_buttons+0x258>)
10003618:	1c18      	adds	r0, r3, #0
1000361a:	f7ff fd05 	bl	10003028 <DIGITAL_IO_GetInput>
1000361e:	1e03      	subs	r3, r0, #0
10003620:	2b01      	cmp	r3, #1
10003622:	d12c      	bne.n	1000367e <manage_buttons+0x20e>
		button_down_pressed_duration = (SYSTIMER_GetTime() - button_down_pressed_timestamp) / 1000; // convert us to ms
10003624:	f7fe fe56 	bl	100022d4 <SYSTIMER_GetTime>
10003628:	1c02      	adds	r2, r0, #0
1000362a:	4b26      	ldr	r3, [pc, #152]	; (100036c4 <manage_buttons+0x254>)
1000362c:	681b      	ldr	r3, [r3, #0]
1000362e:	1ad3      	subs	r3, r2, r3
10003630:	1c18      	adds	r0, r3, #0
10003632:	23fa      	movs	r3, #250	; 0xfa
10003634:	0099      	lsls	r1, r3, #2
10003636:	f000 fb4f 	bl	10003cd8 <__aeabi_uidiv>
1000363a:	1c03      	adds	r3, r0, #0
1000363c:	b29a      	uxth	r2, r3
1000363e:	4b2a      	ldr	r3, [pc, #168]	; (100036e8 <manage_buttons+0x278>)
10003640:	801a      	strh	r2, [r3, #0]
		button_down_pressed_timestamp = 0;
10003642:	4b20      	ldr	r3, [pc, #128]	; (100036c4 <manage_buttons+0x254>)
10003644:	2200      	movs	r2, #0
10003646:	601a      	str	r2, [r3, #0]
		// Interpret button press and activate "button pressed" marker. The code that is reacting to it must reset it afterwards!
		if(button_down_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
10003648:	4b27      	ldr	r3, [pc, #156]	; (100036e8 <manage_buttons+0x278>)
1000364a:	881b      	ldrh	r3, [r3, #0]
1000364c:	4a20      	ldr	r2, [pc, #128]	; (100036d0 <manage_buttons+0x260>)
1000364e:	4293      	cmp	r3, r2
10003650:	d903      	bls.n	1000365a <manage_buttons+0x1ea>
			buttonpress_down = BTNPRESS_NOT; // In this case the press is already handled
10003652:	4b26      	ldr	r3, [pc, #152]	; (100036ec <manage_buttons+0x27c>)
10003654:	2200      	movs	r2, #0
10003656:	701a      	strb	r2, [r3, #0]
10003658:	e010      	b.n	1000367c <manage_buttons+0x20c>
		else if(button_down_pressed_duration >= BTN_LONG_PRESS_DURATION)
1000365a:	4b23      	ldr	r3, [pc, #140]	; (100036e8 <manage_buttons+0x278>)
1000365c:	881b      	ldrh	r3, [r3, #0]
1000365e:	4a1e      	ldr	r2, [pc, #120]	; (100036d8 <manage_buttons+0x268>)
10003660:	4293      	cmp	r3, r2
10003662:	d903      	bls.n	1000366c <manage_buttons+0x1fc>
			buttonpress_down = BTNPRESS_LONG;
10003664:	4b21      	ldr	r3, [pc, #132]	; (100036ec <manage_buttons+0x27c>)
10003666:	2202      	movs	r2, #2
10003668:	701a      	strb	r2, [r3, #0]
1000366a:	e007      	b.n	1000367c <manage_buttons+0x20c>
		else if(button_down_pressed_duration >= BTN_STD_PRESS_DURATION)
1000366c:	4b1e      	ldr	r3, [pc, #120]	; (100036e8 <manage_buttons+0x278>)
1000366e:	881b      	ldrh	r3, [r3, #0]
10003670:	2b3b      	cmp	r3, #59	; 0x3b
10003672:	d903      	bls.n	1000367c <manage_buttons+0x20c>
			buttonpress_down = BTNPRESS_STD;
10003674:	4b1d      	ldr	r3, [pc, #116]	; (100036ec <manage_buttons+0x27c>)
10003676:	2201      	movs	r2, #1
10003678:	701a      	strb	r2, [r3, #0]
	// DOWN BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_down_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_DOWN) == SW_OFF){
		button_down_pressed_duration = (SYSTIMER_GetTime() - button_down_pressed_timestamp) / 1000; // convert us to ms
		button_down_pressed_timestamp = 0;
		// Interpret button press and activate "button pressed" marker. The code that is reacting to it must reset it afterwards!
		if(button_down_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
1000367a:	e018      	b.n	100036ae <manage_buttons+0x23e>
1000367c:	e017      	b.n	100036ae <manage_buttons+0x23e>
			buttonpress_down = BTNPRESS_LONG;
		else if(button_down_pressed_duration >= BTN_STD_PRESS_DURATION)
			buttonpress_down = BTNPRESS_STD;
	}
	// DOWN BUTTON: If press is to long reset (simulate that press ended)
	else if(button_down_pressed_timestamp != 0 && button_down_pressed_timestamp != TIMESTAMP_DEACTIVATED && ((SYSTIMER_GetTime() - button_down_pressed_timestamp) / 1000) > BTN_LONGEST_PRESS_DURATION){
1000367e:	4b11      	ldr	r3, [pc, #68]	; (100036c4 <manage_buttons+0x254>)
10003680:	681b      	ldr	r3, [r3, #0]
10003682:	2b00      	cmp	r3, #0
10003684:	d013      	beq.n	100036ae <manage_buttons+0x23e>
10003686:	4b0f      	ldr	r3, [pc, #60]	; (100036c4 <manage_buttons+0x254>)
10003688:	681b      	ldr	r3, [r3, #0]
1000368a:	3301      	adds	r3, #1
1000368c:	d00f      	beq.n	100036ae <manage_buttons+0x23e>
1000368e:	f7fe fe21 	bl	100022d4 <SYSTIMER_GetTime>
10003692:	1c02      	adds	r2, r0, #0
10003694:	4b0b      	ldr	r3, [pc, #44]	; (100036c4 <manage_buttons+0x254>)
10003696:	681b      	ldr	r3, [r3, #0]
10003698:	1ad3      	subs	r3, r2, r3
1000369a:	4a10      	ldr	r2, [pc, #64]	; (100036dc <manage_buttons+0x26c>)
1000369c:	4293      	cmp	r3, r2
1000369e:	d906      	bls.n	100036ae <manage_buttons+0x23e>
		button_down_pressed_timestamp = TIMESTAMP_DEACTIVATED;
100036a0:	4b08      	ldr	r3, [pc, #32]	; (100036c4 <manage_buttons+0x254>)
100036a2:	2201      	movs	r2, #1
100036a4:	4252      	negs	r2, r2
100036a6:	601a      	str	r2, [r3, #0]
		buttonpress_down = BTNPRESS_LONGEST;
100036a8:	4b10      	ldr	r3, [pc, #64]	; (100036ec <manage_buttons+0x27c>)
100036aa:	2203      	movs	r2, #3
100036ac:	701a      	strb	r2, [r3, #0]
	}
}
100036ae:	46bd      	mov	sp, r7
100036b0:	bd80      	pop	{r7, pc}
100036b2:	46c0      	nop			; (mov r8, r8)
100036b4:	20000670 	.word	0x20000670
100036b8:	100078fc 	.word	0x100078fc
100036bc:	20000674 	.word	0x20000674
100036c0:	1000790c 	.word	0x1000790c
100036c4:	20000678 	.word	0x20000678
100036c8:	1000791c 	.word	0x1000791c
100036cc:	2000067c 	.word	0x2000067c
100036d0:	00000f9f 	.word	0x00000f9f
100036d4:	2000066a 	.word	0x2000066a
100036d8:	000003e7 	.word	0x000003e7
100036dc:	003d0ce7 	.word	0x003d0ce7
100036e0:	2000067e 	.word	0x2000067e
100036e4:	2000066b 	.word	0x2000066b
100036e8:	20000680 	.word	0x20000680
100036ec:	2000066c 	.word	0x2000066c

100036f0 <main>:

//****************************************************************************
// main - primary loop function
//****************************************************************************
int main(void)
{
100036f0:	b590      	push	{r4, r7, lr}
100036f2:	b085      	sub	sp, #20
100036f4:	af00      	add	r7, sp, #0
	// Initialization of DAVE APPs
	DAVE_STATUS_t status;
	status = DAVE_Init();
100036f6:	230b      	movs	r3, #11
100036f8:	18fc      	adds	r4, r7, r3
100036fa:	f7ff fb57 	bl	10002dac <DAVE_Init>
100036fe:	1c03      	adds	r3, r0, #0
10003700:	7023      	strb	r3, [r4, #0]

	// Error routine
	if (status != DAVE_STATUS_SUCCESS) {
10003702:	230b      	movs	r3, #11
10003704:	18fb      	adds	r3, r7, r3
10003706:	781b      	ldrb	r3, [r3, #0]
10003708:	2b00      	cmp	r3, #0
1000370a:	d000      	beq.n	1000370e <main+0x1e>
		while(1U){
		}
1000370c:	e7fe      	b.n	1000370c <main+0x1c>
	}

	/// - Set initial state -
	// Enable USB chip and switch to USB1
	DIGITAL_IO_SetOutputLow(&IO_USB_SI);
1000370e:	4bc4      	ldr	r3, [pc, #784]	; (10003a20 <main+0x330>)
10003710:	1c18      	adds	r0, r3, #0
10003712:	f7ff fc79 	bl	10003008 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&IO_USB_OE);
10003716:	4bc3      	ldr	r3, [pc, #780]	; (10003a24 <main+0x334>)
10003718:	1c18      	adds	r0, r3, #0
1000371a:	f7ff fc75 	bl	10003008 <DIGITAL_IO_SetOutputLow>
	// Enable USB1
	DIGITAL_IO_SetOutputHigh(&IO_USBPWR_1);
1000371e:	4bc2      	ldr	r3, [pc, #776]	; (10003a28 <main+0x338>)
10003720:	1c18      	adds	r0, r3, #0
10003722:	f7ff fc61 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&IO_LED_USB1);
10003726:	4bc1      	ldr	r3, [pc, #772]	; (10003a2c <main+0x33c>)
10003728:	1c18      	adds	r0, r3, #0
1000372a:	f7ff fc6d 	bl	10003008 <DIGITAL_IO_SetOutputLow>
	// Disable USB2
	DIGITAL_IO_SetOutputLow(&IO_USBPWR_2);
1000372e:	4bc0      	ldr	r3, [pc, #768]	; (10003a30 <main+0x340>)
10003730:	1c18      	adds	r0, r3, #0
10003732:	f7ff fc69 	bl	10003008 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&IO_LED_USB2);
10003736:	4bbf      	ldr	r3, [pc, #764]	; (10003a34 <main+0x344>)
10003738:	1c18      	adds	r0, r3, #0
1000373a:	f7ff fc55 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
	// Disable Relay and set LED off
	DIGITAL_IO_SetOutputLow(&IO_RELAY);
1000373e:	4bbe      	ldr	r3, [pc, #760]	; (10003a38 <main+0x348>)
10003740:	1c18      	adds	r0, r3, #0
10003742:	f7ff fc61 	bl	10003008 <DIGITAL_IO_SetOutputLow>
	PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10003746:	4bbd      	ldr	r3, [pc, #756]	; (10003a3c <main+0x34c>)
10003748:	4abd      	ldr	r2, [pc, #756]	; (10003a40 <main+0x350>)
1000374a:	1c18      	adds	r0, r3, #0
1000374c:	1c11      	adds	r1, r2, #0
1000374e:	f7ff f89d 	bl	1000288c <PWM_CCU4_SetDutyCycle>
	// Initialize next value conversion
	ADC_MEASUREMENT_StartConversion(&ADC_SENSOR);
10003752:	4bbc      	ldr	r3, [pc, #752]	; (10003a44 <main+0x354>)
10003754:	1c18      	adds	r0, r3, #0
10003756:	f7ff fb1b 	bl	10002d90 <ADC_MEASUREMENT_StartConversion>

	int main_loop_count = 0;
1000375a:	2300      	movs	r3, #0
1000375c:	60fb      	str	r3, [r7, #12]

	// Main loop
	while(1U)
	{
		// - Status LED handling -
		manage_status_led();
1000375e:	f7ff fc9f 	bl	100030a0 <manage_status_led>
		main_loop_count++;
10003762:	68fb      	ldr	r3, [r7, #12]
10003764:	3301      	adds	r3, #1
10003766:	60fb      	str	r3, [r7, #12]
		systime_debug = SYSTIMER_GetTime();
10003768:	f7fe fdb4 	bl	100022d4 <SYSTIMER_GetTime>
1000376c:	1c03      	adds	r3, r0, #0
1000376e:	1c1a      	adds	r2, r3, #0
10003770:	4bb5      	ldr	r3, [pc, #724]	; (10003a48 <main+0x358>)
10003772:	601a      	str	r2, [r3, #0]

		//// - Button handling -
		manage_buttons();
10003774:	f7ff fe7c 	bl	10003470 <manage_buttons>

		/// - USB Channel handling -
		switch (USB_state){
10003778:	4bb4      	ldr	r3, [pc, #720]	; (10003a4c <main+0x35c>)
1000377a:	781b      	ldrb	r3, [r3, #0]
1000377c:	2b01      	cmp	r3, #1
1000377e:	d023      	beq.n	100037c8 <main+0xd8>
10003780:	2b02      	cmp	r3, #2
10003782:	d041      	beq.n	10003808 <main+0x118>
10003784:	2b00      	cmp	r3, #0
10003786:	d140      	bne.n	1000380a <main+0x11a>
			case USB_1_active:
				// State code - none atm

				// Transition statement
				if(buttonpress_usb == BTNPRESS_STD){
10003788:	4bb1      	ldr	r3, [pc, #708]	; (10003a50 <main+0x360>)
1000378a:	781b      	ldrb	r3, [r3, #0]
1000378c:	2b01      	cmp	r3, #1
1000378e:	d11a      	bne.n	100037c6 <main+0xd6>
					DIGITAL_IO_SetOutputLow(&IO_USBPWR_1);
10003790:	4ba5      	ldr	r3, [pc, #660]	; (10003a28 <main+0x338>)
10003792:	1c18      	adds	r0, r3, #0
10003794:	f7ff fc38 	bl	10003008 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputHigh(&IO_USB_SI);
10003798:	4ba1      	ldr	r3, [pc, #644]	; (10003a20 <main+0x330>)
1000379a:	1c18      	adds	r0, r3, #0
1000379c:	f7ff fc24 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputLow(&IO_LED_USB2);
100037a0:	4ba4      	ldr	r3, [pc, #656]	; (10003a34 <main+0x344>)
100037a2:	1c18      	adds	r0, r3, #0
100037a4:	f7ff fc30 	bl	10003008 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputHigh(&IO_LED_USB1);
100037a8:	4ba0      	ldr	r3, [pc, #640]	; (10003a2c <main+0x33c>)
100037aa:	1c18      	adds	r0, r3, #0
100037ac:	f7ff fc1c 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputHigh(&IO_USBPWR_2);
100037b0:	4b9f      	ldr	r3, [pc, #636]	; (10003a30 <main+0x340>)
100037b2:	1c18      	adds	r0, r3, #0
100037b4:	f7ff fc18 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
					buttonpress_usb = BTNPRESS_NOT;
100037b8:	4ba5      	ldr	r3, [pc, #660]	; (10003a50 <main+0x360>)
100037ba:	2200      	movs	r2, #0
100037bc:	701a      	strb	r2, [r3, #0]

					USB_state = USB_2_active;
100037be:	4ba3      	ldr	r3, [pc, #652]	; (10003a4c <main+0x35c>)
100037c0:	2201      	movs	r2, #1
100037c2:	701a      	strb	r2, [r3, #0]
				}
				break;
100037c4:	e021      	b.n	1000380a <main+0x11a>
100037c6:	e020      	b.n	1000380a <main+0x11a>
			case USB_2_active:
				// State code - none atm

				// Transition statement
				if(buttonpress_usb == BTNPRESS_STD){
100037c8:	4ba1      	ldr	r3, [pc, #644]	; (10003a50 <main+0x360>)
100037ca:	781b      	ldrb	r3, [r3, #0]
100037cc:	2b01      	cmp	r3, #1
100037ce:	d11a      	bne.n	10003806 <main+0x116>
					DIGITAL_IO_SetOutputLow(&IO_USBPWR_2);
100037d0:	4b97      	ldr	r3, [pc, #604]	; (10003a30 <main+0x340>)
100037d2:	1c18      	adds	r0, r3, #0
100037d4:	f7ff fc18 	bl	10003008 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputLow(&IO_USB_SI);
100037d8:	4b91      	ldr	r3, [pc, #580]	; (10003a20 <main+0x330>)
100037da:	1c18      	adds	r0, r3, #0
100037dc:	f7ff fc14 	bl	10003008 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputLow(&IO_LED_USB1);
100037e0:	4b92      	ldr	r3, [pc, #584]	; (10003a2c <main+0x33c>)
100037e2:	1c18      	adds	r0, r3, #0
100037e4:	f7ff fc10 	bl	10003008 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputHigh(&IO_LED_USB2);
100037e8:	4b92      	ldr	r3, [pc, #584]	; (10003a34 <main+0x344>)
100037ea:	1c18      	adds	r0, r3, #0
100037ec:	f7ff fbfc 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputHigh(&IO_USBPWR_1);
100037f0:	4b8d      	ldr	r3, [pc, #564]	; (10003a28 <main+0x338>)
100037f2:	1c18      	adds	r0, r3, #0
100037f4:	f7ff fbf8 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
					buttonpress_usb = BTNPRESS_NOT;
100037f8:	4b95      	ldr	r3, [pc, #596]	; (10003a50 <main+0x360>)
100037fa:	2200      	movs	r2, #0
100037fc:	701a      	strb	r2, [r3, #0]

					USB_state = USB_1_active;
100037fe:	4b93      	ldr	r3, [pc, #588]	; (10003a4c <main+0x35c>)
10003800:	2200      	movs	r2, #0
10003802:	701a      	strb	r2, [r3, #0]
				}
				break;
10003804:	e001      	b.n	1000380a <main+0x11a>
10003806:	e000      	b.n	1000380a <main+0x11a>
			case USB_inactive:
				// Currently not implemented!
				break;
10003808:	46c0      	nop			; (mov r8, r8)
		}

		/// - Relay handling -
		// Check for state change triggers based on current state
		switch (relay_state){
1000380a:	4b92      	ldr	r3, [pc, #584]	; (10003a54 <main+0x364>)
1000380c:	781b      	ldrb	r3, [r3, #0]
1000380e:	2b00      	cmp	r3, #0
10003810:	d04e      	beq.n	100038b0 <main+0x1c0>
10003812:	2b01      	cmp	r3, #1
10003814:	d000      	beq.n	10003818 <main+0x128>
10003816:	e095      	b.n	10003944 <main+0x254>
			case RELAY_LOW:
				// State code
				// Check if upper threshold is exceeded. If it is and timestamp is not already set - save timestamp. If timestamp is already saved and threshold is not exceeded anymore reset timestamp
				if     (ADC_val_upper_thres_exceed_timestamp == 0 && ADC_val_current > ADC_upper_threshold){
10003818:	4b8f      	ldr	r3, [pc, #572]	; (10003a58 <main+0x368>)
1000381a:	681b      	ldr	r3, [r3, #0]
1000381c:	2b00      	cmp	r3, #0
1000381e:	d10c      	bne.n	1000383a <main+0x14a>
10003820:	4b8e      	ldr	r3, [pc, #568]	; (10003a5c <main+0x36c>)
10003822:	681b      	ldr	r3, [r3, #0]
10003824:	1e1a      	subs	r2, r3, #0
10003826:	4b8e      	ldr	r3, [pc, #568]	; (10003a60 <main+0x370>)
10003828:	681b      	ldr	r3, [r3, #0]
1000382a:	429a      	cmp	r2, r3
1000382c:	d205      	bcs.n	1000383a <main+0x14a>
					ADC_val_upper_thres_exceed_timestamp = SYSTIMER_GetTime();
1000382e:	f7fe fd51 	bl	100022d4 <SYSTIMER_GetTime>
10003832:	1c02      	adds	r2, r0, #0
10003834:	4b88      	ldr	r3, [pc, #544]	; (10003a58 <main+0x368>)
10003836:	601a      	str	r2, [r3, #0]
10003838:	e00d      	b.n	10003856 <main+0x166>
				}
				else if(ADC_val_upper_thres_exceed_timestamp != 0 && ADC_val_current < ADC_upper_threshold){
1000383a:	4b87      	ldr	r3, [pc, #540]	; (10003a58 <main+0x368>)
1000383c:	681b      	ldr	r3, [r3, #0]
1000383e:	2b00      	cmp	r3, #0
10003840:	d009      	beq.n	10003856 <main+0x166>
10003842:	4b86      	ldr	r3, [pc, #536]	; (10003a5c <main+0x36c>)
10003844:	681b      	ldr	r3, [r3, #0]
10003846:	1e1a      	subs	r2, r3, #0
10003848:	4b85      	ldr	r3, [pc, #532]	; (10003a60 <main+0x370>)
1000384a:	681b      	ldr	r3, [r3, #0]
1000384c:	429a      	cmp	r2, r3
1000384e:	d902      	bls.n	10003856 <main+0x166>
					ADC_val_upper_thres_exceed_timestamp = 0;
10003850:	4b81      	ldr	r3, [pc, #516]	; (10003a58 <main+0x368>)
10003852:	2200      	movs	r2, #0
10003854:	601a      	str	r2, [r3, #0]
				}

				// Transition statement
				// Check if threshold are exceeded long enough to trigger a switch
				if(ADC_val_upper_thres_exceed_timestamp != 0){
10003856:	4b80      	ldr	r3, [pc, #512]	; (10003a58 <main+0x368>)
10003858:	681b      	ldr	r3, [r3, #0]
1000385a:	2b00      	cmp	r3, #0
1000385c:	d027      	beq.n	100038ae <main+0x1be>
					uint16_t upperThresholdExceedDuration = (SYSTIMER_GetTime() - ADC_val_upper_thres_exceed_timestamp)/1000;
1000385e:	f7fe fd39 	bl	100022d4 <SYSTIMER_GetTime>
10003862:	1c02      	adds	r2, r0, #0
10003864:	4b7c      	ldr	r3, [pc, #496]	; (10003a58 <main+0x368>)
10003866:	681b      	ldr	r3, [r3, #0]
10003868:	1ad3      	subs	r3, r2, r3
1000386a:	1c18      	adds	r0, r3, #0
1000386c:	23fa      	movs	r3, #250	; 0xfa
1000386e:	0099      	lsls	r1, r3, #2
10003870:	f000 fa32 	bl	10003cd8 <__aeabi_uidiv>
10003874:	1c03      	adds	r3, r0, #0
10003876:	1c1a      	adds	r2, r3, #0
10003878:	2308      	movs	r3, #8
1000387a:	18fb      	adds	r3, r7, r3
1000387c:	801a      	strh	r2, [r3, #0]
					if(upperThresholdExceedDuration > relay_threshold_latchtime){
1000387e:	4b79      	ldr	r3, [pc, #484]	; (10003a64 <main+0x374>)
10003880:	881b      	ldrh	r3, [r3, #0]
10003882:	2208      	movs	r2, #8
10003884:	18ba      	adds	r2, r7, r2
10003886:	8812      	ldrh	r2, [r2, #0]
10003888:	429a      	cmp	r2, r3
1000388a:	d910      	bls.n	100038ae <main+0x1be>
						relay_state = RELAY_HIGH;
1000388c:	4b71      	ldr	r3, [pc, #452]	; (10003a54 <main+0x364>)
1000388e:	2200      	movs	r2, #0
10003890:	701a      	strb	r2, [r3, #0]
						DIGITAL_IO_SetOutputHigh(&IO_RELAY);
10003892:	4b69      	ldr	r3, [pc, #420]	; (10003a38 <main+0x348>)
10003894:	1c18      	adds	r0, r3, #0
10003896:	f7ff fba7 	bl	10002fe8 <DIGITAL_IO_SetOutputHigh>
						ADC_val_upper_thres_exceed_timestamp = 0;
1000389a:	4b6f      	ldr	r3, [pc, #444]	; (10003a58 <main+0x368>)
1000389c:	2200      	movs	r2, #0
1000389e:	601a      	str	r2, [r3, #0]
						if(setup_state == SETUP_IDLE)
100038a0:	4b71      	ldr	r3, [pc, #452]	; (10003a68 <main+0x378>)
100038a2:	781b      	ldrb	r3, [r3, #0]
100038a4:	2b00      	cmp	r3, #0
100038a6:	d102      	bne.n	100038ae <main+0x1be>
							reset_status_led_to_relay_state();
100038a8:	f7ff fbd0 	bl	1000304c <reset_status_led_to_relay_state>
					}
				}
				break;
100038ac:	e04a      	b.n	10003944 <main+0x254>
100038ae:	e049      	b.n	10003944 <main+0x254>
			case RELAY_HIGH:
				// State code
				// Check if lower threshold is exceeded. If it is and timestamp is not already set - save timestamp. If timestamp is already saved and threshold is not exceeded anymore reset timestamp
				if(ADC_val_lower_thres_exceed_timestamp == 0 && ADC_val_current < ADC_lower_threshold){
100038b0:	4b6e      	ldr	r3, [pc, #440]	; (10003a6c <main+0x37c>)
100038b2:	681b      	ldr	r3, [r3, #0]
100038b4:	2b00      	cmp	r3, #0
100038b6:	d10c      	bne.n	100038d2 <main+0x1e2>
100038b8:	4b6d      	ldr	r3, [pc, #436]	; (10003a70 <main+0x380>)
100038ba:	681b      	ldr	r3, [r3, #0]
100038bc:	1e1a      	subs	r2, r3, #0
100038be:	4b68      	ldr	r3, [pc, #416]	; (10003a60 <main+0x370>)
100038c0:	681b      	ldr	r3, [r3, #0]
100038c2:	429a      	cmp	r2, r3
100038c4:	d905      	bls.n	100038d2 <main+0x1e2>
					ADC_val_lower_thres_exceed_timestamp = SYSTIMER_GetTime();
100038c6:	f7fe fd05 	bl	100022d4 <SYSTIMER_GetTime>
100038ca:	1c02      	adds	r2, r0, #0
100038cc:	4b67      	ldr	r3, [pc, #412]	; (10003a6c <main+0x37c>)
100038ce:	601a      	str	r2, [r3, #0]
100038d0:	e00d      	b.n	100038ee <main+0x1fe>
				}
				else if(ADC_val_lower_thres_exceed_timestamp != 0 && ADC_val_current > ADC_lower_threshold){
100038d2:	4b66      	ldr	r3, [pc, #408]	; (10003a6c <main+0x37c>)
100038d4:	681b      	ldr	r3, [r3, #0]
100038d6:	2b00      	cmp	r3, #0
100038d8:	d009      	beq.n	100038ee <main+0x1fe>
100038da:	4b65      	ldr	r3, [pc, #404]	; (10003a70 <main+0x380>)
100038dc:	681b      	ldr	r3, [r3, #0]
100038de:	1e1a      	subs	r2, r3, #0
100038e0:	4b5f      	ldr	r3, [pc, #380]	; (10003a60 <main+0x370>)
100038e2:	681b      	ldr	r3, [r3, #0]
100038e4:	429a      	cmp	r2, r3
100038e6:	d202      	bcs.n	100038ee <main+0x1fe>
					ADC_val_lower_thres_exceed_timestamp = 0;
100038e8:	4b60      	ldr	r3, [pc, #384]	; (10003a6c <main+0x37c>)
100038ea:	2200      	movs	r2, #0
100038ec:	601a      	str	r2, [r3, #0]
				}

				// Transition statement
				// Check if threshold are exceeded long enough to trigger a switch
				if(ADC_val_lower_thres_exceed_timestamp != 0){
100038ee:	4b5f      	ldr	r3, [pc, #380]	; (10003a6c <main+0x37c>)
100038f0:	681b      	ldr	r3, [r3, #0]
100038f2:	2b00      	cmp	r3, #0
100038f4:	d025      	beq.n	10003942 <main+0x252>
					uint16_t lowerThresholdExceedDuration = (SYSTIMER_GetTime() - ADC_val_lower_thres_exceed_timestamp)/1000;
100038f6:	f7fe fced 	bl	100022d4 <SYSTIMER_GetTime>
100038fa:	1c02      	adds	r2, r0, #0
100038fc:	4b5b      	ldr	r3, [pc, #364]	; (10003a6c <main+0x37c>)
100038fe:	681b      	ldr	r3, [r3, #0]
10003900:	1ad3      	subs	r3, r2, r3
10003902:	1c18      	adds	r0, r3, #0
10003904:	23fa      	movs	r3, #250	; 0xfa
10003906:	0099      	lsls	r1, r3, #2
10003908:	f000 f9e6 	bl	10003cd8 <__aeabi_uidiv>
1000390c:	1c03      	adds	r3, r0, #0
1000390e:	1c1a      	adds	r2, r3, #0
10003910:	1dbb      	adds	r3, r7, #6
10003912:	801a      	strh	r2, [r3, #0]
					if(lowerThresholdExceedDuration > relay_threshold_latchtime){
10003914:	4b53      	ldr	r3, [pc, #332]	; (10003a64 <main+0x374>)
10003916:	881b      	ldrh	r3, [r3, #0]
10003918:	1dba      	adds	r2, r7, #6
1000391a:	8812      	ldrh	r2, [r2, #0]
1000391c:	429a      	cmp	r2, r3
1000391e:	d910      	bls.n	10003942 <main+0x252>
						relay_state = RELAY_LOW;
10003920:	4b4c      	ldr	r3, [pc, #304]	; (10003a54 <main+0x364>)
10003922:	2201      	movs	r2, #1
10003924:	701a      	strb	r2, [r3, #0]
						DIGITAL_IO_SetOutputLow(&IO_RELAY);
10003926:	4b44      	ldr	r3, [pc, #272]	; (10003a38 <main+0x348>)
10003928:	1c18      	adds	r0, r3, #0
1000392a:	f7ff fb6d 	bl	10003008 <DIGITAL_IO_SetOutputLow>
						ADC_val_lower_thres_exceed_timestamp = 0;
1000392e:	4b4f      	ldr	r3, [pc, #316]	; (10003a6c <main+0x37c>)
10003930:	2200      	movs	r2, #0
10003932:	601a      	str	r2, [r3, #0]
						if(setup_state == SETUP_IDLE)
10003934:	4b4c      	ldr	r3, [pc, #304]	; (10003a68 <main+0x378>)
10003936:	781b      	ldrb	r3, [r3, #0]
10003938:	2b00      	cmp	r3, #0
1000393a:	d102      	bne.n	10003942 <main+0x252>
							reset_status_led_to_relay_state();
1000393c:	f7ff fb86 	bl	1000304c <reset_status_led_to_relay_state>
					}
				}
				break;
10003940:	e7ff      	b.n	10003942 <main+0x252>
10003942:	46c0      	nop			; (mov r8, r8)
		}
		// Init next value conversion
		ADC_MEASUREMENT_StartConversion(&ADC_SENSOR);
10003944:	4b3f      	ldr	r3, [pc, #252]	; (10003a44 <main+0x354>)
10003946:	1c18      	adds	r0, r3, #0
10003948:	f7ff fa22 	bl	10002d90 <ADC_MEASUREMENT_StartConversion>

		/// - Relay settings handling - Todo auto exit menus after time?, led signal when reaching max?, upper threshold cant be lower than lower threshold?
		switch(setup_state){
1000394c:	4b46      	ldr	r3, [pc, #280]	; (10003a68 <main+0x378>)
1000394e:	781b      	ldrb	r3, [r3, #0]
10003950:	2b01      	cmp	r3, #1
10003952:	d036      	beq.n	100039c2 <main+0x2d2>
10003954:	dc02      	bgt.n	1000395c <main+0x26c>
10003956:	2b00      	cmp	r3, #0
10003958:	d007      	beq.n	1000396a <main+0x27a>
1000395a:	e16e      	b.n	10003c3a <main+0x54a>
1000395c:	2b02      	cmp	r3, #2
1000395e:	d100      	bne.n	10003962 <main+0x272>
10003960:	e0ce      	b.n	10003b00 <main+0x410>
10003962:	2b03      	cmp	r3, #3
10003964:	d100      	bne.n	10003968 <main+0x278>
10003966:	e131      	b.n	10003bcc <main+0x4dc>
10003968:	e167      	b.n	10003c3a <main+0x54a>
			case SETUP_IDLE:
				/// Interpret button press and change to according setup sub-menu (state)
				// A long  press of up or down brings system in time setup menu
				// A short press of up         brings system in upper threshold setup menu
				// A short press of down       brings system in lower threshold setup menu
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
1000396a:	4b42      	ldr	r3, [pc, #264]	; (10003a74 <main+0x384>)
1000396c:	781b      	ldrb	r3, [r3, #0]
1000396e:	2b02      	cmp	r3, #2
10003970:	d003      	beq.n	1000397a <main+0x28a>
10003972:	4b41      	ldr	r3, [pc, #260]	; (10003a78 <main+0x388>)
10003974:	781b      	ldrb	r3, [r3, #0]
10003976:	2b02      	cmp	r3, #2
10003978:	d109      	bne.n	1000398e <main+0x29e>
					setup_state = SETUP_TIME_TH;
1000397a:	4b3b      	ldr	r3, [pc, #236]	; (10003a68 <main+0x378>)
1000397c:	2203      	movs	r2, #3
1000397e:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
10003980:	4b3e      	ldr	r3, [pc, #248]	; (10003a7c <main+0x38c>)
10003982:	2202      	movs	r2, #2
10003984:	701a      	strb	r2, [r3, #0]
					led_number = 1;
10003986:	4b3e      	ldr	r3, [pc, #248]	; (10003a80 <main+0x390>)
10003988:	2201      	movs	r2, #1
1000398a:	801a      	strh	r2, [r3, #0]
1000398c:	e018      	b.n	100039c0 <main+0x2d0>
				}
				else if(buttonpress_up == BTNPRESS_STD){
1000398e:	4b39      	ldr	r3, [pc, #228]	; (10003a74 <main+0x384>)
10003990:	781b      	ldrb	r3, [r3, #0]
10003992:	2b01      	cmp	r3, #1
10003994:	d106      	bne.n	100039a4 <main+0x2b4>
					setup_state = SETUP_UPPER_TH;
10003996:	4b34      	ldr	r3, [pc, #208]	; (10003a68 <main+0x378>)
10003998:	2201      	movs	r2, #1
1000399a:	701a      	strb	r2, [r3, #0]
					//led_status_pattern = LED_NUMBER;
					//led_number = 5;
					led_status_pattern = LED_FADE_UP;
1000399c:	4b37      	ldr	r3, [pc, #220]	; (10003a7c <main+0x38c>)
1000399e:	2204      	movs	r2, #4
100039a0:	701a      	strb	r2, [r3, #0]
100039a2:	e00d      	b.n	100039c0 <main+0x2d0>
				}
				else if(buttonpress_down == BTNPRESS_STD){
100039a4:	4b34      	ldr	r3, [pc, #208]	; (10003a78 <main+0x388>)
100039a6:	781b      	ldrb	r3, [r3, #0]
100039a8:	2b01      	cmp	r3, #1
100039aa:	d109      	bne.n	100039c0 <main+0x2d0>
					setup_state = SETUP_LOWER_TH;
100039ac:	4b2e      	ldr	r3, [pc, #184]	; (10003a68 <main+0x378>)
100039ae:	2202      	movs	r2, #2
100039b0:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
100039b2:	4b32      	ldr	r3, [pc, #200]	; (10003a7c <main+0x38c>)
100039b4:	2202      	movs	r2, #2
100039b6:	701a      	strb	r2, [r3, #0]
					led_number = 3;
100039b8:	4b31      	ldr	r3, [pc, #196]	; (10003a80 <main+0x390>)
100039ba:	2203      	movs	r2, #3
100039bc:	801a      	strh	r2, [r3, #0]
					//led_status_pattern = LED_FADE_DOWN;
				}
				break;
100039be:	e13c      	b.n	10003c3a <main+0x54a>
100039c0:	e13b      	b.n	10003c3a <main+0x54a>
				/// Interpret button press:
				// A long  press of up or down brings system back to setup idle
				// A short press of up         increases the upper threshold value
				// A short press of down       decreases the upper threshold value
				// A longest press of up saves the current ADC value as threshold
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
100039c2:	4b2c      	ldr	r3, [pc, #176]	; (10003a74 <main+0x384>)
100039c4:	781b      	ldrb	r3, [r3, #0]
100039c6:	2b02      	cmp	r3, #2
100039c8:	d003      	beq.n	100039d2 <main+0x2e2>
100039ca:	4b2b      	ldr	r3, [pc, #172]	; (10003a78 <main+0x388>)
100039cc:	781b      	ldrb	r3, [r3, #0]
100039ce:	2b02      	cmp	r3, #2
100039d0:	d106      	bne.n	100039e0 <main+0x2f0>
					setup_state = SETUP_IDLE;
100039d2:	4b25      	ldr	r3, [pc, #148]	; (10003a68 <main+0x378>)
100039d4:	2200      	movs	r2, #0
100039d6:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_MATCH_RELAY_STATE;
100039d8:	4b28      	ldr	r3, [pc, #160]	; (10003a7c <main+0x38c>)
100039da:	2205      	movs	r2, #5
100039dc:	701a      	strb	r2, [r3, #0]
100039de:	e08e      	b.n	10003afe <main+0x40e>
				}
				else if(buttonpress_up == BTNPRESS_STD){ // Increase
100039e0:	4b24      	ldr	r3, [pc, #144]	; (10003a74 <main+0x384>)
100039e2:	781b      	ldrb	r3, [r3, #0]
100039e4:	2b01      	cmp	r3, #1
100039e6:	d153      	bne.n	10003a90 <main+0x3a0>
					ADC_upper_threshold += ADC_THRESHOLD_INCREMENT;
100039e8:	4b1c      	ldr	r3, [pc, #112]	; (10003a5c <main+0x36c>)
100039ea:	681b      	ldr	r3, [r3, #0]
100039ec:	337c      	adds	r3, #124	; 0x7c
100039ee:	1c1a      	adds	r2, r3, #0
100039f0:	4b1a      	ldr	r3, [pc, #104]	; (10003a5c <main+0x36c>)
100039f2:	601a      	str	r2, [r3, #0]
					// If maximum is reached blink led 2 times, then continue fading
					if(ADC_upper_threshold > ADC_THRESHOLD_MAX){
100039f4:	4b19      	ldr	r3, [pc, #100]	; (10003a5c <main+0x36c>)
100039f6:	681b      	ldr	r3, [r3, #0]
100039f8:	4a22      	ldr	r2, [pc, #136]	; (10003a84 <main+0x394>)
100039fa:	4293      	cmp	r3, r2
100039fc:	dc00      	bgt.n	10003a00 <main+0x310>
100039fe:	e07e      	b.n	10003afe <main+0x40e>
						ADC_upper_threshold = ADC_THRESHOLD_MAX;
10003a00:	4b16      	ldr	r3, [pc, #88]	; (10003a5c <main+0x36c>)
10003a02:	4a20      	ldr	r2, [pc, #128]	; (10003a84 <main+0x394>)
10003a04:	601a      	str	r2, [r3, #0]
						led_number = 2;
10003a06:	4b1e      	ldr	r3, [pc, #120]	; (10003a80 <main+0x390>)
10003a08:	2202      	movs	r2, #2
10003a0a:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10003a0c:	4b1b      	ldr	r3, [pc, #108]	; (10003a7c <main+0x38c>)
10003a0e:	2202      	movs	r2, #2
10003a10:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10003a12:	4b1d      	ldr	r3, [pc, #116]	; (10003a88 <main+0x398>)
10003a14:	2201      	movs	r2, #1
10003a16:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_UP;
10003a18:	4b1c      	ldr	r3, [pc, #112]	; (10003a8c <main+0x39c>)
10003a1a:	2204      	movs	r2, #4
10003a1c:	701a      	strb	r2, [r3, #0]
					led_number = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10003a1e:	e10c      	b.n	10003c3a <main+0x54a>
10003a20:	100078cc 	.word	0x100078cc
10003a24:	100078dc 	.word	0x100078dc
10003a28:	1000793c 	.word	0x1000793c
10003a2c:	1000796c 	.word	0x1000796c
10003a30:	1000792c 	.word	0x1000792c
10003a34:	1000795c 	.word	0x1000795c
10003a38:	1000794c 	.word	0x1000794c
10003a3c:	20000520 	.word	0x20000520
10003a40:	00002710 	.word	0x00002710
10003a44:	20000578 	.word	0x20000578
10003a48:	20000690 	.word	0x20000690
10003a4c:	200007cd 	.word	0x200007cd
10003a50:	2000066a 	.word	0x2000066a
10003a54:	200007cc 	.word	0x200007cc
10003a58:	20000688 	.word	0x20000688
10003a5c:	20000598 	.word	0x20000598
10003a60:	20000684 	.word	0x20000684
10003a64:	20000594 	.word	0x20000594
10003a68:	200007ce 	.word	0x200007ce
10003a6c:	2000068c 	.word	0x2000068c
10003a70:	2000059c 	.word	0x2000059c
10003a74:	2000066b 	.word	0x2000066b
10003a78:	2000066c 	.word	0x2000066c
10003a7c:	20000664 	.word	0x20000664
10003a80:	20000668 	.word	0x20000668
10003a84:	00000fff 	.word	0x00000fff
10003a88:	20000666 	.word	0x20000666
10003a8c:	20000667 	.word	0x20000667
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_FADE_UP;
					}
				}
				else if(buttonpress_down == BTNPRESS_STD){ // Decrease
10003a90:	4b6f      	ldr	r3, [pc, #444]	; (10003c50 <main+0x560>)
10003a92:	781b      	ldrb	r3, [r3, #0]
10003a94:	2b01      	cmp	r3, #1
10003a96:	d119      	bne.n	10003acc <main+0x3dc>
					ADC_upper_threshold -= ADC_THRESHOLD_INCREMENT;
10003a98:	4b6e      	ldr	r3, [pc, #440]	; (10003c54 <main+0x564>)
10003a9a:	681b      	ldr	r3, [r3, #0]
10003a9c:	3b7c      	subs	r3, #124	; 0x7c
10003a9e:	1c1a      	adds	r2, r3, #0
10003aa0:	4b6c      	ldr	r3, [pc, #432]	; (10003c54 <main+0x564>)
10003aa2:	601a      	str	r2, [r3, #0]
					// If minimum is reached blink led 2 times, then continue fading
					if(ADC_upper_threshold <= 0){
10003aa4:	4b6b      	ldr	r3, [pc, #428]	; (10003c54 <main+0x564>)
10003aa6:	681b      	ldr	r3, [r3, #0]
10003aa8:	2b00      	cmp	r3, #0
10003aaa:	dc28      	bgt.n	10003afe <main+0x40e>
						ADC_upper_threshold = 0;
10003aac:	4b69      	ldr	r3, [pc, #420]	; (10003c54 <main+0x564>)
10003aae:	2200      	movs	r2, #0
10003ab0:	601a      	str	r2, [r3, #0]
						led_number = 2;
10003ab2:	4b69      	ldr	r3, [pc, #420]	; (10003c58 <main+0x568>)
10003ab4:	2202      	movs	r2, #2
10003ab6:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10003ab8:	4b68      	ldr	r3, [pc, #416]	; (10003c5c <main+0x56c>)
10003aba:	2202      	movs	r2, #2
10003abc:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10003abe:	4b68      	ldr	r3, [pc, #416]	; (10003c60 <main+0x570>)
10003ac0:	2201      	movs	r2, #1
10003ac2:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_UP;
10003ac4:	4b67      	ldr	r3, [pc, #412]	; (10003c64 <main+0x574>)
10003ac6:	2204      	movs	r2, #4
10003ac8:	701a      	strb	r2, [r3, #0]
					led_number = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10003aca:	e0b6      	b.n	10003c3a <main+0x54a>
						led_status_pattern_after_single = LED_FADE_UP;
					}
					//if(ADC_upper_threshold <= ADC_lower_threshold)
						//ADC_upper_threshold = ADC_lower_threshold;
				}
				else if(buttonpress_up == BTNPRESS_LONGEST){
10003acc:	4b66      	ldr	r3, [pc, #408]	; (10003c68 <main+0x578>)
10003ace:	781b      	ldrb	r3, [r3, #0]
10003ad0:	2b03      	cmp	r3, #3
10003ad2:	d114      	bne.n	10003afe <main+0x40e>
					// Save current ADC value as threshold and exit setup menu
					ADC_upper_threshold = ADC_val_current;
10003ad4:	4b65      	ldr	r3, [pc, #404]	; (10003c6c <main+0x57c>)
10003ad6:	681b      	ldr	r3, [r3, #0]
10003ad8:	1c1a      	adds	r2, r3, #0
10003ada:	4b5e      	ldr	r3, [pc, #376]	; (10003c54 <main+0x564>)
10003adc:	601a      	str	r2, [r3, #0]
					setup_state = SETUP_IDLE;
10003ade:	4b64      	ldr	r3, [pc, #400]	; (10003c70 <main+0x580>)
10003ae0:	2200      	movs	r2, #0
10003ae2:	701a      	strb	r2, [r3, #0]
					// Blink LED 3 times (user info) and return to operation where led matches the state of the relay
					led_number = 3;
10003ae4:	4b5c      	ldr	r3, [pc, #368]	; (10003c58 <main+0x568>)
10003ae6:	2203      	movs	r2, #3
10003ae8:	801a      	strh	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
10003aea:	4b5c      	ldr	r3, [pc, #368]	; (10003c5c <main+0x56c>)
10003aec:	2202      	movs	r2, #2
10003aee:	701a      	strb	r2, [r3, #0]
					led_pattern_mode = LED_PATTERN_SINGLE;
10003af0:	4b5b      	ldr	r3, [pc, #364]	; (10003c60 <main+0x570>)
10003af2:	2201      	movs	r2, #1
10003af4:	701a      	strb	r2, [r3, #0]
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
10003af6:	4b5b      	ldr	r3, [pc, #364]	; (10003c64 <main+0x574>)
10003af8:	2205      	movs	r2, #5
10003afa:	701a      	strb	r2, [r3, #0]
				}
				break;
10003afc:	e09d      	b.n	10003c3a <main+0x54a>
10003afe:	e09c      	b.n	10003c3a <main+0x54a>
				/// Interpret button press:
				// A long  press of up or down brings system back to setup idle
				// A short press of up         increases the lower threshold value
				// A short press of down       decreases the lower threshold value
				// A longest press of down saves the current ADC value as threshold
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
10003b00:	4b59      	ldr	r3, [pc, #356]	; (10003c68 <main+0x578>)
10003b02:	781b      	ldrb	r3, [r3, #0]
10003b04:	2b02      	cmp	r3, #2
10003b06:	d003      	beq.n	10003b10 <main+0x420>
10003b08:	4b51      	ldr	r3, [pc, #324]	; (10003c50 <main+0x560>)
10003b0a:	781b      	ldrb	r3, [r3, #0]
10003b0c:	2b02      	cmp	r3, #2
10003b0e:	d106      	bne.n	10003b1e <main+0x42e>
					setup_state = SETUP_IDLE;
10003b10:	4b57      	ldr	r3, [pc, #348]	; (10003c70 <main+0x580>)
10003b12:	2200      	movs	r2, #0
10003b14:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_MATCH_RELAY_STATE;
10003b16:	4b51      	ldr	r3, [pc, #324]	; (10003c5c <main+0x56c>)
10003b18:	2205      	movs	r2, #5
10003b1a:	701a      	strb	r2, [r3, #0]
10003b1c:	e055      	b.n	10003bca <main+0x4da>
				}
				else if(buttonpress_up == BTNPRESS_STD){ // Increase
10003b1e:	4b52      	ldr	r3, [pc, #328]	; (10003c68 <main+0x578>)
10003b20:	781b      	ldrb	r3, [r3, #0]
10003b22:	2b01      	cmp	r3, #1
10003b24:	d11a      	bne.n	10003b5c <main+0x46c>
					ADC_lower_threshold += ADC_THRESHOLD_INCREMENT;
10003b26:	4b53      	ldr	r3, [pc, #332]	; (10003c74 <main+0x584>)
10003b28:	681b      	ldr	r3, [r3, #0]
10003b2a:	337c      	adds	r3, #124	; 0x7c
10003b2c:	1c1a      	adds	r2, r3, #0
10003b2e:	4b51      	ldr	r3, [pc, #324]	; (10003c74 <main+0x584>)
10003b30:	601a      	str	r2, [r3, #0]
					// If maximum is reached blink led 2 times, then continue fading
					if(ADC_lower_threshold > ADC_THRESHOLD_MAX){
10003b32:	4b50      	ldr	r3, [pc, #320]	; (10003c74 <main+0x584>)
10003b34:	681b      	ldr	r3, [r3, #0]
10003b36:	4a50      	ldr	r2, [pc, #320]	; (10003c78 <main+0x588>)
10003b38:	4293      	cmp	r3, r2
10003b3a:	dd46      	ble.n	10003bca <main+0x4da>
						ADC_lower_threshold = ADC_THRESHOLD_MAX;
10003b3c:	4b4d      	ldr	r3, [pc, #308]	; (10003c74 <main+0x584>)
10003b3e:	4a4e      	ldr	r2, [pc, #312]	; (10003c78 <main+0x588>)
10003b40:	601a      	str	r2, [r3, #0]
						led_number = 2;
10003b42:	4b45      	ldr	r3, [pc, #276]	; (10003c58 <main+0x568>)
10003b44:	2202      	movs	r2, #2
10003b46:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10003b48:	4b44      	ldr	r3, [pc, #272]	; (10003c5c <main+0x56c>)
10003b4a:	2202      	movs	r2, #2
10003b4c:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10003b4e:	4b44      	ldr	r3, [pc, #272]	; (10003c60 <main+0x570>)
10003b50:	2201      	movs	r2, #1
10003b52:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_DOWN;
10003b54:	4b43      	ldr	r3, [pc, #268]	; (10003c64 <main+0x574>)
10003b56:	2203      	movs	r2, #3
10003b58:	701a      	strb	r2, [r3, #0]
					led_number = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10003b5a:	e06e      	b.n	10003c3a <main+0x54a>
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_FADE_DOWN;
					}
				}
				else if(buttonpress_down == BTNPRESS_STD){ // Decrease
10003b5c:	4b3c      	ldr	r3, [pc, #240]	; (10003c50 <main+0x560>)
10003b5e:	781b      	ldrb	r3, [r3, #0]
10003b60:	2b01      	cmp	r3, #1
10003b62:	d119      	bne.n	10003b98 <main+0x4a8>
					ADC_lower_threshold -= ADC_THRESHOLD_INCREMENT;
10003b64:	4b43      	ldr	r3, [pc, #268]	; (10003c74 <main+0x584>)
10003b66:	681b      	ldr	r3, [r3, #0]
10003b68:	3b7c      	subs	r3, #124	; 0x7c
10003b6a:	1c1a      	adds	r2, r3, #0
10003b6c:	4b41      	ldr	r3, [pc, #260]	; (10003c74 <main+0x584>)
10003b6e:	601a      	str	r2, [r3, #0]
					// If minimum is reached blink led 2 times, then continue fading
					if(ADC_lower_threshold <= 0){
10003b70:	4b40      	ldr	r3, [pc, #256]	; (10003c74 <main+0x584>)
10003b72:	681b      	ldr	r3, [r3, #0]
10003b74:	2b00      	cmp	r3, #0
10003b76:	dc28      	bgt.n	10003bca <main+0x4da>
						ADC_lower_threshold = 0;
10003b78:	4b3e      	ldr	r3, [pc, #248]	; (10003c74 <main+0x584>)
10003b7a:	2200      	movs	r2, #0
10003b7c:	601a      	str	r2, [r3, #0]
						led_number = 2;
10003b7e:	4b36      	ldr	r3, [pc, #216]	; (10003c58 <main+0x568>)
10003b80:	2202      	movs	r2, #2
10003b82:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10003b84:	4b35      	ldr	r3, [pc, #212]	; (10003c5c <main+0x56c>)
10003b86:	2202      	movs	r2, #2
10003b88:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10003b8a:	4b35      	ldr	r3, [pc, #212]	; (10003c60 <main+0x570>)
10003b8c:	2201      	movs	r2, #1
10003b8e:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_DOWN;
10003b90:	4b34      	ldr	r3, [pc, #208]	; (10003c64 <main+0x574>)
10003b92:	2203      	movs	r2, #3
10003b94:	701a      	strb	r2, [r3, #0]
					led_number = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10003b96:	e050      	b.n	10003c3a <main+0x54a>
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_FADE_DOWN;
					}
				}
				else if(buttonpress_down == BTNPRESS_LONGEST){
10003b98:	4b2d      	ldr	r3, [pc, #180]	; (10003c50 <main+0x560>)
10003b9a:	781b      	ldrb	r3, [r3, #0]
10003b9c:	2b03      	cmp	r3, #3
10003b9e:	d114      	bne.n	10003bca <main+0x4da>
					// Save current ADC value as threshold
					ADC_lower_threshold = ADC_val_current;
10003ba0:	4b32      	ldr	r3, [pc, #200]	; (10003c6c <main+0x57c>)
10003ba2:	681b      	ldr	r3, [r3, #0]
10003ba4:	1c1a      	adds	r2, r3, #0
10003ba6:	4b33      	ldr	r3, [pc, #204]	; (10003c74 <main+0x584>)
10003ba8:	601a      	str	r2, [r3, #0]
					setup_state = SETUP_IDLE;
10003baa:	4b31      	ldr	r3, [pc, #196]	; (10003c70 <main+0x580>)
10003bac:	2200      	movs	r2, #0
10003bae:	701a      	strb	r2, [r3, #0]
					// Blink LED 3 times (user info) and return to operation where led matches the state of the relay
					led_number = 3;
10003bb0:	4b29      	ldr	r3, [pc, #164]	; (10003c58 <main+0x568>)
10003bb2:	2203      	movs	r2, #3
10003bb4:	801a      	strh	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
10003bb6:	4b29      	ldr	r3, [pc, #164]	; (10003c5c <main+0x56c>)
10003bb8:	2202      	movs	r2, #2
10003bba:	701a      	strb	r2, [r3, #0]
					led_pattern_mode = LED_PATTERN_SINGLE;
10003bbc:	4b28      	ldr	r3, [pc, #160]	; (10003c60 <main+0x570>)
10003bbe:	2201      	movs	r2, #1
10003bc0:	701a      	strb	r2, [r3, #0]
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
10003bc2:	4b28      	ldr	r3, [pc, #160]	; (10003c64 <main+0x574>)
10003bc4:	2205      	movs	r2, #5
10003bc6:	701a      	strb	r2, [r3, #0]
				}
				break;
10003bc8:	e037      	b.n	10003c3a <main+0x54a>
10003bca:	e036      	b.n	10003c3a <main+0x54a>
			case SETUP_TIME_TH:
				/// Interpret button press:
				// A long  press of up or down brings system back to setup idle
				// A short press of up         increases the threshold exceed time
				// A short press of down       decreases the threshold exceed time
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
10003bcc:	4b26      	ldr	r3, [pc, #152]	; (10003c68 <main+0x578>)
10003bce:	781b      	ldrb	r3, [r3, #0]
10003bd0:	2b02      	cmp	r3, #2
10003bd2:	d003      	beq.n	10003bdc <main+0x4ec>
10003bd4:	4b1e      	ldr	r3, [pc, #120]	; (10003c50 <main+0x560>)
10003bd6:	781b      	ldrb	r3, [r3, #0]
10003bd8:	2b02      	cmp	r3, #2
10003bda:	d106      	bne.n	10003bea <main+0x4fa>
					setup_state = SETUP_IDLE;
10003bdc:	4b24      	ldr	r3, [pc, #144]	; (10003c70 <main+0x580>)
10003bde:	2200      	movs	r2, #0
10003be0:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_MATCH_RELAY_STATE;
10003be2:	4b1e      	ldr	r3, [pc, #120]	; (10003c5c <main+0x56c>)
10003be4:	2205      	movs	r2, #5
10003be6:	701a      	strb	r2, [r3, #0]
10003be8:	e026      	b.n	10003c38 <main+0x548>
				}
				else if(buttonpress_up == BTNPRESS_STD){
10003bea:	4b1f      	ldr	r3, [pc, #124]	; (10003c68 <main+0x578>)
10003bec:	781b      	ldrb	r3, [r3, #0]
10003bee:	2b01      	cmp	r3, #1
10003bf0:	d10f      	bne.n	10003c12 <main+0x522>
					relay_threshold_latchtime += RELAY_LATCHTIME_INCREMENT;
10003bf2:	4b22      	ldr	r3, [pc, #136]	; (10003c7c <main+0x58c>)
10003bf4:	881b      	ldrh	r3, [r3, #0]
10003bf6:	33f5      	adds	r3, #245	; 0xf5
10003bf8:	33ff      	adds	r3, #255	; 0xff
10003bfa:	b29a      	uxth	r2, r3
10003bfc:	4b1f      	ldr	r3, [pc, #124]	; (10003c7c <main+0x58c>)
10003bfe:	801a      	strh	r2, [r3, #0]
					if(relay_threshold_latchtime > RELAY_LATCHTIME_MAX)
10003c00:	4b1e      	ldr	r3, [pc, #120]	; (10003c7c <main+0x58c>)
10003c02:	881b      	ldrh	r3, [r3, #0]
10003c04:	4a1e      	ldr	r2, [pc, #120]	; (10003c80 <main+0x590>)
10003c06:	4293      	cmp	r3, r2
10003c08:	d916      	bls.n	10003c38 <main+0x548>
						relay_threshold_latchtime = RELAY_LATCHTIME_MAX;
10003c0a:	4b1c      	ldr	r3, [pc, #112]	; (10003c7c <main+0x58c>)
10003c0c:	4a1d      	ldr	r2, [pc, #116]	; (10003c84 <main+0x594>)
10003c0e:	801a      	strh	r2, [r3, #0]
				else if(buttonpress_down == BTNPRESS_STD){
					relay_threshold_latchtime -= RELAY_LATCHTIME_INCREMENT;
					if(relay_threshold_latchtime <= 0)
						relay_threshold_latchtime = 0;
				}
				break;
10003c10:	e012      	b.n	10003c38 <main+0x548>
				else if(buttonpress_up == BTNPRESS_STD){
					relay_threshold_latchtime += RELAY_LATCHTIME_INCREMENT;
					if(relay_threshold_latchtime > RELAY_LATCHTIME_MAX)
						relay_threshold_latchtime = RELAY_LATCHTIME_MAX;
				}
				else if(buttonpress_down == BTNPRESS_STD){
10003c12:	4b0f      	ldr	r3, [pc, #60]	; (10003c50 <main+0x560>)
10003c14:	781b      	ldrb	r3, [r3, #0]
10003c16:	2b01      	cmp	r3, #1
10003c18:	d10e      	bne.n	10003c38 <main+0x548>
					relay_threshold_latchtime -= RELAY_LATCHTIME_INCREMENT;
10003c1a:	4b18      	ldr	r3, [pc, #96]	; (10003c7c <main+0x58c>)
10003c1c:	881b      	ldrh	r3, [r3, #0]
10003c1e:	3bf5      	subs	r3, #245	; 0xf5
10003c20:	3bff      	subs	r3, #255	; 0xff
10003c22:	b29a      	uxth	r2, r3
10003c24:	4b15      	ldr	r3, [pc, #84]	; (10003c7c <main+0x58c>)
10003c26:	801a      	strh	r2, [r3, #0]
					if(relay_threshold_latchtime <= 0)
10003c28:	4b14      	ldr	r3, [pc, #80]	; (10003c7c <main+0x58c>)
10003c2a:	881b      	ldrh	r3, [r3, #0]
10003c2c:	2b00      	cmp	r3, #0
10003c2e:	d103      	bne.n	10003c38 <main+0x548>
						relay_threshold_latchtime = 0;
10003c30:	4b12      	ldr	r3, [pc, #72]	; (10003c7c <main+0x58c>)
10003c32:	2200      	movs	r2, #0
10003c34:	801a      	strh	r2, [r3, #0]
				}
				break;
10003c36:	e7ff      	b.n	10003c38 <main+0x548>
10003c38:	46c0      	nop			; (mov r8, r8)
		}

		// Reset all button presses
		buttonpress_usb = BTNPRESS_NOT;
10003c3a:	4b13      	ldr	r3, [pc, #76]	; (10003c88 <main+0x598>)
10003c3c:	2200      	movs	r2, #0
10003c3e:	701a      	strb	r2, [r3, #0]
		buttonpress_up = BTNPRESS_NOT;
10003c40:	4b09      	ldr	r3, [pc, #36]	; (10003c68 <main+0x578>)
10003c42:	2200      	movs	r2, #0
10003c44:	701a      	strb	r2, [r3, #0]
		buttonpress_down = BTNPRESS_NOT;
10003c46:	4b02      	ldr	r3, [pc, #8]	; (10003c50 <main+0x560>)
10003c48:	2200      	movs	r2, #0
10003c4a:	701a      	strb	r2, [r3, #0]
	}
10003c4c:	e587      	b.n	1000375e <main+0x6e>
10003c4e:	46c0      	nop			; (mov r8, r8)
10003c50:	2000066c 	.word	0x2000066c
10003c54:	20000598 	.word	0x20000598
10003c58:	20000668 	.word	0x20000668
10003c5c:	20000664 	.word	0x20000664
10003c60:	20000666 	.word	0x20000666
10003c64:	20000667 	.word	0x20000667
10003c68:	2000066b 	.word	0x2000066b
10003c6c:	20000684 	.word	0x20000684
10003c70:	200007ce 	.word	0x200007ce
10003c74:	2000059c 	.word	0x2000059c
10003c78:	00000fff 	.word	0x00000fff
10003c7c:	20000594 	.word	0x20000594
10003c80:	0000ea60 	.word	0x0000ea60
10003c84:	ffffea60 	.word	0xffffea60
10003c88:	2000066a 	.word	0x2000066a

10003c8c <VADC0_C0_0_IRQHandler>:
//}

int meas_invalid_count = 0;

void Adc_Measurement_Handler()
{
10003c8c:	b580      	push	{r7, lr}
10003c8e:	b082      	sub	sp, #8
10003c90:	af00      	add	r7, sp, #0
	//uint8_t channel_num;
	//uint8_t group_num;
	uint32_t adc_register;

	#if(UC_SERIES == XMC11)
	adc_register = ADC_MEASUREMENT_GetGlobalDetailedResult();
10003c92:	f7ff f963 	bl	10002f5c <ADC_MEASUREMENT_GetGlobalDetailedResult>
10003c96:	1c03      	adds	r3, r0, #0
10003c98:	607b      	str	r3, [r7, #4]
	#endif

	if((bool)(adc_register >> VADC_GLOBRES_VF_Pos))
10003c9a:	687b      	ldr	r3, [r7, #4]
10003c9c:	2b00      	cmp	r3, #0
10003c9e:	da0d      	bge.n	10003cbc <VADC0_C0_0_IRQHandler+0x30>
	{
		//channel_num = (adc_register & VADC_GLOBRES_CHNR_Msk) >> VADC_GLOBRES_CHNR_Pos;
		//group_num = ADC_MEASUREMENT_Channel_A.group_index;
		ADC_val_current = (adc_register & VADC_GLOBRES_RESULT_Msk) >> ((uint32_t)(ADC_SENSOR.iclass_config_handle->conversion_mode_standard) * (uint32_t)2);
10003ca0:	687b      	ldr	r3, [r7, #4]
10003ca2:	041b      	lsls	r3, r3, #16
10003ca4:	0c1a      	lsrs	r2, r3, #16
10003ca6:	4b09      	ldr	r3, [pc, #36]	; (10003ccc <VADC0_C0_0_IRQHandler+0x40>)
10003ca8:	689b      	ldr	r3, [r3, #8]
10003caa:	785b      	ldrb	r3, [r3, #1]
10003cac:	075b      	lsls	r3, r3, #29
10003cae:	0f5b      	lsrs	r3, r3, #29
10003cb0:	b2db      	uxtb	r3, r3
10003cb2:	005b      	lsls	r3, r3, #1
10003cb4:	40da      	lsrs	r2, r3
10003cb6:	4b06      	ldr	r3, [pc, #24]	; (10003cd0 <VADC0_C0_0_IRQHandler+0x44>)
10003cb8:	601a      	str	r2, [r3, #0]
10003cba:	e004      	b.n	10003cc6 <VADC0_C0_0_IRQHandler+0x3a>
	}
	else{
		meas_invalid_count++;
10003cbc:	4b05      	ldr	r3, [pc, #20]	; (10003cd4 <VADC0_C0_0_IRQHandler+0x48>)
10003cbe:	681b      	ldr	r3, [r3, #0]
10003cc0:	1c5a      	adds	r2, r3, #1
10003cc2:	4b04      	ldr	r3, [pc, #16]	; (10003cd4 <VADC0_C0_0_IRQHandler+0x48>)
10003cc4:	601a      	str	r2, [r3, #0]
	}

}
10003cc6:	46bd      	mov	sp, r7
10003cc8:	b002      	add	sp, #8
10003cca:	bd80      	pop	{r7, pc}
10003ccc:	20000578 	.word	0x20000578
10003cd0:	20000684 	.word	0x20000684
10003cd4:	20000694 	.word	0x20000694

10003cd8 <__aeabi_uidiv>:
10003cd8:	2200      	movs	r2, #0
10003cda:	0843      	lsrs	r3, r0, #1
10003cdc:	428b      	cmp	r3, r1
10003cde:	d374      	bcc.n	10003dca <__aeabi_uidiv+0xf2>
10003ce0:	0903      	lsrs	r3, r0, #4
10003ce2:	428b      	cmp	r3, r1
10003ce4:	d35f      	bcc.n	10003da6 <__aeabi_uidiv+0xce>
10003ce6:	0a03      	lsrs	r3, r0, #8
10003ce8:	428b      	cmp	r3, r1
10003cea:	d344      	bcc.n	10003d76 <__aeabi_uidiv+0x9e>
10003cec:	0b03      	lsrs	r3, r0, #12
10003cee:	428b      	cmp	r3, r1
10003cf0:	d328      	bcc.n	10003d44 <__aeabi_uidiv+0x6c>
10003cf2:	0c03      	lsrs	r3, r0, #16
10003cf4:	428b      	cmp	r3, r1
10003cf6:	d30d      	bcc.n	10003d14 <__aeabi_uidiv+0x3c>
10003cf8:	22ff      	movs	r2, #255	; 0xff
10003cfa:	0209      	lsls	r1, r1, #8
10003cfc:	ba12      	rev	r2, r2
10003cfe:	0c03      	lsrs	r3, r0, #16
10003d00:	428b      	cmp	r3, r1
10003d02:	d302      	bcc.n	10003d0a <__aeabi_uidiv+0x32>
10003d04:	1212      	asrs	r2, r2, #8
10003d06:	0209      	lsls	r1, r1, #8
10003d08:	d065      	beq.n	10003dd6 <__aeabi_uidiv+0xfe>
10003d0a:	0b03      	lsrs	r3, r0, #12
10003d0c:	428b      	cmp	r3, r1
10003d0e:	d319      	bcc.n	10003d44 <__aeabi_uidiv+0x6c>
10003d10:	e000      	b.n	10003d14 <__aeabi_uidiv+0x3c>
10003d12:	0a09      	lsrs	r1, r1, #8
10003d14:	0bc3      	lsrs	r3, r0, #15
10003d16:	428b      	cmp	r3, r1
10003d18:	d301      	bcc.n	10003d1e <__aeabi_uidiv+0x46>
10003d1a:	03cb      	lsls	r3, r1, #15
10003d1c:	1ac0      	subs	r0, r0, r3
10003d1e:	4152      	adcs	r2, r2
10003d20:	0b83      	lsrs	r3, r0, #14
10003d22:	428b      	cmp	r3, r1
10003d24:	d301      	bcc.n	10003d2a <__aeabi_uidiv+0x52>
10003d26:	038b      	lsls	r3, r1, #14
10003d28:	1ac0      	subs	r0, r0, r3
10003d2a:	4152      	adcs	r2, r2
10003d2c:	0b43      	lsrs	r3, r0, #13
10003d2e:	428b      	cmp	r3, r1
10003d30:	d301      	bcc.n	10003d36 <__aeabi_uidiv+0x5e>
10003d32:	034b      	lsls	r3, r1, #13
10003d34:	1ac0      	subs	r0, r0, r3
10003d36:	4152      	adcs	r2, r2
10003d38:	0b03      	lsrs	r3, r0, #12
10003d3a:	428b      	cmp	r3, r1
10003d3c:	d301      	bcc.n	10003d42 <__aeabi_uidiv+0x6a>
10003d3e:	030b      	lsls	r3, r1, #12
10003d40:	1ac0      	subs	r0, r0, r3
10003d42:	4152      	adcs	r2, r2
10003d44:	0ac3      	lsrs	r3, r0, #11
10003d46:	428b      	cmp	r3, r1
10003d48:	d301      	bcc.n	10003d4e <__aeabi_uidiv+0x76>
10003d4a:	02cb      	lsls	r3, r1, #11
10003d4c:	1ac0      	subs	r0, r0, r3
10003d4e:	4152      	adcs	r2, r2
10003d50:	0a83      	lsrs	r3, r0, #10
10003d52:	428b      	cmp	r3, r1
10003d54:	d301      	bcc.n	10003d5a <__aeabi_uidiv+0x82>
10003d56:	028b      	lsls	r3, r1, #10
10003d58:	1ac0      	subs	r0, r0, r3
10003d5a:	4152      	adcs	r2, r2
10003d5c:	0a43      	lsrs	r3, r0, #9
10003d5e:	428b      	cmp	r3, r1
10003d60:	d301      	bcc.n	10003d66 <__aeabi_uidiv+0x8e>
10003d62:	024b      	lsls	r3, r1, #9
10003d64:	1ac0      	subs	r0, r0, r3
10003d66:	4152      	adcs	r2, r2
10003d68:	0a03      	lsrs	r3, r0, #8
10003d6a:	428b      	cmp	r3, r1
10003d6c:	d301      	bcc.n	10003d72 <__aeabi_uidiv+0x9a>
10003d6e:	020b      	lsls	r3, r1, #8
10003d70:	1ac0      	subs	r0, r0, r3
10003d72:	4152      	adcs	r2, r2
10003d74:	d2cd      	bcs.n	10003d12 <__aeabi_uidiv+0x3a>
10003d76:	09c3      	lsrs	r3, r0, #7
10003d78:	428b      	cmp	r3, r1
10003d7a:	d301      	bcc.n	10003d80 <__aeabi_uidiv+0xa8>
10003d7c:	01cb      	lsls	r3, r1, #7
10003d7e:	1ac0      	subs	r0, r0, r3
10003d80:	4152      	adcs	r2, r2
10003d82:	0983      	lsrs	r3, r0, #6
10003d84:	428b      	cmp	r3, r1
10003d86:	d301      	bcc.n	10003d8c <__aeabi_uidiv+0xb4>
10003d88:	018b      	lsls	r3, r1, #6
10003d8a:	1ac0      	subs	r0, r0, r3
10003d8c:	4152      	adcs	r2, r2
10003d8e:	0943      	lsrs	r3, r0, #5
10003d90:	428b      	cmp	r3, r1
10003d92:	d301      	bcc.n	10003d98 <__aeabi_uidiv+0xc0>
10003d94:	014b      	lsls	r3, r1, #5
10003d96:	1ac0      	subs	r0, r0, r3
10003d98:	4152      	adcs	r2, r2
10003d9a:	0903      	lsrs	r3, r0, #4
10003d9c:	428b      	cmp	r3, r1
10003d9e:	d301      	bcc.n	10003da4 <__aeabi_uidiv+0xcc>
10003da0:	010b      	lsls	r3, r1, #4
10003da2:	1ac0      	subs	r0, r0, r3
10003da4:	4152      	adcs	r2, r2
10003da6:	08c3      	lsrs	r3, r0, #3
10003da8:	428b      	cmp	r3, r1
10003daa:	d301      	bcc.n	10003db0 <__aeabi_uidiv+0xd8>
10003dac:	00cb      	lsls	r3, r1, #3
10003dae:	1ac0      	subs	r0, r0, r3
10003db0:	4152      	adcs	r2, r2
10003db2:	0883      	lsrs	r3, r0, #2
10003db4:	428b      	cmp	r3, r1
10003db6:	d301      	bcc.n	10003dbc <__aeabi_uidiv+0xe4>
10003db8:	008b      	lsls	r3, r1, #2
10003dba:	1ac0      	subs	r0, r0, r3
10003dbc:	4152      	adcs	r2, r2
10003dbe:	0843      	lsrs	r3, r0, #1
10003dc0:	428b      	cmp	r3, r1
10003dc2:	d301      	bcc.n	10003dc8 <__aeabi_uidiv+0xf0>
10003dc4:	004b      	lsls	r3, r1, #1
10003dc6:	1ac0      	subs	r0, r0, r3
10003dc8:	4152      	adcs	r2, r2
10003dca:	1a41      	subs	r1, r0, r1
10003dcc:	d200      	bcs.n	10003dd0 <__aeabi_uidiv+0xf8>
10003dce:	4601      	mov	r1, r0
10003dd0:	4152      	adcs	r2, r2
10003dd2:	4610      	mov	r0, r2
10003dd4:	4770      	bx	lr
10003dd6:	e7ff      	b.n	10003dd8 <__aeabi_uidiv+0x100>
10003dd8:	b501      	push	{r0, lr}
10003dda:	2000      	movs	r0, #0
10003ddc:	f000 f8fc 	bl	10003fd8 <__aeabi_idiv0>
10003de0:	bd02      	pop	{r1, pc}
10003de2:	46c0      	nop			; (mov r8, r8)

10003de4 <__aeabi_uidivmod>:
10003de4:	2900      	cmp	r1, #0
10003de6:	d0f7      	beq.n	10003dd8 <__aeabi_uidiv+0x100>
10003de8:	b503      	push	{r0, r1, lr}
10003dea:	f7ff ff75 	bl	10003cd8 <__aeabi_uidiv>
10003dee:	bc0e      	pop	{r1, r2, r3}
10003df0:	4342      	muls	r2, r0
10003df2:	1a89      	subs	r1, r1, r2
10003df4:	4718      	bx	r3
10003df6:	46c0      	nop			; (mov r8, r8)

10003df8 <__aeabi_idiv>:
10003df8:	4603      	mov	r3, r0
10003dfa:	430b      	orrs	r3, r1
10003dfc:	d47f      	bmi.n	10003efe <__aeabi_idiv+0x106>
10003dfe:	2200      	movs	r2, #0
10003e00:	0843      	lsrs	r3, r0, #1
10003e02:	428b      	cmp	r3, r1
10003e04:	d374      	bcc.n	10003ef0 <__aeabi_idiv+0xf8>
10003e06:	0903      	lsrs	r3, r0, #4
10003e08:	428b      	cmp	r3, r1
10003e0a:	d35f      	bcc.n	10003ecc <__aeabi_idiv+0xd4>
10003e0c:	0a03      	lsrs	r3, r0, #8
10003e0e:	428b      	cmp	r3, r1
10003e10:	d344      	bcc.n	10003e9c <__aeabi_idiv+0xa4>
10003e12:	0b03      	lsrs	r3, r0, #12
10003e14:	428b      	cmp	r3, r1
10003e16:	d328      	bcc.n	10003e6a <__aeabi_idiv+0x72>
10003e18:	0c03      	lsrs	r3, r0, #16
10003e1a:	428b      	cmp	r3, r1
10003e1c:	d30d      	bcc.n	10003e3a <__aeabi_idiv+0x42>
10003e1e:	22ff      	movs	r2, #255	; 0xff
10003e20:	0209      	lsls	r1, r1, #8
10003e22:	ba12      	rev	r2, r2
10003e24:	0c03      	lsrs	r3, r0, #16
10003e26:	428b      	cmp	r3, r1
10003e28:	d302      	bcc.n	10003e30 <__aeabi_idiv+0x38>
10003e2a:	1212      	asrs	r2, r2, #8
10003e2c:	0209      	lsls	r1, r1, #8
10003e2e:	d065      	beq.n	10003efc <__aeabi_idiv+0x104>
10003e30:	0b03      	lsrs	r3, r0, #12
10003e32:	428b      	cmp	r3, r1
10003e34:	d319      	bcc.n	10003e6a <__aeabi_idiv+0x72>
10003e36:	e000      	b.n	10003e3a <__aeabi_idiv+0x42>
10003e38:	0a09      	lsrs	r1, r1, #8
10003e3a:	0bc3      	lsrs	r3, r0, #15
10003e3c:	428b      	cmp	r3, r1
10003e3e:	d301      	bcc.n	10003e44 <__aeabi_idiv+0x4c>
10003e40:	03cb      	lsls	r3, r1, #15
10003e42:	1ac0      	subs	r0, r0, r3
10003e44:	4152      	adcs	r2, r2
10003e46:	0b83      	lsrs	r3, r0, #14
10003e48:	428b      	cmp	r3, r1
10003e4a:	d301      	bcc.n	10003e50 <__aeabi_idiv+0x58>
10003e4c:	038b      	lsls	r3, r1, #14
10003e4e:	1ac0      	subs	r0, r0, r3
10003e50:	4152      	adcs	r2, r2
10003e52:	0b43      	lsrs	r3, r0, #13
10003e54:	428b      	cmp	r3, r1
10003e56:	d301      	bcc.n	10003e5c <__aeabi_idiv+0x64>
10003e58:	034b      	lsls	r3, r1, #13
10003e5a:	1ac0      	subs	r0, r0, r3
10003e5c:	4152      	adcs	r2, r2
10003e5e:	0b03      	lsrs	r3, r0, #12
10003e60:	428b      	cmp	r3, r1
10003e62:	d301      	bcc.n	10003e68 <__aeabi_idiv+0x70>
10003e64:	030b      	lsls	r3, r1, #12
10003e66:	1ac0      	subs	r0, r0, r3
10003e68:	4152      	adcs	r2, r2
10003e6a:	0ac3      	lsrs	r3, r0, #11
10003e6c:	428b      	cmp	r3, r1
10003e6e:	d301      	bcc.n	10003e74 <__aeabi_idiv+0x7c>
10003e70:	02cb      	lsls	r3, r1, #11
10003e72:	1ac0      	subs	r0, r0, r3
10003e74:	4152      	adcs	r2, r2
10003e76:	0a83      	lsrs	r3, r0, #10
10003e78:	428b      	cmp	r3, r1
10003e7a:	d301      	bcc.n	10003e80 <__aeabi_idiv+0x88>
10003e7c:	028b      	lsls	r3, r1, #10
10003e7e:	1ac0      	subs	r0, r0, r3
10003e80:	4152      	adcs	r2, r2
10003e82:	0a43      	lsrs	r3, r0, #9
10003e84:	428b      	cmp	r3, r1
10003e86:	d301      	bcc.n	10003e8c <__aeabi_idiv+0x94>
10003e88:	024b      	lsls	r3, r1, #9
10003e8a:	1ac0      	subs	r0, r0, r3
10003e8c:	4152      	adcs	r2, r2
10003e8e:	0a03      	lsrs	r3, r0, #8
10003e90:	428b      	cmp	r3, r1
10003e92:	d301      	bcc.n	10003e98 <__aeabi_idiv+0xa0>
10003e94:	020b      	lsls	r3, r1, #8
10003e96:	1ac0      	subs	r0, r0, r3
10003e98:	4152      	adcs	r2, r2
10003e9a:	d2cd      	bcs.n	10003e38 <__aeabi_idiv+0x40>
10003e9c:	09c3      	lsrs	r3, r0, #7
10003e9e:	428b      	cmp	r3, r1
10003ea0:	d301      	bcc.n	10003ea6 <__aeabi_idiv+0xae>
10003ea2:	01cb      	lsls	r3, r1, #7
10003ea4:	1ac0      	subs	r0, r0, r3
10003ea6:	4152      	adcs	r2, r2
10003ea8:	0983      	lsrs	r3, r0, #6
10003eaa:	428b      	cmp	r3, r1
10003eac:	d301      	bcc.n	10003eb2 <__aeabi_idiv+0xba>
10003eae:	018b      	lsls	r3, r1, #6
10003eb0:	1ac0      	subs	r0, r0, r3
10003eb2:	4152      	adcs	r2, r2
10003eb4:	0943      	lsrs	r3, r0, #5
10003eb6:	428b      	cmp	r3, r1
10003eb8:	d301      	bcc.n	10003ebe <__aeabi_idiv+0xc6>
10003eba:	014b      	lsls	r3, r1, #5
10003ebc:	1ac0      	subs	r0, r0, r3
10003ebe:	4152      	adcs	r2, r2
10003ec0:	0903      	lsrs	r3, r0, #4
10003ec2:	428b      	cmp	r3, r1
10003ec4:	d301      	bcc.n	10003eca <__aeabi_idiv+0xd2>
10003ec6:	010b      	lsls	r3, r1, #4
10003ec8:	1ac0      	subs	r0, r0, r3
10003eca:	4152      	adcs	r2, r2
10003ecc:	08c3      	lsrs	r3, r0, #3
10003ece:	428b      	cmp	r3, r1
10003ed0:	d301      	bcc.n	10003ed6 <__aeabi_idiv+0xde>
10003ed2:	00cb      	lsls	r3, r1, #3
10003ed4:	1ac0      	subs	r0, r0, r3
10003ed6:	4152      	adcs	r2, r2
10003ed8:	0883      	lsrs	r3, r0, #2
10003eda:	428b      	cmp	r3, r1
10003edc:	d301      	bcc.n	10003ee2 <__aeabi_idiv+0xea>
10003ede:	008b      	lsls	r3, r1, #2
10003ee0:	1ac0      	subs	r0, r0, r3
10003ee2:	4152      	adcs	r2, r2
10003ee4:	0843      	lsrs	r3, r0, #1
10003ee6:	428b      	cmp	r3, r1
10003ee8:	d301      	bcc.n	10003eee <__aeabi_idiv+0xf6>
10003eea:	004b      	lsls	r3, r1, #1
10003eec:	1ac0      	subs	r0, r0, r3
10003eee:	4152      	adcs	r2, r2
10003ef0:	1a41      	subs	r1, r0, r1
10003ef2:	d200      	bcs.n	10003ef6 <__aeabi_idiv+0xfe>
10003ef4:	4601      	mov	r1, r0
10003ef6:	4152      	adcs	r2, r2
10003ef8:	4610      	mov	r0, r2
10003efa:	4770      	bx	lr
10003efc:	e05d      	b.n	10003fba <__aeabi_idiv+0x1c2>
10003efe:	0fca      	lsrs	r2, r1, #31
10003f00:	d000      	beq.n	10003f04 <__aeabi_idiv+0x10c>
10003f02:	4249      	negs	r1, r1
10003f04:	1003      	asrs	r3, r0, #32
10003f06:	d300      	bcc.n	10003f0a <__aeabi_idiv+0x112>
10003f08:	4240      	negs	r0, r0
10003f0a:	4053      	eors	r3, r2
10003f0c:	2200      	movs	r2, #0
10003f0e:	469c      	mov	ip, r3
10003f10:	0903      	lsrs	r3, r0, #4
10003f12:	428b      	cmp	r3, r1
10003f14:	d32d      	bcc.n	10003f72 <__aeabi_idiv+0x17a>
10003f16:	0a03      	lsrs	r3, r0, #8
10003f18:	428b      	cmp	r3, r1
10003f1a:	d312      	bcc.n	10003f42 <__aeabi_idiv+0x14a>
10003f1c:	22fc      	movs	r2, #252	; 0xfc
10003f1e:	0189      	lsls	r1, r1, #6
10003f20:	ba12      	rev	r2, r2
10003f22:	0a03      	lsrs	r3, r0, #8
10003f24:	428b      	cmp	r3, r1
10003f26:	d30c      	bcc.n	10003f42 <__aeabi_idiv+0x14a>
10003f28:	0189      	lsls	r1, r1, #6
10003f2a:	1192      	asrs	r2, r2, #6
10003f2c:	428b      	cmp	r3, r1
10003f2e:	d308      	bcc.n	10003f42 <__aeabi_idiv+0x14a>
10003f30:	0189      	lsls	r1, r1, #6
10003f32:	1192      	asrs	r2, r2, #6
10003f34:	428b      	cmp	r3, r1
10003f36:	d304      	bcc.n	10003f42 <__aeabi_idiv+0x14a>
10003f38:	0189      	lsls	r1, r1, #6
10003f3a:	d03a      	beq.n	10003fb2 <__aeabi_idiv+0x1ba>
10003f3c:	1192      	asrs	r2, r2, #6
10003f3e:	e000      	b.n	10003f42 <__aeabi_idiv+0x14a>
10003f40:	0989      	lsrs	r1, r1, #6
10003f42:	09c3      	lsrs	r3, r0, #7
10003f44:	428b      	cmp	r3, r1
10003f46:	d301      	bcc.n	10003f4c <__aeabi_idiv+0x154>
10003f48:	01cb      	lsls	r3, r1, #7
10003f4a:	1ac0      	subs	r0, r0, r3
10003f4c:	4152      	adcs	r2, r2
10003f4e:	0983      	lsrs	r3, r0, #6
10003f50:	428b      	cmp	r3, r1
10003f52:	d301      	bcc.n	10003f58 <__aeabi_idiv+0x160>
10003f54:	018b      	lsls	r3, r1, #6
10003f56:	1ac0      	subs	r0, r0, r3
10003f58:	4152      	adcs	r2, r2
10003f5a:	0943      	lsrs	r3, r0, #5
10003f5c:	428b      	cmp	r3, r1
10003f5e:	d301      	bcc.n	10003f64 <__aeabi_idiv+0x16c>
10003f60:	014b      	lsls	r3, r1, #5
10003f62:	1ac0      	subs	r0, r0, r3
10003f64:	4152      	adcs	r2, r2
10003f66:	0903      	lsrs	r3, r0, #4
10003f68:	428b      	cmp	r3, r1
10003f6a:	d301      	bcc.n	10003f70 <__aeabi_idiv+0x178>
10003f6c:	010b      	lsls	r3, r1, #4
10003f6e:	1ac0      	subs	r0, r0, r3
10003f70:	4152      	adcs	r2, r2
10003f72:	08c3      	lsrs	r3, r0, #3
10003f74:	428b      	cmp	r3, r1
10003f76:	d301      	bcc.n	10003f7c <__aeabi_idiv+0x184>
10003f78:	00cb      	lsls	r3, r1, #3
10003f7a:	1ac0      	subs	r0, r0, r3
10003f7c:	4152      	adcs	r2, r2
10003f7e:	0883      	lsrs	r3, r0, #2
10003f80:	428b      	cmp	r3, r1
10003f82:	d301      	bcc.n	10003f88 <__aeabi_idiv+0x190>
10003f84:	008b      	lsls	r3, r1, #2
10003f86:	1ac0      	subs	r0, r0, r3
10003f88:	4152      	adcs	r2, r2
10003f8a:	d2d9      	bcs.n	10003f40 <__aeabi_idiv+0x148>
10003f8c:	0843      	lsrs	r3, r0, #1
10003f8e:	428b      	cmp	r3, r1
10003f90:	d301      	bcc.n	10003f96 <__aeabi_idiv+0x19e>
10003f92:	004b      	lsls	r3, r1, #1
10003f94:	1ac0      	subs	r0, r0, r3
10003f96:	4152      	adcs	r2, r2
10003f98:	1a41      	subs	r1, r0, r1
10003f9a:	d200      	bcs.n	10003f9e <__aeabi_idiv+0x1a6>
10003f9c:	4601      	mov	r1, r0
10003f9e:	4663      	mov	r3, ip
10003fa0:	4152      	adcs	r2, r2
10003fa2:	105b      	asrs	r3, r3, #1
10003fa4:	4610      	mov	r0, r2
10003fa6:	d301      	bcc.n	10003fac <__aeabi_idiv+0x1b4>
10003fa8:	4240      	negs	r0, r0
10003faa:	2b00      	cmp	r3, #0
10003fac:	d500      	bpl.n	10003fb0 <__aeabi_idiv+0x1b8>
10003fae:	4249      	negs	r1, r1
10003fb0:	4770      	bx	lr
10003fb2:	4663      	mov	r3, ip
10003fb4:	105b      	asrs	r3, r3, #1
10003fb6:	d300      	bcc.n	10003fba <__aeabi_idiv+0x1c2>
10003fb8:	4240      	negs	r0, r0
10003fba:	b501      	push	{r0, lr}
10003fbc:	2000      	movs	r0, #0
10003fbe:	f000 f80b 	bl	10003fd8 <__aeabi_idiv0>
10003fc2:	bd02      	pop	{r1, pc}

10003fc4 <__aeabi_idivmod>:
10003fc4:	2900      	cmp	r1, #0
10003fc6:	d0f8      	beq.n	10003fba <__aeabi_idiv+0x1c2>
10003fc8:	b503      	push	{r0, r1, lr}
10003fca:	f7ff ff15 	bl	10003df8 <__aeabi_idiv>
10003fce:	bc0e      	pop	{r1, r2, r3}
10003fd0:	4342      	muls	r2, r0
10003fd2:	1a89      	subs	r1, r1, r2
10003fd4:	4718      	bx	r3
10003fd6:	46c0      	nop			; (mov r8, r8)

10003fd8 <__aeabi_idiv0>:
10003fd8:	4770      	bx	lr
10003fda:	46c0      	nop			; (mov r8, r8)

10003fdc <__clzsi2>:
10003fdc:	211c      	movs	r1, #28
10003fde:	2301      	movs	r3, #1
10003fe0:	041b      	lsls	r3, r3, #16
10003fe2:	4298      	cmp	r0, r3
10003fe4:	d301      	bcc.n	10003fea <__clzsi2+0xe>
10003fe6:	0c00      	lsrs	r0, r0, #16
10003fe8:	3910      	subs	r1, #16
10003fea:	0a1b      	lsrs	r3, r3, #8
10003fec:	4298      	cmp	r0, r3
10003fee:	d301      	bcc.n	10003ff4 <__clzsi2+0x18>
10003ff0:	0a00      	lsrs	r0, r0, #8
10003ff2:	3908      	subs	r1, #8
10003ff4:	091b      	lsrs	r3, r3, #4
10003ff6:	4298      	cmp	r0, r3
10003ff8:	d301      	bcc.n	10003ffe <__clzsi2+0x22>
10003ffa:	0900      	lsrs	r0, r0, #4
10003ffc:	3904      	subs	r1, #4
10003ffe:	a202      	add	r2, pc, #8	; (adr r2, 10004008 <__clzsi2+0x2c>)
10004000:	5c10      	ldrb	r0, [r2, r0]
10004002:	1840      	adds	r0, r0, r1
10004004:	4770      	bx	lr
10004006:	46c0      	nop			; (mov r8, r8)
10004008:	02020304 	.word	0x02020304
1000400c:	01010101 	.word	0x01010101
	...

10004018 <__errno>:
10004018:	4b01      	ldr	r3, [pc, #4]	; (10004020 <__errno+0x8>)
1000401a:	6818      	ldr	r0, [r3, #0]
1000401c:	4770      	bx	lr
1000401e:	46c0      	nop			; (mov r8, r8)
10004020:	20000604 	.word	0x20000604

10004024 <__libc_init_array>:
10004024:	4b0e      	ldr	r3, [pc, #56]	; (10004060 <__libc_init_array+0x3c>)
10004026:	b570      	push	{r4, r5, r6, lr}
10004028:	2500      	movs	r5, #0
1000402a:	1c1e      	adds	r6, r3, #0
1000402c:	4c0d      	ldr	r4, [pc, #52]	; (10004064 <__libc_init_array+0x40>)
1000402e:	1ae4      	subs	r4, r4, r3
10004030:	10a4      	asrs	r4, r4, #2
10004032:	42a5      	cmp	r5, r4
10004034:	d004      	beq.n	10004040 <__libc_init_array+0x1c>
10004036:	00ab      	lsls	r3, r5, #2
10004038:	58f3      	ldr	r3, [r6, r3]
1000403a:	4798      	blx	r3
1000403c:	3501      	adds	r5, #1
1000403e:	e7f8      	b.n	10004032 <__libc_init_array+0xe>
10004040:	f7fd feae 	bl	10001da0 <_init>
10004044:	4b08      	ldr	r3, [pc, #32]	; (10004068 <__libc_init_array+0x44>)
10004046:	2500      	movs	r5, #0
10004048:	1c1e      	adds	r6, r3, #0
1000404a:	4c08      	ldr	r4, [pc, #32]	; (1000406c <__libc_init_array+0x48>)
1000404c:	1ae4      	subs	r4, r4, r3
1000404e:	10a4      	asrs	r4, r4, #2
10004050:	42a5      	cmp	r5, r4
10004052:	d004      	beq.n	1000405e <__libc_init_array+0x3a>
10004054:	00ab      	lsls	r3, r5, #2
10004056:	58f3      	ldr	r3, [r6, r3]
10004058:	4798      	blx	r3
1000405a:	3501      	adds	r5, #1
1000405c:	e7f8      	b.n	10004050 <__libc_init_array+0x2c>
1000405e:	bd70      	pop	{r4, r5, r6, pc}
10004060:	20000640 	.word	0x20000640
10004064:	20000640 	.word	0x20000640
10004068:	20000640 	.word	0x20000640
1000406c:	20000640 	.word	0x20000640

10004070 <__cvt>:
10004070:	b5f0      	push	{r4, r5, r6, r7, lr}
10004072:	b08b      	sub	sp, #44	; 0x2c
10004074:	1c14      	adds	r4, r2, #0
10004076:	1e1d      	subs	r5, r3, #0
10004078:	9912      	ldr	r1, [sp, #72]	; 0x48
1000407a:	da06      	bge.n	1000408a <__cvt+0x1a>
1000407c:	2480      	movs	r4, #128	; 0x80
1000407e:	0624      	lsls	r4, r4, #24
10004080:	192b      	adds	r3, r5, r4
10004082:	1c1d      	adds	r5, r3, #0
10004084:	1c14      	adds	r4, r2, #0
10004086:	232d      	movs	r3, #45	; 0x2d
10004088:	e000      	b.n	1000408c <__cvt+0x1c>
1000408a:	2300      	movs	r3, #0
1000408c:	700b      	strb	r3, [r1, #0]
1000408e:	2320      	movs	r3, #32
10004090:	9e14      	ldr	r6, [sp, #80]	; 0x50
10004092:	2203      	movs	r2, #3
10004094:	439e      	bics	r6, r3
10004096:	2e46      	cmp	r6, #70	; 0x46
10004098:	d007      	beq.n	100040aa <__cvt+0x3a>
1000409a:	1c33      	adds	r3, r6, #0
1000409c:	3b45      	subs	r3, #69	; 0x45
1000409e:	4259      	negs	r1, r3
100040a0:	414b      	adcs	r3, r1
100040a2:	9910      	ldr	r1, [sp, #64]	; 0x40
100040a4:	3a01      	subs	r2, #1
100040a6:	18cb      	adds	r3, r1, r3
100040a8:	9310      	str	r3, [sp, #64]	; 0x40
100040aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
100040ac:	9200      	str	r2, [sp, #0]
100040ae:	9301      	str	r3, [sp, #4]
100040b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100040b2:	1c22      	adds	r2, r4, #0
100040b4:	9302      	str	r3, [sp, #8]
100040b6:	ab08      	add	r3, sp, #32
100040b8:	9303      	str	r3, [sp, #12]
100040ba:	ab09      	add	r3, sp, #36	; 0x24
100040bc:	9304      	str	r3, [sp, #16]
100040be:	1c2b      	adds	r3, r5, #0
100040c0:	f000 fbc8 	bl	10004854 <_dtoa_r>
100040c4:	1c07      	adds	r7, r0, #0
100040c6:	2e47      	cmp	r6, #71	; 0x47
100040c8:	d102      	bne.n	100040d0 <__cvt+0x60>
100040ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
100040cc:	07db      	lsls	r3, r3, #31
100040ce:	d52c      	bpl.n	1000412a <__cvt+0xba>
100040d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100040d2:	18fb      	adds	r3, r7, r3
100040d4:	9307      	str	r3, [sp, #28]
100040d6:	2e46      	cmp	r6, #70	; 0x46
100040d8:	d114      	bne.n	10004104 <__cvt+0x94>
100040da:	783b      	ldrb	r3, [r7, #0]
100040dc:	2b30      	cmp	r3, #48	; 0x30
100040de:	d10c      	bne.n	100040fa <__cvt+0x8a>
100040e0:	1c20      	adds	r0, r4, #0
100040e2:	1c29      	adds	r1, r5, #0
100040e4:	2200      	movs	r2, #0
100040e6:	2300      	movs	r3, #0
100040e8:	f001 fd50 	bl	10005b8c <__aeabi_dcmpeq>
100040ec:	2800      	cmp	r0, #0
100040ee:	d104      	bne.n	100040fa <__cvt+0x8a>
100040f0:	2301      	movs	r3, #1
100040f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
100040f4:	1a9b      	subs	r3, r3, r2
100040f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100040f8:	6013      	str	r3, [r2, #0]
100040fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100040fc:	9a07      	ldr	r2, [sp, #28]
100040fe:	681b      	ldr	r3, [r3, #0]
10004100:	18d3      	adds	r3, r2, r3
10004102:	9307      	str	r3, [sp, #28]
10004104:	1c20      	adds	r0, r4, #0
10004106:	1c29      	adds	r1, r5, #0
10004108:	2200      	movs	r2, #0
1000410a:	2300      	movs	r3, #0
1000410c:	f001 fd3e 	bl	10005b8c <__aeabi_dcmpeq>
10004110:	2800      	cmp	r0, #0
10004112:	d001      	beq.n	10004118 <__cvt+0xa8>
10004114:	9b07      	ldr	r3, [sp, #28]
10004116:	9309      	str	r3, [sp, #36]	; 0x24
10004118:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000411a:	9a07      	ldr	r2, [sp, #28]
1000411c:	4293      	cmp	r3, r2
1000411e:	d204      	bcs.n	1000412a <__cvt+0xba>
10004120:	1c5a      	adds	r2, r3, #1
10004122:	9209      	str	r2, [sp, #36]	; 0x24
10004124:	2230      	movs	r2, #48	; 0x30
10004126:	701a      	strb	r2, [r3, #0]
10004128:	e7f6      	b.n	10004118 <__cvt+0xa8>
1000412a:	1c38      	adds	r0, r7, #0
1000412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000412e:	9a15      	ldr	r2, [sp, #84]	; 0x54
10004130:	1bdb      	subs	r3, r3, r7
10004132:	6013      	str	r3, [r2, #0]
10004134:	b00b      	add	sp, #44	; 0x2c
10004136:	bdf0      	pop	{r4, r5, r6, r7, pc}

10004138 <__exponent>:
10004138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000413a:	232b      	movs	r3, #43	; 0x2b
1000413c:	1c07      	adds	r7, r0, #0
1000413e:	1c0c      	adds	r4, r1, #0
10004140:	7002      	strb	r2, [r0, #0]
10004142:	1c86      	adds	r6, r0, #2
10004144:	2900      	cmp	r1, #0
10004146:	da01      	bge.n	1000414c <__exponent+0x14>
10004148:	232d      	movs	r3, #45	; 0x2d
1000414a:	424c      	negs	r4, r1
1000414c:	707b      	strb	r3, [r7, #1]
1000414e:	2c09      	cmp	r4, #9
10004150:	dd1c      	ble.n	1000418c <__exponent+0x54>
10004152:	466b      	mov	r3, sp
10004154:	1ddd      	adds	r5, r3, #7
10004156:	1c20      	adds	r0, r4, #0
10004158:	210a      	movs	r1, #10
1000415a:	f7ff ff33 	bl	10003fc4 <__aeabi_idivmod>
1000415e:	3d01      	subs	r5, #1
10004160:	3130      	adds	r1, #48	; 0x30
10004162:	7029      	strb	r1, [r5, #0]
10004164:	1c20      	adds	r0, r4, #0
10004166:	210a      	movs	r1, #10
10004168:	f7ff fe46 	bl	10003df8 <__aeabi_idiv>
1000416c:	1e04      	subs	r4, r0, #0
1000416e:	2c09      	cmp	r4, #9
10004170:	dcf1      	bgt.n	10004156 <__exponent+0x1e>
10004172:	3d01      	subs	r5, #1
10004174:	3430      	adds	r4, #48	; 0x30
10004176:	702c      	strb	r4, [r5, #0]
10004178:	466b      	mov	r3, sp
1000417a:	3307      	adds	r3, #7
1000417c:	1c30      	adds	r0, r6, #0
1000417e:	42ab      	cmp	r3, r5
10004180:	d909      	bls.n	10004196 <__exponent+0x5e>
10004182:	782b      	ldrb	r3, [r5, #0]
10004184:	3501      	adds	r5, #1
10004186:	7033      	strb	r3, [r6, #0]
10004188:	3601      	adds	r6, #1
1000418a:	e7f5      	b.n	10004178 <__exponent+0x40>
1000418c:	2330      	movs	r3, #48	; 0x30
1000418e:	18e4      	adds	r4, r4, r3
10004190:	7033      	strb	r3, [r6, #0]
10004192:	1cb0      	adds	r0, r6, #2
10004194:	7074      	strb	r4, [r6, #1]
10004196:	1bc0      	subs	r0, r0, r7
10004198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1000419c <_printf_float>:
1000419c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000419e:	b093      	sub	sp, #76	; 0x4c
100041a0:	1c0c      	adds	r4, r1, #0
100041a2:	9208      	str	r2, [sp, #32]
100041a4:	9e18      	ldr	r6, [sp, #96]	; 0x60
100041a6:	9309      	str	r3, [sp, #36]	; 0x24
100041a8:	1c05      	adds	r5, r0, #0
100041aa:	f001 f953 	bl	10005454 <_localeconv_r>
100041ae:	6803      	ldr	r3, [r0, #0]
100041b0:	1c18      	adds	r0, r3, #0
100041b2:	930b      	str	r3, [sp, #44]	; 0x2c
100041b4:	f000 fac0 	bl	10004738 <strlen>
100041b8:	2300      	movs	r3, #0
100041ba:	2207      	movs	r2, #7
100041bc:	9310      	str	r3, [sp, #64]	; 0x40
100041be:	6833      	ldr	r3, [r6, #0]
100041c0:	900c      	str	r0, [sp, #48]	; 0x30
100041c2:	3307      	adds	r3, #7
100041c4:	4393      	bics	r3, r2
100041c6:	1c1a      	adds	r2, r3, #0
100041c8:	6818      	ldr	r0, [r3, #0]
100041ca:	6859      	ldr	r1, [r3, #4]
100041cc:	3208      	adds	r2, #8
100041ce:	7e27      	ldrb	r7, [r4, #24]
100041d0:	6032      	str	r2, [r6, #0]
100041d2:	64a0      	str	r0, [r4, #72]	; 0x48
100041d4:	64e1      	str	r1, [r4, #76]	; 0x4c
100041d6:	f000 fa87 	bl	100046e8 <__fpclassifyd>
100041da:	2801      	cmp	r0, #1
100041dc:	d118      	bne.n	10004210 <_printf_float+0x74>
100041de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
100041e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
100041e2:	2200      	movs	r2, #0
100041e4:	2300      	movs	r3, #0
100041e6:	f001 fcd7 	bl	10005b98 <__aeabi_dcmplt>
100041ea:	2800      	cmp	r0, #0
100041ec:	d003      	beq.n	100041f6 <_printf_float+0x5a>
100041ee:	1c23      	adds	r3, r4, #0
100041f0:	222d      	movs	r2, #45	; 0x2d
100041f2:	3343      	adds	r3, #67	; 0x43
100041f4:	701a      	strb	r2, [r3, #0]
100041f6:	4bb7      	ldr	r3, [pc, #732]	; (100044d4 <_printf_float+0x338>)
100041f8:	930a      	str	r3, [sp, #40]	; 0x28
100041fa:	2f47      	cmp	r7, #71	; 0x47
100041fc:	d901      	bls.n	10004202 <_printf_float+0x66>
100041fe:	4bb6      	ldr	r3, [pc, #728]	; (100044d8 <_printf_float+0x33c>)
10004200:	930a      	str	r3, [sp, #40]	; 0x28
10004202:	2303      	movs	r3, #3
10004204:	6822      	ldr	r2, [r4, #0]
10004206:	6123      	str	r3, [r4, #16]
10004208:	3301      	adds	r3, #1
1000420a:	439a      	bics	r2, r3
1000420c:	6022      	str	r2, [r4, #0]
1000420e:	e012      	b.n	10004236 <_printf_float+0x9a>
10004210:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10004212:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10004214:	f000 fa68 	bl	100046e8 <__fpclassifyd>
10004218:	6826      	ldr	r6, [r4, #0]
1000421a:	2800      	cmp	r0, #0
1000421c:	d10d      	bne.n	1000423a <_printf_float+0x9e>
1000421e:	4baf      	ldr	r3, [pc, #700]	; (100044dc <_printf_float+0x340>)
10004220:	930a      	str	r3, [sp, #40]	; 0x28
10004222:	2f47      	cmp	r7, #71	; 0x47
10004224:	d901      	bls.n	1000422a <_printf_float+0x8e>
10004226:	4bae      	ldr	r3, [pc, #696]	; (100044e0 <_printf_float+0x344>)
10004228:	930a      	str	r3, [sp, #40]	; 0x28
1000422a:	2303      	movs	r3, #3
1000422c:	1c31      	adds	r1, r6, #0
1000422e:	6123      	str	r3, [r4, #16]
10004230:	3301      	adds	r3, #1
10004232:	4399      	bics	r1, r3
10004234:	6021      	str	r1, [r4, #0]
10004236:	2600      	movs	r6, #0
10004238:	e080      	b.n	1000433c <_printf_float+0x1a0>
1000423a:	2180      	movs	r1, #128	; 0x80
1000423c:	6860      	ldr	r0, [r4, #4]
1000423e:	00c9      	lsls	r1, r1, #3
10004240:	1c43      	adds	r3, r0, #1
10004242:	d101      	bne.n	10004248 <_printf_float+0xac>
10004244:	2306      	movs	r3, #6
10004246:	e009      	b.n	1000425c <_printf_float+0xc0>
10004248:	6ca2      	ldr	r2, [r4, #72]	; 0x48
1000424a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1000424c:	2f67      	cmp	r7, #103	; 0x67
1000424e:	d001      	beq.n	10004254 <_printf_float+0xb8>
10004250:	2f47      	cmp	r7, #71	; 0x47
10004252:	d104      	bne.n	1000425e <_printf_float+0xc2>
10004254:	2800      	cmp	r0, #0
10004256:	d000      	beq.n	1000425a <_printf_float+0xbe>
10004258:	e1c1      	b.n	100045de <_printf_float+0x442>
1000425a:	2301      	movs	r3, #1
1000425c:	6063      	str	r3, [r4, #4]
1000425e:	6863      	ldr	r3, [r4, #4]
10004260:	4331      	orrs	r1, r6
10004262:	9300      	str	r3, [sp, #0]
10004264:	2323      	movs	r3, #35	; 0x23
10004266:	6021      	str	r1, [r4, #0]
10004268:	9101      	str	r1, [sp, #4]
1000426a:	2100      	movs	r1, #0
1000426c:	aa06      	add	r2, sp, #24
1000426e:	189b      	adds	r3, r3, r2
10004270:	9302      	str	r3, [sp, #8]
10004272:	ab0f      	add	r3, sp, #60	; 0x3c
10004274:	9303      	str	r3, [sp, #12]
10004276:	ab10      	add	r3, sp, #64	; 0x40
10004278:	9305      	str	r3, [sp, #20]
1000427a:	9704      	str	r7, [sp, #16]
1000427c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
1000427e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
10004280:	9106      	str	r1, [sp, #24]
10004282:	1c28      	adds	r0, r5, #0
10004284:	f7ff fef4 	bl	10004070 <__cvt>
10004288:	2320      	movs	r3, #32
1000428a:	1c3a      	adds	r2, r7, #0
1000428c:	900a      	str	r0, [sp, #40]	; 0x28
1000428e:	439a      	bics	r2, r3
10004290:	2a47      	cmp	r2, #71	; 0x47
10004292:	d107      	bne.n	100042a4 <_printf_float+0x108>
10004294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004296:	1cda      	adds	r2, r3, #3
10004298:	db02      	blt.n	100042a0 <_printf_float+0x104>
1000429a:	6862      	ldr	r2, [r4, #4]
1000429c:	4293      	cmp	r3, r2
1000429e:	dd2d      	ble.n	100042fc <_printf_float+0x160>
100042a0:	3f02      	subs	r7, #2
100042a2:	b2ff      	uxtb	r7, r7
100042a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
100042a6:	2f65      	cmp	r7, #101	; 0x65
100042a8:	d812      	bhi.n	100042d0 <_printf_float+0x134>
100042aa:	1c20      	adds	r0, r4, #0
100042ac:	3901      	subs	r1, #1
100042ae:	1c3a      	adds	r2, r7, #0
100042b0:	3050      	adds	r0, #80	; 0x50
100042b2:	910f      	str	r1, [sp, #60]	; 0x3c
100042b4:	f7ff ff40 	bl	10004138 <__exponent>
100042b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
100042ba:	1c06      	adds	r6, r0, #0
100042bc:	1883      	adds	r3, r0, r2
100042be:	6123      	str	r3, [r4, #16]
100042c0:	2a01      	cmp	r2, #1
100042c2:	dc02      	bgt.n	100042ca <_printf_float+0x12e>
100042c4:	6822      	ldr	r2, [r4, #0]
100042c6:	07d2      	lsls	r2, r2, #31
100042c8:	d52e      	bpl.n	10004328 <_printf_float+0x18c>
100042ca:	3301      	adds	r3, #1
100042cc:	6123      	str	r3, [r4, #16]
100042ce:	e02b      	b.n	10004328 <_printf_float+0x18c>
100042d0:	2f66      	cmp	r7, #102	; 0x66
100042d2:	d114      	bne.n	100042fe <_printf_float+0x162>
100042d4:	6863      	ldr	r3, [r4, #4]
100042d6:	2900      	cmp	r1, #0
100042d8:	dd08      	ble.n	100042ec <_printf_float+0x150>
100042da:	6121      	str	r1, [r4, #16]
100042dc:	2b00      	cmp	r3, #0
100042de:	d102      	bne.n	100042e6 <_printf_float+0x14a>
100042e0:	6822      	ldr	r2, [r4, #0]
100042e2:	07d2      	lsls	r2, r2, #31
100042e4:	d51d      	bpl.n	10004322 <_printf_float+0x186>
100042e6:	3301      	adds	r3, #1
100042e8:	18cb      	adds	r3, r1, r3
100042ea:	e011      	b.n	10004310 <_printf_float+0x174>
100042ec:	2b00      	cmp	r3, #0
100042ee:	d103      	bne.n	100042f8 <_printf_float+0x15c>
100042f0:	2201      	movs	r2, #1
100042f2:	6821      	ldr	r1, [r4, #0]
100042f4:	4211      	tst	r1, r2
100042f6:	d013      	beq.n	10004320 <_printf_float+0x184>
100042f8:	1c9a      	adds	r2, r3, #2
100042fa:	e011      	b.n	10004320 <_printf_float+0x184>
100042fc:	2767      	movs	r7, #103	; 0x67
100042fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004300:	9810      	ldr	r0, [sp, #64]	; 0x40
10004302:	4283      	cmp	r3, r0
10004304:	db06      	blt.n	10004314 <_printf_float+0x178>
10004306:	6822      	ldr	r2, [r4, #0]
10004308:	6123      	str	r3, [r4, #16]
1000430a:	07d2      	lsls	r2, r2, #31
1000430c:	d509      	bpl.n	10004322 <_printf_float+0x186>
1000430e:	3301      	adds	r3, #1
10004310:	6123      	str	r3, [r4, #16]
10004312:	e006      	b.n	10004322 <_printf_float+0x186>
10004314:	2201      	movs	r2, #1
10004316:	2b00      	cmp	r3, #0
10004318:	dc01      	bgt.n	1000431e <_printf_float+0x182>
1000431a:	2102      	movs	r1, #2
1000431c:	1aca      	subs	r2, r1, r3
1000431e:	1882      	adds	r2, r0, r2
10004320:	6122      	str	r2, [r4, #16]
10004322:	2600      	movs	r6, #0
10004324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004326:	65a3      	str	r3, [r4, #88]	; 0x58
10004328:	2323      	movs	r3, #35	; 0x23
1000432a:	aa06      	add	r2, sp, #24
1000432c:	189b      	adds	r3, r3, r2
1000432e:	781b      	ldrb	r3, [r3, #0]
10004330:	2b00      	cmp	r3, #0
10004332:	d003      	beq.n	1000433c <_printf_float+0x1a0>
10004334:	1c23      	adds	r3, r4, #0
10004336:	222d      	movs	r2, #45	; 0x2d
10004338:	3343      	adds	r3, #67	; 0x43
1000433a:	701a      	strb	r2, [r3, #0]
1000433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000433e:	1c28      	adds	r0, r5, #0
10004340:	9300      	str	r3, [sp, #0]
10004342:	1c21      	adds	r1, r4, #0
10004344:	9b08      	ldr	r3, [sp, #32]
10004346:	aa11      	add	r2, sp, #68	; 0x44
10004348:	f000 f960 	bl	1000460c <_printf_common>
1000434c:	1c43      	adds	r3, r0, #1
1000434e:	d102      	bne.n	10004356 <_printf_float+0x1ba>
10004350:	2001      	movs	r0, #1
10004352:	4240      	negs	r0, r0
10004354:	e157      	b.n	10004606 <_printf_float+0x46a>
10004356:	6822      	ldr	r2, [r4, #0]
10004358:	0553      	lsls	r3, r2, #21
1000435a:	d404      	bmi.n	10004366 <_printf_float+0x1ca>
1000435c:	1c28      	adds	r0, r5, #0
1000435e:	9908      	ldr	r1, [sp, #32]
10004360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10004362:	6923      	ldr	r3, [r4, #16]
10004364:	e117      	b.n	10004596 <_printf_float+0x3fa>
10004366:	2f65      	cmp	r7, #101	; 0x65
10004368:	d800      	bhi.n	1000436c <_printf_float+0x1d0>
1000436a:	e0d5      	b.n	10004518 <_printf_float+0x37c>
1000436c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000436e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10004370:	2200      	movs	r2, #0
10004372:	2300      	movs	r3, #0
10004374:	f001 fc0a 	bl	10005b8c <__aeabi_dcmpeq>
10004378:	2800      	cmp	r0, #0
1000437a:	d02b      	beq.n	100043d4 <_printf_float+0x238>
1000437c:	2301      	movs	r3, #1
1000437e:	1c28      	adds	r0, r5, #0
10004380:	9908      	ldr	r1, [sp, #32]
10004382:	4a58      	ldr	r2, [pc, #352]	; (100044e4 <_printf_float+0x348>)
10004384:	9e09      	ldr	r6, [sp, #36]	; 0x24
10004386:	47b0      	blx	r6
10004388:	1c43      	adds	r3, r0, #1
1000438a:	d0e1      	beq.n	10004350 <_printf_float+0x1b4>
1000438c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000438e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10004390:	4293      	cmp	r3, r2
10004392:	db07      	blt.n	100043a4 <_printf_float+0x208>
10004394:	6823      	ldr	r3, [r4, #0]
10004396:	07db      	lsls	r3, r3, #31
10004398:	d404      	bmi.n	100043a4 <_printf_float+0x208>
1000439a:	6823      	ldr	r3, [r4, #0]
1000439c:	079b      	lsls	r3, r3, #30
1000439e:	d500      	bpl.n	100043a2 <_printf_float+0x206>
100043a0:	e11b      	b.n	100045da <_printf_float+0x43e>
100043a2:	e114      	b.n	100045ce <_printf_float+0x432>
100043a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
100043a6:	1c28      	adds	r0, r5, #0
100043a8:	9908      	ldr	r1, [sp, #32]
100043aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100043ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100043ae:	47b0      	blx	r6
100043b0:	2600      	movs	r6, #0
100043b2:	1c43      	adds	r3, r0, #1
100043b4:	d0cc      	beq.n	10004350 <_printf_float+0x1b4>
100043b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
100043b8:	3b01      	subs	r3, #1
100043ba:	429e      	cmp	r6, r3
100043bc:	daed      	bge.n	1000439a <_printf_float+0x1fe>
100043be:	1c22      	adds	r2, r4, #0
100043c0:	2301      	movs	r3, #1
100043c2:	1c28      	adds	r0, r5, #0
100043c4:	9908      	ldr	r1, [sp, #32]
100043c6:	321a      	adds	r2, #26
100043c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
100043ca:	47b8      	blx	r7
100043cc:	1c43      	adds	r3, r0, #1
100043ce:	d0bf      	beq.n	10004350 <_printf_float+0x1b4>
100043d0:	3601      	adds	r6, #1
100043d2:	e7f0      	b.n	100043b6 <_printf_float+0x21a>
100043d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100043d6:	2b00      	cmp	r3, #0
100043d8:	dc2b      	bgt.n	10004432 <_printf_float+0x296>
100043da:	2301      	movs	r3, #1
100043dc:	1c28      	adds	r0, r5, #0
100043de:	9908      	ldr	r1, [sp, #32]
100043e0:	4a40      	ldr	r2, [pc, #256]	; (100044e4 <_printf_float+0x348>)
100043e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
100043e4:	47b0      	blx	r6
100043e6:	1c43      	adds	r3, r0, #1
100043e8:	d0b2      	beq.n	10004350 <_printf_float+0x1b4>
100043ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100043ec:	2b00      	cmp	r3, #0
100043ee:	d105      	bne.n	100043fc <_printf_float+0x260>
100043f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100043f2:	2b00      	cmp	r3, #0
100043f4:	d102      	bne.n	100043fc <_printf_float+0x260>
100043f6:	6823      	ldr	r3, [r4, #0]
100043f8:	07db      	lsls	r3, r3, #31
100043fa:	d5ce      	bpl.n	1000439a <_printf_float+0x1fe>
100043fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
100043fe:	1c28      	adds	r0, r5, #0
10004400:	9908      	ldr	r1, [sp, #32]
10004402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10004404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004406:	47b0      	blx	r6
10004408:	2600      	movs	r6, #0
1000440a:	1c43      	adds	r3, r0, #1
1000440c:	d0a0      	beq.n	10004350 <_printf_float+0x1b4>
1000440e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004410:	1c28      	adds	r0, r5, #0
10004412:	425b      	negs	r3, r3
10004414:	9908      	ldr	r1, [sp, #32]
10004416:	429e      	cmp	r6, r3
10004418:	da08      	bge.n	1000442c <_printf_float+0x290>
1000441a:	1c22      	adds	r2, r4, #0
1000441c:	2301      	movs	r3, #1
1000441e:	321a      	adds	r2, #26
10004420:	9f09      	ldr	r7, [sp, #36]	; 0x24
10004422:	47b8      	blx	r7
10004424:	1c43      	adds	r3, r0, #1
10004426:	d093      	beq.n	10004350 <_printf_float+0x1b4>
10004428:	3601      	adds	r6, #1
1000442a:	e7f0      	b.n	1000440e <_printf_float+0x272>
1000442c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000442e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10004430:	e0b1      	b.n	10004596 <_printf_float+0x3fa>
10004432:	9b10      	ldr	r3, [sp, #64]	; 0x40
10004434:	6da6      	ldr	r6, [r4, #88]	; 0x58
10004436:	429e      	cmp	r6, r3
10004438:	dd00      	ble.n	1000443c <_printf_float+0x2a0>
1000443a:	1c1e      	adds	r6, r3, #0
1000443c:	2e00      	cmp	r6, #0
1000443e:	dc01      	bgt.n	10004444 <_printf_float+0x2a8>
10004440:	2300      	movs	r3, #0
10004442:	e014      	b.n	1000446e <_printf_float+0x2d2>
10004444:	1c33      	adds	r3, r6, #0
10004446:	1c28      	adds	r0, r5, #0
10004448:	9908      	ldr	r1, [sp, #32]
1000444a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000444c:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000444e:	47b8      	blx	r7
10004450:	1c43      	adds	r3, r0, #1
10004452:	d1f5      	bne.n	10004440 <_printf_float+0x2a4>
10004454:	e77c      	b.n	10004350 <_printf_float+0x1b4>
10004456:	1c22      	adds	r2, r4, #0
10004458:	2301      	movs	r3, #1
1000445a:	1c28      	adds	r0, r5, #0
1000445c:	9908      	ldr	r1, [sp, #32]
1000445e:	321a      	adds	r2, #26
10004460:	9f09      	ldr	r7, [sp, #36]	; 0x24
10004462:	47b8      	blx	r7
10004464:	1c43      	adds	r3, r0, #1
10004466:	d100      	bne.n	1000446a <_printf_float+0x2ce>
10004468:	e772      	b.n	10004350 <_printf_float+0x1b4>
1000446a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000446c:	3301      	adds	r3, #1
1000446e:	930d      	str	r3, [sp, #52]	; 0x34
10004470:	43f3      	mvns	r3, r6
10004472:	6da2      	ldr	r2, [r4, #88]	; 0x58
10004474:	17db      	asrs	r3, r3, #31
10004476:	990d      	ldr	r1, [sp, #52]	; 0x34
10004478:	4033      	ands	r3, r6
1000447a:	1ad3      	subs	r3, r2, r3
1000447c:	4299      	cmp	r1, r3
1000447e:	dbea      	blt.n	10004456 <_printf_float+0x2ba>
10004480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10004482:	189e      	adds	r6, r3, r2
10004484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004486:	9a10      	ldr	r2, [sp, #64]	; 0x40
10004488:	4293      	cmp	r3, r2
1000448a:	db0e      	blt.n	100044aa <_printf_float+0x30e>
1000448c:	6823      	ldr	r3, [r4, #0]
1000448e:	07db      	lsls	r3, r3, #31
10004490:	d40b      	bmi.n	100044aa <_printf_float+0x30e>
10004492:	9b10      	ldr	r3, [sp, #64]	; 0x40
10004494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10004496:	18d7      	adds	r7, r2, r3
10004498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000449a:	1bbf      	subs	r7, r7, r6
1000449c:	1a9b      	subs	r3, r3, r2
1000449e:	429f      	cmp	r7, r3
100044a0:	dd00      	ble.n	100044a4 <_printf_float+0x308>
100044a2:	1c1f      	adds	r7, r3, #0
100044a4:	2f00      	cmp	r7, #0
100044a6:	dc09      	bgt.n	100044bc <_printf_float+0x320>
100044a8:	e011      	b.n	100044ce <_printf_float+0x332>
100044aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100044ac:	1c28      	adds	r0, r5, #0
100044ae:	9908      	ldr	r1, [sp, #32]
100044b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100044b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
100044b4:	47b8      	blx	r7
100044b6:	1c43      	adds	r3, r0, #1
100044b8:	d1eb      	bne.n	10004492 <_printf_float+0x2f6>
100044ba:	e749      	b.n	10004350 <_printf_float+0x1b4>
100044bc:	1c32      	adds	r2, r6, #0
100044be:	1c3b      	adds	r3, r7, #0
100044c0:	1c28      	adds	r0, r5, #0
100044c2:	9908      	ldr	r1, [sp, #32]
100044c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
100044c6:	47b0      	blx	r6
100044c8:	1c43      	adds	r3, r0, #1
100044ca:	d100      	bne.n	100044ce <_printf_float+0x332>
100044cc:	e740      	b.n	10004350 <_printf_float+0x1b4>
100044ce:	2300      	movs	r3, #0
100044d0:	e016      	b.n	10004500 <_printf_float+0x364>
100044d2:	46c0      	nop			; (mov r8, r8)
100044d4:	100079ba 	.word	0x100079ba
100044d8:	100079be 	.word	0x100079be
100044dc:	100079c2 	.word	0x100079c2
100044e0:	100079c6 	.word	0x100079c6
100044e4:	100079ca 	.word	0x100079ca
100044e8:	1c22      	adds	r2, r4, #0
100044ea:	2301      	movs	r3, #1
100044ec:	1c28      	adds	r0, r5, #0
100044ee:	9908      	ldr	r1, [sp, #32]
100044f0:	321a      	adds	r2, #26
100044f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
100044f4:	47b0      	blx	r6
100044f6:	1c43      	adds	r3, r0, #1
100044f8:	d100      	bne.n	100044fc <_printf_float+0x360>
100044fa:	e729      	b.n	10004350 <_printf_float+0x1b4>
100044fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100044fe:	3301      	adds	r3, #1
10004500:	930a      	str	r3, [sp, #40]	; 0x28
10004502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10004504:	9b10      	ldr	r3, [sp, #64]	; 0x40
10004506:	1a9a      	subs	r2, r3, r2
10004508:	43fb      	mvns	r3, r7
1000450a:	17db      	asrs	r3, r3, #31
1000450c:	403b      	ands	r3, r7
1000450e:	1ad3      	subs	r3, r2, r3
10004510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10004512:	429a      	cmp	r2, r3
10004514:	dbe8      	blt.n	100044e8 <_printf_float+0x34c>
10004516:	e740      	b.n	1000439a <_printf_float+0x1fe>
10004518:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000451a:	1c28      	adds	r0, r5, #0
1000451c:	9908      	ldr	r1, [sp, #32]
1000451e:	2b01      	cmp	r3, #1
10004520:	dc02      	bgt.n	10004528 <_printf_float+0x38c>
10004522:	2301      	movs	r3, #1
10004524:	421a      	tst	r2, r3
10004526:	d03c      	beq.n	100045a2 <_printf_float+0x406>
10004528:	2301      	movs	r3, #1
1000452a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000452c:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000452e:	47b8      	blx	r7
10004530:	1c43      	adds	r3, r0, #1
10004532:	d100      	bne.n	10004536 <_printf_float+0x39a>
10004534:	e70c      	b.n	10004350 <_printf_float+0x1b4>
10004536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004538:	1c28      	adds	r0, r5, #0
1000453a:	9908      	ldr	r1, [sp, #32]
1000453c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000453e:	9f09      	ldr	r7, [sp, #36]	; 0x24
10004540:	47b8      	blx	r7
10004542:	1c43      	adds	r3, r0, #1
10004544:	d100      	bne.n	10004548 <_printf_float+0x3ac>
10004546:	e703      	b.n	10004350 <_printf_float+0x1b4>
10004548:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000454a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1000454c:	2300      	movs	r3, #0
1000454e:	2200      	movs	r2, #0
10004550:	f001 fb1c 	bl	10005b8c <__aeabi_dcmpeq>
10004554:	2300      	movs	r3, #0
10004556:	2800      	cmp	r0, #0
10004558:	d112      	bne.n	10004580 <_printf_float+0x3e4>
1000455a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000455c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000455e:	3201      	adds	r2, #1
10004560:	3b01      	subs	r3, #1
10004562:	1c28      	adds	r0, r5, #0
10004564:	9908      	ldr	r1, [sp, #32]
10004566:	e01d      	b.n	100045a4 <_printf_float+0x408>
10004568:	1c22      	adds	r2, r4, #0
1000456a:	2301      	movs	r3, #1
1000456c:	1c28      	adds	r0, r5, #0
1000456e:	9908      	ldr	r1, [sp, #32]
10004570:	321a      	adds	r2, #26
10004572:	9f09      	ldr	r7, [sp, #36]	; 0x24
10004574:	47b8      	blx	r7
10004576:	1c43      	adds	r3, r0, #1
10004578:	d100      	bne.n	1000457c <_printf_float+0x3e0>
1000457a:	e6e9      	b.n	10004350 <_printf_float+0x1b4>
1000457c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000457e:	3301      	adds	r3, #1
10004580:	930a      	str	r3, [sp, #40]	; 0x28
10004582:	9b10      	ldr	r3, [sp, #64]	; 0x40
10004584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10004586:	3b01      	subs	r3, #1
10004588:	429a      	cmp	r2, r3
1000458a:	dbed      	blt.n	10004568 <_printf_float+0x3cc>
1000458c:	1c22      	adds	r2, r4, #0
1000458e:	1c28      	adds	r0, r5, #0
10004590:	1c33      	adds	r3, r6, #0
10004592:	9908      	ldr	r1, [sp, #32]
10004594:	3250      	adds	r2, #80	; 0x50
10004596:	9e09      	ldr	r6, [sp, #36]	; 0x24
10004598:	47b0      	blx	r6
1000459a:	1c43      	adds	r3, r0, #1
1000459c:	d000      	beq.n	100045a0 <_printf_float+0x404>
1000459e:	e6fc      	b.n	1000439a <_printf_float+0x1fe>
100045a0:	e6d6      	b.n	10004350 <_printf_float+0x1b4>
100045a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100045a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
100045a6:	47b8      	blx	r7
100045a8:	1c43      	adds	r3, r0, #1
100045aa:	d1ef      	bne.n	1000458c <_printf_float+0x3f0>
100045ac:	e6d0      	b.n	10004350 <_printf_float+0x1b4>
100045ae:	1c22      	adds	r2, r4, #0
100045b0:	2301      	movs	r3, #1
100045b2:	1c28      	adds	r0, r5, #0
100045b4:	9908      	ldr	r1, [sp, #32]
100045b6:	3219      	adds	r2, #25
100045b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
100045ba:	47b8      	blx	r7
100045bc:	1c43      	adds	r3, r0, #1
100045be:	d100      	bne.n	100045c2 <_printf_float+0x426>
100045c0:	e6c6      	b.n	10004350 <_printf_float+0x1b4>
100045c2:	3601      	adds	r6, #1
100045c4:	68e3      	ldr	r3, [r4, #12]
100045c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
100045c8:	1a9b      	subs	r3, r3, r2
100045ca:	429e      	cmp	r6, r3
100045cc:	dbef      	blt.n	100045ae <_printf_float+0x412>
100045ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
100045d0:	68e0      	ldr	r0, [r4, #12]
100045d2:	4298      	cmp	r0, r3
100045d4:	da17      	bge.n	10004606 <_printf_float+0x46a>
100045d6:	1c18      	adds	r0, r3, #0
100045d8:	e015      	b.n	10004606 <_printf_float+0x46a>
100045da:	2600      	movs	r6, #0
100045dc:	e7f2      	b.n	100045c4 <_printf_float+0x428>
100045de:	4331      	orrs	r1, r6
100045e0:	6021      	str	r1, [r4, #0]
100045e2:	9101      	str	r1, [sp, #4]
100045e4:	2123      	movs	r1, #35	; 0x23
100045e6:	9000      	str	r0, [sp, #0]
100045e8:	a806      	add	r0, sp, #24
100045ea:	1809      	adds	r1, r1, r0
100045ec:	9102      	str	r1, [sp, #8]
100045ee:	a90f      	add	r1, sp, #60	; 0x3c
100045f0:	9103      	str	r1, [sp, #12]
100045f2:	a910      	add	r1, sp, #64	; 0x40
100045f4:	9105      	str	r1, [sp, #20]
100045f6:	2100      	movs	r1, #0
100045f8:	9704      	str	r7, [sp, #16]
100045fa:	9106      	str	r1, [sp, #24]
100045fc:	1c28      	adds	r0, r5, #0
100045fe:	f7ff fd37 	bl	10004070 <__cvt>
10004602:	900a      	str	r0, [sp, #40]	; 0x28
10004604:	e646      	b.n	10004294 <_printf_float+0xf8>
10004606:	b013      	add	sp, #76	; 0x4c
10004608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000460a:	46c0      	nop			; (mov r8, r8)

1000460c <_printf_common>:
1000460c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000460e:	1c17      	adds	r7, r2, #0
10004610:	9301      	str	r3, [sp, #4]
10004612:	690a      	ldr	r2, [r1, #16]
10004614:	688b      	ldr	r3, [r1, #8]
10004616:	9000      	str	r0, [sp, #0]
10004618:	1c0c      	adds	r4, r1, #0
1000461a:	4293      	cmp	r3, r2
1000461c:	da00      	bge.n	10004620 <_printf_common+0x14>
1000461e:	1c13      	adds	r3, r2, #0
10004620:	1c22      	adds	r2, r4, #0
10004622:	603b      	str	r3, [r7, #0]
10004624:	3243      	adds	r2, #67	; 0x43
10004626:	7812      	ldrb	r2, [r2, #0]
10004628:	2a00      	cmp	r2, #0
1000462a:	d001      	beq.n	10004630 <_printf_common+0x24>
1000462c:	3301      	adds	r3, #1
1000462e:	603b      	str	r3, [r7, #0]
10004630:	6823      	ldr	r3, [r4, #0]
10004632:	069b      	lsls	r3, r3, #26
10004634:	d502      	bpl.n	1000463c <_printf_common+0x30>
10004636:	683b      	ldr	r3, [r7, #0]
10004638:	3302      	adds	r3, #2
1000463a:	603b      	str	r3, [r7, #0]
1000463c:	2506      	movs	r5, #6
1000463e:	6823      	ldr	r3, [r4, #0]
10004640:	401d      	ands	r5, r3
10004642:	d01e      	beq.n	10004682 <_printf_common+0x76>
10004644:	1c23      	adds	r3, r4, #0
10004646:	3343      	adds	r3, #67	; 0x43
10004648:	781b      	ldrb	r3, [r3, #0]
1000464a:	1e5a      	subs	r2, r3, #1
1000464c:	4193      	sbcs	r3, r2
1000464e:	6822      	ldr	r2, [r4, #0]
10004650:	0692      	lsls	r2, r2, #26
10004652:	d51c      	bpl.n	1000468e <_printf_common+0x82>
10004654:	2030      	movs	r0, #48	; 0x30
10004656:	18e1      	adds	r1, r4, r3
10004658:	3140      	adds	r1, #64	; 0x40
1000465a:	70c8      	strb	r0, [r1, #3]
1000465c:	1c21      	adds	r1, r4, #0
1000465e:	1c5a      	adds	r2, r3, #1
10004660:	3145      	adds	r1, #69	; 0x45
10004662:	7809      	ldrb	r1, [r1, #0]
10004664:	18a2      	adds	r2, r4, r2
10004666:	3240      	adds	r2, #64	; 0x40
10004668:	3302      	adds	r3, #2
1000466a:	70d1      	strb	r1, [r2, #3]
1000466c:	e00f      	b.n	1000468e <_printf_common+0x82>
1000466e:	1c22      	adds	r2, r4, #0
10004670:	2301      	movs	r3, #1
10004672:	9800      	ldr	r0, [sp, #0]
10004674:	9901      	ldr	r1, [sp, #4]
10004676:	3219      	adds	r2, #25
10004678:	9e08      	ldr	r6, [sp, #32]
1000467a:	47b0      	blx	r6
1000467c:	1c43      	adds	r3, r0, #1
1000467e:	d00e      	beq.n	1000469e <_printf_common+0x92>
10004680:	3501      	adds	r5, #1
10004682:	68e3      	ldr	r3, [r4, #12]
10004684:	683a      	ldr	r2, [r7, #0]
10004686:	1a9b      	subs	r3, r3, r2
10004688:	429d      	cmp	r5, r3
1000468a:	dbf0      	blt.n	1000466e <_printf_common+0x62>
1000468c:	e7da      	b.n	10004644 <_printf_common+0x38>
1000468e:	1c22      	adds	r2, r4, #0
10004690:	9800      	ldr	r0, [sp, #0]
10004692:	9901      	ldr	r1, [sp, #4]
10004694:	3243      	adds	r2, #67	; 0x43
10004696:	9d08      	ldr	r5, [sp, #32]
10004698:	47a8      	blx	r5
1000469a:	1c43      	adds	r3, r0, #1
1000469c:	d102      	bne.n	100046a4 <_printf_common+0x98>
1000469e:	2001      	movs	r0, #1
100046a0:	4240      	negs	r0, r0
100046a2:	e020      	b.n	100046e6 <_printf_common+0xda>
100046a4:	2306      	movs	r3, #6
100046a6:	6820      	ldr	r0, [r4, #0]
100046a8:	68e1      	ldr	r1, [r4, #12]
100046aa:	683a      	ldr	r2, [r7, #0]
100046ac:	4003      	ands	r3, r0
100046ae:	2500      	movs	r5, #0
100046b0:	2b04      	cmp	r3, #4
100046b2:	d103      	bne.n	100046bc <_printf_common+0xb0>
100046b4:	1a8d      	subs	r5, r1, r2
100046b6:	43eb      	mvns	r3, r5
100046b8:	17db      	asrs	r3, r3, #31
100046ba:	401d      	ands	r5, r3
100046bc:	68a3      	ldr	r3, [r4, #8]
100046be:	6922      	ldr	r2, [r4, #16]
100046c0:	4293      	cmp	r3, r2
100046c2:	dd01      	ble.n	100046c8 <_printf_common+0xbc>
100046c4:	1a9b      	subs	r3, r3, r2
100046c6:	18ed      	adds	r5, r5, r3
100046c8:	2700      	movs	r7, #0
100046ca:	42af      	cmp	r7, r5
100046cc:	da0a      	bge.n	100046e4 <_printf_common+0xd8>
100046ce:	1c22      	adds	r2, r4, #0
100046d0:	2301      	movs	r3, #1
100046d2:	9800      	ldr	r0, [sp, #0]
100046d4:	9901      	ldr	r1, [sp, #4]
100046d6:	321a      	adds	r2, #26
100046d8:	9e08      	ldr	r6, [sp, #32]
100046da:	47b0      	blx	r6
100046dc:	1c43      	adds	r3, r0, #1
100046de:	d0de      	beq.n	1000469e <_printf_common+0x92>
100046e0:	3701      	adds	r7, #1
100046e2:	e7f2      	b.n	100046ca <_printf_common+0xbe>
100046e4:	2000      	movs	r0, #0
100046e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100046e8 <__fpclassifyd>:
100046e8:	b530      	push	{r4, r5, lr}
100046ea:	1c0c      	adds	r4, r1, #0
100046ec:	2302      	movs	r3, #2
100046ee:	4304      	orrs	r4, r0
100046f0:	d017      	beq.n	10004722 <__fpclassifyd+0x3a>
100046f2:	2480      	movs	r4, #128	; 0x80
100046f4:	0624      	lsls	r4, r4, #24
100046f6:	42a1      	cmp	r1, r4
100046f8:	d101      	bne.n	100046fe <__fpclassifyd+0x16>
100046fa:	2800      	cmp	r0, #0
100046fc:	d011      	beq.n	10004722 <__fpclassifyd+0x3a>
100046fe:	4b0a      	ldr	r3, [pc, #40]	; (10004728 <__fpclassifyd+0x40>)
10004700:	0049      	lsls	r1, r1, #1
10004702:	0849      	lsrs	r1, r1, #1
10004704:	4a09      	ldr	r2, [pc, #36]	; (1000472c <__fpclassifyd+0x44>)
10004706:	18cc      	adds	r4, r1, r3
10004708:	2304      	movs	r3, #4
1000470a:	4294      	cmp	r4, r2
1000470c:	d909      	bls.n	10004722 <__fpclassifyd+0x3a>
1000470e:	4a08      	ldr	r2, [pc, #32]	; (10004730 <__fpclassifyd+0x48>)
10004710:	3b01      	subs	r3, #1
10004712:	4291      	cmp	r1, r2
10004714:	d905      	bls.n	10004722 <__fpclassifyd+0x3a>
10004716:	4a07      	ldr	r2, [pc, #28]	; (10004734 <__fpclassifyd+0x4c>)
10004718:	2300      	movs	r3, #0
1000471a:	4291      	cmp	r1, r2
1000471c:	d101      	bne.n	10004722 <__fpclassifyd+0x3a>
1000471e:	4243      	negs	r3, r0
10004720:	4143      	adcs	r3, r0
10004722:	1c18      	adds	r0, r3, #0
10004724:	bd30      	pop	{r4, r5, pc}
10004726:	46c0      	nop			; (mov r8, r8)
10004728:	fff00000 	.word	0xfff00000
1000472c:	7fdfffff 	.word	0x7fdfffff
10004730:	000fffff 	.word	0x000fffff
10004734:	7ff00000 	.word	0x7ff00000

10004738 <strlen>:
10004738:	2300      	movs	r3, #0
1000473a:	5cc2      	ldrb	r2, [r0, r3]
1000473c:	3301      	adds	r3, #1
1000473e:	2a00      	cmp	r2, #0
10004740:	d1fb      	bne.n	1000473a <strlen+0x2>
10004742:	1e58      	subs	r0, r3, #1
10004744:	4770      	bx	lr

10004746 <quorem>:
10004746:	b5f0      	push	{r4, r5, r6, r7, lr}
10004748:	6903      	ldr	r3, [r0, #16]
1000474a:	690c      	ldr	r4, [r1, #16]
1000474c:	b089      	sub	sp, #36	; 0x24
1000474e:	2600      	movs	r6, #0
10004750:	42a3      	cmp	r3, r4
10004752:	db7c      	blt.n	1000484e <quorem+0x108>
10004754:	1c0b      	adds	r3, r1, #0
10004756:	3c01      	subs	r4, #1
10004758:	3314      	adds	r3, #20
1000475a:	00a5      	lsls	r5, r4, #2
1000475c:	9303      	str	r3, [sp, #12]
1000475e:	195b      	adds	r3, r3, r5
10004760:	9304      	str	r3, [sp, #16]
10004762:	1c03      	adds	r3, r0, #0
10004764:	3314      	adds	r3, #20
10004766:	9301      	str	r3, [sp, #4]
10004768:	195d      	adds	r5, r3, r5
1000476a:	9b04      	ldr	r3, [sp, #16]
1000476c:	9107      	str	r1, [sp, #28]
1000476e:	681b      	ldr	r3, [r3, #0]
10004770:	9002      	str	r0, [sp, #8]
10004772:	1c59      	adds	r1, r3, #1
10004774:	6828      	ldr	r0, [r5, #0]
10004776:	9305      	str	r3, [sp, #20]
10004778:	f7ff faae 	bl	10003cd8 <__aeabi_uidiv>
1000477c:	1e07      	subs	r7, r0, #0
1000477e:	42b7      	cmp	r7, r6
10004780:	d035      	beq.n	100047ee <quorem+0xa8>
10004782:	9b03      	ldr	r3, [sp, #12]
10004784:	9801      	ldr	r0, [sp, #4]
10004786:	469c      	mov	ip, r3
10004788:	9605      	str	r6, [sp, #20]
1000478a:	4663      	mov	r3, ip
1000478c:	cb04      	ldmia	r3!, {r2}
1000478e:	b291      	uxth	r1, r2
10004790:	4379      	muls	r1, r7
10004792:	0c12      	lsrs	r2, r2, #16
10004794:	437a      	muls	r2, r7
10004796:	1871      	adds	r1, r6, r1
10004798:	0c0e      	lsrs	r6, r1, #16
1000479a:	469c      	mov	ip, r3
1000479c:	18b3      	adds	r3, r6, r2
1000479e:	9306      	str	r3, [sp, #24]
100047a0:	8802      	ldrh	r2, [r0, #0]
100047a2:	0c1e      	lsrs	r6, r3, #16
100047a4:	9b05      	ldr	r3, [sp, #20]
100047a6:	b289      	uxth	r1, r1
100047a8:	18d2      	adds	r2, r2, r3
100047aa:	6803      	ldr	r3, [r0, #0]
100047ac:	1a52      	subs	r2, r2, r1
100047ae:	0c19      	lsrs	r1, r3, #16
100047b0:	466b      	mov	r3, sp
100047b2:	8b1b      	ldrh	r3, [r3, #24]
100047b4:	1acb      	subs	r3, r1, r3
100047b6:	1411      	asrs	r1, r2, #16
100047b8:	185b      	adds	r3, r3, r1
100047ba:	1419      	asrs	r1, r3, #16
100047bc:	b292      	uxth	r2, r2
100047be:	041b      	lsls	r3, r3, #16
100047c0:	431a      	orrs	r2, r3
100047c2:	9b04      	ldr	r3, [sp, #16]
100047c4:	9105      	str	r1, [sp, #20]
100047c6:	c004      	stmia	r0!, {r2}
100047c8:	4563      	cmp	r3, ip
100047ca:	d2de      	bcs.n	1000478a <quorem+0x44>
100047cc:	682b      	ldr	r3, [r5, #0]
100047ce:	2b00      	cmp	r3, #0
100047d0:	d10d      	bne.n	100047ee <quorem+0xa8>
100047d2:	1c23      	adds	r3, r4, #0
100047d4:	9a01      	ldr	r2, [sp, #4]
100047d6:	3d04      	subs	r5, #4
100047d8:	4295      	cmp	r5, r2
100047da:	d803      	bhi.n	100047e4 <quorem+0x9e>
100047dc:	9a02      	ldr	r2, [sp, #8]
100047de:	1c1c      	adds	r4, r3, #0
100047e0:	6113      	str	r3, [r2, #16]
100047e2:	e004      	b.n	100047ee <quorem+0xa8>
100047e4:	682a      	ldr	r2, [r5, #0]
100047e6:	2a00      	cmp	r2, #0
100047e8:	d1f8      	bne.n	100047dc <quorem+0x96>
100047ea:	3b01      	subs	r3, #1
100047ec:	e7f2      	b.n	100047d4 <quorem+0x8e>
100047ee:	9802      	ldr	r0, [sp, #8]
100047f0:	9907      	ldr	r1, [sp, #28]
100047f2:	f001 f857 	bl	100058a4 <__mcmp>
100047f6:	2800      	cmp	r0, #0
100047f8:	db28      	blt.n	1000484c <quorem+0x106>
100047fa:	2000      	movs	r0, #0
100047fc:	9901      	ldr	r1, [sp, #4]
100047fe:	9a03      	ldr	r2, [sp, #12]
10004800:	3701      	adds	r7, #1
10004802:	ca20      	ldmia	r2!, {r5}
10004804:	880b      	ldrh	r3, [r1, #0]
10004806:	1818      	adds	r0, r3, r0
10004808:	b2ab      	uxth	r3, r5
1000480a:	1ac3      	subs	r3, r0, r3
1000480c:	6808      	ldr	r0, [r1, #0]
1000480e:	0c2d      	lsrs	r5, r5, #16
10004810:	0c00      	lsrs	r0, r0, #16
10004812:	1b45      	subs	r5, r0, r5
10004814:	141e      	asrs	r6, r3, #16
10004816:	19ad      	adds	r5, r5, r6
10004818:	1428      	asrs	r0, r5, #16
1000481a:	b29b      	uxth	r3, r3
1000481c:	042d      	lsls	r5, r5, #16
1000481e:	432b      	orrs	r3, r5
10004820:	c108      	stmia	r1!, {r3}
10004822:	9b04      	ldr	r3, [sp, #16]
10004824:	4293      	cmp	r3, r2
10004826:	d2ec      	bcs.n	10004802 <quorem+0xbc>
10004828:	9a01      	ldr	r2, [sp, #4]
1000482a:	00a3      	lsls	r3, r4, #2
1000482c:	18d3      	adds	r3, r2, r3
1000482e:	681a      	ldr	r2, [r3, #0]
10004830:	2a00      	cmp	r2, #0
10004832:	d10b      	bne.n	1000484c <quorem+0x106>
10004834:	9a01      	ldr	r2, [sp, #4]
10004836:	3b04      	subs	r3, #4
10004838:	4293      	cmp	r3, r2
1000483a:	d802      	bhi.n	10004842 <quorem+0xfc>
1000483c:	9b02      	ldr	r3, [sp, #8]
1000483e:	611c      	str	r4, [r3, #16]
10004840:	e004      	b.n	1000484c <quorem+0x106>
10004842:	681a      	ldr	r2, [r3, #0]
10004844:	2a00      	cmp	r2, #0
10004846:	d1f9      	bne.n	1000483c <quorem+0xf6>
10004848:	3c01      	subs	r4, #1
1000484a:	e7f3      	b.n	10004834 <quorem+0xee>
1000484c:	1c3e      	adds	r6, r7, #0
1000484e:	1c30      	adds	r0, r6, #0
10004850:	b009      	add	sp, #36	; 0x24
10004852:	bdf0      	pop	{r4, r5, r6, r7, pc}

10004854 <_dtoa_r>:
10004854:	b5f0      	push	{r4, r5, r6, r7, lr}
10004856:	1c16      	adds	r6, r2, #0
10004858:	1c1f      	adds	r7, r3, #0
1000485a:	6a44      	ldr	r4, [r0, #36]	; 0x24
1000485c:	b09b      	sub	sp, #108	; 0x6c
1000485e:	9008      	str	r0, [sp, #32]
10004860:	9d23      	ldr	r5, [sp, #140]	; 0x8c
10004862:	9606      	str	r6, [sp, #24]
10004864:	9707      	str	r7, [sp, #28]
10004866:	2c00      	cmp	r4, #0
10004868:	d108      	bne.n	1000487c <_dtoa_r+0x28>
1000486a:	2010      	movs	r0, #16
1000486c:	f000 fdf6 	bl	1000545c <malloc>
10004870:	9b08      	ldr	r3, [sp, #32]
10004872:	6258      	str	r0, [r3, #36]	; 0x24
10004874:	6044      	str	r4, [r0, #4]
10004876:	6084      	str	r4, [r0, #8]
10004878:	6004      	str	r4, [r0, #0]
1000487a:	60c4      	str	r4, [r0, #12]
1000487c:	9b08      	ldr	r3, [sp, #32]
1000487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004880:	6819      	ldr	r1, [r3, #0]
10004882:	2900      	cmp	r1, #0
10004884:	d00b      	beq.n	1000489e <_dtoa_r+0x4a>
10004886:	685a      	ldr	r2, [r3, #4]
10004888:	2301      	movs	r3, #1
1000488a:	4093      	lsls	r3, r2
1000488c:	604a      	str	r2, [r1, #4]
1000488e:	608b      	str	r3, [r1, #8]
10004890:	9808      	ldr	r0, [sp, #32]
10004892:	f000 fe2e 	bl	100054f2 <_Bfree>
10004896:	2200      	movs	r2, #0
10004898:	9b08      	ldr	r3, [sp, #32]
1000489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000489c:	601a      	str	r2, [r3, #0]
1000489e:	9b07      	ldr	r3, [sp, #28]
100048a0:	2b00      	cmp	r3, #0
100048a2:	da05      	bge.n	100048b0 <_dtoa_r+0x5c>
100048a4:	2301      	movs	r3, #1
100048a6:	602b      	str	r3, [r5, #0]
100048a8:	007b      	lsls	r3, r7, #1
100048aa:	085b      	lsrs	r3, r3, #1
100048ac:	9307      	str	r3, [sp, #28]
100048ae:	e001      	b.n	100048b4 <_dtoa_r+0x60>
100048b0:	2300      	movs	r3, #0
100048b2:	602b      	str	r3, [r5, #0]
100048b4:	9c07      	ldr	r4, [sp, #28]
100048b6:	4bc6      	ldr	r3, [pc, #792]	; (10004bd0 <_dtoa_r+0x37c>)
100048b8:	1c22      	adds	r2, r4, #0
100048ba:	9317      	str	r3, [sp, #92]	; 0x5c
100048bc:	401a      	ands	r2, r3
100048be:	429a      	cmp	r2, r3
100048c0:	d119      	bne.n	100048f6 <_dtoa_r+0xa2>
100048c2:	4bc4      	ldr	r3, [pc, #784]	; (10004bd4 <_dtoa_r+0x380>)
100048c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
100048c6:	6013      	str	r3, [r2, #0]
100048c8:	9a06      	ldr	r2, [sp, #24]
100048ca:	4bc3      	ldr	r3, [pc, #780]	; (10004bd8 <_dtoa_r+0x384>)
100048cc:	2a00      	cmp	r2, #0
100048ce:	d102      	bne.n	100048d6 <_dtoa_r+0x82>
100048d0:	0324      	lsls	r4, r4, #12
100048d2:	d100      	bne.n	100048d6 <_dtoa_r+0x82>
100048d4:	4bc1      	ldr	r3, [pc, #772]	; (10004bdc <_dtoa_r+0x388>)
100048d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
100048d8:	1c18      	adds	r0, r3, #0
100048da:	2a00      	cmp	r2, #0
100048dc:	d101      	bne.n	100048e2 <_dtoa_r+0x8e>
100048de:	f000 fdb6 	bl	1000544e <_dtoa_r+0xbfa>
100048e2:	78d9      	ldrb	r1, [r3, #3]
100048e4:	1cda      	adds	r2, r3, #3
100048e6:	2900      	cmp	r1, #0
100048e8:	d000      	beq.n	100048ec <_dtoa_r+0x98>
100048ea:	3205      	adds	r2, #5
100048ec:	9924      	ldr	r1, [sp, #144]	; 0x90
100048ee:	1c18      	adds	r0, r3, #0
100048f0:	600a      	str	r2, [r1, #0]
100048f2:	f000 fdac 	bl	1000544e <_dtoa_r+0xbfa>
100048f6:	9e06      	ldr	r6, [sp, #24]
100048f8:	9f07      	ldr	r7, [sp, #28]
100048fa:	2200      	movs	r2, #0
100048fc:	1c30      	adds	r0, r6, #0
100048fe:	1c39      	adds	r1, r7, #0
10004900:	2300      	movs	r3, #0
10004902:	f001 f943 	bl	10005b8c <__aeabi_dcmpeq>
10004906:	1e05      	subs	r5, r0, #0
10004908:	d00e      	beq.n	10004928 <_dtoa_r+0xd4>
1000490a:	2301      	movs	r3, #1
1000490c:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000490e:	6013      	str	r3, [r2, #0]
10004910:	4bb3      	ldr	r3, [pc, #716]	; (10004be0 <_dtoa_r+0x38c>)
10004912:	9a24      	ldr	r2, [sp, #144]	; 0x90
10004914:	1c18      	adds	r0, r3, #0
10004916:	2a00      	cmp	r2, #0
10004918:	d101      	bne.n	1000491e <_dtoa_r+0xca>
1000491a:	f000 fd98 	bl	1000544e <_dtoa_r+0xbfa>
1000491e:	4ab1      	ldr	r2, [pc, #708]	; (10004be4 <_dtoa_r+0x390>)
10004920:	9924      	ldr	r1, [sp, #144]	; 0x90
10004922:	600a      	str	r2, [r1, #0]
10004924:	f000 fd93 	bl	1000544e <_dtoa_r+0xbfa>
10004928:	ab19      	add	r3, sp, #100	; 0x64
1000492a:	9300      	str	r3, [sp, #0]
1000492c:	ab18      	add	r3, sp, #96	; 0x60
1000492e:	9301      	str	r3, [sp, #4]
10004930:	9808      	ldr	r0, [sp, #32]
10004932:	1c32      	adds	r2, r6, #0
10004934:	1c3b      	adds	r3, r7, #0
10004936:	f001 f83b 	bl	100059b0 <__d2b>
1000493a:	0061      	lsls	r1, r4, #1
1000493c:	900a      	str	r0, [sp, #40]	; 0x28
1000493e:	0d49      	lsrs	r1, r1, #21
10004940:	d009      	beq.n	10004956 <_dtoa_r+0x102>
10004942:	0338      	lsls	r0, r7, #12
10004944:	4ca8      	ldr	r4, [pc, #672]	; (10004be8 <_dtoa_r+0x394>)
10004946:	0b00      	lsrs	r0, r0, #12
10004948:	4304      	orrs	r4, r0
1000494a:	48a8      	ldr	r0, [pc, #672]	; (10004bec <_dtoa_r+0x398>)
1000494c:	1c32      	adds	r2, r6, #0
1000494e:	1c23      	adds	r3, r4, #0
10004950:	180e      	adds	r6, r1, r0
10004952:	9516      	str	r5, [sp, #88]	; 0x58
10004954:	e01c      	b.n	10004990 <_dtoa_r+0x13c>
10004956:	9b18      	ldr	r3, [sp, #96]	; 0x60
10004958:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000495a:	189e      	adds	r6, r3, r2
1000495c:	4ba4      	ldr	r3, [pc, #656]	; (10004bf0 <_dtoa_r+0x39c>)
1000495e:	429e      	cmp	r6, r3
10004960:	db09      	blt.n	10004976 <_dtoa_r+0x122>
10004962:	4ba4      	ldr	r3, [pc, #656]	; (10004bf4 <_dtoa_r+0x3a0>)
10004964:	18f0      	adds	r0, r6, r3
10004966:	9b06      	ldr	r3, [sp, #24]
10004968:	40c3      	lsrs	r3, r0
1000496a:	1c18      	adds	r0, r3, #0
1000496c:	4ba2      	ldr	r3, [pc, #648]	; (10004bf8 <_dtoa_r+0x3a4>)
1000496e:	1b9b      	subs	r3, r3, r6
10004970:	409c      	lsls	r4, r3
10004972:	4320      	orrs	r0, r4
10004974:	e004      	b.n	10004980 <_dtoa_r+0x12c>
10004976:	48a1      	ldr	r0, [pc, #644]	; (10004bfc <_dtoa_r+0x3a8>)
10004978:	9b06      	ldr	r3, [sp, #24]
1000497a:	1b80      	subs	r0, r0, r6
1000497c:	4083      	lsls	r3, r0
1000497e:	1c18      	adds	r0, r3, #0
10004980:	f002 ff1e 	bl	100077c0 <__aeabi_ui2d>
10004984:	4c9e      	ldr	r4, [pc, #632]	; (10004c00 <_dtoa_r+0x3ac>)
10004986:	1c02      	adds	r2, r0, #0
10004988:	190b      	adds	r3, r1, r4
1000498a:	2101      	movs	r1, #1
1000498c:	3e01      	subs	r6, #1
1000498e:	9116      	str	r1, [sp, #88]	; 0x58
10004990:	1c10      	adds	r0, r2, #0
10004992:	1c19      	adds	r1, r3, #0
10004994:	2200      	movs	r2, #0
10004996:	4b9b      	ldr	r3, [pc, #620]	; (10004c04 <_dtoa_r+0x3b0>)
10004998:	f002 fb26 	bl	10006fe8 <__aeabi_dsub>
1000499c:	4a9a      	ldr	r2, [pc, #616]	; (10004c08 <_dtoa_r+0x3b4>)
1000499e:	4b9b      	ldr	r3, [pc, #620]	; (10004c0c <_dtoa_r+0x3b8>)
100049a0:	f002 f888 	bl	10006ab4 <__aeabi_dmul>
100049a4:	4a9a      	ldr	r2, [pc, #616]	; (10004c10 <_dtoa_r+0x3bc>)
100049a6:	4b9b      	ldr	r3, [pc, #620]	; (10004c14 <_dtoa_r+0x3c0>)
100049a8:	f001 f91e 	bl	10005be8 <__aeabi_dadd>
100049ac:	1c04      	adds	r4, r0, #0
100049ae:	1c30      	adds	r0, r6, #0
100049b0:	1c0d      	adds	r5, r1, #0
100049b2:	f002 fec9 	bl	10007748 <__aeabi_i2d>
100049b6:	4a98      	ldr	r2, [pc, #608]	; (10004c18 <_dtoa_r+0x3c4>)
100049b8:	4b98      	ldr	r3, [pc, #608]	; (10004c1c <_dtoa_r+0x3c8>)
100049ba:	f002 f87b 	bl	10006ab4 <__aeabi_dmul>
100049be:	1c02      	adds	r2, r0, #0
100049c0:	1c0b      	adds	r3, r1, #0
100049c2:	1c20      	adds	r0, r4, #0
100049c4:	1c29      	adds	r1, r5, #0
100049c6:	f001 f90f 	bl	10005be8 <__aeabi_dadd>
100049ca:	1c04      	adds	r4, r0, #0
100049cc:	1c0d      	adds	r5, r1, #0
100049ce:	f002 fe85 	bl	100076dc <__aeabi_d2iz>
100049d2:	1c29      	adds	r1, r5, #0
100049d4:	9003      	str	r0, [sp, #12]
100049d6:	2200      	movs	r2, #0
100049d8:	1c20      	adds	r0, r4, #0
100049da:	2300      	movs	r3, #0
100049dc:	f001 f8dc 	bl	10005b98 <__aeabi_dcmplt>
100049e0:	2800      	cmp	r0, #0
100049e2:	d00d      	beq.n	10004a00 <_dtoa_r+0x1ac>
100049e4:	9803      	ldr	r0, [sp, #12]
100049e6:	f002 feaf 	bl	10007748 <__aeabi_i2d>
100049ea:	1c02      	adds	r2, r0, #0
100049ec:	1c0b      	adds	r3, r1, #0
100049ee:	1c20      	adds	r0, r4, #0
100049f0:	1c29      	adds	r1, r5, #0
100049f2:	f001 f8cb 	bl	10005b8c <__aeabi_dcmpeq>
100049f6:	4243      	negs	r3, r0
100049f8:	4143      	adcs	r3, r0
100049fa:	9a03      	ldr	r2, [sp, #12]
100049fc:	1ad3      	subs	r3, r2, r3
100049fe:	9303      	str	r3, [sp, #12]
10004a00:	2301      	movs	r3, #1
10004a02:	9313      	str	r3, [sp, #76]	; 0x4c
10004a04:	9b03      	ldr	r3, [sp, #12]
10004a06:	2b16      	cmp	r3, #22
10004a08:	d811      	bhi.n	10004a2e <_dtoa_r+0x1da>
10004a0a:	4a85      	ldr	r2, [pc, #532]	; (10004c20 <_dtoa_r+0x3cc>)
10004a0c:	00db      	lsls	r3, r3, #3
10004a0e:	18d3      	adds	r3, r2, r3
10004a10:	6818      	ldr	r0, [r3, #0]
10004a12:	6859      	ldr	r1, [r3, #4]
10004a14:	9a06      	ldr	r2, [sp, #24]
10004a16:	9b07      	ldr	r3, [sp, #28]
10004a18:	f001 f8d2 	bl	10005bc0 <__aeabi_dcmpgt>
10004a1c:	2800      	cmp	r0, #0
10004a1e:	d005      	beq.n	10004a2c <_dtoa_r+0x1d8>
10004a20:	9b03      	ldr	r3, [sp, #12]
10004a22:	3b01      	subs	r3, #1
10004a24:	9303      	str	r3, [sp, #12]
10004a26:	2300      	movs	r3, #0
10004a28:	9313      	str	r3, [sp, #76]	; 0x4c
10004a2a:	e000      	b.n	10004a2e <_dtoa_r+0x1da>
10004a2c:	9013      	str	r0, [sp, #76]	; 0x4c
10004a2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
10004a30:	1b9e      	subs	r6, r3, r6
10004a32:	2300      	movs	r3, #0
10004a34:	930d      	str	r3, [sp, #52]	; 0x34
10004a36:	3e01      	subs	r6, #1
10004a38:	960e      	str	r6, [sp, #56]	; 0x38
10004a3a:	d504      	bpl.n	10004a46 <_dtoa_r+0x1f2>
10004a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10004a3e:	425b      	negs	r3, r3
10004a40:	930d      	str	r3, [sp, #52]	; 0x34
10004a42:	2300      	movs	r3, #0
10004a44:	930e      	str	r3, [sp, #56]	; 0x38
10004a46:	9b03      	ldr	r3, [sp, #12]
10004a48:	2b00      	cmp	r3, #0
10004a4a:	db08      	blt.n	10004a5e <_dtoa_r+0x20a>
10004a4c:	9a03      	ldr	r2, [sp, #12]
10004a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10004a50:	4694      	mov	ip, r2
10004a52:	4463      	add	r3, ip
10004a54:	930e      	str	r3, [sp, #56]	; 0x38
10004a56:	2300      	movs	r3, #0
10004a58:	9212      	str	r2, [sp, #72]	; 0x48
10004a5a:	930f      	str	r3, [sp, #60]	; 0x3c
10004a5c:	e007      	b.n	10004a6e <_dtoa_r+0x21a>
10004a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10004a60:	9a03      	ldr	r2, [sp, #12]
10004a62:	1a9b      	subs	r3, r3, r2
10004a64:	930d      	str	r3, [sp, #52]	; 0x34
10004a66:	4253      	negs	r3, r2
10004a68:	930f      	str	r3, [sp, #60]	; 0x3c
10004a6a:	2300      	movs	r3, #0
10004a6c:	9312      	str	r3, [sp, #72]	; 0x48
10004a6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
10004a70:	2501      	movs	r5, #1
10004a72:	2b09      	cmp	r3, #9
10004a74:	d827      	bhi.n	10004ac6 <_dtoa_r+0x272>
10004a76:	2b05      	cmp	r3, #5
10004a78:	dd02      	ble.n	10004a80 <_dtoa_r+0x22c>
10004a7a:	2500      	movs	r5, #0
10004a7c:	3b04      	subs	r3, #4
10004a7e:	9320      	str	r3, [sp, #128]	; 0x80
10004a80:	9b20      	ldr	r3, [sp, #128]	; 0x80
10004a82:	1e98      	subs	r0, r3, #2
10004a84:	2803      	cmp	r0, #3
10004a86:	d823      	bhi.n	10004ad0 <_dtoa_r+0x27c>
10004a88:	f001 f866 	bl	10005b58 <__gnu_thumb1_case_uqi>
10004a8c:	10040e02 	.word	0x10040e02
10004a90:	2300      	movs	r3, #0
10004a92:	e000      	b.n	10004a96 <_dtoa_r+0x242>
10004a94:	2301      	movs	r3, #1
10004a96:	9310      	str	r3, [sp, #64]	; 0x40
10004a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
10004a9a:	2b00      	cmp	r3, #0
10004a9c:	dc21      	bgt.n	10004ae2 <_dtoa_r+0x28e>
10004a9e:	2301      	movs	r3, #1
10004aa0:	930b      	str	r3, [sp, #44]	; 0x2c
10004aa2:	9309      	str	r3, [sp, #36]	; 0x24
10004aa4:	1c1a      	adds	r2, r3, #0
10004aa6:	e01a      	b.n	10004ade <_dtoa_r+0x28a>
10004aa8:	2300      	movs	r3, #0
10004aaa:	e000      	b.n	10004aae <_dtoa_r+0x25a>
10004aac:	2301      	movs	r3, #1
10004aae:	9a03      	ldr	r2, [sp, #12]
10004ab0:	9310      	str	r3, [sp, #64]	; 0x40
10004ab2:	4694      	mov	ip, r2
10004ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
10004ab6:	4463      	add	r3, ip
10004ab8:	930b      	str	r3, [sp, #44]	; 0x2c
10004aba:	3301      	adds	r3, #1
10004abc:	9309      	str	r3, [sp, #36]	; 0x24
10004abe:	2b00      	cmp	r3, #0
10004ac0:	dc12      	bgt.n	10004ae8 <_dtoa_r+0x294>
10004ac2:	2301      	movs	r3, #1
10004ac4:	e010      	b.n	10004ae8 <_dtoa_r+0x294>
10004ac6:	2300      	movs	r3, #0
10004ac8:	9510      	str	r5, [sp, #64]	; 0x40
10004aca:	9320      	str	r3, [sp, #128]	; 0x80
10004acc:	3b01      	subs	r3, #1
10004ace:	e002      	b.n	10004ad6 <_dtoa_r+0x282>
10004ad0:	2301      	movs	r3, #1
10004ad2:	9310      	str	r3, [sp, #64]	; 0x40
10004ad4:	3b02      	subs	r3, #2
10004ad6:	2200      	movs	r2, #0
10004ad8:	930b      	str	r3, [sp, #44]	; 0x2c
10004ada:	9309      	str	r3, [sp, #36]	; 0x24
10004adc:	3313      	adds	r3, #19
10004ade:	9221      	str	r2, [sp, #132]	; 0x84
10004ae0:	e002      	b.n	10004ae8 <_dtoa_r+0x294>
10004ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
10004ae4:	930b      	str	r3, [sp, #44]	; 0x2c
10004ae6:	9309      	str	r3, [sp, #36]	; 0x24
10004ae8:	9a08      	ldr	r2, [sp, #32]
10004aea:	6a54      	ldr	r4, [r2, #36]	; 0x24
10004aec:	2200      	movs	r2, #0
10004aee:	6062      	str	r2, [r4, #4]
10004af0:	3204      	adds	r2, #4
10004af2:	1c11      	adds	r1, r2, #0
10004af4:	3114      	adds	r1, #20
10004af6:	4299      	cmp	r1, r3
10004af8:	d804      	bhi.n	10004b04 <_dtoa_r+0x2b0>
10004afa:	6861      	ldr	r1, [r4, #4]
10004afc:	0052      	lsls	r2, r2, #1
10004afe:	3101      	adds	r1, #1
10004b00:	6061      	str	r1, [r4, #4]
10004b02:	e7f6      	b.n	10004af2 <_dtoa_r+0x29e>
10004b04:	9808      	ldr	r0, [sp, #32]
10004b06:	6861      	ldr	r1, [r4, #4]
10004b08:	f000 fcbb 	bl	10005482 <_Balloc>
10004b0c:	9b08      	ldr	r3, [sp, #32]
10004b0e:	6020      	str	r0, [r4, #0]
10004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004b12:	681b      	ldr	r3, [r3, #0]
10004b14:	930c      	str	r3, [sp, #48]	; 0x30
10004b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004b18:	2b0e      	cmp	r3, #14
10004b1a:	d900      	bls.n	10004b1e <_dtoa_r+0x2ca>
10004b1c:	e188      	b.n	10004e30 <_dtoa_r+0x5dc>
10004b1e:	2d00      	cmp	r5, #0
10004b20:	d100      	bne.n	10004b24 <_dtoa_r+0x2d0>
10004b22:	e185      	b.n	10004e30 <_dtoa_r+0x5dc>
10004b24:	9b06      	ldr	r3, [sp, #24]
10004b26:	9c07      	ldr	r4, [sp, #28]
10004b28:	9314      	str	r3, [sp, #80]	; 0x50
10004b2a:	9415      	str	r4, [sp, #84]	; 0x54
10004b2c:	9b03      	ldr	r3, [sp, #12]
10004b2e:	2b00      	cmp	r3, #0
10004b30:	dd30      	ble.n	10004b94 <_dtoa_r+0x340>
10004b32:	220f      	movs	r2, #15
10004b34:	493a      	ldr	r1, [pc, #232]	; (10004c20 <_dtoa_r+0x3cc>)
10004b36:	4013      	ands	r3, r2
10004b38:	00db      	lsls	r3, r3, #3
10004b3a:	18cb      	adds	r3, r1, r3
10004b3c:	685c      	ldr	r4, [r3, #4]
10004b3e:	681b      	ldr	r3, [r3, #0]
10004b40:	9304      	str	r3, [sp, #16]
10004b42:	9405      	str	r4, [sp, #20]
10004b44:	9b03      	ldr	r3, [sp, #12]
10004b46:	2702      	movs	r7, #2
10004b48:	111d      	asrs	r5, r3, #4
10004b4a:	06eb      	lsls	r3, r5, #27
10004b4c:	d50a      	bpl.n	10004b64 <_dtoa_r+0x310>
10004b4e:	9814      	ldr	r0, [sp, #80]	; 0x50
10004b50:	9915      	ldr	r1, [sp, #84]	; 0x54
10004b52:	4b34      	ldr	r3, [pc, #208]	; (10004c24 <_dtoa_r+0x3d0>)
10004b54:	4015      	ands	r5, r2
10004b56:	6a1a      	ldr	r2, [r3, #32]
10004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004b5a:	f001 fb6d 	bl	10006238 <__aeabi_ddiv>
10004b5e:	9006      	str	r0, [sp, #24]
10004b60:	9107      	str	r1, [sp, #28]
10004b62:	3701      	adds	r7, #1
10004b64:	4c2f      	ldr	r4, [pc, #188]	; (10004c24 <_dtoa_r+0x3d0>)
10004b66:	2d00      	cmp	r5, #0
10004b68:	d00d      	beq.n	10004b86 <_dtoa_r+0x332>
10004b6a:	07eb      	lsls	r3, r5, #31
10004b6c:	d508      	bpl.n	10004b80 <_dtoa_r+0x32c>
10004b6e:	9804      	ldr	r0, [sp, #16]
10004b70:	9905      	ldr	r1, [sp, #20]
10004b72:	6822      	ldr	r2, [r4, #0]
10004b74:	6863      	ldr	r3, [r4, #4]
10004b76:	f001 ff9d 	bl	10006ab4 <__aeabi_dmul>
10004b7a:	9004      	str	r0, [sp, #16]
10004b7c:	9105      	str	r1, [sp, #20]
10004b7e:	3701      	adds	r7, #1
10004b80:	106d      	asrs	r5, r5, #1
10004b82:	3408      	adds	r4, #8
10004b84:	e7ef      	b.n	10004b66 <_dtoa_r+0x312>
10004b86:	9806      	ldr	r0, [sp, #24]
10004b88:	9907      	ldr	r1, [sp, #28]
10004b8a:	9a04      	ldr	r2, [sp, #16]
10004b8c:	9b05      	ldr	r3, [sp, #20]
10004b8e:	f001 fb53 	bl	10006238 <__aeabi_ddiv>
10004b92:	e049      	b.n	10004c28 <_dtoa_r+0x3d4>
10004b94:	9b03      	ldr	r3, [sp, #12]
10004b96:	2702      	movs	r7, #2
10004b98:	425d      	negs	r5, r3
10004b9a:	2d00      	cmp	r5, #0
10004b9c:	d046      	beq.n	10004c2c <_dtoa_r+0x3d8>
10004b9e:	9814      	ldr	r0, [sp, #80]	; 0x50
10004ba0:	9915      	ldr	r1, [sp, #84]	; 0x54
10004ba2:	230f      	movs	r3, #15
10004ba4:	4a1e      	ldr	r2, [pc, #120]	; (10004c20 <_dtoa_r+0x3cc>)
10004ba6:	402b      	ands	r3, r5
10004ba8:	00db      	lsls	r3, r3, #3
10004baa:	18d3      	adds	r3, r2, r3
10004bac:	681a      	ldr	r2, [r3, #0]
10004bae:	685b      	ldr	r3, [r3, #4]
10004bb0:	f001 ff80 	bl	10006ab4 <__aeabi_dmul>
10004bb4:	4c1b      	ldr	r4, [pc, #108]	; (10004c24 <_dtoa_r+0x3d0>)
10004bb6:	112d      	asrs	r5, r5, #4
10004bb8:	2d00      	cmp	r5, #0
10004bba:	d035      	beq.n	10004c28 <_dtoa_r+0x3d4>
10004bbc:	07eb      	lsls	r3, r5, #31
10004bbe:	d504      	bpl.n	10004bca <_dtoa_r+0x376>
10004bc0:	6822      	ldr	r2, [r4, #0]
10004bc2:	6863      	ldr	r3, [r4, #4]
10004bc4:	3701      	adds	r7, #1
10004bc6:	f001 ff75 	bl	10006ab4 <__aeabi_dmul>
10004bca:	106d      	asrs	r5, r5, #1
10004bcc:	3408      	adds	r4, #8
10004bce:	e7f3      	b.n	10004bb8 <_dtoa_r+0x364>
10004bd0:	7ff00000 	.word	0x7ff00000
10004bd4:	0000270f 	.word	0x0000270f
10004bd8:	100079d5 	.word	0x100079d5
10004bdc:	100079cc 	.word	0x100079cc
10004be0:	100079ca 	.word	0x100079ca
10004be4:	100079cb 	.word	0x100079cb
10004be8:	3ff00000 	.word	0x3ff00000
10004bec:	fffffc01 	.word	0xfffffc01
10004bf0:	fffffbef 	.word	0xfffffbef
10004bf4:	00000412 	.word	0x00000412
10004bf8:	fffffc0e 	.word	0xfffffc0e
10004bfc:	fffffbee 	.word	0xfffffbee
10004c00:	fe100000 	.word	0xfe100000
10004c04:	3ff80000 	.word	0x3ff80000
10004c08:	636f4361 	.word	0x636f4361
10004c0c:	3fd287a7 	.word	0x3fd287a7
10004c10:	8b60c8b3 	.word	0x8b60c8b3
10004c14:	3fc68a28 	.word	0x3fc68a28
10004c18:	509f79fb 	.word	0x509f79fb
10004c1c:	3fd34413 	.word	0x3fd34413
10004c20:	100079e8 	.word	0x100079e8
10004c24:	10007ab0 	.word	0x10007ab0
10004c28:	9006      	str	r0, [sp, #24]
10004c2a:	9107      	str	r1, [sp, #28]
10004c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10004c2e:	2b00      	cmp	r3, #0
10004c30:	d01e      	beq.n	10004c70 <_dtoa_r+0x41c>
10004c32:	9c06      	ldr	r4, [sp, #24]
10004c34:	9d07      	ldr	r5, [sp, #28]
10004c36:	2200      	movs	r2, #0
10004c38:	1c20      	adds	r0, r4, #0
10004c3a:	1c29      	adds	r1, r5, #0
10004c3c:	4bce      	ldr	r3, [pc, #824]	; (10004f78 <_dtoa_r+0x724>)
10004c3e:	f000 ffab 	bl	10005b98 <__aeabi_dcmplt>
10004c42:	2800      	cmp	r0, #0
10004c44:	d014      	beq.n	10004c70 <_dtoa_r+0x41c>
10004c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004c48:	2b00      	cmp	r3, #0
10004c4a:	d011      	beq.n	10004c70 <_dtoa_r+0x41c>
10004c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10004c4e:	2b00      	cmp	r3, #0
10004c50:	dc00      	bgt.n	10004c54 <_dtoa_r+0x400>
10004c52:	e0e9      	b.n	10004e28 <_dtoa_r+0x5d4>
10004c54:	9b03      	ldr	r3, [sp, #12]
10004c56:	1c29      	adds	r1, r5, #0
10004c58:	3b01      	subs	r3, #1
10004c5a:	9311      	str	r3, [sp, #68]	; 0x44
10004c5c:	1c20      	adds	r0, r4, #0
10004c5e:	2200      	movs	r2, #0
10004c60:	4bc6      	ldr	r3, [pc, #792]	; (10004f7c <_dtoa_r+0x728>)
10004c62:	f001 ff27 	bl	10006ab4 <__aeabi_dmul>
10004c66:	3701      	adds	r7, #1
10004c68:	9006      	str	r0, [sp, #24]
10004c6a:	9107      	str	r1, [sp, #28]
10004c6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10004c6e:	e002      	b.n	10004c76 <_dtoa_r+0x422>
10004c70:	9b03      	ldr	r3, [sp, #12]
10004c72:	9d09      	ldr	r5, [sp, #36]	; 0x24
10004c74:	9311      	str	r3, [sp, #68]	; 0x44
10004c76:	1c38      	adds	r0, r7, #0
10004c78:	9b06      	ldr	r3, [sp, #24]
10004c7a:	9c07      	ldr	r4, [sp, #28]
10004c7c:	9304      	str	r3, [sp, #16]
10004c7e:	9405      	str	r4, [sp, #20]
10004c80:	f002 fd62 	bl	10007748 <__aeabi_i2d>
10004c84:	9a04      	ldr	r2, [sp, #16]
10004c86:	9b05      	ldr	r3, [sp, #20]
10004c88:	f001 ff14 	bl	10006ab4 <__aeabi_dmul>
10004c8c:	2200      	movs	r2, #0
10004c8e:	4bbc      	ldr	r3, [pc, #752]	; (10004f80 <_dtoa_r+0x72c>)
10004c90:	f000 ffaa 	bl	10005be8 <__aeabi_dadd>
10004c94:	9006      	str	r0, [sp, #24]
10004c96:	9107      	str	r1, [sp, #28]
10004c98:	9e06      	ldr	r6, [sp, #24]
10004c9a:	9f07      	ldr	r7, [sp, #28]
10004c9c:	9b07      	ldr	r3, [sp, #28]
10004c9e:	4ab9      	ldr	r2, [pc, #740]	; (10004f84 <_dtoa_r+0x730>)
10004ca0:	189c      	adds	r4, r3, r2
10004ca2:	2d00      	cmp	r5, #0
10004ca4:	d11c      	bne.n	10004ce0 <_dtoa_r+0x48c>
10004ca6:	9804      	ldr	r0, [sp, #16]
10004ca8:	9905      	ldr	r1, [sp, #20]
10004caa:	2200      	movs	r2, #0
10004cac:	4bb6      	ldr	r3, [pc, #728]	; (10004f88 <_dtoa_r+0x734>)
10004cae:	f002 f99b 	bl	10006fe8 <__aeabi_dsub>
10004cb2:	1c32      	adds	r2, r6, #0
10004cb4:	1c23      	adds	r3, r4, #0
10004cb6:	9004      	str	r0, [sp, #16]
10004cb8:	9105      	str	r1, [sp, #20]
10004cba:	f000 ff81 	bl	10005bc0 <__aeabi_dcmpgt>
10004cbe:	2800      	cmp	r0, #0
10004cc0:	d000      	beq.n	10004cc4 <_dtoa_r+0x470>
10004cc2:	e263      	b.n	1000518c <_dtoa_r+0x938>
10004cc4:	9804      	ldr	r0, [sp, #16]
10004cc6:	9905      	ldr	r1, [sp, #20]
10004cc8:	1c32      	adds	r2, r6, #0
10004cca:	4eb0      	ldr	r6, [pc, #704]	; (10004f8c <_dtoa_r+0x738>)
10004ccc:	9c07      	ldr	r4, [sp, #28]
10004cce:	46b4      	mov	ip, r6
10004cd0:	4464      	add	r4, ip
10004cd2:	1c23      	adds	r3, r4, #0
10004cd4:	f000 ff60 	bl	10005b98 <__aeabi_dcmplt>
10004cd8:	2800      	cmp	r0, #0
10004cda:	d000      	beq.n	10004cde <_dtoa_r+0x48a>
10004cdc:	e24c      	b.n	10005178 <_dtoa_r+0x924>
10004cde:	e0a3      	b.n	10004e28 <_dtoa_r+0x5d4>
10004ce0:	4aab      	ldr	r2, [pc, #684]	; (10004f90 <_dtoa_r+0x73c>)
10004ce2:	1e6b      	subs	r3, r5, #1
10004ce4:	9910      	ldr	r1, [sp, #64]	; 0x40
10004ce6:	00db      	lsls	r3, r3, #3
10004ce8:	18d3      	adds	r3, r2, r3
10004cea:	2900      	cmp	r1, #0
10004cec:	d04e      	beq.n	10004d8c <_dtoa_r+0x538>
10004cee:	681a      	ldr	r2, [r3, #0]
10004cf0:	685b      	ldr	r3, [r3, #4]
10004cf2:	2000      	movs	r0, #0
10004cf4:	49a7      	ldr	r1, [pc, #668]	; (10004f94 <_dtoa_r+0x740>)
10004cf6:	f001 fa9f 	bl	10006238 <__aeabi_ddiv>
10004cfa:	1c32      	adds	r2, r6, #0
10004cfc:	1c23      	adds	r3, r4, #0
10004cfe:	f002 f973 	bl	10006fe8 <__aeabi_dsub>
10004d02:	9e04      	ldr	r6, [sp, #16]
10004d04:	9f05      	ldr	r7, [sp, #20]
10004d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004d08:	9006      	str	r0, [sp, #24]
10004d0a:	9107      	str	r1, [sp, #28]
10004d0c:	9304      	str	r3, [sp, #16]
10004d0e:	1c39      	adds	r1, r7, #0
10004d10:	1c30      	adds	r0, r6, #0
10004d12:	f002 fce3 	bl	100076dc <__aeabi_d2iz>
10004d16:	1c04      	adds	r4, r0, #0
10004d18:	f002 fd16 	bl	10007748 <__aeabi_i2d>
10004d1c:	1c02      	adds	r2, r0, #0
10004d1e:	1c0b      	adds	r3, r1, #0
10004d20:	1c30      	adds	r0, r6, #0
10004d22:	1c39      	adds	r1, r7, #0
10004d24:	f002 f960 	bl	10006fe8 <__aeabi_dsub>
10004d28:	9b04      	ldr	r3, [sp, #16]
10004d2a:	3430      	adds	r4, #48	; 0x30
10004d2c:	3301      	adds	r3, #1
10004d2e:	9304      	str	r3, [sp, #16]
10004d30:	3b01      	subs	r3, #1
10004d32:	701c      	strb	r4, [r3, #0]
10004d34:	9a06      	ldr	r2, [sp, #24]
10004d36:	9b07      	ldr	r3, [sp, #28]
10004d38:	1c06      	adds	r6, r0, #0
10004d3a:	1c0f      	adds	r7, r1, #0
10004d3c:	f000 ff2c 	bl	10005b98 <__aeabi_dcmplt>
10004d40:	2800      	cmp	r0, #0
10004d42:	d000      	beq.n	10004d46 <_dtoa_r+0x4f2>
10004d44:	e361      	b.n	1000540a <_dtoa_r+0xbb6>
10004d46:	1c32      	adds	r2, r6, #0
10004d48:	1c3b      	adds	r3, r7, #0
10004d4a:	2000      	movs	r0, #0
10004d4c:	498a      	ldr	r1, [pc, #552]	; (10004f78 <_dtoa_r+0x724>)
10004d4e:	f002 f94b 	bl	10006fe8 <__aeabi_dsub>
10004d52:	9a06      	ldr	r2, [sp, #24]
10004d54:	9b07      	ldr	r3, [sp, #28]
10004d56:	f000 ff1f 	bl	10005b98 <__aeabi_dcmplt>
10004d5a:	2800      	cmp	r0, #0
10004d5c:	d000      	beq.n	10004d60 <_dtoa_r+0x50c>
10004d5e:	e0cd      	b.n	10004efc <_dtoa_r+0x6a8>
10004d60:	9b04      	ldr	r3, [sp, #16]
10004d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10004d64:	1a9b      	subs	r3, r3, r2
10004d66:	42ab      	cmp	r3, r5
10004d68:	da5e      	bge.n	10004e28 <_dtoa_r+0x5d4>
10004d6a:	9806      	ldr	r0, [sp, #24]
10004d6c:	9907      	ldr	r1, [sp, #28]
10004d6e:	2200      	movs	r2, #0
10004d70:	4b82      	ldr	r3, [pc, #520]	; (10004f7c <_dtoa_r+0x728>)
10004d72:	f001 fe9f 	bl	10006ab4 <__aeabi_dmul>
10004d76:	2200      	movs	r2, #0
10004d78:	9006      	str	r0, [sp, #24]
10004d7a:	9107      	str	r1, [sp, #28]
10004d7c:	4b7f      	ldr	r3, [pc, #508]	; (10004f7c <_dtoa_r+0x728>)
10004d7e:	1c30      	adds	r0, r6, #0
10004d80:	1c39      	adds	r1, r7, #0
10004d82:	f001 fe97 	bl	10006ab4 <__aeabi_dmul>
10004d86:	1c06      	adds	r6, r0, #0
10004d88:	1c0f      	adds	r7, r1, #0
10004d8a:	e7c0      	b.n	10004d0e <_dtoa_r+0x4ba>
10004d8c:	6818      	ldr	r0, [r3, #0]
10004d8e:	6859      	ldr	r1, [r3, #4]
10004d90:	1c32      	adds	r2, r6, #0
10004d92:	1c23      	adds	r3, r4, #0
10004d94:	f001 fe8e 	bl	10006ab4 <__aeabi_dmul>
10004d98:	9e04      	ldr	r6, [sp, #16]
10004d9a:	9f05      	ldr	r7, [sp, #20]
10004d9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10004d9e:	9006      	str	r0, [sp, #24]
10004da0:	9107      	str	r1, [sp, #28]
10004da2:	1963      	adds	r3, r4, r5
10004da4:	9304      	str	r3, [sp, #16]
10004da6:	1c39      	adds	r1, r7, #0
10004da8:	1c30      	adds	r0, r6, #0
10004daa:	f002 fc97 	bl	100076dc <__aeabi_d2iz>
10004dae:	1c05      	adds	r5, r0, #0
10004db0:	f002 fcca 	bl	10007748 <__aeabi_i2d>
10004db4:	1c0b      	adds	r3, r1, #0
10004db6:	1c02      	adds	r2, r0, #0
10004db8:	1c39      	adds	r1, r7, #0
10004dba:	1c30      	adds	r0, r6, #0
10004dbc:	f002 f914 	bl	10006fe8 <__aeabi_dsub>
10004dc0:	3530      	adds	r5, #48	; 0x30
10004dc2:	9b04      	ldr	r3, [sp, #16]
10004dc4:	7025      	strb	r5, [r4, #0]
10004dc6:	3401      	adds	r4, #1
10004dc8:	1c06      	adds	r6, r0, #0
10004dca:	1c0f      	adds	r7, r1, #0
10004dcc:	42a3      	cmp	r3, r4
10004dce:	d124      	bne.n	10004e1a <_dtoa_r+0x5c6>
10004dd0:	2200      	movs	r2, #0
10004dd2:	9806      	ldr	r0, [sp, #24]
10004dd4:	9907      	ldr	r1, [sp, #28]
10004dd6:	4b6f      	ldr	r3, [pc, #444]	; (10004f94 <_dtoa_r+0x740>)
10004dd8:	f000 ff06 	bl	10005be8 <__aeabi_dadd>
10004ddc:	1c02      	adds	r2, r0, #0
10004dde:	1c0b      	adds	r3, r1, #0
10004de0:	1c30      	adds	r0, r6, #0
10004de2:	1c39      	adds	r1, r7, #0
10004de4:	f000 feec 	bl	10005bc0 <__aeabi_dcmpgt>
10004de8:	2800      	cmp	r0, #0
10004dea:	d000      	beq.n	10004dee <_dtoa_r+0x59a>
10004dec:	e086      	b.n	10004efc <_dtoa_r+0x6a8>
10004dee:	9a06      	ldr	r2, [sp, #24]
10004df0:	9b07      	ldr	r3, [sp, #28]
10004df2:	2000      	movs	r0, #0
10004df4:	4967      	ldr	r1, [pc, #412]	; (10004f94 <_dtoa_r+0x740>)
10004df6:	f002 f8f7 	bl	10006fe8 <__aeabi_dsub>
10004dfa:	1c02      	adds	r2, r0, #0
10004dfc:	1c0b      	adds	r3, r1, #0
10004dfe:	1c30      	adds	r0, r6, #0
10004e00:	1c39      	adds	r1, r7, #0
10004e02:	f000 fec9 	bl	10005b98 <__aeabi_dcmplt>
10004e06:	2800      	cmp	r0, #0
10004e08:	d00e      	beq.n	10004e28 <_dtoa_r+0x5d4>
10004e0a:	9b04      	ldr	r3, [sp, #16]
10004e0c:	3b01      	subs	r3, #1
10004e0e:	781a      	ldrb	r2, [r3, #0]
10004e10:	2a30      	cmp	r2, #48	; 0x30
10004e12:	d000      	beq.n	10004e16 <_dtoa_r+0x5c2>
10004e14:	e2f9      	b.n	1000540a <_dtoa_r+0xbb6>
10004e16:	9304      	str	r3, [sp, #16]
10004e18:	e7f7      	b.n	10004e0a <_dtoa_r+0x5b6>
10004e1a:	2200      	movs	r2, #0
10004e1c:	4b57      	ldr	r3, [pc, #348]	; (10004f7c <_dtoa_r+0x728>)
10004e1e:	f001 fe49 	bl	10006ab4 <__aeabi_dmul>
10004e22:	1c06      	adds	r6, r0, #0
10004e24:	1c0f      	adds	r7, r1, #0
10004e26:	e7be      	b.n	10004da6 <_dtoa_r+0x552>
10004e28:	9b14      	ldr	r3, [sp, #80]	; 0x50
10004e2a:	9c15      	ldr	r4, [sp, #84]	; 0x54
10004e2c:	9306      	str	r3, [sp, #24]
10004e2e:	9407      	str	r4, [sp, #28]
10004e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
10004e32:	2b00      	cmp	r3, #0
10004e34:	da00      	bge.n	10004e38 <_dtoa_r+0x5e4>
10004e36:	e086      	b.n	10004f46 <_dtoa_r+0x6f2>
10004e38:	9a03      	ldr	r2, [sp, #12]
10004e3a:	2a0e      	cmp	r2, #14
10004e3c:	dd00      	ble.n	10004e40 <_dtoa_r+0x5ec>
10004e3e:	e082      	b.n	10004f46 <_dtoa_r+0x6f2>
10004e40:	00d3      	lsls	r3, r2, #3
10004e42:	4a53      	ldr	r2, [pc, #332]	; (10004f90 <_dtoa_r+0x73c>)
10004e44:	18d3      	adds	r3, r2, r3
10004e46:	681e      	ldr	r6, [r3, #0]
10004e48:	685f      	ldr	r7, [r3, #4]
10004e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
10004e4c:	2b00      	cmp	r3, #0
10004e4e:	da14      	bge.n	10004e7a <_dtoa_r+0x626>
10004e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004e52:	2b00      	cmp	r3, #0
10004e54:	dc11      	bgt.n	10004e7a <_dtoa_r+0x626>
10004e56:	d000      	beq.n	10004e5a <_dtoa_r+0x606>
10004e58:	e190      	b.n	1000517c <_dtoa_r+0x928>
10004e5a:	1c30      	adds	r0, r6, #0
10004e5c:	1c39      	adds	r1, r7, #0
10004e5e:	2200      	movs	r2, #0
10004e60:	4b49      	ldr	r3, [pc, #292]	; (10004f88 <_dtoa_r+0x734>)
10004e62:	f001 fe27 	bl	10006ab4 <__aeabi_dmul>
10004e66:	9a06      	ldr	r2, [sp, #24]
10004e68:	9b07      	ldr	r3, [sp, #28]
10004e6a:	f000 feb3 	bl	10005bd4 <__aeabi_dcmpge>
10004e6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
10004e70:	1c3e      	adds	r6, r7, #0
10004e72:	2800      	cmp	r0, #0
10004e74:	d000      	beq.n	10004e78 <_dtoa_r+0x624>
10004e76:	e183      	b.n	10005180 <_dtoa_r+0x92c>
10004e78:	e18c      	b.n	10005194 <_dtoa_r+0x940>
10004e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004e7c:	9c06      	ldr	r4, [sp, #24]
10004e7e:	9d07      	ldr	r5, [sp, #28]
10004e80:	9304      	str	r3, [sp, #16]
10004e82:	1c32      	adds	r2, r6, #0
10004e84:	1c3b      	adds	r3, r7, #0
10004e86:	1c20      	adds	r0, r4, #0
10004e88:	1c29      	adds	r1, r5, #0
10004e8a:	f001 f9d5 	bl	10006238 <__aeabi_ddiv>
10004e8e:	f002 fc25 	bl	100076dc <__aeabi_d2iz>
10004e92:	9006      	str	r0, [sp, #24]
10004e94:	f002 fc58 	bl	10007748 <__aeabi_i2d>
10004e98:	1c32      	adds	r2, r6, #0
10004e9a:	1c3b      	adds	r3, r7, #0
10004e9c:	f001 fe0a 	bl	10006ab4 <__aeabi_dmul>
10004ea0:	1c02      	adds	r2, r0, #0
10004ea2:	1c0b      	adds	r3, r1, #0
10004ea4:	1c20      	adds	r0, r4, #0
10004ea6:	1c29      	adds	r1, r5, #0
10004ea8:	f002 f89e 	bl	10006fe8 <__aeabi_dsub>
10004eac:	1c0b      	adds	r3, r1, #0
10004eae:	9904      	ldr	r1, [sp, #16]
10004eb0:	1c02      	adds	r2, r0, #0
10004eb2:	9806      	ldr	r0, [sp, #24]
10004eb4:	3101      	adds	r1, #1
10004eb6:	9104      	str	r1, [sp, #16]
10004eb8:	3030      	adds	r0, #48	; 0x30
10004eba:	3901      	subs	r1, #1
10004ebc:	7008      	strb	r0, [r1, #0]
10004ebe:	980c      	ldr	r0, [sp, #48]	; 0x30
10004ec0:	9904      	ldr	r1, [sp, #16]
10004ec2:	1a09      	subs	r1, r1, r0
10004ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
10004ec6:	4281      	cmp	r1, r0
10004ec8:	d12e      	bne.n	10004f28 <_dtoa_r+0x6d4>
10004eca:	1c10      	adds	r0, r2, #0
10004ecc:	1c19      	adds	r1, r3, #0
10004ece:	f000 fe8b 	bl	10005be8 <__aeabi_dadd>
10004ed2:	1c32      	adds	r2, r6, #0
10004ed4:	1c3b      	adds	r3, r7, #0
10004ed6:	1c04      	adds	r4, r0, #0
10004ed8:	1c0d      	adds	r5, r1, #0
10004eda:	f000 fe71 	bl	10005bc0 <__aeabi_dcmpgt>
10004ede:	2800      	cmp	r0, #0
10004ee0:	d110      	bne.n	10004f04 <_dtoa_r+0x6b0>
10004ee2:	1c20      	adds	r0, r4, #0
10004ee4:	1c29      	adds	r1, r5, #0
10004ee6:	1c32      	adds	r2, r6, #0
10004ee8:	1c3b      	adds	r3, r7, #0
10004eea:	f000 fe4f 	bl	10005b8c <__aeabi_dcmpeq>
10004eee:	2800      	cmp	r0, #0
10004ef0:	d100      	bne.n	10004ef4 <_dtoa_r+0x6a0>
10004ef2:	e28c      	b.n	1000540e <_dtoa_r+0xbba>
10004ef4:	9b06      	ldr	r3, [sp, #24]
10004ef6:	07db      	lsls	r3, r3, #31
10004ef8:	d404      	bmi.n	10004f04 <_dtoa_r+0x6b0>
10004efa:	e288      	b.n	1000540e <_dtoa_r+0xbba>
10004efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
10004efe:	9303      	str	r3, [sp, #12]
10004f00:	e000      	b.n	10004f04 <_dtoa_r+0x6b0>
10004f02:	9304      	str	r3, [sp, #16]
10004f04:	9b04      	ldr	r3, [sp, #16]
10004f06:	3b01      	subs	r3, #1
10004f08:	781a      	ldrb	r2, [r3, #0]
10004f0a:	2a39      	cmp	r2, #57	; 0x39
10004f0c:	d108      	bne.n	10004f20 <_dtoa_r+0x6cc>
10004f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10004f10:	4293      	cmp	r3, r2
10004f12:	d1f6      	bne.n	10004f02 <_dtoa_r+0x6ae>
10004f14:	9b03      	ldr	r3, [sp, #12]
10004f16:	3301      	adds	r3, #1
10004f18:	9303      	str	r3, [sp, #12]
10004f1a:	2330      	movs	r3, #48	; 0x30
10004f1c:	7013      	strb	r3, [r2, #0]
10004f1e:	1c13      	adds	r3, r2, #0
10004f20:	781a      	ldrb	r2, [r3, #0]
10004f22:	3201      	adds	r2, #1
10004f24:	701a      	strb	r2, [r3, #0]
10004f26:	e272      	b.n	1000540e <_dtoa_r+0xbba>
10004f28:	1c10      	adds	r0, r2, #0
10004f2a:	1c19      	adds	r1, r3, #0
10004f2c:	2200      	movs	r2, #0
10004f2e:	4b13      	ldr	r3, [pc, #76]	; (10004f7c <_dtoa_r+0x728>)
10004f30:	f001 fdc0 	bl	10006ab4 <__aeabi_dmul>
10004f34:	2200      	movs	r2, #0
10004f36:	2300      	movs	r3, #0
10004f38:	1c04      	adds	r4, r0, #0
10004f3a:	1c0d      	adds	r5, r1, #0
10004f3c:	f000 fe26 	bl	10005b8c <__aeabi_dcmpeq>
10004f40:	2800      	cmp	r0, #0
10004f42:	d09e      	beq.n	10004e82 <_dtoa_r+0x62e>
10004f44:	e263      	b.n	1000540e <_dtoa_r+0xbba>
10004f46:	9a10      	ldr	r2, [sp, #64]	; 0x40
10004f48:	2a00      	cmp	r2, #0
10004f4a:	d044      	beq.n	10004fd6 <_dtoa_r+0x782>
10004f4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
10004f4e:	2a01      	cmp	r2, #1
10004f50:	dc0b      	bgt.n	10004f6a <_dtoa_r+0x716>
10004f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
10004f54:	2a00      	cmp	r2, #0
10004f56:	d002      	beq.n	10004f5e <_dtoa_r+0x70a>
10004f58:	4a0f      	ldr	r2, [pc, #60]	; (10004f98 <_dtoa_r+0x744>)
10004f5a:	189b      	adds	r3, r3, r2
10004f5c:	e002      	b.n	10004f64 <_dtoa_r+0x710>
10004f5e:	2336      	movs	r3, #54	; 0x36
10004f60:	9a18      	ldr	r2, [sp, #96]	; 0x60
10004f62:	1a9b      	subs	r3, r3, r2
10004f64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
10004f66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10004f68:	e029      	b.n	10004fbe <_dtoa_r+0x76a>
10004f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004f6c:	1e5d      	subs	r5, r3, #1
10004f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004f70:	42ab      	cmp	r3, r5
10004f72:	db13      	blt.n	10004f9c <_dtoa_r+0x748>
10004f74:	1b5d      	subs	r5, r3, r5
10004f76:	e018      	b.n	10004faa <_dtoa_r+0x756>
10004f78:	3ff00000 	.word	0x3ff00000
10004f7c:	40240000 	.word	0x40240000
10004f80:	401c0000 	.word	0x401c0000
10004f84:	fcc00000 	.word	0xfcc00000
10004f88:	40140000 	.word	0x40140000
10004f8c:	7cc00000 	.word	0x7cc00000
10004f90:	100079e8 	.word	0x100079e8
10004f94:	3fe00000 	.word	0x3fe00000
10004f98:	00000433 	.word	0x00000433
10004f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004f9e:	950f      	str	r5, [sp, #60]	; 0x3c
10004fa0:	1aea      	subs	r2, r5, r3
10004fa2:	2500      	movs	r5, #0
10004fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
10004fa6:	189b      	adds	r3, r3, r2
10004fa8:	9312      	str	r3, [sp, #72]	; 0x48
10004faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004fac:	2b00      	cmp	r3, #0
10004fae:	da04      	bge.n	10004fba <_dtoa_r+0x766>
10004fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10004fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
10004fb4:	1a9c      	subs	r4, r3, r2
10004fb6:	2300      	movs	r3, #0
10004fb8:	e001      	b.n	10004fbe <_dtoa_r+0x76a>
10004fba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10004fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004fbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10004fc0:	9808      	ldr	r0, [sp, #32]
10004fc2:	18d2      	adds	r2, r2, r3
10004fc4:	920d      	str	r2, [sp, #52]	; 0x34
10004fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10004fc8:	2101      	movs	r1, #1
10004fca:	18d3      	adds	r3, r2, r3
10004fcc:	930e      	str	r3, [sp, #56]	; 0x38
10004fce:	f000 fb2f 	bl	10005630 <__i2b>
10004fd2:	1c06      	adds	r6, r0, #0
10004fd4:	e002      	b.n	10004fdc <_dtoa_r+0x788>
10004fd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
10004fd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10004fda:	9e10      	ldr	r6, [sp, #64]	; 0x40
10004fdc:	2c00      	cmp	r4, #0
10004fde:	d00c      	beq.n	10004ffa <_dtoa_r+0x7a6>
10004fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10004fe2:	2b00      	cmp	r3, #0
10004fe4:	dd09      	ble.n	10004ffa <_dtoa_r+0x7a6>
10004fe6:	42a3      	cmp	r3, r4
10004fe8:	dd00      	ble.n	10004fec <_dtoa_r+0x798>
10004fea:	1c23      	adds	r3, r4, #0
10004fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10004fee:	1ae4      	subs	r4, r4, r3
10004ff0:	1ad2      	subs	r2, r2, r3
10004ff2:	920d      	str	r2, [sp, #52]	; 0x34
10004ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10004ff6:	1ad3      	subs	r3, r2, r3
10004ff8:	930e      	str	r3, [sp, #56]	; 0x38
10004ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10004ffc:	2b00      	cmp	r3, #0
10004ffe:	dd21      	ble.n	10005044 <_dtoa_r+0x7f0>
10005000:	9b10      	ldr	r3, [sp, #64]	; 0x40
10005002:	2b00      	cmp	r3, #0
10005004:	d018      	beq.n	10005038 <_dtoa_r+0x7e4>
10005006:	2d00      	cmp	r5, #0
10005008:	dd10      	ble.n	1000502c <_dtoa_r+0x7d8>
1000500a:	1c31      	adds	r1, r6, #0
1000500c:	1c2a      	adds	r2, r5, #0
1000500e:	9808      	ldr	r0, [sp, #32]
10005010:	f000 fba4 	bl	1000575c <__pow5mult>
10005014:	1c06      	adds	r6, r0, #0
10005016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10005018:	1c31      	adds	r1, r6, #0
1000501a:	9808      	ldr	r0, [sp, #32]
1000501c:	f000 fb11 	bl	10005642 <__multiply>
10005020:	1c07      	adds	r7, r0, #0
10005022:	990a      	ldr	r1, [sp, #40]	; 0x28
10005024:	9808      	ldr	r0, [sp, #32]
10005026:	f000 fa64 	bl	100054f2 <_Bfree>
1000502a:	970a      	str	r7, [sp, #40]	; 0x28
1000502c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000502e:	1b5a      	subs	r2, r3, r5
10005030:	d008      	beq.n	10005044 <_dtoa_r+0x7f0>
10005032:	9808      	ldr	r0, [sp, #32]
10005034:	990a      	ldr	r1, [sp, #40]	; 0x28
10005036:	e002      	b.n	1000503e <_dtoa_r+0x7ea>
10005038:	9808      	ldr	r0, [sp, #32]
1000503a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000503c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000503e:	f000 fb8d 	bl	1000575c <__pow5mult>
10005042:	900a      	str	r0, [sp, #40]	; 0x28
10005044:	9808      	ldr	r0, [sp, #32]
10005046:	2101      	movs	r1, #1
10005048:	f000 faf2 	bl	10005630 <__i2b>
1000504c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000504e:	1c07      	adds	r7, r0, #0
10005050:	2b00      	cmp	r3, #0
10005052:	dd0a      	ble.n	1000506a <_dtoa_r+0x816>
10005054:	1c39      	adds	r1, r7, #0
10005056:	1c1a      	adds	r2, r3, #0
10005058:	9808      	ldr	r0, [sp, #32]
1000505a:	f000 fb7f 	bl	1000575c <__pow5mult>
1000505e:	9b20      	ldr	r3, [sp, #128]	; 0x80
10005060:	1c07      	adds	r7, r0, #0
10005062:	2500      	movs	r5, #0
10005064:	2b01      	cmp	r3, #1
10005066:	dc1b      	bgt.n	100050a0 <_dtoa_r+0x84c>
10005068:	e003      	b.n	10005072 <_dtoa_r+0x81e>
1000506a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000506c:	2500      	movs	r5, #0
1000506e:	2b01      	cmp	r3, #1
10005070:	dc12      	bgt.n	10005098 <_dtoa_r+0x844>
10005072:	2500      	movs	r5, #0
10005074:	9b06      	ldr	r3, [sp, #24]
10005076:	42ab      	cmp	r3, r5
10005078:	d10e      	bne.n	10005098 <_dtoa_r+0x844>
1000507a:	9b07      	ldr	r3, [sp, #28]
1000507c:	031b      	lsls	r3, r3, #12
1000507e:	42ab      	cmp	r3, r5
10005080:	d10a      	bne.n	10005098 <_dtoa_r+0x844>
10005082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10005084:	9a07      	ldr	r2, [sp, #28]
10005086:	4213      	tst	r3, r2
10005088:	d006      	beq.n	10005098 <_dtoa_r+0x844>
1000508a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000508c:	3501      	adds	r5, #1
1000508e:	3301      	adds	r3, #1
10005090:	930d      	str	r3, [sp, #52]	; 0x34
10005092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10005094:	3301      	adds	r3, #1
10005096:	930e      	str	r3, [sp, #56]	; 0x38
10005098:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000509a:	2001      	movs	r0, #1
1000509c:	2b00      	cmp	r3, #0
1000509e:	d008      	beq.n	100050b2 <_dtoa_r+0x85e>
100050a0:	693b      	ldr	r3, [r7, #16]
100050a2:	3303      	adds	r3, #3
100050a4:	009b      	lsls	r3, r3, #2
100050a6:	18fb      	adds	r3, r7, r3
100050a8:	6858      	ldr	r0, [r3, #4]
100050aa:	f000 fa77 	bl	1000559c <__hi0bits>
100050ae:	2320      	movs	r3, #32
100050b0:	1a18      	subs	r0, r3, r0
100050b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100050b4:	18c0      	adds	r0, r0, r3
100050b6:	231f      	movs	r3, #31
100050b8:	4018      	ands	r0, r3
100050ba:	d009      	beq.n	100050d0 <_dtoa_r+0x87c>
100050bc:	3301      	adds	r3, #1
100050be:	1a1b      	subs	r3, r3, r0
100050c0:	2b04      	cmp	r3, #4
100050c2:	dd02      	ble.n	100050ca <_dtoa_r+0x876>
100050c4:	231c      	movs	r3, #28
100050c6:	1a18      	subs	r0, r3, r0
100050c8:	e003      	b.n	100050d2 <_dtoa_r+0x87e>
100050ca:	2b04      	cmp	r3, #4
100050cc:	d008      	beq.n	100050e0 <_dtoa_r+0x88c>
100050ce:	1c18      	adds	r0, r3, #0
100050d0:	301c      	adds	r0, #28
100050d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100050d4:	1824      	adds	r4, r4, r0
100050d6:	181b      	adds	r3, r3, r0
100050d8:	930d      	str	r3, [sp, #52]	; 0x34
100050da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100050dc:	181b      	adds	r3, r3, r0
100050de:	930e      	str	r3, [sp, #56]	; 0x38
100050e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100050e2:	2b00      	cmp	r3, #0
100050e4:	dd05      	ble.n	100050f2 <_dtoa_r+0x89e>
100050e6:	9808      	ldr	r0, [sp, #32]
100050e8:	990a      	ldr	r1, [sp, #40]	; 0x28
100050ea:	1c1a      	adds	r2, r3, #0
100050ec:	f000 fb88 	bl	10005800 <__lshift>
100050f0:	900a      	str	r0, [sp, #40]	; 0x28
100050f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100050f4:	2b00      	cmp	r3, #0
100050f6:	dd05      	ble.n	10005104 <_dtoa_r+0x8b0>
100050f8:	1c39      	adds	r1, r7, #0
100050fa:	9808      	ldr	r0, [sp, #32]
100050fc:	1c1a      	adds	r2, r3, #0
100050fe:	f000 fb7f 	bl	10005800 <__lshift>
10005102:	1c07      	adds	r7, r0, #0
10005104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10005106:	2b00      	cmp	r3, #0
10005108:	d01e      	beq.n	10005148 <_dtoa_r+0x8f4>
1000510a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000510c:	1c39      	adds	r1, r7, #0
1000510e:	f000 fbc9 	bl	100058a4 <__mcmp>
10005112:	2800      	cmp	r0, #0
10005114:	da18      	bge.n	10005148 <_dtoa_r+0x8f4>
10005116:	9b03      	ldr	r3, [sp, #12]
10005118:	9808      	ldr	r0, [sp, #32]
1000511a:	3b01      	subs	r3, #1
1000511c:	9303      	str	r3, [sp, #12]
1000511e:	990a      	ldr	r1, [sp, #40]	; 0x28
10005120:	2300      	movs	r3, #0
10005122:	220a      	movs	r2, #10
10005124:	f000 f9fe 	bl	10005524 <__multadd>
10005128:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000512a:	900a      	str	r0, [sp, #40]	; 0x28
1000512c:	2b00      	cmp	r3, #0
1000512e:	d100      	bne.n	10005132 <_dtoa_r+0x8de>
10005130:	e17f      	b.n	10005432 <_dtoa_r+0xbde>
10005132:	1c31      	adds	r1, r6, #0
10005134:	2300      	movs	r3, #0
10005136:	9808      	ldr	r0, [sp, #32]
10005138:	220a      	movs	r2, #10
1000513a:	f000 f9f3 	bl	10005524 <__multadd>
1000513e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10005140:	1c06      	adds	r6, r0, #0
10005142:	2b00      	cmp	r3, #0
10005144:	dc3c      	bgt.n	100051c0 <_dtoa_r+0x96c>
10005146:	e17d      	b.n	10005444 <_dtoa_r+0xbf0>
10005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000514a:	2b00      	cmp	r3, #0
1000514c:	dc2e      	bgt.n	100051ac <_dtoa_r+0x958>
1000514e:	9b20      	ldr	r3, [sp, #128]	; 0x80
10005150:	2b02      	cmp	r3, #2
10005152:	dd2b      	ble.n	100051ac <_dtoa_r+0x958>
10005154:	9b09      	ldr	r3, [sp, #36]	; 0x24
10005156:	930b      	str	r3, [sp, #44]	; 0x2c
10005158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000515a:	2b00      	cmp	r3, #0
1000515c:	d110      	bne.n	10005180 <_dtoa_r+0x92c>
1000515e:	1c39      	adds	r1, r7, #0
10005160:	9808      	ldr	r0, [sp, #32]
10005162:	2205      	movs	r2, #5
10005164:	f000 f9de 	bl	10005524 <__multadd>
10005168:	1c07      	adds	r7, r0, #0
1000516a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000516c:	1c39      	adds	r1, r7, #0
1000516e:	f000 fb99 	bl	100058a4 <__mcmp>
10005172:	2800      	cmp	r0, #0
10005174:	dc0e      	bgt.n	10005194 <_dtoa_r+0x940>
10005176:	e003      	b.n	10005180 <_dtoa_r+0x92c>
10005178:	1c2f      	adds	r7, r5, #0
1000517a:	e000      	b.n	1000517e <_dtoa_r+0x92a>
1000517c:	2700      	movs	r7, #0
1000517e:	1c3e      	adds	r6, r7, #0
10005180:	9b21      	ldr	r3, [sp, #132]	; 0x84
10005182:	43db      	mvns	r3, r3
10005184:	9303      	str	r3, [sp, #12]
10005186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10005188:	9304      	str	r3, [sp, #16]
1000518a:	e00c      	b.n	100051a6 <_dtoa_r+0x952>
1000518c:	1c2f      	adds	r7, r5, #0
1000518e:	1c2e      	adds	r6, r5, #0
10005190:	9b11      	ldr	r3, [sp, #68]	; 0x44
10005192:	9303      	str	r3, [sp, #12]
10005194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10005196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10005198:	3301      	adds	r3, #1
1000519a:	9304      	str	r3, [sp, #16]
1000519c:	2331      	movs	r3, #49	; 0x31
1000519e:	7013      	strb	r3, [r2, #0]
100051a0:	9b03      	ldr	r3, [sp, #12]
100051a2:	3301      	adds	r3, #1
100051a4:	9303      	str	r3, [sp, #12]
100051a6:	9609      	str	r6, [sp, #36]	; 0x24
100051a8:	2600      	movs	r6, #0
100051aa:	e11a      	b.n	100053e2 <_dtoa_r+0xb8e>
100051ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
100051ae:	2b00      	cmp	r3, #0
100051b0:	d104      	bne.n	100051bc <_dtoa_r+0x968>
100051b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100051b4:	930b      	str	r3, [sp, #44]	; 0x2c
100051b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
100051b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100051ba:	e0d0      	b.n	1000535e <_dtoa_r+0xb0a>
100051bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
100051be:	930b      	str	r3, [sp, #44]	; 0x2c
100051c0:	2c00      	cmp	r4, #0
100051c2:	dd05      	ble.n	100051d0 <_dtoa_r+0x97c>
100051c4:	1c31      	adds	r1, r6, #0
100051c6:	9808      	ldr	r0, [sp, #32]
100051c8:	1c22      	adds	r2, r4, #0
100051ca:	f000 fb19 	bl	10005800 <__lshift>
100051ce:	1c06      	adds	r6, r0, #0
100051d0:	9609      	str	r6, [sp, #36]	; 0x24
100051d2:	2d00      	cmp	r5, #0
100051d4:	d012      	beq.n	100051fc <_dtoa_r+0x9a8>
100051d6:	6871      	ldr	r1, [r6, #4]
100051d8:	9808      	ldr	r0, [sp, #32]
100051da:	f000 f952 	bl	10005482 <_Balloc>
100051de:	1c31      	adds	r1, r6, #0
100051e0:	1c04      	adds	r4, r0, #0
100051e2:	6933      	ldr	r3, [r6, #16]
100051e4:	310c      	adds	r1, #12
100051e6:	1c9a      	adds	r2, r3, #2
100051e8:	0092      	lsls	r2, r2, #2
100051ea:	300c      	adds	r0, #12
100051ec:	f000 f940 	bl	10005470 <memcpy>
100051f0:	9808      	ldr	r0, [sp, #32]
100051f2:	1c21      	adds	r1, r4, #0
100051f4:	2201      	movs	r2, #1
100051f6:	f000 fb03 	bl	10005800 <__lshift>
100051fa:	9009      	str	r0, [sp, #36]	; 0x24
100051fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100051fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10005200:	930e      	str	r3, [sp, #56]	; 0x38
10005202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10005204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10005206:	3b01      	subs	r3, #1
10005208:	18d3      	adds	r3, r2, r3
1000520a:	9310      	str	r3, [sp, #64]	; 0x40
1000520c:	1c39      	adds	r1, r7, #0
1000520e:	1c20      	adds	r0, r4, #0
10005210:	f7ff fa99 	bl	10004746 <quorem>
10005214:	1c03      	adds	r3, r0, #0
10005216:	900f      	str	r0, [sp, #60]	; 0x3c
10005218:	3330      	adds	r3, #48	; 0x30
1000521a:	1c31      	adds	r1, r6, #0
1000521c:	1c20      	adds	r0, r4, #0
1000521e:	930d      	str	r3, [sp, #52]	; 0x34
10005220:	f000 fb40 	bl	100058a4 <__mcmp>
10005224:	1c39      	adds	r1, r7, #0
10005226:	900b      	str	r0, [sp, #44]	; 0x2c
10005228:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000522a:	9808      	ldr	r0, [sp, #32]
1000522c:	f000 fb55 	bl	100058da <__mdiff>
10005230:	2301      	movs	r3, #1
10005232:	9304      	str	r3, [sp, #16]
10005234:	68c3      	ldr	r3, [r0, #12]
10005236:	1c05      	adds	r5, r0, #0
10005238:	2b00      	cmp	r3, #0
1000523a:	d104      	bne.n	10005246 <_dtoa_r+0x9f2>
1000523c:	1c20      	adds	r0, r4, #0
1000523e:	1c29      	adds	r1, r5, #0
10005240:	f000 fb30 	bl	100058a4 <__mcmp>
10005244:	9004      	str	r0, [sp, #16]
10005246:	9808      	ldr	r0, [sp, #32]
10005248:	1c29      	adds	r1, r5, #0
1000524a:	f000 f952 	bl	100054f2 <_Bfree>
1000524e:	9b04      	ldr	r3, [sp, #16]
10005250:	9a20      	ldr	r2, [sp, #128]	; 0x80
10005252:	4313      	orrs	r3, r2
10005254:	d110      	bne.n	10005278 <_dtoa_r+0xa24>
10005256:	9a06      	ldr	r2, [sp, #24]
10005258:	3301      	adds	r3, #1
1000525a:	4213      	tst	r3, r2
1000525c:	d10c      	bne.n	10005278 <_dtoa_r+0xa24>
1000525e:	980d      	ldr	r0, [sp, #52]	; 0x34
10005260:	940a      	str	r4, [sp, #40]	; 0x28
10005262:	2839      	cmp	r0, #57	; 0x39
10005264:	d03d      	beq.n	100052e2 <_dtoa_r+0xa8e>
10005266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10005268:	2b00      	cmp	r3, #0
1000526a:	dd01      	ble.n	10005270 <_dtoa_r+0xa1c>
1000526c:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000526e:	3031      	adds	r0, #49	; 0x31
10005270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10005272:	3301      	adds	r3, #1
10005274:	9304      	str	r3, [sp, #16]
10005276:	e03e      	b.n	100052f6 <_dtoa_r+0xaa2>
10005278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000527a:	2b00      	cmp	r3, #0
1000527c:	da05      	bge.n	1000528a <_dtoa_r+0xa36>
1000527e:	9b04      	ldr	r3, [sp, #16]
10005280:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10005282:	940a      	str	r4, [sp, #40]	; 0x28
10005284:	2b00      	cmp	r3, #0
10005286:	dc09      	bgt.n	1000529c <_dtoa_r+0xa48>
10005288:	e01c      	b.n	100052c4 <_dtoa_r+0xa70>
1000528a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000528c:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000528e:	431d      	orrs	r5, r3
10005290:	d11e      	bne.n	100052d0 <_dtoa_r+0xa7c>
10005292:	2301      	movs	r3, #1
10005294:	9a06      	ldr	r2, [sp, #24]
10005296:	4213      	tst	r3, r2
10005298:	d11a      	bne.n	100052d0 <_dtoa_r+0xa7c>
1000529a:	e7f0      	b.n	1000527e <_dtoa_r+0xa2a>
1000529c:	1c21      	adds	r1, r4, #0
1000529e:	9808      	ldr	r0, [sp, #32]
100052a0:	2201      	movs	r2, #1
100052a2:	f000 faad 	bl	10005800 <__lshift>
100052a6:	1c39      	adds	r1, r7, #0
100052a8:	900a      	str	r0, [sp, #40]	; 0x28
100052aa:	f000 fafb 	bl	100058a4 <__mcmp>
100052ae:	2800      	cmp	r0, #0
100052b0:	dc03      	bgt.n	100052ba <_dtoa_r+0xa66>
100052b2:	d107      	bne.n	100052c4 <_dtoa_r+0xa70>
100052b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100052b6:	07db      	lsls	r3, r3, #31
100052b8:	d504      	bpl.n	100052c4 <_dtoa_r+0xa70>
100052ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100052bc:	2b39      	cmp	r3, #57	; 0x39
100052be:	d010      	beq.n	100052e2 <_dtoa_r+0xa8e>
100052c0:	1c1d      	adds	r5, r3, #0
100052c2:	3501      	adds	r5, #1
100052c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100052c6:	3301      	adds	r3, #1
100052c8:	9304      	str	r3, [sp, #16]
100052ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100052cc:	701d      	strb	r5, [r3, #0]
100052ce:	e088      	b.n	100053e2 <_dtoa_r+0xb8e>
100052d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100052d2:	1c5d      	adds	r5, r3, #1
100052d4:	9b04      	ldr	r3, [sp, #16]
100052d6:	2b00      	cmp	r3, #0
100052d8:	dd10      	ble.n	100052fc <_dtoa_r+0xaa8>
100052da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100052dc:	940a      	str	r4, [sp, #40]	; 0x28
100052de:	2b39      	cmp	r3, #57	; 0x39
100052e0:	d106      	bne.n	100052f0 <_dtoa_r+0xa9c>
100052e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100052e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100052e6:	3301      	adds	r3, #1
100052e8:	9304      	str	r3, [sp, #16]
100052ea:	2339      	movs	r3, #57	; 0x39
100052ec:	7013      	strb	r3, [r2, #0]
100052ee:	e060      	b.n	100053b2 <_dtoa_r+0xb5e>
100052f0:	980d      	ldr	r0, [sp, #52]	; 0x34
100052f2:	9504      	str	r5, [sp, #16]
100052f4:	3001      	adds	r0, #1
100052f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100052f8:	7018      	strb	r0, [r3, #0]
100052fa:	e072      	b.n	100053e2 <_dtoa_r+0xb8e>
100052fc:	466a      	mov	r2, sp
100052fe:	2134      	movs	r1, #52	; 0x34
10005300:	1852      	adds	r2, r2, r1
10005302:	7812      	ldrb	r2, [r2, #0]
10005304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10005306:	9504      	str	r5, [sp, #16]
10005308:	701a      	strb	r2, [r3, #0]
1000530a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000530c:	4293      	cmp	r3, r2
1000530e:	d03f      	beq.n	10005390 <_dtoa_r+0xb3c>
10005310:	1c21      	adds	r1, r4, #0
10005312:	220a      	movs	r2, #10
10005314:	2300      	movs	r3, #0
10005316:	9808      	ldr	r0, [sp, #32]
10005318:	f000 f904 	bl	10005524 <__multadd>
1000531c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000531e:	1c04      	adds	r4, r0, #0
10005320:	1c31      	adds	r1, r6, #0
10005322:	9808      	ldr	r0, [sp, #32]
10005324:	220a      	movs	r2, #10
10005326:	429e      	cmp	r6, r3
10005328:	d105      	bne.n	10005336 <_dtoa_r+0xae2>
1000532a:	2300      	movs	r3, #0
1000532c:	f000 f8fa 	bl	10005524 <__multadd>
10005330:	1c06      	adds	r6, r0, #0
10005332:	9009      	str	r0, [sp, #36]	; 0x24
10005334:	e00a      	b.n	1000534c <_dtoa_r+0xaf8>
10005336:	2300      	movs	r3, #0
10005338:	f000 f8f4 	bl	10005524 <__multadd>
1000533c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000533e:	1c06      	adds	r6, r0, #0
10005340:	220a      	movs	r2, #10
10005342:	9808      	ldr	r0, [sp, #32]
10005344:	2300      	movs	r3, #0
10005346:	f000 f8ed 	bl	10005524 <__multadd>
1000534a:	9009      	str	r0, [sp, #36]	; 0x24
1000534c:	950e      	str	r5, [sp, #56]	; 0x38
1000534e:	e75d      	b.n	1000520c <_dtoa_r+0x9b8>
10005350:	1c21      	adds	r1, r4, #0
10005352:	9808      	ldr	r0, [sp, #32]
10005354:	220a      	movs	r2, #10
10005356:	2300      	movs	r3, #0
10005358:	f000 f8e4 	bl	10005524 <__multadd>
1000535c:	1c04      	adds	r4, r0, #0
1000535e:	1c20      	adds	r0, r4, #0
10005360:	1c39      	adds	r1, r7, #0
10005362:	f7ff f9f0 	bl	10004746 <quorem>
10005366:	2234      	movs	r2, #52	; 0x34
10005368:	466b      	mov	r3, sp
1000536a:	3030      	adds	r0, #48	; 0x30
1000536c:	189b      	adds	r3, r3, r2
1000536e:	900d      	str	r0, [sp, #52]	; 0x34
10005370:	781b      	ldrb	r3, [r3, #0]
10005372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10005374:	702b      	strb	r3, [r5, #0]
10005376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10005378:	3501      	adds	r5, #1
1000537a:	1aeb      	subs	r3, r5, r3
1000537c:	4293      	cmp	r3, r2
1000537e:	dbe7      	blt.n	10005350 <_dtoa_r+0xafc>
10005380:	1e13      	subs	r3, r2, #0
10005382:	dc00      	bgt.n	10005386 <_dtoa_r+0xb32>
10005384:	2301      	movs	r3, #1
10005386:	9609      	str	r6, [sp, #36]	; 0x24
10005388:	2600      	movs	r6, #0
1000538a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000538c:	18d3      	adds	r3, r2, r3
1000538e:	9304      	str	r3, [sp, #16]
10005390:	1c21      	adds	r1, r4, #0
10005392:	9808      	ldr	r0, [sp, #32]
10005394:	2201      	movs	r2, #1
10005396:	f000 fa33 	bl	10005800 <__lshift>
1000539a:	1c39      	adds	r1, r7, #0
1000539c:	900a      	str	r0, [sp, #40]	; 0x28
1000539e:	f000 fa81 	bl	100058a4 <__mcmp>
100053a2:	2800      	cmp	r0, #0
100053a4:	dc05      	bgt.n	100053b2 <_dtoa_r+0xb5e>
100053a6:	d115      	bne.n	100053d4 <_dtoa_r+0xb80>
100053a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100053aa:	07db      	lsls	r3, r3, #31
100053ac:	d401      	bmi.n	100053b2 <_dtoa_r+0xb5e>
100053ae:	e011      	b.n	100053d4 <_dtoa_r+0xb80>
100053b0:	9304      	str	r3, [sp, #16]
100053b2:	9b04      	ldr	r3, [sp, #16]
100053b4:	3b01      	subs	r3, #1
100053b6:	781a      	ldrb	r2, [r3, #0]
100053b8:	2a39      	cmp	r2, #57	; 0x39
100053ba:	d108      	bne.n	100053ce <_dtoa_r+0xb7a>
100053bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100053be:	4293      	cmp	r3, r2
100053c0:	d1f6      	bne.n	100053b0 <_dtoa_r+0xb5c>
100053c2:	9b03      	ldr	r3, [sp, #12]
100053c4:	3301      	adds	r3, #1
100053c6:	9303      	str	r3, [sp, #12]
100053c8:	2331      	movs	r3, #49	; 0x31
100053ca:	7013      	strb	r3, [r2, #0]
100053cc:	e009      	b.n	100053e2 <_dtoa_r+0xb8e>
100053ce:	3201      	adds	r2, #1
100053d0:	701a      	strb	r2, [r3, #0]
100053d2:	e006      	b.n	100053e2 <_dtoa_r+0xb8e>
100053d4:	9b04      	ldr	r3, [sp, #16]
100053d6:	3b01      	subs	r3, #1
100053d8:	781a      	ldrb	r2, [r3, #0]
100053da:	2a30      	cmp	r2, #48	; 0x30
100053dc:	d101      	bne.n	100053e2 <_dtoa_r+0xb8e>
100053de:	9304      	str	r3, [sp, #16]
100053e0:	e7f8      	b.n	100053d4 <_dtoa_r+0xb80>
100053e2:	9808      	ldr	r0, [sp, #32]
100053e4:	1c39      	adds	r1, r7, #0
100053e6:	f000 f884 	bl	100054f2 <_Bfree>
100053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
100053ec:	2b00      	cmp	r3, #0
100053ee:	d00e      	beq.n	1000540e <_dtoa_r+0xbba>
100053f0:	2e00      	cmp	r6, #0
100053f2:	d005      	beq.n	10005400 <_dtoa_r+0xbac>
100053f4:	429e      	cmp	r6, r3
100053f6:	d003      	beq.n	10005400 <_dtoa_r+0xbac>
100053f8:	9808      	ldr	r0, [sp, #32]
100053fa:	1c31      	adds	r1, r6, #0
100053fc:	f000 f879 	bl	100054f2 <_Bfree>
10005400:	9808      	ldr	r0, [sp, #32]
10005402:	9909      	ldr	r1, [sp, #36]	; 0x24
10005404:	f000 f875 	bl	100054f2 <_Bfree>
10005408:	e001      	b.n	1000540e <_dtoa_r+0xbba>
1000540a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000540c:	9303      	str	r3, [sp, #12]
1000540e:	9808      	ldr	r0, [sp, #32]
10005410:	990a      	ldr	r1, [sp, #40]	; 0x28
10005412:	f000 f86e 	bl	100054f2 <_Bfree>
10005416:	2300      	movs	r3, #0
10005418:	9a04      	ldr	r2, [sp, #16]
1000541a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000541c:	7013      	strb	r3, [r2, #0]
1000541e:	9b03      	ldr	r3, [sp, #12]
10005420:	9a22      	ldr	r2, [sp, #136]	; 0x88
10005422:	3301      	adds	r3, #1
10005424:	6013      	str	r3, [r2, #0]
10005426:	9b24      	ldr	r3, [sp, #144]	; 0x90
10005428:	2b00      	cmp	r3, #0
1000542a:	d010      	beq.n	1000544e <_dtoa_r+0xbfa>
1000542c:	9a04      	ldr	r2, [sp, #16]
1000542e:	601a      	str	r2, [r3, #0]
10005430:	e00d      	b.n	1000544e <_dtoa_r+0xbfa>
10005432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10005434:	2b00      	cmp	r3, #0
10005436:	dd00      	ble.n	1000543a <_dtoa_r+0xbe6>
10005438:	e6bd      	b.n	100051b6 <_dtoa_r+0x962>
1000543a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000543c:	2b02      	cmp	r3, #2
1000543e:	dd00      	ble.n	10005442 <_dtoa_r+0xbee>
10005440:	e68a      	b.n	10005158 <_dtoa_r+0x904>
10005442:	e6b8      	b.n	100051b6 <_dtoa_r+0x962>
10005444:	9b20      	ldr	r3, [sp, #128]	; 0x80
10005446:	2b02      	cmp	r3, #2
10005448:	dd00      	ble.n	1000544c <_dtoa_r+0xbf8>
1000544a:	e685      	b.n	10005158 <_dtoa_r+0x904>
1000544c:	e6b8      	b.n	100051c0 <_dtoa_r+0x96c>
1000544e:	b01b      	add	sp, #108	; 0x6c
10005450:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005452:	46c0      	nop			; (mov r8, r8)

10005454 <_localeconv_r>:
10005454:	4800      	ldr	r0, [pc, #0]	; (10005458 <_localeconv_r+0x4>)
10005456:	4770      	bx	lr
10005458:	20000608 	.word	0x20000608

1000545c <malloc>:
1000545c:	b508      	push	{r3, lr}
1000545e:	4b03      	ldr	r3, [pc, #12]	; (1000546c <malloc+0x10>)
10005460:	1c01      	adds	r1, r0, #0
10005462:	6818      	ldr	r0, [r3, #0]
10005464:	f000 fb06 	bl	10005a74 <_malloc_r>
10005468:	bd08      	pop	{r3, pc}
1000546a:	46c0      	nop			; (mov r8, r8)
1000546c:	20000604 	.word	0x20000604

10005470 <memcpy>:
10005470:	2300      	movs	r3, #0
10005472:	b510      	push	{r4, lr}
10005474:	4293      	cmp	r3, r2
10005476:	d003      	beq.n	10005480 <memcpy+0x10>
10005478:	5ccc      	ldrb	r4, [r1, r3]
1000547a:	54c4      	strb	r4, [r0, r3]
1000547c:	3301      	adds	r3, #1
1000547e:	e7f9      	b.n	10005474 <memcpy+0x4>
10005480:	bd10      	pop	{r4, pc}

10005482 <_Balloc>:
10005482:	b570      	push	{r4, r5, r6, lr}
10005484:	6a46      	ldr	r6, [r0, #36]	; 0x24
10005486:	1c04      	adds	r4, r0, #0
10005488:	1c0d      	adds	r5, r1, #0
1000548a:	2e00      	cmp	r6, #0
1000548c:	d107      	bne.n	1000549e <_Balloc+0x1c>
1000548e:	2010      	movs	r0, #16
10005490:	f7ff ffe4 	bl	1000545c <malloc>
10005494:	6260      	str	r0, [r4, #36]	; 0x24
10005496:	6046      	str	r6, [r0, #4]
10005498:	6086      	str	r6, [r0, #8]
1000549a:	6006      	str	r6, [r0, #0]
1000549c:	60c6      	str	r6, [r0, #12]
1000549e:	6a66      	ldr	r6, [r4, #36]	; 0x24
100054a0:	68f3      	ldr	r3, [r6, #12]
100054a2:	2b00      	cmp	r3, #0
100054a4:	d009      	beq.n	100054ba <_Balloc+0x38>
100054a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
100054a8:	00ab      	lsls	r3, r5, #2
100054aa:	68d2      	ldr	r2, [r2, #12]
100054ac:	18d3      	adds	r3, r2, r3
100054ae:	6818      	ldr	r0, [r3, #0]
100054b0:	2800      	cmp	r0, #0
100054b2:	d00e      	beq.n	100054d2 <_Balloc+0x50>
100054b4:	6802      	ldr	r2, [r0, #0]
100054b6:	601a      	str	r2, [r3, #0]
100054b8:	e017      	b.n	100054ea <_Balloc+0x68>
100054ba:	1c20      	adds	r0, r4, #0
100054bc:	2104      	movs	r1, #4
100054be:	2221      	movs	r2, #33	; 0x21
100054c0:	f000 faca 	bl	10005a58 <_calloc_r>
100054c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
100054c6:	60f0      	str	r0, [r6, #12]
100054c8:	68db      	ldr	r3, [r3, #12]
100054ca:	2b00      	cmp	r3, #0
100054cc:	d1eb      	bne.n	100054a6 <_Balloc+0x24>
100054ce:	2000      	movs	r0, #0
100054d0:	e00e      	b.n	100054f0 <_Balloc+0x6e>
100054d2:	2101      	movs	r1, #1
100054d4:	1c0e      	adds	r6, r1, #0
100054d6:	40ae      	lsls	r6, r5
100054d8:	1d72      	adds	r2, r6, #5
100054da:	0092      	lsls	r2, r2, #2
100054dc:	1c20      	adds	r0, r4, #0
100054de:	f000 fabb 	bl	10005a58 <_calloc_r>
100054e2:	2800      	cmp	r0, #0
100054e4:	d0f3      	beq.n	100054ce <_Balloc+0x4c>
100054e6:	6045      	str	r5, [r0, #4]
100054e8:	6086      	str	r6, [r0, #8]
100054ea:	2300      	movs	r3, #0
100054ec:	6103      	str	r3, [r0, #16]
100054ee:	60c3      	str	r3, [r0, #12]
100054f0:	bd70      	pop	{r4, r5, r6, pc}

100054f2 <_Bfree>:
100054f2:	b570      	push	{r4, r5, r6, lr}
100054f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
100054f6:	1c06      	adds	r6, r0, #0
100054f8:	1c0c      	adds	r4, r1, #0
100054fa:	2d00      	cmp	r5, #0
100054fc:	d107      	bne.n	1000550e <_Bfree+0x1c>
100054fe:	2010      	movs	r0, #16
10005500:	f7ff ffac 	bl	1000545c <malloc>
10005504:	6270      	str	r0, [r6, #36]	; 0x24
10005506:	6045      	str	r5, [r0, #4]
10005508:	6085      	str	r5, [r0, #8]
1000550a:	6005      	str	r5, [r0, #0]
1000550c:	60c5      	str	r5, [r0, #12]
1000550e:	2c00      	cmp	r4, #0
10005510:	d007      	beq.n	10005522 <_Bfree+0x30>
10005512:	6a72      	ldr	r2, [r6, #36]	; 0x24
10005514:	6863      	ldr	r3, [r4, #4]
10005516:	68d2      	ldr	r2, [r2, #12]
10005518:	009b      	lsls	r3, r3, #2
1000551a:	18d3      	adds	r3, r2, r3
1000551c:	681a      	ldr	r2, [r3, #0]
1000551e:	6022      	str	r2, [r4, #0]
10005520:	601c      	str	r4, [r3, #0]
10005522:	bd70      	pop	{r4, r5, r6, pc}

10005524 <__multadd>:
10005524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005526:	1c1e      	adds	r6, r3, #0
10005528:	2314      	movs	r3, #20
1000552a:	469c      	mov	ip, r3
1000552c:	1c07      	adds	r7, r0, #0
1000552e:	1c0c      	adds	r4, r1, #0
10005530:	2000      	movs	r0, #0
10005532:	690d      	ldr	r5, [r1, #16]
10005534:	448c      	add	ip, r1
10005536:	4663      	mov	r3, ip
10005538:	8819      	ldrh	r1, [r3, #0]
1000553a:	681b      	ldr	r3, [r3, #0]
1000553c:	4351      	muls	r1, r2
1000553e:	0c1b      	lsrs	r3, r3, #16
10005540:	4353      	muls	r3, r2
10005542:	1989      	adds	r1, r1, r6
10005544:	0c0e      	lsrs	r6, r1, #16
10005546:	18f3      	adds	r3, r6, r3
10005548:	b289      	uxth	r1, r1
1000554a:	0c1e      	lsrs	r6, r3, #16
1000554c:	041b      	lsls	r3, r3, #16
1000554e:	185b      	adds	r3, r3, r1
10005550:	4661      	mov	r1, ip
10005552:	3001      	adds	r0, #1
10005554:	c108      	stmia	r1!, {r3}
10005556:	468c      	mov	ip, r1
10005558:	42a8      	cmp	r0, r5
1000555a:	dbec      	blt.n	10005536 <__multadd+0x12>
1000555c:	2e00      	cmp	r6, #0
1000555e:	d01b      	beq.n	10005598 <__multadd+0x74>
10005560:	68a3      	ldr	r3, [r4, #8]
10005562:	429d      	cmp	r5, r3
10005564:	db12      	blt.n	1000558c <__multadd+0x68>
10005566:	6863      	ldr	r3, [r4, #4]
10005568:	1c38      	adds	r0, r7, #0
1000556a:	1c59      	adds	r1, r3, #1
1000556c:	f7ff ff89 	bl	10005482 <_Balloc>
10005570:	1c21      	adds	r1, r4, #0
10005572:	6923      	ldr	r3, [r4, #16]
10005574:	9001      	str	r0, [sp, #4]
10005576:	1c9a      	adds	r2, r3, #2
10005578:	310c      	adds	r1, #12
1000557a:	0092      	lsls	r2, r2, #2
1000557c:	300c      	adds	r0, #12
1000557e:	f7ff ff77 	bl	10005470 <memcpy>
10005582:	1c21      	adds	r1, r4, #0
10005584:	1c38      	adds	r0, r7, #0
10005586:	f7ff ffb4 	bl	100054f2 <_Bfree>
1000558a:	9c01      	ldr	r4, [sp, #4]
1000558c:	1d2b      	adds	r3, r5, #4
1000558e:	009b      	lsls	r3, r3, #2
10005590:	18e3      	adds	r3, r4, r3
10005592:	3501      	adds	r5, #1
10005594:	605e      	str	r6, [r3, #4]
10005596:	6125      	str	r5, [r4, #16]
10005598:	1c20      	adds	r0, r4, #0
1000559a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000559c <__hi0bits>:
1000559c:	2200      	movs	r2, #0
1000559e:	1c03      	adds	r3, r0, #0
100055a0:	0c01      	lsrs	r1, r0, #16
100055a2:	4291      	cmp	r1, r2
100055a4:	d101      	bne.n	100055aa <__hi0bits+0xe>
100055a6:	0403      	lsls	r3, r0, #16
100055a8:	3210      	adds	r2, #16
100055aa:	0e19      	lsrs	r1, r3, #24
100055ac:	d101      	bne.n	100055b2 <__hi0bits+0x16>
100055ae:	3208      	adds	r2, #8
100055b0:	021b      	lsls	r3, r3, #8
100055b2:	0f19      	lsrs	r1, r3, #28
100055b4:	d101      	bne.n	100055ba <__hi0bits+0x1e>
100055b6:	3204      	adds	r2, #4
100055b8:	011b      	lsls	r3, r3, #4
100055ba:	0f99      	lsrs	r1, r3, #30
100055bc:	d101      	bne.n	100055c2 <__hi0bits+0x26>
100055be:	3202      	adds	r2, #2
100055c0:	009b      	lsls	r3, r3, #2
100055c2:	1c10      	adds	r0, r2, #0
100055c4:	2b00      	cmp	r3, #0
100055c6:	db03      	blt.n	100055d0 <__hi0bits+0x34>
100055c8:	2020      	movs	r0, #32
100055ca:	005b      	lsls	r3, r3, #1
100055cc:	d500      	bpl.n	100055d0 <__hi0bits+0x34>
100055ce:	1c50      	adds	r0, r2, #1
100055d0:	4770      	bx	lr

100055d2 <__lo0bits>:
100055d2:	2207      	movs	r2, #7
100055d4:	6803      	ldr	r3, [r0, #0]
100055d6:	b510      	push	{r4, lr}
100055d8:	1c01      	adds	r1, r0, #0
100055da:	401a      	ands	r2, r3
100055dc:	d00c      	beq.n	100055f8 <__lo0bits+0x26>
100055de:	2401      	movs	r4, #1
100055e0:	2000      	movs	r0, #0
100055e2:	4223      	tst	r3, r4
100055e4:	d123      	bne.n	1000562e <__lo0bits+0x5c>
100055e6:	2202      	movs	r2, #2
100055e8:	4213      	tst	r3, r2
100055ea:	d003      	beq.n	100055f4 <__lo0bits+0x22>
100055ec:	40e3      	lsrs	r3, r4
100055ee:	1c20      	adds	r0, r4, #0
100055f0:	600b      	str	r3, [r1, #0]
100055f2:	e01c      	b.n	1000562e <__lo0bits+0x5c>
100055f4:	089b      	lsrs	r3, r3, #2
100055f6:	e018      	b.n	1000562a <__lo0bits+0x58>
100055f8:	b298      	uxth	r0, r3
100055fa:	2800      	cmp	r0, #0
100055fc:	d101      	bne.n	10005602 <__lo0bits+0x30>
100055fe:	2210      	movs	r2, #16
10005600:	0c1b      	lsrs	r3, r3, #16
10005602:	b2d8      	uxtb	r0, r3
10005604:	2800      	cmp	r0, #0
10005606:	d101      	bne.n	1000560c <__lo0bits+0x3a>
10005608:	3208      	adds	r2, #8
1000560a:	0a1b      	lsrs	r3, r3, #8
1000560c:	0718      	lsls	r0, r3, #28
1000560e:	d101      	bne.n	10005614 <__lo0bits+0x42>
10005610:	3204      	adds	r2, #4
10005612:	091b      	lsrs	r3, r3, #4
10005614:	0798      	lsls	r0, r3, #30
10005616:	d101      	bne.n	1000561c <__lo0bits+0x4a>
10005618:	3202      	adds	r2, #2
1000561a:	089b      	lsrs	r3, r3, #2
1000561c:	07d8      	lsls	r0, r3, #31
1000561e:	d404      	bmi.n	1000562a <__lo0bits+0x58>
10005620:	085b      	lsrs	r3, r3, #1
10005622:	2020      	movs	r0, #32
10005624:	2b00      	cmp	r3, #0
10005626:	d002      	beq.n	1000562e <__lo0bits+0x5c>
10005628:	3201      	adds	r2, #1
1000562a:	1c10      	adds	r0, r2, #0
1000562c:	600b      	str	r3, [r1, #0]
1000562e:	bd10      	pop	{r4, pc}

10005630 <__i2b>:
10005630:	b510      	push	{r4, lr}
10005632:	1c0c      	adds	r4, r1, #0
10005634:	2101      	movs	r1, #1
10005636:	f7ff ff24 	bl	10005482 <_Balloc>
1000563a:	2301      	movs	r3, #1
1000563c:	6144      	str	r4, [r0, #20]
1000563e:	6103      	str	r3, [r0, #16]
10005640:	bd10      	pop	{r4, pc}

10005642 <__multiply>:
10005642:	b5f0      	push	{r4, r5, r6, r7, lr}
10005644:	690b      	ldr	r3, [r1, #16]
10005646:	1c14      	adds	r4, r2, #0
10005648:	6912      	ldr	r2, [r2, #16]
1000564a:	b089      	sub	sp, #36	; 0x24
1000564c:	1c0d      	adds	r5, r1, #0
1000564e:	4293      	cmp	r3, r2
10005650:	da01      	bge.n	10005656 <__multiply+0x14>
10005652:	1c25      	adds	r5, r4, #0
10005654:	1c0c      	adds	r4, r1, #0
10005656:	692f      	ldr	r7, [r5, #16]
10005658:	6926      	ldr	r6, [r4, #16]
1000565a:	68aa      	ldr	r2, [r5, #8]
1000565c:	19bb      	adds	r3, r7, r6
1000565e:	6869      	ldr	r1, [r5, #4]
10005660:	9300      	str	r3, [sp, #0]
10005662:	4293      	cmp	r3, r2
10005664:	dd00      	ble.n	10005668 <__multiply+0x26>
10005666:	3101      	adds	r1, #1
10005668:	f7ff ff0b 	bl	10005482 <_Balloc>
1000566c:	1c01      	adds	r1, r0, #0
1000566e:	9b00      	ldr	r3, [sp, #0]
10005670:	3114      	adds	r1, #20
10005672:	4684      	mov	ip, r0
10005674:	0098      	lsls	r0, r3, #2
10005676:	1c0b      	adds	r3, r1, #0
10005678:	1808      	adds	r0, r1, r0
1000567a:	4283      	cmp	r3, r0
1000567c:	d202      	bcs.n	10005684 <__multiply+0x42>
1000567e:	2200      	movs	r2, #0
10005680:	c304      	stmia	r3!, {r2}
10005682:	e7fa      	b.n	1000567a <__multiply+0x38>
10005684:	3514      	adds	r5, #20
10005686:	00bf      	lsls	r7, r7, #2
10005688:	19eb      	adds	r3, r5, r7
1000568a:	3414      	adds	r4, #20
1000568c:	00b6      	lsls	r6, r6, #2
1000568e:	9304      	str	r3, [sp, #16]
10005690:	19a3      	adds	r3, r4, r6
10005692:	9502      	str	r5, [sp, #8]
10005694:	9306      	str	r3, [sp, #24]
10005696:	9b06      	ldr	r3, [sp, #24]
10005698:	429c      	cmp	r4, r3
1000569a:	d256      	bcs.n	1000574a <__multiply+0x108>
1000569c:	8823      	ldrh	r3, [r4, #0]
1000569e:	9303      	str	r3, [sp, #12]
100056a0:	2b00      	cmp	r3, #0
100056a2:	d022      	beq.n	100056ea <__multiply+0xa8>
100056a4:	1c0e      	adds	r6, r1, #0
100056a6:	2700      	movs	r7, #0
100056a8:	9b02      	ldr	r3, [sp, #8]
100056aa:	9301      	str	r3, [sp, #4]
100056ac:	9b01      	ldr	r3, [sp, #4]
100056ae:	9d03      	ldr	r5, [sp, #12]
100056b0:	cb04      	ldmia	r3!, {r2}
100056b2:	9605      	str	r6, [sp, #20]
100056b4:	9301      	str	r3, [sp, #4]
100056b6:	8833      	ldrh	r3, [r6, #0]
100056b8:	9307      	str	r3, [sp, #28]
100056ba:	b293      	uxth	r3, r2
100056bc:	436b      	muls	r3, r5
100056be:	9d07      	ldr	r5, [sp, #28]
100056c0:	0c12      	lsrs	r2, r2, #16
100056c2:	18eb      	adds	r3, r5, r3
100056c4:	6835      	ldr	r5, [r6, #0]
100056c6:	19db      	adds	r3, r3, r7
100056c8:	0c2f      	lsrs	r7, r5, #16
100056ca:	9d03      	ldr	r5, [sp, #12]
100056cc:	436a      	muls	r2, r5
100056ce:	18ba      	adds	r2, r7, r2
100056d0:	0c1f      	lsrs	r7, r3, #16
100056d2:	19d2      	adds	r2, r2, r7
100056d4:	0c17      	lsrs	r7, r2, #16
100056d6:	b29b      	uxth	r3, r3
100056d8:	0412      	lsls	r2, r2, #16
100056da:	4313      	orrs	r3, r2
100056dc:	c608      	stmia	r6!, {r3}
100056de:	9a01      	ldr	r2, [sp, #4]
100056e0:	9b04      	ldr	r3, [sp, #16]
100056e2:	429a      	cmp	r2, r3
100056e4:	d3e2      	bcc.n	100056ac <__multiply+0x6a>
100056e6:	9b05      	ldr	r3, [sp, #20]
100056e8:	605f      	str	r7, [r3, #4]
100056ea:	6823      	ldr	r3, [r4, #0]
100056ec:	0c1b      	lsrs	r3, r3, #16
100056ee:	9301      	str	r3, [sp, #4]
100056f0:	d021      	beq.n	10005736 <__multiply+0xf4>
100056f2:	2200      	movs	r2, #0
100056f4:	1c0d      	adds	r5, r1, #0
100056f6:	680b      	ldr	r3, [r1, #0]
100056f8:	9f02      	ldr	r7, [sp, #8]
100056fa:	9203      	str	r2, [sp, #12]
100056fc:	883e      	ldrh	r6, [r7, #0]
100056fe:	9a01      	ldr	r2, [sp, #4]
10005700:	b29b      	uxth	r3, r3
10005702:	4356      	muls	r6, r2
10005704:	682a      	ldr	r2, [r5, #0]
10005706:	9505      	str	r5, [sp, #20]
10005708:	0c12      	lsrs	r2, r2, #16
1000570a:	18b2      	adds	r2, r6, r2
1000570c:	9e03      	ldr	r6, [sp, #12]
1000570e:	1992      	adds	r2, r2, r6
10005710:	0416      	lsls	r6, r2, #16
10005712:	4333      	orrs	r3, r6
10005714:	602b      	str	r3, [r5, #0]
10005716:	cf08      	ldmia	r7!, {r3}
10005718:	9e01      	ldr	r6, [sp, #4]
1000571a:	0c1b      	lsrs	r3, r3, #16
1000571c:	4373      	muls	r3, r6
1000571e:	88ae      	ldrh	r6, [r5, #4]
10005720:	0c12      	lsrs	r2, r2, #16
10005722:	199b      	adds	r3, r3, r6
10005724:	189b      	adds	r3, r3, r2
10005726:	0c1a      	lsrs	r2, r3, #16
10005728:	9203      	str	r2, [sp, #12]
1000572a:	9a04      	ldr	r2, [sp, #16]
1000572c:	3504      	adds	r5, #4
1000572e:	42ba      	cmp	r2, r7
10005730:	d8e4      	bhi.n	100056fc <__multiply+0xba>
10005732:	9a05      	ldr	r2, [sp, #20]
10005734:	6053      	str	r3, [r2, #4]
10005736:	3404      	adds	r4, #4
10005738:	3104      	adds	r1, #4
1000573a:	e7ac      	b.n	10005696 <__multiply+0x54>
1000573c:	3804      	subs	r0, #4
1000573e:	6803      	ldr	r3, [r0, #0]
10005740:	2b00      	cmp	r3, #0
10005742:	d105      	bne.n	10005750 <__multiply+0x10e>
10005744:	9b00      	ldr	r3, [sp, #0]
10005746:	3b01      	subs	r3, #1
10005748:	9300      	str	r3, [sp, #0]
1000574a:	9b00      	ldr	r3, [sp, #0]
1000574c:	2b00      	cmp	r3, #0
1000574e:	dcf5      	bgt.n	1000573c <__multiply+0xfa>
10005750:	4663      	mov	r3, ip
10005752:	4660      	mov	r0, ip
10005754:	9a00      	ldr	r2, [sp, #0]
10005756:	611a      	str	r2, [r3, #16]
10005758:	b009      	add	sp, #36	; 0x24
1000575a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000575c <__pow5mult>:
1000575c:	2303      	movs	r3, #3
1000575e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005760:	4013      	ands	r3, r2
10005762:	1c05      	adds	r5, r0, #0
10005764:	1c0e      	adds	r6, r1, #0
10005766:	1c14      	adds	r4, r2, #0
10005768:	2b00      	cmp	r3, #0
1000576a:	d007      	beq.n	1000577c <__pow5mult+0x20>
1000576c:	4a22      	ldr	r2, [pc, #136]	; (100057f8 <__pow5mult+0x9c>)
1000576e:	3b01      	subs	r3, #1
10005770:	009b      	lsls	r3, r3, #2
10005772:	589a      	ldr	r2, [r3, r2]
10005774:	2300      	movs	r3, #0
10005776:	f7ff fed5 	bl	10005524 <__multadd>
1000577a:	1c06      	adds	r6, r0, #0
1000577c:	10a3      	asrs	r3, r4, #2
1000577e:	9301      	str	r3, [sp, #4]
10005780:	d037      	beq.n	100057f2 <__pow5mult+0x96>
10005782:	6a6c      	ldr	r4, [r5, #36]	; 0x24
10005784:	2c00      	cmp	r4, #0
10005786:	d107      	bne.n	10005798 <__pow5mult+0x3c>
10005788:	2010      	movs	r0, #16
1000578a:	f7ff fe67 	bl	1000545c <malloc>
1000578e:	6268      	str	r0, [r5, #36]	; 0x24
10005790:	6044      	str	r4, [r0, #4]
10005792:	6084      	str	r4, [r0, #8]
10005794:	6004      	str	r4, [r0, #0]
10005796:	60c4      	str	r4, [r0, #12]
10005798:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1000579a:	68bc      	ldr	r4, [r7, #8]
1000579c:	2c00      	cmp	r4, #0
1000579e:	d110      	bne.n	100057c2 <__pow5mult+0x66>
100057a0:	1c28      	adds	r0, r5, #0
100057a2:	4916      	ldr	r1, [pc, #88]	; (100057fc <__pow5mult+0xa0>)
100057a4:	f7ff ff44 	bl	10005630 <__i2b>
100057a8:	2300      	movs	r3, #0
100057aa:	60b8      	str	r0, [r7, #8]
100057ac:	1c04      	adds	r4, r0, #0
100057ae:	6003      	str	r3, [r0, #0]
100057b0:	e007      	b.n	100057c2 <__pow5mult+0x66>
100057b2:	9b01      	ldr	r3, [sp, #4]
100057b4:	105b      	asrs	r3, r3, #1
100057b6:	9301      	str	r3, [sp, #4]
100057b8:	d01b      	beq.n	100057f2 <__pow5mult+0x96>
100057ba:	6820      	ldr	r0, [r4, #0]
100057bc:	2800      	cmp	r0, #0
100057be:	d00f      	beq.n	100057e0 <__pow5mult+0x84>
100057c0:	1c04      	adds	r4, r0, #0
100057c2:	9b01      	ldr	r3, [sp, #4]
100057c4:	07db      	lsls	r3, r3, #31
100057c6:	d5f4      	bpl.n	100057b2 <__pow5mult+0x56>
100057c8:	1c31      	adds	r1, r6, #0
100057ca:	1c22      	adds	r2, r4, #0
100057cc:	1c28      	adds	r0, r5, #0
100057ce:	f7ff ff38 	bl	10005642 <__multiply>
100057d2:	1c07      	adds	r7, r0, #0
100057d4:	1c31      	adds	r1, r6, #0
100057d6:	1c28      	adds	r0, r5, #0
100057d8:	f7ff fe8b 	bl	100054f2 <_Bfree>
100057dc:	1c3e      	adds	r6, r7, #0
100057de:	e7e8      	b.n	100057b2 <__pow5mult+0x56>
100057e0:	1c28      	adds	r0, r5, #0
100057e2:	1c21      	adds	r1, r4, #0
100057e4:	1c22      	adds	r2, r4, #0
100057e6:	f7ff ff2c 	bl	10005642 <__multiply>
100057ea:	2300      	movs	r3, #0
100057ec:	6020      	str	r0, [r4, #0]
100057ee:	6003      	str	r3, [r0, #0]
100057f0:	e7e6      	b.n	100057c0 <__pow5mult+0x64>
100057f2:	1c30      	adds	r0, r6, #0
100057f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100057f6:	46c0      	nop			; (mov r8, r8)
100057f8:	10007ad8 	.word	0x10007ad8
100057fc:	00000271 	.word	0x00000271

10005800 <__lshift>:
10005800:	b5f0      	push	{r4, r5, r6, r7, lr}
10005802:	1c0c      	adds	r4, r1, #0
10005804:	1c17      	adds	r7, r2, #0
10005806:	6923      	ldr	r3, [r4, #16]
10005808:	1155      	asrs	r5, r2, #5
1000580a:	b085      	sub	sp, #20
1000580c:	18eb      	adds	r3, r5, r3
1000580e:	9301      	str	r3, [sp, #4]
10005810:	3301      	adds	r3, #1
10005812:	9300      	str	r3, [sp, #0]
10005814:	6849      	ldr	r1, [r1, #4]
10005816:	68a3      	ldr	r3, [r4, #8]
10005818:	9002      	str	r0, [sp, #8]
1000581a:	9a00      	ldr	r2, [sp, #0]
1000581c:	429a      	cmp	r2, r3
1000581e:	dd02      	ble.n	10005826 <__lshift+0x26>
10005820:	3101      	adds	r1, #1
10005822:	005b      	lsls	r3, r3, #1
10005824:	e7f9      	b.n	1000581a <__lshift+0x1a>
10005826:	9802      	ldr	r0, [sp, #8]
10005828:	f7ff fe2b 	bl	10005482 <_Balloc>
1000582c:	1c02      	adds	r2, r0, #0
1000582e:	1c06      	adds	r6, r0, #0
10005830:	2300      	movs	r3, #0
10005832:	3214      	adds	r2, #20
10005834:	42ab      	cmp	r3, r5
10005836:	da04      	bge.n	10005842 <__lshift+0x42>
10005838:	2000      	movs	r0, #0
1000583a:	0099      	lsls	r1, r3, #2
1000583c:	5050      	str	r0, [r2, r1]
1000583e:	3301      	adds	r3, #1
10005840:	e7f8      	b.n	10005834 <__lshift+0x34>
10005842:	43eb      	mvns	r3, r5
10005844:	17db      	asrs	r3, r3, #31
10005846:	401d      	ands	r5, r3
10005848:	1c23      	adds	r3, r4, #0
1000584a:	00ad      	lsls	r5, r5, #2
1000584c:	1955      	adds	r5, r2, r5
1000584e:	6922      	ldr	r2, [r4, #16]
10005850:	3314      	adds	r3, #20
10005852:	0092      	lsls	r2, r2, #2
10005854:	189a      	adds	r2, r3, r2
10005856:	4694      	mov	ip, r2
10005858:	221f      	movs	r2, #31
1000585a:	4017      	ands	r7, r2
1000585c:	d014      	beq.n	10005888 <__lshift+0x88>
1000585e:	3201      	adds	r2, #1
10005860:	1bd2      	subs	r2, r2, r7
10005862:	9203      	str	r2, [sp, #12]
10005864:	2200      	movs	r2, #0
10005866:	6819      	ldr	r1, [r3, #0]
10005868:	1c28      	adds	r0, r5, #0
1000586a:	40b9      	lsls	r1, r7
1000586c:	430a      	orrs	r2, r1
1000586e:	c504      	stmia	r5!, {r2}
10005870:	cb04      	ldmia	r3!, {r2}
10005872:	9903      	ldr	r1, [sp, #12]
10005874:	40ca      	lsrs	r2, r1
10005876:	459c      	cmp	ip, r3
10005878:	d8f5      	bhi.n	10005866 <__lshift+0x66>
1000587a:	6042      	str	r2, [r0, #4]
1000587c:	2a00      	cmp	r2, #0
1000587e:	d007      	beq.n	10005890 <__lshift+0x90>
10005880:	9b01      	ldr	r3, [sp, #4]
10005882:	3302      	adds	r3, #2
10005884:	9300      	str	r3, [sp, #0]
10005886:	e003      	b.n	10005890 <__lshift+0x90>
10005888:	cb04      	ldmia	r3!, {r2}
1000588a:	c504      	stmia	r5!, {r2}
1000588c:	459c      	cmp	ip, r3
1000588e:	d8fb      	bhi.n	10005888 <__lshift+0x88>
10005890:	9b00      	ldr	r3, [sp, #0]
10005892:	9802      	ldr	r0, [sp, #8]
10005894:	3b01      	subs	r3, #1
10005896:	6133      	str	r3, [r6, #16]
10005898:	1c21      	adds	r1, r4, #0
1000589a:	f7ff fe2a 	bl	100054f2 <_Bfree>
1000589e:	1c30      	adds	r0, r6, #0
100058a0:	b005      	add	sp, #20
100058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100058a4 <__mcmp>:
100058a4:	6903      	ldr	r3, [r0, #16]
100058a6:	690a      	ldr	r2, [r1, #16]
100058a8:	b510      	push	{r4, lr}
100058aa:	1a9b      	subs	r3, r3, r2
100058ac:	1c04      	adds	r4, r0, #0
100058ae:	1e18      	subs	r0, r3, #0
100058b0:	d112      	bne.n	100058d8 <__mcmp+0x34>
100058b2:	0093      	lsls	r3, r2, #2
100058b4:	3414      	adds	r4, #20
100058b6:	3114      	adds	r1, #20
100058b8:	18e2      	adds	r2, r4, r3
100058ba:	18c9      	adds	r1, r1, r3
100058bc:	3a04      	subs	r2, #4
100058be:	3904      	subs	r1, #4
100058c0:	6813      	ldr	r3, [r2, #0]
100058c2:	6808      	ldr	r0, [r1, #0]
100058c4:	4283      	cmp	r3, r0
100058c6:	d004      	beq.n	100058d2 <__mcmp+0x2e>
100058c8:	4283      	cmp	r3, r0
100058ca:	419b      	sbcs	r3, r3
100058cc:	2001      	movs	r0, #1
100058ce:	4318      	orrs	r0, r3
100058d0:	e002      	b.n	100058d8 <__mcmp+0x34>
100058d2:	42a2      	cmp	r2, r4
100058d4:	d8f2      	bhi.n	100058bc <__mcmp+0x18>
100058d6:	2000      	movs	r0, #0
100058d8:	bd10      	pop	{r4, pc}

100058da <__mdiff>:
100058da:	b5f0      	push	{r4, r5, r6, r7, lr}
100058dc:	1c07      	adds	r7, r0, #0
100058de:	b085      	sub	sp, #20
100058e0:	1c08      	adds	r0, r1, #0
100058e2:	1c0c      	adds	r4, r1, #0
100058e4:	1c11      	adds	r1, r2, #0
100058e6:	1c15      	adds	r5, r2, #0
100058e8:	f7ff ffdc 	bl	100058a4 <__mcmp>
100058ec:	1e06      	subs	r6, r0, #0
100058ee:	d107      	bne.n	10005900 <__mdiff+0x26>
100058f0:	1c38      	adds	r0, r7, #0
100058f2:	1c31      	adds	r1, r6, #0
100058f4:	f7ff fdc5 	bl	10005482 <_Balloc>
100058f8:	2301      	movs	r3, #1
100058fa:	6146      	str	r6, [r0, #20]
100058fc:	6103      	str	r3, [r0, #16]
100058fe:	e055      	b.n	100059ac <__mdiff+0xd2>
10005900:	2300      	movs	r3, #0
10005902:	9301      	str	r3, [sp, #4]
10005904:	4298      	cmp	r0, r3
10005906:	da04      	bge.n	10005912 <__mdiff+0x38>
10005908:	1c23      	adds	r3, r4, #0
1000590a:	1c2c      	adds	r4, r5, #0
1000590c:	1c1d      	adds	r5, r3, #0
1000590e:	2301      	movs	r3, #1
10005910:	9301      	str	r3, [sp, #4]
10005912:	1c38      	adds	r0, r7, #0
10005914:	6861      	ldr	r1, [r4, #4]
10005916:	f7ff fdb4 	bl	10005482 <_Balloc>
1000591a:	9b01      	ldr	r3, [sp, #4]
1000591c:	6926      	ldr	r6, [r4, #16]
1000591e:	1c2f      	adds	r7, r5, #0
10005920:	60c3      	str	r3, [r0, #12]
10005922:	3414      	adds	r4, #20
10005924:	00b3      	lsls	r3, r6, #2
10005926:	18e3      	adds	r3, r4, r3
10005928:	1c02      	adds	r2, r0, #0
1000592a:	9302      	str	r3, [sp, #8]
1000592c:	692b      	ldr	r3, [r5, #16]
1000592e:	2500      	movs	r5, #0
10005930:	3714      	adds	r7, #20
10005932:	009b      	lsls	r3, r3, #2
10005934:	18fb      	adds	r3, r7, r3
10005936:	9303      	str	r3, [sp, #12]
10005938:	3214      	adds	r2, #20
1000593a:	cc08      	ldmia	r4!, {r3}
1000593c:	4669      	mov	r1, sp
1000593e:	469c      	mov	ip, r3
10005940:	cf08      	ldmia	r7!, {r3}
10005942:	3204      	adds	r2, #4
10005944:	9300      	str	r3, [sp, #0]
10005946:	4663      	mov	r3, ip
10005948:	808b      	strh	r3, [r1, #4]
1000594a:	888b      	ldrh	r3, [r1, #4]
1000594c:	195d      	adds	r5, r3, r5
1000594e:	9b00      	ldr	r3, [sp, #0]
10005950:	b29b      	uxth	r3, r3
10005952:	1aeb      	subs	r3, r5, r3
10005954:	4665      	mov	r5, ip
10005956:	9301      	str	r3, [sp, #4]
10005958:	9b00      	ldr	r3, [sp, #0]
1000595a:	0c2d      	lsrs	r5, r5, #16
1000595c:	0c19      	lsrs	r1, r3, #16
1000595e:	9b01      	ldr	r3, [sp, #4]
10005960:	1a69      	subs	r1, r5, r1
10005962:	141d      	asrs	r5, r3, #16
10005964:	1f13      	subs	r3, r2, #4
10005966:	469c      	mov	ip, r3
10005968:	466b      	mov	r3, sp
1000596a:	1949      	adds	r1, r1, r5
1000596c:	889b      	ldrh	r3, [r3, #4]
1000596e:	140d      	asrs	r5, r1, #16
10005970:	0409      	lsls	r1, r1, #16
10005972:	430b      	orrs	r3, r1
10005974:	4661      	mov	r1, ip
10005976:	600b      	str	r3, [r1, #0]
10005978:	9b03      	ldr	r3, [sp, #12]
1000597a:	429f      	cmp	r7, r3
1000597c:	d3dd      	bcc.n	1000593a <__mdiff+0x60>
1000597e:	9902      	ldr	r1, [sp, #8]
10005980:	1c13      	adds	r3, r2, #0
10005982:	428c      	cmp	r4, r1
10005984:	d20b      	bcs.n	1000599e <__mdiff+0xc4>
10005986:	cc08      	ldmia	r4!, {r3}
10005988:	b299      	uxth	r1, r3
1000598a:	1949      	adds	r1, r1, r5
1000598c:	140d      	asrs	r5, r1, #16
1000598e:	0c1b      	lsrs	r3, r3, #16
10005990:	18eb      	adds	r3, r5, r3
10005992:	141d      	asrs	r5, r3, #16
10005994:	b289      	uxth	r1, r1
10005996:	041b      	lsls	r3, r3, #16
10005998:	430b      	orrs	r3, r1
1000599a:	c208      	stmia	r2!, {r3}
1000599c:	e7ef      	b.n	1000597e <__mdiff+0xa4>
1000599e:	3b04      	subs	r3, #4
100059a0:	681a      	ldr	r2, [r3, #0]
100059a2:	2a00      	cmp	r2, #0
100059a4:	d101      	bne.n	100059aa <__mdiff+0xd0>
100059a6:	3e01      	subs	r6, #1
100059a8:	e7f9      	b.n	1000599e <__mdiff+0xc4>
100059aa:	6106      	str	r6, [r0, #16]
100059ac:	b005      	add	sp, #20
100059ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

100059b0 <__d2b>:
100059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100059b2:	1c1d      	adds	r5, r3, #0
100059b4:	2101      	movs	r1, #1
100059b6:	9f08      	ldr	r7, [sp, #32]
100059b8:	1c14      	adds	r4, r2, #0
100059ba:	f7ff fd62 	bl	10005482 <_Balloc>
100059be:	032b      	lsls	r3, r5, #12
100059c0:	006d      	lsls	r5, r5, #1
100059c2:	1c06      	adds	r6, r0, #0
100059c4:	0b1b      	lsrs	r3, r3, #12
100059c6:	0d6d      	lsrs	r5, r5, #21
100059c8:	d002      	beq.n	100059d0 <__d2b+0x20>
100059ca:	2280      	movs	r2, #128	; 0x80
100059cc:	0352      	lsls	r2, r2, #13
100059ce:	4313      	orrs	r3, r2
100059d0:	9301      	str	r3, [sp, #4]
100059d2:	2c00      	cmp	r4, #0
100059d4:	d018      	beq.n	10005a08 <__d2b+0x58>
100059d6:	4668      	mov	r0, sp
100059d8:	9400      	str	r4, [sp, #0]
100059da:	f7ff fdfa 	bl	100055d2 <__lo0bits>
100059de:	9c00      	ldr	r4, [sp, #0]
100059e0:	2800      	cmp	r0, #0
100059e2:	d009      	beq.n	100059f8 <__d2b+0x48>
100059e4:	2320      	movs	r3, #32
100059e6:	9a01      	ldr	r2, [sp, #4]
100059e8:	1a19      	subs	r1, r3, r0
100059ea:	1c13      	adds	r3, r2, #0
100059ec:	408b      	lsls	r3, r1
100059ee:	40c2      	lsrs	r2, r0
100059f0:	4323      	orrs	r3, r4
100059f2:	6173      	str	r3, [r6, #20]
100059f4:	9201      	str	r2, [sp, #4]
100059f6:	e000      	b.n	100059fa <__d2b+0x4a>
100059f8:	6174      	str	r4, [r6, #20]
100059fa:	9c01      	ldr	r4, [sp, #4]
100059fc:	61b4      	str	r4, [r6, #24]
100059fe:	1e63      	subs	r3, r4, #1
10005a00:	419c      	sbcs	r4, r3
10005a02:	3401      	adds	r4, #1
10005a04:	6134      	str	r4, [r6, #16]
10005a06:	e007      	b.n	10005a18 <__d2b+0x68>
10005a08:	a801      	add	r0, sp, #4
10005a0a:	f7ff fde2 	bl	100055d2 <__lo0bits>
10005a0e:	2401      	movs	r4, #1
10005a10:	9b01      	ldr	r3, [sp, #4]
10005a12:	6134      	str	r4, [r6, #16]
10005a14:	6173      	str	r3, [r6, #20]
10005a16:	3020      	adds	r0, #32
10005a18:	2d00      	cmp	r5, #0
10005a1a:	d006      	beq.n	10005a2a <__d2b+0x7a>
10005a1c:	4b0b      	ldr	r3, [pc, #44]	; (10005a4c <__d2b+0x9c>)
10005a1e:	18ed      	adds	r5, r5, r3
10005a20:	2335      	movs	r3, #53	; 0x35
10005a22:	182d      	adds	r5, r5, r0
10005a24:	603d      	str	r5, [r7, #0]
10005a26:	1a18      	subs	r0, r3, r0
10005a28:	e00b      	b.n	10005a42 <__d2b+0x92>
10005a2a:	4b09      	ldr	r3, [pc, #36]	; (10005a50 <__d2b+0xa0>)
10005a2c:	18c0      	adds	r0, r0, r3
10005a2e:	4b09      	ldr	r3, [pc, #36]	; (10005a54 <__d2b+0xa4>)
10005a30:	6038      	str	r0, [r7, #0]
10005a32:	18e3      	adds	r3, r4, r3
10005a34:	009b      	lsls	r3, r3, #2
10005a36:	18f3      	adds	r3, r6, r3
10005a38:	6958      	ldr	r0, [r3, #20]
10005a3a:	f7ff fdaf 	bl	1000559c <__hi0bits>
10005a3e:	0164      	lsls	r4, r4, #5
10005a40:	1a20      	subs	r0, r4, r0
10005a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
10005a44:	6018      	str	r0, [r3, #0]
10005a46:	1c30      	adds	r0, r6, #0
10005a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005a4a:	46c0      	nop			; (mov r8, r8)
10005a4c:	fffffbcd 	.word	0xfffffbcd
10005a50:	fffffbce 	.word	0xfffffbce
10005a54:	3fffffff 	.word	0x3fffffff

10005a58 <_calloc_r>:
10005a58:	434a      	muls	r2, r1
10005a5a:	b538      	push	{r3, r4, r5, lr}
10005a5c:	1c11      	adds	r1, r2, #0
10005a5e:	1c14      	adds	r4, r2, #0
10005a60:	f000 f808 	bl	10005a74 <_malloc_r>
10005a64:	1e05      	subs	r5, r0, #0
10005a66:	d003      	beq.n	10005a70 <_calloc_r+0x18>
10005a68:	2100      	movs	r1, #0
10005a6a:	1c22      	adds	r2, r4, #0
10005a6c:	f000 f86c 	bl	10005b48 <memset>
10005a70:	1c28      	adds	r0, r5, #0
10005a72:	bd38      	pop	{r3, r4, r5, pc}

10005a74 <_malloc_r>:
10005a74:	2303      	movs	r3, #3
10005a76:	b570      	push	{r4, r5, r6, lr}
10005a78:	1ccc      	adds	r4, r1, #3
10005a7a:	439c      	bics	r4, r3
10005a7c:	3408      	adds	r4, #8
10005a7e:	1c05      	adds	r5, r0, #0
10005a80:	2c0c      	cmp	r4, #12
10005a82:	d201      	bcs.n	10005a88 <_malloc_r+0x14>
10005a84:	240c      	movs	r4, #12
10005a86:	e005      	b.n	10005a94 <_malloc_r+0x20>
10005a88:	2c00      	cmp	r4, #0
10005a8a:	da03      	bge.n	10005a94 <_malloc_r+0x20>
10005a8c:	230c      	movs	r3, #12
10005a8e:	2000      	movs	r0, #0
10005a90:	602b      	str	r3, [r5, #0]
10005a92:	e042      	b.n	10005b1a <_malloc_r+0xa6>
10005a94:	428c      	cmp	r4, r1
10005a96:	d3f9      	bcc.n	10005a8c <_malloc_r+0x18>
10005a98:	4a20      	ldr	r2, [pc, #128]	; (10005b1c <_malloc_r+0xa8>)
10005a9a:	6813      	ldr	r3, [r2, #0]
10005a9c:	1c10      	adds	r0, r2, #0
10005a9e:	1c19      	adds	r1, r3, #0
10005aa0:	2900      	cmp	r1, #0
10005aa2:	d013      	beq.n	10005acc <_malloc_r+0x58>
10005aa4:	680a      	ldr	r2, [r1, #0]
10005aa6:	1b12      	subs	r2, r2, r4
10005aa8:	d40d      	bmi.n	10005ac6 <_malloc_r+0x52>
10005aaa:	2a0b      	cmp	r2, #11
10005aac:	d902      	bls.n	10005ab4 <_malloc_r+0x40>
10005aae:	600a      	str	r2, [r1, #0]
10005ab0:	188b      	adds	r3, r1, r2
10005ab2:	e01f      	b.n	10005af4 <_malloc_r+0x80>
10005ab4:	428b      	cmp	r3, r1
10005ab6:	d102      	bne.n	10005abe <_malloc_r+0x4a>
10005ab8:	685a      	ldr	r2, [r3, #4]
10005aba:	6002      	str	r2, [r0, #0]
10005abc:	e01b      	b.n	10005af6 <_malloc_r+0x82>
10005abe:	684a      	ldr	r2, [r1, #4]
10005ac0:	605a      	str	r2, [r3, #4]
10005ac2:	1c0b      	adds	r3, r1, #0
10005ac4:	e017      	b.n	10005af6 <_malloc_r+0x82>
10005ac6:	1c0b      	adds	r3, r1, #0
10005ac8:	6849      	ldr	r1, [r1, #4]
10005aca:	e7e9      	b.n	10005aa0 <_malloc_r+0x2c>
10005acc:	4e14      	ldr	r6, [pc, #80]	; (10005b20 <_malloc_r+0xac>)
10005ace:	6833      	ldr	r3, [r6, #0]
10005ad0:	2b00      	cmp	r3, #0
10005ad2:	d103      	bne.n	10005adc <_malloc_r+0x68>
10005ad4:	1c28      	adds	r0, r5, #0
10005ad6:	f000 f825 	bl	10005b24 <_sbrk_r>
10005ada:	6030      	str	r0, [r6, #0]
10005adc:	1c28      	adds	r0, r5, #0
10005ade:	1c21      	adds	r1, r4, #0
10005ae0:	f000 f820 	bl	10005b24 <_sbrk_r>
10005ae4:	1c03      	adds	r3, r0, #0
10005ae6:	1c42      	adds	r2, r0, #1
10005ae8:	d0d0      	beq.n	10005a8c <_malloc_r+0x18>
10005aea:	2203      	movs	r2, #3
10005aec:	1cc6      	adds	r6, r0, #3
10005aee:	4396      	bics	r6, r2
10005af0:	4286      	cmp	r6, r0
10005af2:	d10a      	bne.n	10005b0a <_malloc_r+0x96>
10005af4:	601c      	str	r4, [r3, #0]
10005af6:	1c18      	adds	r0, r3, #0
10005af8:	2107      	movs	r1, #7
10005afa:	300b      	adds	r0, #11
10005afc:	1d1a      	adds	r2, r3, #4
10005afe:	4388      	bics	r0, r1
10005b00:	1a82      	subs	r2, r0, r2
10005b02:	d00a      	beq.n	10005b1a <_malloc_r+0xa6>
10005b04:	4251      	negs	r1, r2
10005b06:	5099      	str	r1, [r3, r2]
10005b08:	e007      	b.n	10005b1a <_malloc_r+0xa6>
10005b0a:	1a31      	subs	r1, r6, r0
10005b0c:	1c28      	adds	r0, r5, #0
10005b0e:	f000 f809 	bl	10005b24 <_sbrk_r>
10005b12:	1c43      	adds	r3, r0, #1
10005b14:	d0ba      	beq.n	10005a8c <_malloc_r+0x18>
10005b16:	1c33      	adds	r3, r6, #0
10005b18:	e7ec      	b.n	10005af4 <_malloc_r+0x80>
10005b1a:	bd70      	pop	{r4, r5, r6, pc}
10005b1c:	200006a8 	.word	0x200006a8
10005b20:	200006a4 	.word	0x200006a4

10005b24 <_sbrk_r>:
10005b24:	b538      	push	{r3, r4, r5, lr}
10005b26:	2300      	movs	r3, #0
10005b28:	4c06      	ldr	r4, [pc, #24]	; (10005b44 <_sbrk_r+0x20>)
10005b2a:	1c05      	adds	r5, r0, #0
10005b2c:	1c08      	adds	r0, r1, #0
10005b2e:	6023      	str	r3, [r4, #0]
10005b30:	f7fc f902 	bl	10001d38 <_sbrk>
10005b34:	1c43      	adds	r3, r0, #1
10005b36:	d103      	bne.n	10005b40 <_sbrk_r+0x1c>
10005b38:	6823      	ldr	r3, [r4, #0]
10005b3a:	2b00      	cmp	r3, #0
10005b3c:	d000      	beq.n	10005b40 <_sbrk_r+0x1c>
10005b3e:	602b      	str	r3, [r5, #0]
10005b40:	bd38      	pop	{r3, r4, r5, pc}
10005b42:	46c0      	nop			; (mov r8, r8)
10005b44:	200007d0 	.word	0x200007d0

10005b48 <memset>:
10005b48:	1c03      	adds	r3, r0, #0
10005b4a:	1882      	adds	r2, r0, r2
10005b4c:	4293      	cmp	r3, r2
10005b4e:	d002      	beq.n	10005b56 <memset+0xe>
10005b50:	7019      	strb	r1, [r3, #0]
10005b52:	3301      	adds	r3, #1
10005b54:	e7fa      	b.n	10005b4c <memset+0x4>
10005b56:	4770      	bx	lr

10005b58 <__gnu_thumb1_case_uqi>:
10005b58:	b402      	push	{r1}
10005b5a:	4671      	mov	r1, lr
10005b5c:	0849      	lsrs	r1, r1, #1
10005b5e:	0049      	lsls	r1, r1, #1
10005b60:	5c09      	ldrb	r1, [r1, r0]
10005b62:	0049      	lsls	r1, r1, #1
10005b64:	448e      	add	lr, r1
10005b66:	bc02      	pop	{r1}
10005b68:	4770      	bx	lr
10005b6a:	46c0      	nop			; (mov r8, r8)

10005b6c <__aeabi_cdrcmple>:
10005b6c:	4684      	mov	ip, r0
10005b6e:	1c10      	adds	r0, r2, #0
10005b70:	4662      	mov	r2, ip
10005b72:	468c      	mov	ip, r1
10005b74:	1c19      	adds	r1, r3, #0
10005b76:	4663      	mov	r3, ip
10005b78:	e000      	b.n	10005b7c <__aeabi_cdcmpeq>
10005b7a:	46c0      	nop			; (mov r8, r8)

10005b7c <__aeabi_cdcmpeq>:
10005b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10005b7e:	f000 ff33 	bl	100069e8 <__ledf2>
10005b82:	2800      	cmp	r0, #0
10005b84:	d401      	bmi.n	10005b8a <__aeabi_cdcmpeq+0xe>
10005b86:	2100      	movs	r1, #0
10005b88:	42c8      	cmn	r0, r1
10005b8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10005b8c <__aeabi_dcmpeq>:
10005b8c:	b510      	push	{r4, lr}
10005b8e:	f000 fe77 	bl	10006880 <__eqdf2>
10005b92:	4240      	negs	r0, r0
10005b94:	3001      	adds	r0, #1
10005b96:	bd10      	pop	{r4, pc}

10005b98 <__aeabi_dcmplt>:
10005b98:	b510      	push	{r4, lr}
10005b9a:	f000 ff25 	bl	100069e8 <__ledf2>
10005b9e:	2800      	cmp	r0, #0
10005ba0:	db01      	blt.n	10005ba6 <__aeabi_dcmplt+0xe>
10005ba2:	2000      	movs	r0, #0
10005ba4:	bd10      	pop	{r4, pc}
10005ba6:	2001      	movs	r0, #1
10005ba8:	bd10      	pop	{r4, pc}
10005baa:	46c0      	nop			; (mov r8, r8)

10005bac <__aeabi_dcmple>:
10005bac:	b510      	push	{r4, lr}
10005bae:	f000 ff1b 	bl	100069e8 <__ledf2>
10005bb2:	2800      	cmp	r0, #0
10005bb4:	dd01      	ble.n	10005bba <__aeabi_dcmple+0xe>
10005bb6:	2000      	movs	r0, #0
10005bb8:	bd10      	pop	{r4, pc}
10005bba:	2001      	movs	r0, #1
10005bbc:	bd10      	pop	{r4, pc}
10005bbe:	46c0      	nop			; (mov r8, r8)

10005bc0 <__aeabi_dcmpgt>:
10005bc0:	b510      	push	{r4, lr}
10005bc2:	f000 fea1 	bl	10006908 <__gedf2>
10005bc6:	2800      	cmp	r0, #0
10005bc8:	dc01      	bgt.n	10005bce <__aeabi_dcmpgt+0xe>
10005bca:	2000      	movs	r0, #0
10005bcc:	bd10      	pop	{r4, pc}
10005bce:	2001      	movs	r0, #1
10005bd0:	bd10      	pop	{r4, pc}
10005bd2:	46c0      	nop			; (mov r8, r8)

10005bd4 <__aeabi_dcmpge>:
10005bd4:	b510      	push	{r4, lr}
10005bd6:	f000 fe97 	bl	10006908 <__gedf2>
10005bda:	2800      	cmp	r0, #0
10005bdc:	da01      	bge.n	10005be2 <__aeabi_dcmpge+0xe>
10005bde:	2000      	movs	r0, #0
10005be0:	bd10      	pop	{r4, pc}
10005be2:	2001      	movs	r0, #1
10005be4:	bd10      	pop	{r4, pc}
10005be6:	46c0      	nop			; (mov r8, r8)

10005be8 <__aeabi_dadd>:
10005be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10005bea:	4645      	mov	r5, r8
10005bec:	4657      	mov	r7, sl
10005bee:	464e      	mov	r6, r9
10005bf0:	4694      	mov	ip, r2
10005bf2:	004c      	lsls	r4, r1, #1
10005bf4:	030a      	lsls	r2, r1, #12
10005bf6:	0fc9      	lsrs	r1, r1, #31
10005bf8:	b4e0      	push	{r5, r6, r7}
10005bfa:	4688      	mov	r8, r1
10005bfc:	1c0e      	adds	r6, r1, #0
10005bfe:	0319      	lsls	r1, r3, #12
10005c00:	0f47      	lsrs	r7, r0, #29
10005c02:	00c5      	lsls	r5, r0, #3
10005c04:	0a48      	lsrs	r0, r1, #9
10005c06:	4661      	mov	r1, ip
10005c08:	0f49      	lsrs	r1, r1, #29
10005c0a:	4301      	orrs	r1, r0
10005c0c:	4660      	mov	r0, ip
10005c0e:	0a52      	lsrs	r2, r2, #9
10005c10:	4317      	orrs	r7, r2
10005c12:	00c0      	lsls	r0, r0, #3
10005c14:	005a      	lsls	r2, r3, #1
10005c16:	0d64      	lsrs	r4, r4, #21
10005c18:	0d52      	lsrs	r2, r2, #21
10005c1a:	0fdb      	lsrs	r3, r3, #31
10005c1c:	4684      	mov	ip, r0
10005c1e:	4598      	cmp	r8, r3
10005c20:	d100      	bne.n	10005c24 <__aeabi_dadd+0x3c>
10005c22:	e0a7      	b.n	10005d74 <__aeabi_dadd+0x18c>
10005c24:	1aa0      	subs	r0, r4, r2
10005c26:	2800      	cmp	r0, #0
10005c28:	dc00      	bgt.n	10005c2c <__aeabi_dadd+0x44>
10005c2a:	e101      	b.n	10005e30 <__aeabi_dadd+0x248>
10005c2c:	2a00      	cmp	r2, #0
10005c2e:	d13d      	bne.n	10005cac <__aeabi_dadd+0xc4>
10005c30:	4663      	mov	r3, ip
10005c32:	430b      	orrs	r3, r1
10005c34:	d000      	beq.n	10005c38 <__aeabi_dadd+0x50>
10005c36:	e0d4      	b.n	10005de2 <__aeabi_dadd+0x1fa>
10005c38:	076b      	lsls	r3, r5, #29
10005c3a:	d100      	bne.n	10005c3e <__aeabi_dadd+0x56>
10005c3c:	e088      	b.n	10005d50 <__aeabi_dadd+0x168>
10005c3e:	230f      	movs	r3, #15
10005c40:	402b      	ands	r3, r5
10005c42:	2b04      	cmp	r3, #4
10005c44:	d100      	bne.n	10005c48 <__aeabi_dadd+0x60>
10005c46:	e083      	b.n	10005d50 <__aeabi_dadd+0x168>
10005c48:	1d2a      	adds	r2, r5, #4
10005c4a:	42aa      	cmp	r2, r5
10005c4c:	41ad      	sbcs	r5, r5
10005c4e:	2380      	movs	r3, #128	; 0x80
10005c50:	426d      	negs	r5, r5
10005c52:	197f      	adds	r7, r7, r5
10005c54:	041b      	lsls	r3, r3, #16
10005c56:	403b      	ands	r3, r7
10005c58:	4646      	mov	r6, r8
10005c5a:	1c15      	adds	r5, r2, #0
10005c5c:	2b00      	cmp	r3, #0
10005c5e:	d100      	bne.n	10005c62 <__aeabi_dadd+0x7a>
10005c60:	e07c      	b.n	10005d5c <__aeabi_dadd+0x174>
10005c62:	4bcc      	ldr	r3, [pc, #816]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005c64:	3401      	adds	r4, #1
10005c66:	429c      	cmp	r4, r3
10005c68:	d100      	bne.n	10005c6c <__aeabi_dadd+0x84>
10005c6a:	e0fd      	b.n	10005e68 <__aeabi_dadd+0x280>
10005c6c:	1c3a      	adds	r2, r7, #0
10005c6e:	4bca      	ldr	r3, [pc, #808]	; (10005f98 <__aeabi_dadd+0x3b0>)
10005c70:	08ed      	lsrs	r5, r5, #3
10005c72:	401a      	ands	r2, r3
10005c74:	0750      	lsls	r0, r2, #29
10005c76:	0564      	lsls	r4, r4, #21
10005c78:	0252      	lsls	r2, r2, #9
10005c7a:	4305      	orrs	r5, r0
10005c7c:	0b12      	lsrs	r2, r2, #12
10005c7e:	0d64      	lsrs	r4, r4, #21
10005c80:	2100      	movs	r1, #0
10005c82:	0312      	lsls	r2, r2, #12
10005c84:	0d0b      	lsrs	r3, r1, #20
10005c86:	051b      	lsls	r3, r3, #20
10005c88:	0564      	lsls	r4, r4, #21
10005c8a:	0b12      	lsrs	r2, r2, #12
10005c8c:	431a      	orrs	r2, r3
10005c8e:	0863      	lsrs	r3, r4, #1
10005c90:	4cc2      	ldr	r4, [pc, #776]	; (10005f9c <__aeabi_dadd+0x3b4>)
10005c92:	07f6      	lsls	r6, r6, #31
10005c94:	4014      	ands	r4, r2
10005c96:	431c      	orrs	r4, r3
10005c98:	0064      	lsls	r4, r4, #1
10005c9a:	0864      	lsrs	r4, r4, #1
10005c9c:	4334      	orrs	r4, r6
10005c9e:	1c28      	adds	r0, r5, #0
10005ca0:	1c21      	adds	r1, r4, #0
10005ca2:	bc1c      	pop	{r2, r3, r4}
10005ca4:	4690      	mov	r8, r2
10005ca6:	4699      	mov	r9, r3
10005ca8:	46a2      	mov	sl, r4
10005caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005cac:	4bb9      	ldr	r3, [pc, #740]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005cae:	429c      	cmp	r4, r3
10005cb0:	d0c2      	beq.n	10005c38 <__aeabi_dadd+0x50>
10005cb2:	2380      	movs	r3, #128	; 0x80
10005cb4:	041b      	lsls	r3, r3, #16
10005cb6:	4319      	orrs	r1, r3
10005cb8:	2838      	cmp	r0, #56	; 0x38
10005cba:	dd00      	ble.n	10005cbe <__aeabi_dadd+0xd6>
10005cbc:	e0ec      	b.n	10005e98 <__aeabi_dadd+0x2b0>
10005cbe:	281f      	cmp	r0, #31
10005cc0:	dd00      	ble.n	10005cc4 <__aeabi_dadd+0xdc>
10005cc2:	e121      	b.n	10005f08 <__aeabi_dadd+0x320>
10005cc4:	2220      	movs	r2, #32
10005cc6:	1c0e      	adds	r6, r1, #0
10005cc8:	4663      	mov	r3, ip
10005cca:	1a12      	subs	r2, r2, r0
10005ccc:	4096      	lsls	r6, r2
10005cce:	40c3      	lsrs	r3, r0
10005cd0:	4333      	orrs	r3, r6
10005cd2:	4666      	mov	r6, ip
10005cd4:	4096      	lsls	r6, r2
10005cd6:	1c32      	adds	r2, r6, #0
10005cd8:	1e56      	subs	r6, r2, #1
10005cda:	41b2      	sbcs	r2, r6
10005cdc:	4313      	orrs	r3, r2
10005cde:	1c0a      	adds	r2, r1, #0
10005ce0:	40c2      	lsrs	r2, r0
10005ce2:	1aeb      	subs	r3, r5, r3
10005ce4:	429d      	cmp	r5, r3
10005ce6:	41b6      	sbcs	r6, r6
10005ce8:	1c1d      	adds	r5, r3, #0
10005cea:	1aba      	subs	r2, r7, r2
10005cec:	4276      	negs	r6, r6
10005cee:	1b97      	subs	r7, r2, r6
10005cf0:	023b      	lsls	r3, r7, #8
10005cf2:	d400      	bmi.n	10005cf6 <__aeabi_dadd+0x10e>
10005cf4:	e097      	b.n	10005e26 <__aeabi_dadd+0x23e>
10005cf6:	027a      	lsls	r2, r7, #9
10005cf8:	0a56      	lsrs	r6, r2, #9
10005cfa:	2e00      	cmp	r6, #0
10005cfc:	d100      	bne.n	10005d00 <__aeabi_dadd+0x118>
10005cfe:	e0b6      	b.n	10005e6e <__aeabi_dadd+0x286>
10005d00:	1c30      	adds	r0, r6, #0
10005d02:	f7fe f96b 	bl	10003fdc <__clzsi2>
10005d06:	1c03      	adds	r3, r0, #0
10005d08:	3b08      	subs	r3, #8
10005d0a:	2b1f      	cmp	r3, #31
10005d0c:	dd00      	ble.n	10005d10 <__aeabi_dadd+0x128>
10005d0e:	e0b7      	b.n	10005e80 <__aeabi_dadd+0x298>
10005d10:	409e      	lsls	r6, r3
10005d12:	1c37      	adds	r7, r6, #0
10005d14:	2628      	movs	r6, #40	; 0x28
10005d16:	1c2a      	adds	r2, r5, #0
10005d18:	1a36      	subs	r6, r6, r0
10005d1a:	40f2      	lsrs	r2, r6
10005d1c:	1c16      	adds	r6, r2, #0
10005d1e:	409d      	lsls	r5, r3
10005d20:	433e      	orrs	r6, r7
10005d22:	429c      	cmp	r4, r3
10005d24:	dd00      	ble.n	10005d28 <__aeabi_dadd+0x140>
10005d26:	e0b2      	b.n	10005e8e <__aeabi_dadd+0x2a6>
10005d28:	1b1c      	subs	r4, r3, r4
10005d2a:	1c62      	adds	r2, r4, #1
10005d2c:	2a1f      	cmp	r2, #31
10005d2e:	dd00      	ble.n	10005d32 <__aeabi_dadd+0x14a>
10005d30:	e0d8      	b.n	10005ee4 <__aeabi_dadd+0x2fc>
10005d32:	231f      	movs	r3, #31
10005d34:	1c29      	adds	r1, r5, #0
10005d36:	1b1c      	subs	r4, r3, r4
10005d38:	1c33      	adds	r3, r6, #0
10005d3a:	40a5      	lsls	r5, r4
10005d3c:	40a3      	lsls	r3, r4
10005d3e:	40d1      	lsrs	r1, r2
10005d40:	1e6c      	subs	r4, r5, #1
10005d42:	41a5      	sbcs	r5, r4
10005d44:	40d6      	lsrs	r6, r2
10005d46:	4319      	orrs	r1, r3
10005d48:	430d      	orrs	r5, r1
10005d4a:	1c37      	adds	r7, r6, #0
10005d4c:	2400      	movs	r4, #0
10005d4e:	e773      	b.n	10005c38 <__aeabi_dadd+0x50>
10005d50:	2380      	movs	r3, #128	; 0x80
10005d52:	041b      	lsls	r3, r3, #16
10005d54:	403b      	ands	r3, r7
10005d56:	4646      	mov	r6, r8
10005d58:	d000      	beq.n	10005d5c <__aeabi_dadd+0x174>
10005d5a:	e782      	b.n	10005c62 <__aeabi_dadd+0x7a>
10005d5c:	4b8d      	ldr	r3, [pc, #564]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005d5e:	08ed      	lsrs	r5, r5, #3
10005d60:	0778      	lsls	r0, r7, #29
10005d62:	4305      	orrs	r5, r0
10005d64:	08fa      	lsrs	r2, r7, #3
10005d66:	429c      	cmp	r4, r3
10005d68:	d032      	beq.n	10005dd0 <__aeabi_dadd+0x1e8>
10005d6a:	0312      	lsls	r2, r2, #12
10005d6c:	0564      	lsls	r4, r4, #21
10005d6e:	0b12      	lsrs	r2, r2, #12
10005d70:	0d64      	lsrs	r4, r4, #21
10005d72:	e785      	b.n	10005c80 <__aeabi_dadd+0x98>
10005d74:	1aa3      	subs	r3, r4, r2
10005d76:	2b00      	cmp	r3, #0
10005d78:	dc00      	bgt.n	10005d7c <__aeabi_dadd+0x194>
10005d7a:	e094      	b.n	10005ea6 <__aeabi_dadd+0x2be>
10005d7c:	2a00      	cmp	r2, #0
10005d7e:	d03c      	beq.n	10005dfa <__aeabi_dadd+0x212>
10005d80:	4a84      	ldr	r2, [pc, #528]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005d82:	4294      	cmp	r4, r2
10005d84:	d100      	bne.n	10005d88 <__aeabi_dadd+0x1a0>
10005d86:	e757      	b.n	10005c38 <__aeabi_dadd+0x50>
10005d88:	2280      	movs	r2, #128	; 0x80
10005d8a:	0412      	lsls	r2, r2, #16
10005d8c:	4311      	orrs	r1, r2
10005d8e:	2b38      	cmp	r3, #56	; 0x38
10005d90:	dc00      	bgt.n	10005d94 <__aeabi_dadd+0x1ac>
10005d92:	e105      	b.n	10005fa0 <__aeabi_dadd+0x3b8>
10005d94:	4663      	mov	r3, ip
10005d96:	4319      	orrs	r1, r3
10005d98:	1e48      	subs	r0, r1, #1
10005d9a:	4181      	sbcs	r1, r0
10005d9c:	2200      	movs	r2, #0
10005d9e:	b2c8      	uxtb	r0, r1
10005da0:	1940      	adds	r0, r0, r5
10005da2:	42a8      	cmp	r0, r5
10005da4:	419b      	sbcs	r3, r3
10005da6:	1c05      	adds	r5, r0, #0
10005da8:	19d2      	adds	r2, r2, r7
10005daa:	425b      	negs	r3, r3
10005dac:	18d7      	adds	r7, r2, r3
10005dae:	023b      	lsls	r3, r7, #8
10005db0:	d539      	bpl.n	10005e26 <__aeabi_dadd+0x23e>
10005db2:	4b78      	ldr	r3, [pc, #480]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005db4:	3401      	adds	r4, #1
10005db6:	429c      	cmp	r4, r3
10005db8:	d100      	bne.n	10005dbc <__aeabi_dadd+0x1d4>
10005dba:	e14c      	b.n	10006056 <__aeabi_dadd+0x46e>
10005dbc:	2001      	movs	r0, #1
10005dbe:	4a76      	ldr	r2, [pc, #472]	; (10005f98 <__aeabi_dadd+0x3b0>)
10005dc0:	086b      	lsrs	r3, r5, #1
10005dc2:	403a      	ands	r2, r7
10005dc4:	4028      	ands	r0, r5
10005dc6:	4318      	orrs	r0, r3
10005dc8:	07d5      	lsls	r5, r2, #31
10005dca:	4305      	orrs	r5, r0
10005dcc:	0857      	lsrs	r7, r2, #1
10005dce:	e733      	b.n	10005c38 <__aeabi_dadd+0x50>
10005dd0:	1c2b      	adds	r3, r5, #0
10005dd2:	4313      	orrs	r3, r2
10005dd4:	d048      	beq.n	10005e68 <__aeabi_dadd+0x280>
10005dd6:	2380      	movs	r3, #128	; 0x80
10005dd8:	031b      	lsls	r3, r3, #12
10005dda:	431a      	orrs	r2, r3
10005ddc:	0312      	lsls	r2, r2, #12
10005dde:	0b12      	lsrs	r2, r2, #12
10005de0:	e74e      	b.n	10005c80 <__aeabi_dadd+0x98>
10005de2:	3801      	subs	r0, #1
10005de4:	2800      	cmp	r0, #0
10005de6:	d178      	bne.n	10005eda <__aeabi_dadd+0x2f2>
10005de8:	4663      	mov	r3, ip
10005dea:	1aee      	subs	r6, r5, r3
10005dec:	42b5      	cmp	r5, r6
10005dee:	419b      	sbcs	r3, r3
10005df0:	1a7a      	subs	r2, r7, r1
10005df2:	425b      	negs	r3, r3
10005df4:	1ad7      	subs	r7, r2, r3
10005df6:	1c35      	adds	r5, r6, #0
10005df8:	e77a      	b.n	10005cf0 <__aeabi_dadd+0x108>
10005dfa:	1c02      	adds	r2, r0, #0
10005dfc:	430a      	orrs	r2, r1
10005dfe:	d100      	bne.n	10005e02 <__aeabi_dadd+0x21a>
10005e00:	e71a      	b.n	10005c38 <__aeabi_dadd+0x50>
10005e02:	3b01      	subs	r3, #1
10005e04:	2b00      	cmp	r3, #0
10005e06:	d000      	beq.n	10005e0a <__aeabi_dadd+0x222>
10005e08:	e0f2      	b.n	10005ff0 <__aeabi_dadd+0x408>
10005e0a:	1940      	adds	r0, r0, r5
10005e0c:	42a8      	cmp	r0, r5
10005e0e:	419b      	sbcs	r3, r3
10005e10:	19ca      	adds	r2, r1, r7
10005e12:	425b      	negs	r3, r3
10005e14:	18d7      	adds	r7, r2, r3
10005e16:	1c05      	adds	r5, r0, #0
10005e18:	e7c9      	b.n	10005dae <__aeabi_dadd+0x1c6>
10005e1a:	1c13      	adds	r3, r2, #0
10005e1c:	4333      	orrs	r3, r6
10005e1e:	d100      	bne.n	10005e22 <__aeabi_dadd+0x23a>
10005e20:	e118      	b.n	10006054 <__aeabi_dadd+0x46c>
10005e22:	1c17      	adds	r7, r2, #0
10005e24:	1c35      	adds	r5, r6, #0
10005e26:	4646      	mov	r6, r8
10005e28:	076b      	lsls	r3, r5, #29
10005e2a:	d000      	beq.n	10005e2e <__aeabi_dadd+0x246>
10005e2c:	e707      	b.n	10005c3e <__aeabi_dadd+0x56>
10005e2e:	e795      	b.n	10005d5c <__aeabi_dadd+0x174>
10005e30:	2800      	cmp	r0, #0
10005e32:	d17a      	bne.n	10005f2a <__aeabi_dadd+0x342>
10005e34:	1c62      	adds	r2, r4, #1
10005e36:	0552      	lsls	r2, r2, #21
10005e38:	0d52      	lsrs	r2, r2, #21
10005e3a:	2a01      	cmp	r2, #1
10005e3c:	dc00      	bgt.n	10005e40 <__aeabi_dadd+0x258>
10005e3e:	e0fb      	b.n	10006038 <__aeabi_dadd+0x450>
10005e40:	4662      	mov	r2, ip
10005e42:	1aaa      	subs	r2, r5, r2
10005e44:	4295      	cmp	r5, r2
10005e46:	41b6      	sbcs	r6, r6
10005e48:	4691      	mov	r9, r2
10005e4a:	1a78      	subs	r0, r7, r1
10005e4c:	4272      	negs	r2, r6
10005e4e:	1a86      	subs	r6, r0, r2
10005e50:	0232      	lsls	r2, r6, #8
10005e52:	d400      	bmi.n	10005e56 <__aeabi_dadd+0x26e>
10005e54:	e093      	b.n	10005f7e <__aeabi_dadd+0x396>
10005e56:	4662      	mov	r2, ip
10005e58:	1b55      	subs	r5, r2, r5
10005e5a:	45ac      	cmp	ip, r5
10005e5c:	4180      	sbcs	r0, r0
10005e5e:	1bcf      	subs	r7, r1, r7
10005e60:	4240      	negs	r0, r0
10005e62:	1a3e      	subs	r6, r7, r0
10005e64:	4698      	mov	r8, r3
10005e66:	e748      	b.n	10005cfa <__aeabi_dadd+0x112>
10005e68:	2200      	movs	r2, #0
10005e6a:	2500      	movs	r5, #0
10005e6c:	e708      	b.n	10005c80 <__aeabi_dadd+0x98>
10005e6e:	1c28      	adds	r0, r5, #0
10005e70:	f7fe f8b4 	bl	10003fdc <__clzsi2>
10005e74:	3020      	adds	r0, #32
10005e76:	1c03      	adds	r3, r0, #0
10005e78:	3b08      	subs	r3, #8
10005e7a:	2b1f      	cmp	r3, #31
10005e7c:	dc00      	bgt.n	10005e80 <__aeabi_dadd+0x298>
10005e7e:	e747      	b.n	10005d10 <__aeabi_dadd+0x128>
10005e80:	3828      	subs	r0, #40	; 0x28
10005e82:	4085      	lsls	r5, r0
10005e84:	1c2e      	adds	r6, r5, #0
10005e86:	2500      	movs	r5, #0
10005e88:	429c      	cmp	r4, r3
10005e8a:	dc00      	bgt.n	10005e8e <__aeabi_dadd+0x2a6>
10005e8c:	e74c      	b.n	10005d28 <__aeabi_dadd+0x140>
10005e8e:	4a42      	ldr	r2, [pc, #264]	; (10005f98 <__aeabi_dadd+0x3b0>)
10005e90:	1ae4      	subs	r4, r4, r3
10005e92:	4016      	ands	r6, r2
10005e94:	1c37      	adds	r7, r6, #0
10005e96:	e6cf      	b.n	10005c38 <__aeabi_dadd+0x50>
10005e98:	4663      	mov	r3, ip
10005e9a:	4319      	orrs	r1, r3
10005e9c:	1e4b      	subs	r3, r1, #1
10005e9e:	4199      	sbcs	r1, r3
10005ea0:	2200      	movs	r2, #0
10005ea2:	b2cb      	uxtb	r3, r1
10005ea4:	e71d      	b.n	10005ce2 <__aeabi_dadd+0xfa>
10005ea6:	2b00      	cmp	r3, #0
10005ea8:	d000      	beq.n	10005eac <__aeabi_dadd+0x2c4>
10005eaa:	e0f2      	b.n	10006092 <__aeabi_dadd+0x4aa>
10005eac:	1c60      	adds	r0, r4, #1
10005eae:	0543      	lsls	r3, r0, #21
10005eb0:	0d5b      	lsrs	r3, r3, #21
10005eb2:	2b01      	cmp	r3, #1
10005eb4:	dc00      	bgt.n	10005eb8 <__aeabi_dadd+0x2d0>
10005eb6:	e0a4      	b.n	10006002 <__aeabi_dadd+0x41a>
10005eb8:	4b36      	ldr	r3, [pc, #216]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005eba:	4298      	cmp	r0, r3
10005ebc:	d100      	bne.n	10005ec0 <__aeabi_dadd+0x2d8>
10005ebe:	e121      	b.n	10006104 <__aeabi_dadd+0x51c>
10005ec0:	4663      	mov	r3, ip
10005ec2:	195c      	adds	r4, r3, r5
10005ec4:	42ac      	cmp	r4, r5
10005ec6:	419b      	sbcs	r3, r3
10005ec8:	19cf      	adds	r7, r1, r7
10005eca:	425b      	negs	r3, r3
10005ecc:	18fa      	adds	r2, r7, r3
10005ece:	0864      	lsrs	r4, r4, #1
10005ed0:	07d5      	lsls	r5, r2, #31
10005ed2:	4325      	orrs	r5, r4
10005ed4:	0857      	lsrs	r7, r2, #1
10005ed6:	1c04      	adds	r4, r0, #0
10005ed8:	e6ae      	b.n	10005c38 <__aeabi_dadd+0x50>
10005eda:	4b2e      	ldr	r3, [pc, #184]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005edc:	429c      	cmp	r4, r3
10005ede:	d000      	beq.n	10005ee2 <__aeabi_dadd+0x2fa>
10005ee0:	e6ea      	b.n	10005cb8 <__aeabi_dadd+0xd0>
10005ee2:	e6a9      	b.n	10005c38 <__aeabi_dadd+0x50>
10005ee4:	1c21      	adds	r1, r4, #0
10005ee6:	1c33      	adds	r3, r6, #0
10005ee8:	391f      	subs	r1, #31
10005eea:	40cb      	lsrs	r3, r1
10005eec:	1c19      	adds	r1, r3, #0
10005eee:	2a20      	cmp	r2, #32
10005ef0:	d100      	bne.n	10005ef4 <__aeabi_dadd+0x30c>
10005ef2:	e082      	b.n	10005ffa <__aeabi_dadd+0x412>
10005ef4:	233f      	movs	r3, #63	; 0x3f
10005ef6:	1b1c      	subs	r4, r3, r4
10005ef8:	40a6      	lsls	r6, r4
10005efa:	4335      	orrs	r5, r6
10005efc:	1e6e      	subs	r6, r5, #1
10005efe:	41b5      	sbcs	r5, r6
10005f00:	2700      	movs	r7, #0
10005f02:	430d      	orrs	r5, r1
10005f04:	2400      	movs	r4, #0
10005f06:	e78e      	b.n	10005e26 <__aeabi_dadd+0x23e>
10005f08:	1c03      	adds	r3, r0, #0
10005f0a:	1c0e      	adds	r6, r1, #0
10005f0c:	3b20      	subs	r3, #32
10005f0e:	40de      	lsrs	r6, r3
10005f10:	2820      	cmp	r0, #32
10005f12:	d074      	beq.n	10005ffe <__aeabi_dadd+0x416>
10005f14:	2340      	movs	r3, #64	; 0x40
10005f16:	1a1b      	subs	r3, r3, r0
10005f18:	4099      	lsls	r1, r3
10005f1a:	1c0b      	adds	r3, r1, #0
10005f1c:	4662      	mov	r2, ip
10005f1e:	4313      	orrs	r3, r2
10005f20:	1e59      	subs	r1, r3, #1
10005f22:	418b      	sbcs	r3, r1
10005f24:	2200      	movs	r2, #0
10005f26:	4333      	orrs	r3, r6
10005f28:	e6db      	b.n	10005ce2 <__aeabi_dadd+0xfa>
10005f2a:	2c00      	cmp	r4, #0
10005f2c:	d050      	beq.n	10005fd0 <__aeabi_dadd+0x3e8>
10005f2e:	4c19      	ldr	r4, [pc, #100]	; (10005f94 <__aeabi_dadd+0x3ac>)
10005f30:	42a2      	cmp	r2, r4
10005f32:	d100      	bne.n	10005f36 <__aeabi_dadd+0x34e>
10005f34:	e0a8      	b.n	10006088 <__aeabi_dadd+0x4a0>
10005f36:	2480      	movs	r4, #128	; 0x80
10005f38:	0424      	lsls	r4, r4, #16
10005f3a:	4240      	negs	r0, r0
10005f3c:	4327      	orrs	r7, r4
10005f3e:	2838      	cmp	r0, #56	; 0x38
10005f40:	dd00      	ble.n	10005f44 <__aeabi_dadd+0x35c>
10005f42:	e0d9      	b.n	100060f8 <__aeabi_dadd+0x510>
10005f44:	281f      	cmp	r0, #31
10005f46:	dd00      	ble.n	10005f4a <__aeabi_dadd+0x362>
10005f48:	e139      	b.n	100061be <__aeabi_dadd+0x5d6>
10005f4a:	2420      	movs	r4, #32
10005f4c:	1c3e      	adds	r6, r7, #0
10005f4e:	1a24      	subs	r4, r4, r0
10005f50:	40a6      	lsls	r6, r4
10005f52:	46b0      	mov	r8, r6
10005f54:	1c2e      	adds	r6, r5, #0
10005f56:	46a1      	mov	r9, r4
10005f58:	40c6      	lsrs	r6, r0
10005f5a:	4644      	mov	r4, r8
10005f5c:	4326      	orrs	r6, r4
10005f5e:	464c      	mov	r4, r9
10005f60:	40a5      	lsls	r5, r4
10005f62:	1e6c      	subs	r4, r5, #1
10005f64:	41a5      	sbcs	r5, r4
10005f66:	40c7      	lsrs	r7, r0
10005f68:	4335      	orrs	r5, r6
10005f6a:	4660      	mov	r0, ip
10005f6c:	1b45      	subs	r5, r0, r5
10005f6e:	1bcf      	subs	r7, r1, r7
10005f70:	45ac      	cmp	ip, r5
10005f72:	4189      	sbcs	r1, r1
10005f74:	4249      	negs	r1, r1
10005f76:	1a7f      	subs	r7, r7, r1
10005f78:	1c14      	adds	r4, r2, #0
10005f7a:	4698      	mov	r8, r3
10005f7c:	e6b8      	b.n	10005cf0 <__aeabi_dadd+0x108>
10005f7e:	464b      	mov	r3, r9
10005f80:	464d      	mov	r5, r9
10005f82:	4333      	orrs	r3, r6
10005f84:	d000      	beq.n	10005f88 <__aeabi_dadd+0x3a0>
10005f86:	e6b8      	b.n	10005cfa <__aeabi_dadd+0x112>
10005f88:	2600      	movs	r6, #0
10005f8a:	2700      	movs	r7, #0
10005f8c:	2400      	movs	r4, #0
10005f8e:	2500      	movs	r5, #0
10005f90:	e6e4      	b.n	10005d5c <__aeabi_dadd+0x174>
10005f92:	46c0      	nop			; (mov r8, r8)
10005f94:	000007ff 	.word	0x000007ff
10005f98:	ff7fffff 	.word	0xff7fffff
10005f9c:	800fffff 	.word	0x800fffff
10005fa0:	2b1f      	cmp	r3, #31
10005fa2:	dc5b      	bgt.n	1000605c <__aeabi_dadd+0x474>
10005fa4:	2220      	movs	r2, #32
10005fa6:	1c08      	adds	r0, r1, #0
10005fa8:	1ad2      	subs	r2, r2, r3
10005faa:	4090      	lsls	r0, r2
10005fac:	4681      	mov	r9, r0
10005fae:	4660      	mov	r0, ip
10005fb0:	4692      	mov	sl, r2
10005fb2:	40d8      	lsrs	r0, r3
10005fb4:	464a      	mov	r2, r9
10005fb6:	4310      	orrs	r0, r2
10005fb8:	4681      	mov	r9, r0
10005fba:	4652      	mov	r2, sl
10005fbc:	4660      	mov	r0, ip
10005fbe:	4090      	lsls	r0, r2
10005fc0:	1c02      	adds	r2, r0, #0
10005fc2:	1e50      	subs	r0, r2, #1
10005fc4:	4182      	sbcs	r2, r0
10005fc6:	4648      	mov	r0, r9
10005fc8:	4310      	orrs	r0, r2
10005fca:	1c0a      	adds	r2, r1, #0
10005fcc:	40da      	lsrs	r2, r3
10005fce:	e6e7      	b.n	10005da0 <__aeabi_dadd+0x1b8>
10005fd0:	1c3c      	adds	r4, r7, #0
10005fd2:	432c      	orrs	r4, r5
10005fd4:	d058      	beq.n	10006088 <__aeabi_dadd+0x4a0>
10005fd6:	43c0      	mvns	r0, r0
10005fd8:	2800      	cmp	r0, #0
10005fda:	d151      	bne.n	10006080 <__aeabi_dadd+0x498>
10005fdc:	4660      	mov	r0, ip
10005fde:	1b45      	subs	r5, r0, r5
10005fe0:	45ac      	cmp	ip, r5
10005fe2:	4180      	sbcs	r0, r0
10005fe4:	1bcf      	subs	r7, r1, r7
10005fe6:	4240      	negs	r0, r0
10005fe8:	1a3f      	subs	r7, r7, r0
10005fea:	1c14      	adds	r4, r2, #0
10005fec:	4698      	mov	r8, r3
10005fee:	e67f      	b.n	10005cf0 <__aeabi_dadd+0x108>
10005ff0:	4a8f      	ldr	r2, [pc, #572]	; (10006230 <__aeabi_dadd+0x648>)
10005ff2:	4294      	cmp	r4, r2
10005ff4:	d000      	beq.n	10005ff8 <__aeabi_dadd+0x410>
10005ff6:	e6ca      	b.n	10005d8e <__aeabi_dadd+0x1a6>
10005ff8:	e61e      	b.n	10005c38 <__aeabi_dadd+0x50>
10005ffa:	2600      	movs	r6, #0
10005ffc:	e77d      	b.n	10005efa <__aeabi_dadd+0x312>
10005ffe:	2300      	movs	r3, #0
10006000:	e78c      	b.n	10005f1c <__aeabi_dadd+0x334>
10006002:	1c3b      	adds	r3, r7, #0
10006004:	432b      	orrs	r3, r5
10006006:	2c00      	cmp	r4, #0
10006008:	d000      	beq.n	1000600c <__aeabi_dadd+0x424>
1000600a:	e0bd      	b.n	10006188 <__aeabi_dadd+0x5a0>
1000600c:	2b00      	cmp	r3, #0
1000600e:	d100      	bne.n	10006012 <__aeabi_dadd+0x42a>
10006010:	e0f5      	b.n	100061fe <__aeabi_dadd+0x616>
10006012:	4663      	mov	r3, ip
10006014:	430b      	orrs	r3, r1
10006016:	d100      	bne.n	1000601a <__aeabi_dadd+0x432>
10006018:	e60e      	b.n	10005c38 <__aeabi_dadd+0x50>
1000601a:	4663      	mov	r3, ip
1000601c:	195b      	adds	r3, r3, r5
1000601e:	42ab      	cmp	r3, r5
10006020:	4180      	sbcs	r0, r0
10006022:	19ca      	adds	r2, r1, r7
10006024:	4240      	negs	r0, r0
10006026:	1817      	adds	r7, r2, r0
10006028:	023a      	lsls	r2, r7, #8
1000602a:	d400      	bmi.n	1000602e <__aeabi_dadd+0x446>
1000602c:	e0fc      	b.n	10006228 <__aeabi_dadd+0x640>
1000602e:	4a81      	ldr	r2, [pc, #516]	; (10006234 <__aeabi_dadd+0x64c>)
10006030:	1c1d      	adds	r5, r3, #0
10006032:	4017      	ands	r7, r2
10006034:	3401      	adds	r4, #1
10006036:	e5ff      	b.n	10005c38 <__aeabi_dadd+0x50>
10006038:	1c3a      	adds	r2, r7, #0
1000603a:	432a      	orrs	r2, r5
1000603c:	2c00      	cmp	r4, #0
1000603e:	d151      	bne.n	100060e4 <__aeabi_dadd+0x4fc>
10006040:	2a00      	cmp	r2, #0
10006042:	d000      	beq.n	10006046 <__aeabi_dadd+0x45e>
10006044:	e085      	b.n	10006152 <__aeabi_dadd+0x56a>
10006046:	4662      	mov	r2, ip
10006048:	430a      	orrs	r2, r1
1000604a:	d003      	beq.n	10006054 <__aeabi_dadd+0x46c>
1000604c:	1c0f      	adds	r7, r1, #0
1000604e:	4665      	mov	r5, ip
10006050:	4698      	mov	r8, r3
10006052:	e5f1      	b.n	10005c38 <__aeabi_dadd+0x50>
10006054:	2600      	movs	r6, #0
10006056:	2700      	movs	r7, #0
10006058:	2500      	movs	r5, #0
1000605a:	e67f      	b.n	10005d5c <__aeabi_dadd+0x174>
1000605c:	1c18      	adds	r0, r3, #0
1000605e:	1c0a      	adds	r2, r1, #0
10006060:	3820      	subs	r0, #32
10006062:	40c2      	lsrs	r2, r0
10006064:	2b20      	cmp	r3, #32
10006066:	d100      	bne.n	1000606a <__aeabi_dadd+0x482>
10006068:	e0a7      	b.n	100061ba <__aeabi_dadd+0x5d2>
1000606a:	2040      	movs	r0, #64	; 0x40
1000606c:	1ac0      	subs	r0, r0, r3
1000606e:	4081      	lsls	r1, r0
10006070:	1c08      	adds	r0, r1, #0
10006072:	4663      	mov	r3, ip
10006074:	4318      	orrs	r0, r3
10006076:	1e41      	subs	r1, r0, #1
10006078:	4188      	sbcs	r0, r1
1000607a:	4310      	orrs	r0, r2
1000607c:	2200      	movs	r2, #0
1000607e:	e68f      	b.n	10005da0 <__aeabi_dadd+0x1b8>
10006080:	4c6b      	ldr	r4, [pc, #428]	; (10006230 <__aeabi_dadd+0x648>)
10006082:	42a2      	cmp	r2, r4
10006084:	d000      	beq.n	10006088 <__aeabi_dadd+0x4a0>
10006086:	e75a      	b.n	10005f3e <__aeabi_dadd+0x356>
10006088:	1c0f      	adds	r7, r1, #0
1000608a:	4665      	mov	r5, ip
1000608c:	1c14      	adds	r4, r2, #0
1000608e:	4698      	mov	r8, r3
10006090:	e5d2      	b.n	10005c38 <__aeabi_dadd+0x50>
10006092:	2c00      	cmp	r4, #0
10006094:	d13a      	bne.n	1000610c <__aeabi_dadd+0x524>
10006096:	1c38      	adds	r0, r7, #0
10006098:	4328      	orrs	r0, r5
1000609a:	d071      	beq.n	10006180 <__aeabi_dadd+0x598>
1000609c:	43db      	mvns	r3, r3
1000609e:	2b00      	cmp	r3, #0
100060a0:	d018      	beq.n	100060d4 <__aeabi_dadd+0x4ec>
100060a2:	4863      	ldr	r0, [pc, #396]	; (10006230 <__aeabi_dadd+0x648>)
100060a4:	4282      	cmp	r2, r0
100060a6:	d06b      	beq.n	10006180 <__aeabi_dadd+0x598>
100060a8:	2b38      	cmp	r3, #56	; 0x38
100060aa:	dd00      	ble.n	100060ae <__aeabi_dadd+0x4c6>
100060ac:	e09d      	b.n	100061ea <__aeabi_dadd+0x602>
100060ae:	2b1f      	cmp	r3, #31
100060b0:	dd00      	ble.n	100060b4 <__aeabi_dadd+0x4cc>
100060b2:	e0a7      	b.n	10006204 <__aeabi_dadd+0x61c>
100060b4:	2020      	movs	r0, #32
100060b6:	1c3c      	adds	r4, r7, #0
100060b8:	1ac0      	subs	r0, r0, r3
100060ba:	4084      	lsls	r4, r0
100060bc:	46a1      	mov	r9, r4
100060be:	1c2c      	adds	r4, r5, #0
100060c0:	4682      	mov	sl, r0
100060c2:	40dc      	lsrs	r4, r3
100060c4:	4648      	mov	r0, r9
100060c6:	4304      	orrs	r4, r0
100060c8:	4650      	mov	r0, sl
100060ca:	4085      	lsls	r5, r0
100060cc:	1e68      	subs	r0, r5, #1
100060ce:	4185      	sbcs	r5, r0
100060d0:	40df      	lsrs	r7, r3
100060d2:	4325      	orrs	r5, r4
100060d4:	4465      	add	r5, ip
100060d6:	4565      	cmp	r5, ip
100060d8:	419b      	sbcs	r3, r3
100060da:	187f      	adds	r7, r7, r1
100060dc:	425b      	negs	r3, r3
100060de:	18ff      	adds	r7, r7, r3
100060e0:	1c14      	adds	r4, r2, #0
100060e2:	e664      	b.n	10005dae <__aeabi_dadd+0x1c6>
100060e4:	2a00      	cmp	r2, #0
100060e6:	d119      	bne.n	1000611c <__aeabi_dadd+0x534>
100060e8:	4662      	mov	r2, ip
100060ea:	430a      	orrs	r2, r1
100060ec:	d077      	beq.n	100061de <__aeabi_dadd+0x5f6>
100060ee:	1c0f      	adds	r7, r1, #0
100060f0:	4665      	mov	r5, ip
100060f2:	4698      	mov	r8, r3
100060f4:	4c4e      	ldr	r4, [pc, #312]	; (10006230 <__aeabi_dadd+0x648>)
100060f6:	e59f      	b.n	10005c38 <__aeabi_dadd+0x50>
100060f8:	433d      	orrs	r5, r7
100060fa:	1e6f      	subs	r7, r5, #1
100060fc:	41bd      	sbcs	r5, r7
100060fe:	2700      	movs	r7, #0
10006100:	b2ed      	uxtb	r5, r5
10006102:	e732      	b.n	10005f6a <__aeabi_dadd+0x382>
10006104:	1c04      	adds	r4, r0, #0
10006106:	2700      	movs	r7, #0
10006108:	2500      	movs	r5, #0
1000610a:	e627      	b.n	10005d5c <__aeabi_dadd+0x174>
1000610c:	4848      	ldr	r0, [pc, #288]	; (10006230 <__aeabi_dadd+0x648>)
1000610e:	4282      	cmp	r2, r0
10006110:	d036      	beq.n	10006180 <__aeabi_dadd+0x598>
10006112:	2080      	movs	r0, #128	; 0x80
10006114:	0400      	lsls	r0, r0, #16
10006116:	425b      	negs	r3, r3
10006118:	4307      	orrs	r7, r0
1000611a:	e7c5      	b.n	100060a8 <__aeabi_dadd+0x4c0>
1000611c:	4662      	mov	r2, ip
1000611e:	430a      	orrs	r2, r1
10006120:	d049      	beq.n	100061b6 <__aeabi_dadd+0x5ce>
10006122:	2480      	movs	r4, #128	; 0x80
10006124:	08ed      	lsrs	r5, r5, #3
10006126:	0778      	lsls	r0, r7, #29
10006128:	08fa      	lsrs	r2, r7, #3
1000612a:	0324      	lsls	r4, r4, #12
1000612c:	4328      	orrs	r0, r5
1000612e:	4222      	tst	r2, r4
10006130:	d009      	beq.n	10006146 <__aeabi_dadd+0x55e>
10006132:	08ce      	lsrs	r6, r1, #3
10006134:	4226      	tst	r6, r4
10006136:	d106      	bne.n	10006146 <__aeabi_dadd+0x55e>
10006138:	4662      	mov	r2, ip
1000613a:	074f      	lsls	r7, r1, #29
1000613c:	1c38      	adds	r0, r7, #0
1000613e:	08d2      	lsrs	r2, r2, #3
10006140:	4310      	orrs	r0, r2
10006142:	4698      	mov	r8, r3
10006144:	1c32      	adds	r2, r6, #0
10006146:	00d2      	lsls	r2, r2, #3
10006148:	0f47      	lsrs	r7, r0, #29
1000614a:	4317      	orrs	r7, r2
1000614c:	00c5      	lsls	r5, r0, #3
1000614e:	4c38      	ldr	r4, [pc, #224]	; (10006230 <__aeabi_dadd+0x648>)
10006150:	e572      	b.n	10005c38 <__aeabi_dadd+0x50>
10006152:	4662      	mov	r2, ip
10006154:	430a      	orrs	r2, r1
10006156:	d100      	bne.n	1000615a <__aeabi_dadd+0x572>
10006158:	e56e      	b.n	10005c38 <__aeabi_dadd+0x50>
1000615a:	4662      	mov	r2, ip
1000615c:	1aae      	subs	r6, r5, r2
1000615e:	42b5      	cmp	r5, r6
10006160:	4192      	sbcs	r2, r2
10006162:	1a78      	subs	r0, r7, r1
10006164:	4252      	negs	r2, r2
10006166:	1a82      	subs	r2, r0, r2
10006168:	0210      	lsls	r0, r2, #8
1000616a:	d400      	bmi.n	1000616e <__aeabi_dadd+0x586>
1000616c:	e655      	b.n	10005e1a <__aeabi_dadd+0x232>
1000616e:	4662      	mov	r2, ip
10006170:	1b55      	subs	r5, r2, r5
10006172:	45ac      	cmp	ip, r5
10006174:	4180      	sbcs	r0, r0
10006176:	1bca      	subs	r2, r1, r7
10006178:	4240      	negs	r0, r0
1000617a:	1a17      	subs	r7, r2, r0
1000617c:	4698      	mov	r8, r3
1000617e:	e55b      	b.n	10005c38 <__aeabi_dadd+0x50>
10006180:	1c0f      	adds	r7, r1, #0
10006182:	4665      	mov	r5, ip
10006184:	1c14      	adds	r4, r2, #0
10006186:	e557      	b.n	10005c38 <__aeabi_dadd+0x50>
10006188:	2b00      	cmp	r3, #0
1000618a:	d034      	beq.n	100061f6 <__aeabi_dadd+0x60e>
1000618c:	4663      	mov	r3, ip
1000618e:	430b      	orrs	r3, r1
10006190:	d011      	beq.n	100061b6 <__aeabi_dadd+0x5ce>
10006192:	2480      	movs	r4, #128	; 0x80
10006194:	08ed      	lsrs	r5, r5, #3
10006196:	0778      	lsls	r0, r7, #29
10006198:	08fa      	lsrs	r2, r7, #3
1000619a:	0324      	lsls	r4, r4, #12
1000619c:	4328      	orrs	r0, r5
1000619e:	4222      	tst	r2, r4
100061a0:	d0d1      	beq.n	10006146 <__aeabi_dadd+0x55e>
100061a2:	08cb      	lsrs	r3, r1, #3
100061a4:	4223      	tst	r3, r4
100061a6:	d1ce      	bne.n	10006146 <__aeabi_dadd+0x55e>
100061a8:	4662      	mov	r2, ip
100061aa:	074f      	lsls	r7, r1, #29
100061ac:	1c38      	adds	r0, r7, #0
100061ae:	08d2      	lsrs	r2, r2, #3
100061b0:	4310      	orrs	r0, r2
100061b2:	1c1a      	adds	r2, r3, #0
100061b4:	e7c7      	b.n	10006146 <__aeabi_dadd+0x55e>
100061b6:	4c1e      	ldr	r4, [pc, #120]	; (10006230 <__aeabi_dadd+0x648>)
100061b8:	e53e      	b.n	10005c38 <__aeabi_dadd+0x50>
100061ba:	2000      	movs	r0, #0
100061bc:	e759      	b.n	10006072 <__aeabi_dadd+0x48a>
100061be:	1c04      	adds	r4, r0, #0
100061c0:	1c3e      	adds	r6, r7, #0
100061c2:	3c20      	subs	r4, #32
100061c4:	40e6      	lsrs	r6, r4
100061c6:	1c34      	adds	r4, r6, #0
100061c8:	2820      	cmp	r0, #32
100061ca:	d02b      	beq.n	10006224 <__aeabi_dadd+0x63c>
100061cc:	2640      	movs	r6, #64	; 0x40
100061ce:	1a30      	subs	r0, r6, r0
100061d0:	4087      	lsls	r7, r0
100061d2:	433d      	orrs	r5, r7
100061d4:	1e6f      	subs	r7, r5, #1
100061d6:	41bd      	sbcs	r5, r7
100061d8:	2700      	movs	r7, #0
100061da:	4325      	orrs	r5, r4
100061dc:	e6c5      	b.n	10005f6a <__aeabi_dadd+0x382>
100061de:	2780      	movs	r7, #128	; 0x80
100061e0:	2600      	movs	r6, #0
100061e2:	03ff      	lsls	r7, r7, #15
100061e4:	4c12      	ldr	r4, [pc, #72]	; (10006230 <__aeabi_dadd+0x648>)
100061e6:	2500      	movs	r5, #0
100061e8:	e5b8      	b.n	10005d5c <__aeabi_dadd+0x174>
100061ea:	433d      	orrs	r5, r7
100061ec:	1e6f      	subs	r7, r5, #1
100061ee:	41bd      	sbcs	r5, r7
100061f0:	2700      	movs	r7, #0
100061f2:	b2ed      	uxtb	r5, r5
100061f4:	e76e      	b.n	100060d4 <__aeabi_dadd+0x4ec>
100061f6:	1c0f      	adds	r7, r1, #0
100061f8:	4665      	mov	r5, ip
100061fa:	4c0d      	ldr	r4, [pc, #52]	; (10006230 <__aeabi_dadd+0x648>)
100061fc:	e51c      	b.n	10005c38 <__aeabi_dadd+0x50>
100061fe:	1c0f      	adds	r7, r1, #0
10006200:	4665      	mov	r5, ip
10006202:	e519      	b.n	10005c38 <__aeabi_dadd+0x50>
10006204:	1c1c      	adds	r4, r3, #0
10006206:	1c38      	adds	r0, r7, #0
10006208:	3c20      	subs	r4, #32
1000620a:	40e0      	lsrs	r0, r4
1000620c:	1c04      	adds	r4, r0, #0
1000620e:	2b20      	cmp	r3, #32
10006210:	d00c      	beq.n	1000622c <__aeabi_dadd+0x644>
10006212:	2040      	movs	r0, #64	; 0x40
10006214:	1ac3      	subs	r3, r0, r3
10006216:	409f      	lsls	r7, r3
10006218:	433d      	orrs	r5, r7
1000621a:	1e6f      	subs	r7, r5, #1
1000621c:	41bd      	sbcs	r5, r7
1000621e:	2700      	movs	r7, #0
10006220:	4325      	orrs	r5, r4
10006222:	e757      	b.n	100060d4 <__aeabi_dadd+0x4ec>
10006224:	2700      	movs	r7, #0
10006226:	e7d4      	b.n	100061d2 <__aeabi_dadd+0x5ea>
10006228:	1c1d      	adds	r5, r3, #0
1000622a:	e5fc      	b.n	10005e26 <__aeabi_dadd+0x23e>
1000622c:	2700      	movs	r7, #0
1000622e:	e7f3      	b.n	10006218 <__aeabi_dadd+0x630>
10006230:	000007ff 	.word	0x000007ff
10006234:	ff7fffff 	.word	0xff7fffff

10006238 <__aeabi_ddiv>:
10006238:	b5f0      	push	{r4, r5, r6, r7, lr}
1000623a:	465f      	mov	r7, fp
1000623c:	4656      	mov	r6, sl
1000623e:	464d      	mov	r5, r9
10006240:	4644      	mov	r4, r8
10006242:	b4f0      	push	{r4, r5, r6, r7}
10006244:	030f      	lsls	r7, r1, #12
10006246:	b087      	sub	sp, #28
10006248:	4698      	mov	r8, r3
1000624a:	004d      	lsls	r5, r1, #1
1000624c:	0b3b      	lsrs	r3, r7, #12
1000624e:	0fcc      	lsrs	r4, r1, #31
10006250:	1c06      	adds	r6, r0, #0
10006252:	4692      	mov	sl, r2
10006254:	4681      	mov	r9, r0
10006256:	469b      	mov	fp, r3
10006258:	0d6d      	lsrs	r5, r5, #21
1000625a:	9401      	str	r4, [sp, #4]
1000625c:	d06b      	beq.n	10006336 <__aeabi_ddiv+0xfe>
1000625e:	4b66      	ldr	r3, [pc, #408]	; (100063f8 <__aeabi_ddiv+0x1c0>)
10006260:	429d      	cmp	r5, r3
10006262:	d035      	beq.n	100062d0 <__aeabi_ddiv+0x98>
10006264:	2780      	movs	r7, #128	; 0x80
10006266:	465b      	mov	r3, fp
10006268:	037f      	lsls	r7, r7, #13
1000626a:	431f      	orrs	r7, r3
1000626c:	00f3      	lsls	r3, r6, #3
1000626e:	4699      	mov	r9, r3
10006270:	4b62      	ldr	r3, [pc, #392]	; (100063fc <__aeabi_ddiv+0x1c4>)
10006272:	00ff      	lsls	r7, r7, #3
10006274:	0f40      	lsrs	r0, r0, #29
10006276:	469c      	mov	ip, r3
10006278:	4307      	orrs	r7, r0
1000627a:	2300      	movs	r3, #0
1000627c:	46bb      	mov	fp, r7
1000627e:	2600      	movs	r6, #0
10006280:	4465      	add	r5, ip
10006282:	9300      	str	r3, [sp, #0]
10006284:	4642      	mov	r2, r8
10006286:	0317      	lsls	r7, r2, #12
10006288:	0050      	lsls	r0, r2, #1
1000628a:	0fd2      	lsrs	r2, r2, #31
1000628c:	4653      	mov	r3, sl
1000628e:	0b3f      	lsrs	r7, r7, #12
10006290:	0d40      	lsrs	r0, r0, #21
10006292:	4690      	mov	r8, r2
10006294:	d100      	bne.n	10006298 <__aeabi_ddiv+0x60>
10006296:	e072      	b.n	1000637e <__aeabi_ddiv+0x146>
10006298:	4a57      	ldr	r2, [pc, #348]	; (100063f8 <__aeabi_ddiv+0x1c0>)
1000629a:	4290      	cmp	r0, r2
1000629c:	d067      	beq.n	1000636e <__aeabi_ddiv+0x136>
1000629e:	2380      	movs	r3, #128	; 0x80
100062a0:	035b      	lsls	r3, r3, #13
100062a2:	431f      	orrs	r7, r3
100062a4:	4653      	mov	r3, sl
100062a6:	4a55      	ldr	r2, [pc, #340]	; (100063fc <__aeabi_ddiv+0x1c4>)
100062a8:	0f5b      	lsrs	r3, r3, #29
100062aa:	00ff      	lsls	r7, r7, #3
100062ac:	431f      	orrs	r7, r3
100062ae:	4694      	mov	ip, r2
100062b0:	4653      	mov	r3, sl
100062b2:	2100      	movs	r1, #0
100062b4:	00db      	lsls	r3, r3, #3
100062b6:	4460      	add	r0, ip
100062b8:	4642      	mov	r2, r8
100062ba:	4062      	eors	r2, r4
100062bc:	4692      	mov	sl, r2
100062be:	1a2d      	subs	r5, r5, r0
100062c0:	430e      	orrs	r6, r1
100062c2:	2e0f      	cmp	r6, #15
100062c4:	d900      	bls.n	100062c8 <__aeabi_ddiv+0x90>
100062c6:	e0a1      	b.n	1000640c <__aeabi_ddiv+0x1d4>
100062c8:	484d      	ldr	r0, [pc, #308]	; (10006400 <__aeabi_ddiv+0x1c8>)
100062ca:	00b6      	lsls	r6, r6, #2
100062cc:	5980      	ldr	r0, [r0, r6]
100062ce:	4687      	mov	pc, r0
100062d0:	465b      	mov	r3, fp
100062d2:	431e      	orrs	r6, r3
100062d4:	d000      	beq.n	100062d8 <__aeabi_ddiv+0xa0>
100062d6:	e076      	b.n	100063c6 <__aeabi_ddiv+0x18e>
100062d8:	2300      	movs	r3, #0
100062da:	469b      	mov	fp, r3
100062dc:	4699      	mov	r9, r3
100062de:	3302      	adds	r3, #2
100062e0:	2608      	movs	r6, #8
100062e2:	9300      	str	r3, [sp, #0]
100062e4:	e7ce      	b.n	10006284 <__aeabi_ddiv+0x4c>
100062e6:	4699      	mov	r9, r3
100062e8:	4643      	mov	r3, r8
100062ea:	46bb      	mov	fp, r7
100062ec:	9301      	str	r3, [sp, #4]
100062ee:	9100      	str	r1, [sp, #0]
100062f0:	9b00      	ldr	r3, [sp, #0]
100062f2:	2b02      	cmp	r3, #2
100062f4:	d16b      	bne.n	100063ce <__aeabi_ddiv+0x196>
100062f6:	9b01      	ldr	r3, [sp, #4]
100062f8:	469a      	mov	sl, r3
100062fa:	2100      	movs	r1, #0
100062fc:	4653      	mov	r3, sl
100062fe:	2201      	movs	r2, #1
10006300:	2700      	movs	r7, #0
10006302:	4689      	mov	r9, r1
10006304:	401a      	ands	r2, r3
10006306:	4b3c      	ldr	r3, [pc, #240]	; (100063f8 <__aeabi_ddiv+0x1c0>)
10006308:	2100      	movs	r1, #0
1000630a:	033f      	lsls	r7, r7, #12
1000630c:	0d0c      	lsrs	r4, r1, #20
1000630e:	0524      	lsls	r4, r4, #20
10006310:	0b3f      	lsrs	r7, r7, #12
10006312:	4327      	orrs	r7, r4
10006314:	4c3b      	ldr	r4, [pc, #236]	; (10006404 <__aeabi_ddiv+0x1cc>)
10006316:	051b      	lsls	r3, r3, #20
10006318:	4027      	ands	r7, r4
1000631a:	431f      	orrs	r7, r3
1000631c:	007f      	lsls	r7, r7, #1
1000631e:	07d2      	lsls	r2, r2, #31
10006320:	087f      	lsrs	r7, r7, #1
10006322:	4317      	orrs	r7, r2
10006324:	4648      	mov	r0, r9
10006326:	1c39      	adds	r1, r7, #0
10006328:	b007      	add	sp, #28
1000632a:	bc3c      	pop	{r2, r3, r4, r5}
1000632c:	4690      	mov	r8, r2
1000632e:	4699      	mov	r9, r3
10006330:	46a2      	mov	sl, r4
10006332:	46ab      	mov	fp, r5
10006334:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006336:	4303      	orrs	r3, r0
10006338:	d03e      	beq.n	100063b8 <__aeabi_ddiv+0x180>
1000633a:	465b      	mov	r3, fp
1000633c:	2b00      	cmp	r3, #0
1000633e:	d100      	bne.n	10006342 <__aeabi_ddiv+0x10a>
10006340:	e19c      	b.n	1000667c <__aeabi_ddiv+0x444>
10006342:	4658      	mov	r0, fp
10006344:	f7fd fe4a 	bl	10003fdc <__clzsi2>
10006348:	2328      	movs	r3, #40	; 0x28
1000634a:	1c31      	adds	r1, r6, #0
1000634c:	1a1b      	subs	r3, r3, r0
1000634e:	1c02      	adds	r2, r0, #0
10006350:	465f      	mov	r7, fp
10006352:	40d9      	lsrs	r1, r3
10006354:	3a08      	subs	r2, #8
10006356:	4097      	lsls	r7, r2
10006358:	1c0b      	adds	r3, r1, #0
1000635a:	4096      	lsls	r6, r2
1000635c:	433b      	orrs	r3, r7
1000635e:	469b      	mov	fp, r3
10006360:	46b1      	mov	r9, r6
10006362:	2300      	movs	r3, #0
10006364:	4d28      	ldr	r5, [pc, #160]	; (10006408 <__aeabi_ddiv+0x1d0>)
10006366:	2600      	movs	r6, #0
10006368:	1a2d      	subs	r5, r5, r0
1000636a:	9300      	str	r3, [sp, #0]
1000636c:	e78a      	b.n	10006284 <__aeabi_ddiv+0x4c>
1000636e:	4652      	mov	r2, sl
10006370:	2103      	movs	r1, #3
10006372:	433a      	orrs	r2, r7
10006374:	d1a0      	bne.n	100062b8 <__aeabi_ddiv+0x80>
10006376:	2700      	movs	r7, #0
10006378:	2300      	movs	r3, #0
1000637a:	2102      	movs	r1, #2
1000637c:	e79c      	b.n	100062b8 <__aeabi_ddiv+0x80>
1000637e:	4652      	mov	r2, sl
10006380:	433a      	orrs	r2, r7
10006382:	d015      	beq.n	100063b0 <__aeabi_ddiv+0x178>
10006384:	2f00      	cmp	r7, #0
10006386:	d100      	bne.n	1000638a <__aeabi_ddiv+0x152>
10006388:	e185      	b.n	10006696 <__aeabi_ddiv+0x45e>
1000638a:	1c38      	adds	r0, r7, #0
1000638c:	f7fd fe26 	bl	10003fdc <__clzsi2>
10006390:	1c02      	adds	r2, r0, #0
10006392:	2128      	movs	r1, #40	; 0x28
10006394:	4650      	mov	r0, sl
10006396:	1a89      	subs	r1, r1, r2
10006398:	1c13      	adds	r3, r2, #0
1000639a:	40c8      	lsrs	r0, r1
1000639c:	4651      	mov	r1, sl
1000639e:	3b08      	subs	r3, #8
100063a0:	4099      	lsls	r1, r3
100063a2:	409f      	lsls	r7, r3
100063a4:	1c0b      	adds	r3, r1, #0
100063a6:	4307      	orrs	r7, r0
100063a8:	4817      	ldr	r0, [pc, #92]	; (10006408 <__aeabi_ddiv+0x1d0>)
100063aa:	2100      	movs	r1, #0
100063ac:	1a80      	subs	r0, r0, r2
100063ae:	e783      	b.n	100062b8 <__aeabi_ddiv+0x80>
100063b0:	2700      	movs	r7, #0
100063b2:	2300      	movs	r3, #0
100063b4:	2101      	movs	r1, #1
100063b6:	e77f      	b.n	100062b8 <__aeabi_ddiv+0x80>
100063b8:	2300      	movs	r3, #0
100063ba:	469b      	mov	fp, r3
100063bc:	4699      	mov	r9, r3
100063be:	3301      	adds	r3, #1
100063c0:	2604      	movs	r6, #4
100063c2:	9300      	str	r3, [sp, #0]
100063c4:	e75e      	b.n	10006284 <__aeabi_ddiv+0x4c>
100063c6:	2303      	movs	r3, #3
100063c8:	260c      	movs	r6, #12
100063ca:	9300      	str	r3, [sp, #0]
100063cc:	e75a      	b.n	10006284 <__aeabi_ddiv+0x4c>
100063ce:	2b03      	cmp	r3, #3
100063d0:	d100      	bne.n	100063d4 <__aeabi_ddiv+0x19c>
100063d2:	e23c      	b.n	1000684e <__aeabi_ddiv+0x616>
100063d4:	2b01      	cmp	r3, #1
100063d6:	d000      	beq.n	100063da <__aeabi_ddiv+0x1a2>
100063d8:	e1bf      	b.n	1000675a <__aeabi_ddiv+0x522>
100063da:	1c1a      	adds	r2, r3, #0
100063dc:	9b01      	ldr	r3, [sp, #4]
100063de:	401a      	ands	r2, r3
100063e0:	2100      	movs	r1, #0
100063e2:	2300      	movs	r3, #0
100063e4:	2700      	movs	r7, #0
100063e6:	4689      	mov	r9, r1
100063e8:	e78e      	b.n	10006308 <__aeabi_ddiv+0xd0>
100063ea:	2300      	movs	r3, #0
100063ec:	2780      	movs	r7, #128	; 0x80
100063ee:	4699      	mov	r9, r3
100063f0:	2200      	movs	r2, #0
100063f2:	033f      	lsls	r7, r7, #12
100063f4:	4b00      	ldr	r3, [pc, #0]	; (100063f8 <__aeabi_ddiv+0x1c0>)
100063f6:	e787      	b.n	10006308 <__aeabi_ddiv+0xd0>
100063f8:	000007ff 	.word	0x000007ff
100063fc:	fffffc01 	.word	0xfffffc01
10006400:	10007ae4 	.word	0x10007ae4
10006404:	800fffff 	.word	0x800fffff
10006408:	fffffc0d 	.word	0xfffffc0d
1000640c:	45bb      	cmp	fp, r7
1000640e:	d900      	bls.n	10006412 <__aeabi_ddiv+0x1da>
10006410:	e151      	b.n	100066b6 <__aeabi_ddiv+0x47e>
10006412:	d100      	bne.n	10006416 <__aeabi_ddiv+0x1de>
10006414:	e14c      	b.n	100066b0 <__aeabi_ddiv+0x478>
10006416:	464a      	mov	r2, r9
10006418:	9203      	str	r2, [sp, #12]
1000641a:	2200      	movs	r2, #0
1000641c:	465c      	mov	r4, fp
1000641e:	4690      	mov	r8, r2
10006420:	3d01      	subs	r5, #1
10006422:	0e18      	lsrs	r0, r3, #24
10006424:	023f      	lsls	r7, r7, #8
10006426:	4338      	orrs	r0, r7
10006428:	021b      	lsls	r3, r3, #8
1000642a:	9301      	str	r3, [sp, #4]
1000642c:	0c03      	lsrs	r3, r0, #16
1000642e:	4699      	mov	r9, r3
10006430:	0403      	lsls	r3, r0, #16
10006432:	0c1b      	lsrs	r3, r3, #16
10006434:	4649      	mov	r1, r9
10006436:	1c06      	adds	r6, r0, #0
10006438:	1c20      	adds	r0, r4, #0
1000643a:	1c1f      	adds	r7, r3, #0
1000643c:	9300      	str	r3, [sp, #0]
1000643e:	f7fd fc4b 	bl	10003cd8 <__aeabi_uidiv>
10006442:	1c02      	adds	r2, r0, #0
10006444:	437a      	muls	r2, r7
10006446:	9002      	str	r0, [sp, #8]
10006448:	4649      	mov	r1, r9
1000644a:	1c20      	adds	r0, r4, #0
1000644c:	1c17      	adds	r7, r2, #0
1000644e:	f7fd fcc9 	bl	10003de4 <__aeabi_uidivmod>
10006452:	9b03      	ldr	r3, [sp, #12]
10006454:	0409      	lsls	r1, r1, #16
10006456:	0c1b      	lsrs	r3, r3, #16
10006458:	4319      	orrs	r1, r3
1000645a:	428f      	cmp	r7, r1
1000645c:	d90c      	bls.n	10006478 <__aeabi_ddiv+0x240>
1000645e:	9b02      	ldr	r3, [sp, #8]
10006460:	1989      	adds	r1, r1, r6
10006462:	3b01      	subs	r3, #1
10006464:	428e      	cmp	r6, r1
10006466:	d900      	bls.n	1000646a <__aeabi_ddiv+0x232>
10006468:	e152      	b.n	10006710 <__aeabi_ddiv+0x4d8>
1000646a:	428f      	cmp	r7, r1
1000646c:	d800      	bhi.n	10006470 <__aeabi_ddiv+0x238>
1000646e:	e14f      	b.n	10006710 <__aeabi_ddiv+0x4d8>
10006470:	9b02      	ldr	r3, [sp, #8]
10006472:	1989      	adds	r1, r1, r6
10006474:	3b02      	subs	r3, #2
10006476:	9302      	str	r3, [sp, #8]
10006478:	1bcc      	subs	r4, r1, r7
1000647a:	1c20      	adds	r0, r4, #0
1000647c:	4649      	mov	r1, r9
1000647e:	f7fd fc2b 	bl	10003cd8 <__aeabi_uidiv>
10006482:	9f00      	ldr	r7, [sp, #0]
10006484:	4683      	mov	fp, r0
10006486:	4347      	muls	r7, r0
10006488:	4649      	mov	r1, r9
1000648a:	1c20      	adds	r0, r4, #0
1000648c:	f7fd fcaa 	bl	10003de4 <__aeabi_uidivmod>
10006490:	9a03      	ldr	r2, [sp, #12]
10006492:	040b      	lsls	r3, r1, #16
10006494:	0414      	lsls	r4, r2, #16
10006496:	0c24      	lsrs	r4, r4, #16
10006498:	4323      	orrs	r3, r4
1000649a:	429f      	cmp	r7, r3
1000649c:	d90d      	bls.n	100064ba <__aeabi_ddiv+0x282>
1000649e:	465a      	mov	r2, fp
100064a0:	199b      	adds	r3, r3, r6
100064a2:	3a01      	subs	r2, #1
100064a4:	429e      	cmp	r6, r3
100064a6:	d900      	bls.n	100064aa <__aeabi_ddiv+0x272>
100064a8:	e130      	b.n	1000670c <__aeabi_ddiv+0x4d4>
100064aa:	429f      	cmp	r7, r3
100064ac:	d800      	bhi.n	100064b0 <__aeabi_ddiv+0x278>
100064ae:	e12d      	b.n	1000670c <__aeabi_ddiv+0x4d4>
100064b0:	2202      	movs	r2, #2
100064b2:	4252      	negs	r2, r2
100064b4:	4694      	mov	ip, r2
100064b6:	199b      	adds	r3, r3, r6
100064b8:	44e3      	add	fp, ip
100064ba:	9a02      	ldr	r2, [sp, #8]
100064bc:	1bdb      	subs	r3, r3, r7
100064be:	0417      	lsls	r7, r2, #16
100064c0:	465a      	mov	r2, fp
100064c2:	433a      	orrs	r2, r7
100064c4:	4693      	mov	fp, r2
100064c6:	9c01      	ldr	r4, [sp, #4]
100064c8:	0c17      	lsrs	r7, r2, #16
100064ca:	0c22      	lsrs	r2, r4, #16
100064cc:	1c10      	adds	r0, r2, #0
100064ce:	9204      	str	r2, [sp, #16]
100064d0:	465a      	mov	r2, fp
100064d2:	0411      	lsls	r1, r2, #16
100064d4:	0422      	lsls	r2, r4, #16
100064d6:	0c12      	lsrs	r2, r2, #16
100064d8:	1c14      	adds	r4, r2, #0
100064da:	0c09      	lsrs	r1, r1, #16
100064dc:	437c      	muls	r4, r7
100064de:	9205      	str	r2, [sp, #20]
100064e0:	434a      	muls	r2, r1
100064e2:	4341      	muls	r1, r0
100064e4:	4347      	muls	r7, r0
100064e6:	1861      	adds	r1, r4, r1
100064e8:	0c10      	lsrs	r0, r2, #16
100064ea:	1809      	adds	r1, r1, r0
100064ec:	428c      	cmp	r4, r1
100064ee:	d903      	bls.n	100064f8 <__aeabi_ddiv+0x2c0>
100064f0:	2080      	movs	r0, #128	; 0x80
100064f2:	0240      	lsls	r0, r0, #9
100064f4:	4684      	mov	ip, r0
100064f6:	4467      	add	r7, ip
100064f8:	0c0c      	lsrs	r4, r1, #16
100064fa:	0412      	lsls	r2, r2, #16
100064fc:	0408      	lsls	r0, r1, #16
100064fe:	0c12      	lsrs	r2, r2, #16
10006500:	193c      	adds	r4, r7, r4
10006502:	1881      	adds	r1, r0, r2
10006504:	42a3      	cmp	r3, r4
10006506:	d200      	bcs.n	1000650a <__aeabi_ddiv+0x2d2>
10006508:	e0e5      	b.n	100066d6 <__aeabi_ddiv+0x49e>
1000650a:	d100      	bne.n	1000650e <__aeabi_ddiv+0x2d6>
1000650c:	e0df      	b.n	100066ce <__aeabi_ddiv+0x496>
1000650e:	1b1f      	subs	r7, r3, r4
10006510:	4643      	mov	r3, r8
10006512:	1a5c      	subs	r4, r3, r1
10006514:	45a0      	cmp	r8, r4
10006516:	4192      	sbcs	r2, r2
10006518:	4252      	negs	r2, r2
1000651a:	1abf      	subs	r7, r7, r2
1000651c:	42b7      	cmp	r7, r6
1000651e:	d100      	bne.n	10006522 <__aeabi_ddiv+0x2ea>
10006520:	e10e      	b.n	10006740 <__aeabi_ddiv+0x508>
10006522:	1c38      	adds	r0, r7, #0
10006524:	4649      	mov	r1, r9
10006526:	f7fd fbd7 	bl	10003cd8 <__aeabi_uidiv>
1000652a:	9b00      	ldr	r3, [sp, #0]
1000652c:	9002      	str	r0, [sp, #8]
1000652e:	4343      	muls	r3, r0
10006530:	4649      	mov	r1, r9
10006532:	1c38      	adds	r0, r7, #0
10006534:	4698      	mov	r8, r3
10006536:	f7fd fc55 	bl	10003de4 <__aeabi_uidivmod>
1000653a:	0c23      	lsrs	r3, r4, #16
1000653c:	040f      	lsls	r7, r1, #16
1000653e:	431f      	orrs	r7, r3
10006540:	45b8      	cmp	r8, r7
10006542:	d90c      	bls.n	1000655e <__aeabi_ddiv+0x326>
10006544:	9b02      	ldr	r3, [sp, #8]
10006546:	19bf      	adds	r7, r7, r6
10006548:	3b01      	subs	r3, #1
1000654a:	42be      	cmp	r6, r7
1000654c:	d900      	bls.n	10006550 <__aeabi_ddiv+0x318>
1000654e:	e0fb      	b.n	10006748 <__aeabi_ddiv+0x510>
10006550:	45b8      	cmp	r8, r7
10006552:	d800      	bhi.n	10006556 <__aeabi_ddiv+0x31e>
10006554:	e0f8      	b.n	10006748 <__aeabi_ddiv+0x510>
10006556:	9b02      	ldr	r3, [sp, #8]
10006558:	19bf      	adds	r7, r7, r6
1000655a:	3b02      	subs	r3, #2
1000655c:	9302      	str	r3, [sp, #8]
1000655e:	4643      	mov	r3, r8
10006560:	1aff      	subs	r7, r7, r3
10006562:	4649      	mov	r1, r9
10006564:	1c38      	adds	r0, r7, #0
10006566:	f7fd fbb7 	bl	10003cd8 <__aeabi_uidiv>
1000656a:	9b00      	ldr	r3, [sp, #0]
1000656c:	9003      	str	r0, [sp, #12]
1000656e:	4343      	muls	r3, r0
10006570:	4649      	mov	r1, r9
10006572:	1c38      	adds	r0, r7, #0
10006574:	4698      	mov	r8, r3
10006576:	f7fd fc35 	bl	10003de4 <__aeabi_uidivmod>
1000657a:	0424      	lsls	r4, r4, #16
1000657c:	0409      	lsls	r1, r1, #16
1000657e:	0c24      	lsrs	r4, r4, #16
10006580:	4321      	orrs	r1, r4
10006582:	4588      	cmp	r8, r1
10006584:	d90c      	bls.n	100065a0 <__aeabi_ddiv+0x368>
10006586:	9b03      	ldr	r3, [sp, #12]
10006588:	1989      	adds	r1, r1, r6
1000658a:	3b01      	subs	r3, #1
1000658c:	428e      	cmp	r6, r1
1000658e:	d900      	bls.n	10006592 <__aeabi_ddiv+0x35a>
10006590:	e0dc      	b.n	1000674c <__aeabi_ddiv+0x514>
10006592:	4588      	cmp	r8, r1
10006594:	d800      	bhi.n	10006598 <__aeabi_ddiv+0x360>
10006596:	e0d9      	b.n	1000674c <__aeabi_ddiv+0x514>
10006598:	9b03      	ldr	r3, [sp, #12]
1000659a:	1989      	adds	r1, r1, r6
1000659c:	3b02      	subs	r3, #2
1000659e:	9303      	str	r3, [sp, #12]
100065a0:	4643      	mov	r3, r8
100065a2:	1ac9      	subs	r1, r1, r3
100065a4:	9b02      	ldr	r3, [sp, #8]
100065a6:	9a03      	ldr	r2, [sp, #12]
100065a8:	041b      	lsls	r3, r3, #16
100065aa:	9c05      	ldr	r4, [sp, #20]
100065ac:	431a      	orrs	r2, r3
100065ae:	0c10      	lsrs	r0, r2, #16
100065b0:	0413      	lsls	r3, r2, #16
100065b2:	4691      	mov	r9, r2
100065b4:	1c22      	adds	r2, r4, #0
100065b6:	9f04      	ldr	r7, [sp, #16]
100065b8:	0c1b      	lsrs	r3, r3, #16
100065ba:	435a      	muls	r2, r3
100065bc:	4344      	muls	r4, r0
100065be:	437b      	muls	r3, r7
100065c0:	4378      	muls	r0, r7
100065c2:	18e3      	adds	r3, r4, r3
100065c4:	0c17      	lsrs	r7, r2, #16
100065c6:	19db      	adds	r3, r3, r7
100065c8:	429c      	cmp	r4, r3
100065ca:	d903      	bls.n	100065d4 <__aeabi_ddiv+0x39c>
100065cc:	2480      	movs	r4, #128	; 0x80
100065ce:	0264      	lsls	r4, r4, #9
100065d0:	46a4      	mov	ip, r4
100065d2:	4460      	add	r0, ip
100065d4:	0c1c      	lsrs	r4, r3, #16
100065d6:	0412      	lsls	r2, r2, #16
100065d8:	041b      	lsls	r3, r3, #16
100065da:	0c12      	lsrs	r2, r2, #16
100065dc:	1900      	adds	r0, r0, r4
100065de:	189b      	adds	r3, r3, r2
100065e0:	4281      	cmp	r1, r0
100065e2:	d200      	bcs.n	100065e6 <__aeabi_ddiv+0x3ae>
100065e4:	e096      	b.n	10006714 <__aeabi_ddiv+0x4dc>
100065e6:	d100      	bne.n	100065ea <__aeabi_ddiv+0x3b2>
100065e8:	e0fc      	b.n	100067e4 <__aeabi_ddiv+0x5ac>
100065ea:	464a      	mov	r2, r9
100065ec:	2301      	movs	r3, #1
100065ee:	431a      	orrs	r2, r3
100065f0:	4691      	mov	r9, r2
100065f2:	4b9b      	ldr	r3, [pc, #620]	; (10006860 <__aeabi_ddiv+0x628>)
100065f4:	18eb      	adds	r3, r5, r3
100065f6:	2b00      	cmp	r3, #0
100065f8:	dc00      	bgt.n	100065fc <__aeabi_ddiv+0x3c4>
100065fa:	e099      	b.n	10006730 <__aeabi_ddiv+0x4f8>
100065fc:	464a      	mov	r2, r9
100065fe:	0752      	lsls	r2, r2, #29
10006600:	d00a      	beq.n	10006618 <__aeabi_ddiv+0x3e0>
10006602:	220f      	movs	r2, #15
10006604:	4649      	mov	r1, r9
10006606:	400a      	ands	r2, r1
10006608:	2a04      	cmp	r2, #4
1000660a:	d005      	beq.n	10006618 <__aeabi_ddiv+0x3e0>
1000660c:	3104      	adds	r1, #4
1000660e:	4549      	cmp	r1, r9
10006610:	4192      	sbcs	r2, r2
10006612:	4689      	mov	r9, r1
10006614:	4252      	negs	r2, r2
10006616:	4493      	add	fp, r2
10006618:	465a      	mov	r2, fp
1000661a:	01d2      	lsls	r2, r2, #7
1000661c:	d506      	bpl.n	1000662c <__aeabi_ddiv+0x3f4>
1000661e:	465a      	mov	r2, fp
10006620:	4b90      	ldr	r3, [pc, #576]	; (10006864 <__aeabi_ddiv+0x62c>)
10006622:	401a      	ands	r2, r3
10006624:	2380      	movs	r3, #128	; 0x80
10006626:	4693      	mov	fp, r2
10006628:	00db      	lsls	r3, r3, #3
1000662a:	18eb      	adds	r3, r5, r3
1000662c:	4a8e      	ldr	r2, [pc, #568]	; (10006868 <__aeabi_ddiv+0x630>)
1000662e:	4293      	cmp	r3, r2
10006630:	dd00      	ble.n	10006634 <__aeabi_ddiv+0x3fc>
10006632:	e662      	b.n	100062fa <__aeabi_ddiv+0xc2>
10006634:	464a      	mov	r2, r9
10006636:	4659      	mov	r1, fp
10006638:	08d2      	lsrs	r2, r2, #3
1000663a:	0749      	lsls	r1, r1, #29
1000663c:	4311      	orrs	r1, r2
1000663e:	465a      	mov	r2, fp
10006640:	4689      	mov	r9, r1
10006642:	0257      	lsls	r7, r2, #9
10006644:	4651      	mov	r1, sl
10006646:	2201      	movs	r2, #1
10006648:	055b      	lsls	r3, r3, #21
1000664a:	0b3f      	lsrs	r7, r7, #12
1000664c:	0d5b      	lsrs	r3, r3, #21
1000664e:	400a      	ands	r2, r1
10006650:	e65a      	b.n	10006308 <__aeabi_ddiv+0xd0>
10006652:	2080      	movs	r0, #128	; 0x80
10006654:	465a      	mov	r2, fp
10006656:	0300      	lsls	r0, r0, #12
10006658:	4202      	tst	r2, r0
1000665a:	d008      	beq.n	1000666e <__aeabi_ddiv+0x436>
1000665c:	4207      	tst	r7, r0
1000665e:	d106      	bne.n	1000666e <__aeabi_ddiv+0x436>
10006660:	4307      	orrs	r7, r0
10006662:	033f      	lsls	r7, r7, #12
10006664:	4699      	mov	r9, r3
10006666:	0b3f      	lsrs	r7, r7, #12
10006668:	4642      	mov	r2, r8
1000666a:	4b80      	ldr	r3, [pc, #512]	; (1000686c <__aeabi_ddiv+0x634>)
1000666c:	e64c      	b.n	10006308 <__aeabi_ddiv+0xd0>
1000666e:	465f      	mov	r7, fp
10006670:	4307      	orrs	r7, r0
10006672:	033f      	lsls	r7, r7, #12
10006674:	0b3f      	lsrs	r7, r7, #12
10006676:	1c22      	adds	r2, r4, #0
10006678:	4b7c      	ldr	r3, [pc, #496]	; (1000686c <__aeabi_ddiv+0x634>)
1000667a:	e645      	b.n	10006308 <__aeabi_ddiv+0xd0>
1000667c:	f7fd fcae 	bl	10003fdc <__clzsi2>
10006680:	1c03      	adds	r3, r0, #0
10006682:	3020      	adds	r0, #32
10006684:	2827      	cmp	r0, #39	; 0x27
10006686:	dc00      	bgt.n	1000668a <__aeabi_ddiv+0x452>
10006688:	e65e      	b.n	10006348 <__aeabi_ddiv+0x110>
1000668a:	3b08      	subs	r3, #8
1000668c:	409e      	lsls	r6, r3
1000668e:	2300      	movs	r3, #0
10006690:	46b3      	mov	fp, r6
10006692:	4699      	mov	r9, r3
10006694:	e665      	b.n	10006362 <__aeabi_ddiv+0x12a>
10006696:	4650      	mov	r0, sl
10006698:	f7fd fca0 	bl	10003fdc <__clzsi2>
1000669c:	1c02      	adds	r2, r0, #0
1000669e:	3220      	adds	r2, #32
100066a0:	2a27      	cmp	r2, #39	; 0x27
100066a2:	dc00      	bgt.n	100066a6 <__aeabi_ddiv+0x46e>
100066a4:	e675      	b.n	10006392 <__aeabi_ddiv+0x15a>
100066a6:	4657      	mov	r7, sl
100066a8:	3808      	subs	r0, #8
100066aa:	4087      	lsls	r7, r0
100066ac:	2300      	movs	r3, #0
100066ae:	e67b      	b.n	100063a8 <__aeabi_ddiv+0x170>
100066b0:	4599      	cmp	r9, r3
100066b2:	d200      	bcs.n	100066b6 <__aeabi_ddiv+0x47e>
100066b4:	e6af      	b.n	10006416 <__aeabi_ddiv+0x1de>
100066b6:	465a      	mov	r2, fp
100066b8:	4659      	mov	r1, fp
100066ba:	0854      	lsrs	r4, r2, #1
100066bc:	464a      	mov	r2, r9
100066be:	07c8      	lsls	r0, r1, #31
100066c0:	0852      	lsrs	r2, r2, #1
100066c2:	4302      	orrs	r2, r0
100066c4:	9203      	str	r2, [sp, #12]
100066c6:	464a      	mov	r2, r9
100066c8:	07d2      	lsls	r2, r2, #31
100066ca:	4690      	mov	r8, r2
100066cc:	e6a9      	b.n	10006422 <__aeabi_ddiv+0x1ea>
100066ce:	2700      	movs	r7, #0
100066d0:	4588      	cmp	r8, r1
100066d2:	d300      	bcc.n	100066d6 <__aeabi_ddiv+0x49e>
100066d4:	e71c      	b.n	10006510 <__aeabi_ddiv+0x2d8>
100066d6:	9f01      	ldr	r7, [sp, #4]
100066d8:	465a      	mov	r2, fp
100066da:	46bc      	mov	ip, r7
100066dc:	44e0      	add	r8, ip
100066de:	45b8      	cmp	r8, r7
100066e0:	41bf      	sbcs	r7, r7
100066e2:	427f      	negs	r7, r7
100066e4:	19bf      	adds	r7, r7, r6
100066e6:	18ff      	adds	r7, r7, r3
100066e8:	3a01      	subs	r2, #1
100066ea:	42be      	cmp	r6, r7
100066ec:	d206      	bcs.n	100066fc <__aeabi_ddiv+0x4c4>
100066ee:	42bc      	cmp	r4, r7
100066f0:	d85f      	bhi.n	100067b2 <__aeabi_ddiv+0x57a>
100066f2:	d100      	bne.n	100066f6 <__aeabi_ddiv+0x4be>
100066f4:	e09f      	b.n	10006836 <__aeabi_ddiv+0x5fe>
100066f6:	1b3f      	subs	r7, r7, r4
100066f8:	4693      	mov	fp, r2
100066fa:	e709      	b.n	10006510 <__aeabi_ddiv+0x2d8>
100066fc:	42b7      	cmp	r7, r6
100066fe:	d1fa      	bne.n	100066f6 <__aeabi_ddiv+0x4be>
10006700:	9b01      	ldr	r3, [sp, #4]
10006702:	4543      	cmp	r3, r8
10006704:	d9f3      	bls.n	100066ee <__aeabi_ddiv+0x4b6>
10006706:	1b37      	subs	r7, r6, r4
10006708:	4693      	mov	fp, r2
1000670a:	e701      	b.n	10006510 <__aeabi_ddiv+0x2d8>
1000670c:	4693      	mov	fp, r2
1000670e:	e6d4      	b.n	100064ba <__aeabi_ddiv+0x282>
10006710:	9302      	str	r3, [sp, #8]
10006712:	e6b1      	b.n	10006478 <__aeabi_ddiv+0x240>
10006714:	464a      	mov	r2, r9
10006716:	1989      	adds	r1, r1, r6
10006718:	3a01      	subs	r2, #1
1000671a:	428e      	cmp	r6, r1
1000671c:	d918      	bls.n	10006750 <__aeabi_ddiv+0x518>
1000671e:	4691      	mov	r9, r2
10006720:	4281      	cmp	r1, r0
10006722:	d000      	beq.n	10006726 <__aeabi_ddiv+0x4ee>
10006724:	e761      	b.n	100065ea <__aeabi_ddiv+0x3b2>
10006726:	9a01      	ldr	r2, [sp, #4]
10006728:	429a      	cmp	r2, r3
1000672a:	d000      	beq.n	1000672e <__aeabi_ddiv+0x4f6>
1000672c:	e75d      	b.n	100065ea <__aeabi_ddiv+0x3b2>
1000672e:	e760      	b.n	100065f2 <__aeabi_ddiv+0x3ba>
10006730:	4f4f      	ldr	r7, [pc, #316]	; (10006870 <__aeabi_ddiv+0x638>)
10006732:	1b7f      	subs	r7, r7, r5
10006734:	2f38      	cmp	r7, #56	; 0x38
10006736:	dd13      	ble.n	10006760 <__aeabi_ddiv+0x528>
10006738:	2201      	movs	r2, #1
1000673a:	4653      	mov	r3, sl
1000673c:	401a      	ands	r2, r3
1000673e:	e64f      	b.n	100063e0 <__aeabi_ddiv+0x1a8>
10006740:	2301      	movs	r3, #1
10006742:	425b      	negs	r3, r3
10006744:	4699      	mov	r9, r3
10006746:	e754      	b.n	100065f2 <__aeabi_ddiv+0x3ba>
10006748:	9302      	str	r3, [sp, #8]
1000674a:	e708      	b.n	1000655e <__aeabi_ddiv+0x326>
1000674c:	9303      	str	r3, [sp, #12]
1000674e:	e727      	b.n	100065a0 <__aeabi_ddiv+0x368>
10006750:	4288      	cmp	r0, r1
10006752:	d83c      	bhi.n	100067ce <__aeabi_ddiv+0x596>
10006754:	d074      	beq.n	10006840 <__aeabi_ddiv+0x608>
10006756:	4691      	mov	r9, r2
10006758:	e747      	b.n	100065ea <__aeabi_ddiv+0x3b2>
1000675a:	9b01      	ldr	r3, [sp, #4]
1000675c:	469a      	mov	sl, r3
1000675e:	e748      	b.n	100065f2 <__aeabi_ddiv+0x3ba>
10006760:	2f1f      	cmp	r7, #31
10006762:	dc44      	bgt.n	100067ee <__aeabi_ddiv+0x5b6>
10006764:	4b43      	ldr	r3, [pc, #268]	; (10006874 <__aeabi_ddiv+0x63c>)
10006766:	464a      	mov	r2, r9
10006768:	469c      	mov	ip, r3
1000676a:	465b      	mov	r3, fp
1000676c:	4465      	add	r5, ip
1000676e:	40fa      	lsrs	r2, r7
10006770:	40ab      	lsls	r3, r5
10006772:	4313      	orrs	r3, r2
10006774:	464a      	mov	r2, r9
10006776:	40aa      	lsls	r2, r5
10006778:	1c15      	adds	r5, r2, #0
1000677a:	1e6a      	subs	r2, r5, #1
1000677c:	4195      	sbcs	r5, r2
1000677e:	465a      	mov	r2, fp
10006780:	40fa      	lsrs	r2, r7
10006782:	432b      	orrs	r3, r5
10006784:	1c17      	adds	r7, r2, #0
10006786:	075a      	lsls	r2, r3, #29
10006788:	d009      	beq.n	1000679e <__aeabi_ddiv+0x566>
1000678a:	220f      	movs	r2, #15
1000678c:	401a      	ands	r2, r3
1000678e:	2a04      	cmp	r2, #4
10006790:	d005      	beq.n	1000679e <__aeabi_ddiv+0x566>
10006792:	1d1a      	adds	r2, r3, #4
10006794:	429a      	cmp	r2, r3
10006796:	419b      	sbcs	r3, r3
10006798:	425b      	negs	r3, r3
1000679a:	18ff      	adds	r7, r7, r3
1000679c:	1c13      	adds	r3, r2, #0
1000679e:	023a      	lsls	r2, r7, #8
100067a0:	d53e      	bpl.n	10006820 <__aeabi_ddiv+0x5e8>
100067a2:	4653      	mov	r3, sl
100067a4:	2201      	movs	r2, #1
100067a6:	2100      	movs	r1, #0
100067a8:	401a      	ands	r2, r3
100067aa:	2700      	movs	r7, #0
100067ac:	2301      	movs	r3, #1
100067ae:	4689      	mov	r9, r1
100067b0:	e5aa      	b.n	10006308 <__aeabi_ddiv+0xd0>
100067b2:	2302      	movs	r3, #2
100067b4:	425b      	negs	r3, r3
100067b6:	469c      	mov	ip, r3
100067b8:	9a01      	ldr	r2, [sp, #4]
100067ba:	44e3      	add	fp, ip
100067bc:	4694      	mov	ip, r2
100067be:	44e0      	add	r8, ip
100067c0:	4590      	cmp	r8, r2
100067c2:	419b      	sbcs	r3, r3
100067c4:	425b      	negs	r3, r3
100067c6:	199b      	adds	r3, r3, r6
100067c8:	19df      	adds	r7, r3, r7
100067ca:	1b3f      	subs	r7, r7, r4
100067cc:	e6a0      	b.n	10006510 <__aeabi_ddiv+0x2d8>
100067ce:	9f01      	ldr	r7, [sp, #4]
100067d0:	464a      	mov	r2, r9
100067d2:	007c      	lsls	r4, r7, #1
100067d4:	42bc      	cmp	r4, r7
100067d6:	41bf      	sbcs	r7, r7
100067d8:	427f      	negs	r7, r7
100067da:	19bf      	adds	r7, r7, r6
100067dc:	3a02      	subs	r2, #2
100067de:	19c9      	adds	r1, r1, r7
100067e0:	9401      	str	r4, [sp, #4]
100067e2:	e79c      	b.n	1000671e <__aeabi_ddiv+0x4e6>
100067e4:	2b00      	cmp	r3, #0
100067e6:	d195      	bne.n	10006714 <__aeabi_ddiv+0x4dc>
100067e8:	2200      	movs	r2, #0
100067ea:	9201      	str	r2, [sp, #4]
100067ec:	e79b      	b.n	10006726 <__aeabi_ddiv+0x4ee>
100067ee:	465a      	mov	r2, fp
100067f0:	4b21      	ldr	r3, [pc, #132]	; (10006878 <__aeabi_ddiv+0x640>)
100067f2:	1b5b      	subs	r3, r3, r5
100067f4:	40da      	lsrs	r2, r3
100067f6:	2f20      	cmp	r7, #32
100067f8:	d027      	beq.n	1000684a <__aeabi_ddiv+0x612>
100067fa:	4b20      	ldr	r3, [pc, #128]	; (1000687c <__aeabi_ddiv+0x644>)
100067fc:	469c      	mov	ip, r3
100067fe:	465b      	mov	r3, fp
10006800:	4465      	add	r5, ip
10006802:	40ab      	lsls	r3, r5
10006804:	4649      	mov	r1, r9
10006806:	430b      	orrs	r3, r1
10006808:	1e59      	subs	r1, r3, #1
1000680a:	418b      	sbcs	r3, r1
1000680c:	4313      	orrs	r3, r2
1000680e:	2207      	movs	r2, #7
10006810:	2700      	movs	r7, #0
10006812:	401a      	ands	r2, r3
10006814:	d007      	beq.n	10006826 <__aeabi_ddiv+0x5ee>
10006816:	220f      	movs	r2, #15
10006818:	2700      	movs	r7, #0
1000681a:	401a      	ands	r2, r3
1000681c:	2a04      	cmp	r2, #4
1000681e:	d1b8      	bne.n	10006792 <__aeabi_ddiv+0x55a>
10006820:	077a      	lsls	r2, r7, #29
10006822:	027f      	lsls	r7, r7, #9
10006824:	0b3f      	lsrs	r7, r7, #12
10006826:	08db      	lsrs	r3, r3, #3
10006828:	4313      	orrs	r3, r2
1000682a:	4699      	mov	r9, r3
1000682c:	2201      	movs	r2, #1
1000682e:	4653      	mov	r3, sl
10006830:	401a      	ands	r2, r3
10006832:	2300      	movs	r3, #0
10006834:	e568      	b.n	10006308 <__aeabi_ddiv+0xd0>
10006836:	4541      	cmp	r1, r8
10006838:	d8bb      	bhi.n	100067b2 <__aeabi_ddiv+0x57a>
1000683a:	4693      	mov	fp, r2
1000683c:	2700      	movs	r7, #0
1000683e:	e667      	b.n	10006510 <__aeabi_ddiv+0x2d8>
10006840:	9c01      	ldr	r4, [sp, #4]
10006842:	429c      	cmp	r4, r3
10006844:	d3c3      	bcc.n	100067ce <__aeabi_ddiv+0x596>
10006846:	4691      	mov	r9, r2
10006848:	e76d      	b.n	10006726 <__aeabi_ddiv+0x4ee>
1000684a:	2300      	movs	r3, #0
1000684c:	e7da      	b.n	10006804 <__aeabi_ddiv+0x5cc>
1000684e:	2780      	movs	r7, #128	; 0x80
10006850:	465b      	mov	r3, fp
10006852:	033f      	lsls	r7, r7, #12
10006854:	431f      	orrs	r7, r3
10006856:	033f      	lsls	r7, r7, #12
10006858:	0b3f      	lsrs	r7, r7, #12
1000685a:	9a01      	ldr	r2, [sp, #4]
1000685c:	4b03      	ldr	r3, [pc, #12]	; (1000686c <__aeabi_ddiv+0x634>)
1000685e:	e553      	b.n	10006308 <__aeabi_ddiv+0xd0>
10006860:	000003ff 	.word	0x000003ff
10006864:	feffffff 	.word	0xfeffffff
10006868:	000007fe 	.word	0x000007fe
1000686c:	000007ff 	.word	0x000007ff
10006870:	fffffc02 	.word	0xfffffc02
10006874:	0000041e 	.word	0x0000041e
10006878:	fffffbe2 	.word	0xfffffbe2
1000687c:	0000043e 	.word	0x0000043e

10006880 <__eqdf2>:
10006880:	b5f0      	push	{r4, r5, r6, r7, lr}
10006882:	465f      	mov	r7, fp
10006884:	464d      	mov	r5, r9
10006886:	4644      	mov	r4, r8
10006888:	4656      	mov	r6, sl
1000688a:	b4f0      	push	{r4, r5, r6, r7}
1000688c:	031f      	lsls	r7, r3, #12
1000688e:	005c      	lsls	r4, r3, #1
10006890:	0fdb      	lsrs	r3, r3, #31
10006892:	4699      	mov	r9, r3
10006894:	4b1b      	ldr	r3, [pc, #108]	; (10006904 <__eqdf2+0x84>)
10006896:	030e      	lsls	r6, r1, #12
10006898:	004d      	lsls	r5, r1, #1
1000689a:	0fc9      	lsrs	r1, r1, #31
1000689c:	4684      	mov	ip, r0
1000689e:	0b36      	lsrs	r6, r6, #12
100068a0:	0d6d      	lsrs	r5, r5, #21
100068a2:	468b      	mov	fp, r1
100068a4:	4690      	mov	r8, r2
100068a6:	0b3f      	lsrs	r7, r7, #12
100068a8:	0d64      	lsrs	r4, r4, #21
100068aa:	429d      	cmp	r5, r3
100068ac:	d00c      	beq.n	100068c8 <__eqdf2+0x48>
100068ae:	4b15      	ldr	r3, [pc, #84]	; (10006904 <__eqdf2+0x84>)
100068b0:	429c      	cmp	r4, r3
100068b2:	d010      	beq.n	100068d6 <__eqdf2+0x56>
100068b4:	2301      	movs	r3, #1
100068b6:	42a5      	cmp	r5, r4
100068b8:	d014      	beq.n	100068e4 <__eqdf2+0x64>
100068ba:	1c18      	adds	r0, r3, #0
100068bc:	bc3c      	pop	{r2, r3, r4, r5}
100068be:	4690      	mov	r8, r2
100068c0:	4699      	mov	r9, r3
100068c2:	46a2      	mov	sl, r4
100068c4:	46ab      	mov	fp, r5
100068c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100068c8:	1c31      	adds	r1, r6, #0
100068ca:	2301      	movs	r3, #1
100068cc:	4301      	orrs	r1, r0
100068ce:	d1f4      	bne.n	100068ba <__eqdf2+0x3a>
100068d0:	4b0c      	ldr	r3, [pc, #48]	; (10006904 <__eqdf2+0x84>)
100068d2:	429c      	cmp	r4, r3
100068d4:	d1ee      	bne.n	100068b4 <__eqdf2+0x34>
100068d6:	433a      	orrs	r2, r7
100068d8:	2301      	movs	r3, #1
100068da:	2a00      	cmp	r2, #0
100068dc:	d1ed      	bne.n	100068ba <__eqdf2+0x3a>
100068de:	2301      	movs	r3, #1
100068e0:	42a5      	cmp	r5, r4
100068e2:	d1ea      	bne.n	100068ba <__eqdf2+0x3a>
100068e4:	42be      	cmp	r6, r7
100068e6:	d1e8      	bne.n	100068ba <__eqdf2+0x3a>
100068e8:	45c4      	cmp	ip, r8
100068ea:	d1e6      	bne.n	100068ba <__eqdf2+0x3a>
100068ec:	45cb      	cmp	fp, r9
100068ee:	d006      	beq.n	100068fe <__eqdf2+0x7e>
100068f0:	2d00      	cmp	r5, #0
100068f2:	d1e2      	bne.n	100068ba <__eqdf2+0x3a>
100068f4:	4330      	orrs	r0, r6
100068f6:	1c03      	adds	r3, r0, #0
100068f8:	1e58      	subs	r0, r3, #1
100068fa:	4183      	sbcs	r3, r0
100068fc:	e7dd      	b.n	100068ba <__eqdf2+0x3a>
100068fe:	2300      	movs	r3, #0
10006900:	e7db      	b.n	100068ba <__eqdf2+0x3a>
10006902:	46c0      	nop			; (mov r8, r8)
10006904:	000007ff 	.word	0x000007ff

10006908 <__gedf2>:
10006908:	b5f0      	push	{r4, r5, r6, r7, lr}
1000690a:	4657      	mov	r7, sl
1000690c:	4645      	mov	r5, r8
1000690e:	464e      	mov	r6, r9
10006910:	b4e0      	push	{r5, r6, r7}
10006912:	030f      	lsls	r7, r1, #12
10006914:	004e      	lsls	r6, r1, #1
10006916:	0fc9      	lsrs	r1, r1, #31
10006918:	468a      	mov	sl, r1
1000691a:	4932      	ldr	r1, [pc, #200]	; (100069e4 <__gedf2+0xdc>)
1000691c:	031d      	lsls	r5, r3, #12
1000691e:	005c      	lsls	r4, r3, #1
10006920:	4684      	mov	ip, r0
10006922:	0b3f      	lsrs	r7, r7, #12
10006924:	0d76      	lsrs	r6, r6, #21
10006926:	4690      	mov	r8, r2
10006928:	0b2d      	lsrs	r5, r5, #12
1000692a:	0d64      	lsrs	r4, r4, #21
1000692c:	0fdb      	lsrs	r3, r3, #31
1000692e:	428e      	cmp	r6, r1
10006930:	d00f      	beq.n	10006952 <__gedf2+0x4a>
10006932:	428c      	cmp	r4, r1
10006934:	d039      	beq.n	100069aa <__gedf2+0xa2>
10006936:	2e00      	cmp	r6, #0
10006938:	d110      	bne.n	1000695c <__gedf2+0x54>
1000693a:	4338      	orrs	r0, r7
1000693c:	4241      	negs	r1, r0
1000693e:	4141      	adcs	r1, r0
10006940:	4689      	mov	r9, r1
10006942:	2c00      	cmp	r4, #0
10006944:	d127      	bne.n	10006996 <__gedf2+0x8e>
10006946:	432a      	orrs	r2, r5
10006948:	d125      	bne.n	10006996 <__gedf2+0x8e>
1000694a:	2000      	movs	r0, #0
1000694c:	2900      	cmp	r1, #0
1000694e:	d10e      	bne.n	1000696e <__gedf2+0x66>
10006950:	e008      	b.n	10006964 <__gedf2+0x5c>
10006952:	1c39      	adds	r1, r7, #0
10006954:	4301      	orrs	r1, r0
10006956:	d12e      	bne.n	100069b6 <__gedf2+0xae>
10006958:	42b4      	cmp	r4, r6
1000695a:	d026      	beq.n	100069aa <__gedf2+0xa2>
1000695c:	2c00      	cmp	r4, #0
1000695e:	d00b      	beq.n	10006978 <__gedf2+0x70>
10006960:	459a      	cmp	sl, r3
10006962:	d00d      	beq.n	10006980 <__gedf2+0x78>
10006964:	4653      	mov	r3, sl
10006966:	4259      	negs	r1, r3
10006968:	2301      	movs	r3, #1
1000696a:	4319      	orrs	r1, r3
1000696c:	1c08      	adds	r0, r1, #0
1000696e:	bc1c      	pop	{r2, r3, r4}
10006970:	4690      	mov	r8, r2
10006972:	4699      	mov	r9, r3
10006974:	46a2      	mov	sl, r4
10006976:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006978:	432a      	orrs	r2, r5
1000697a:	d0f3      	beq.n	10006964 <__gedf2+0x5c>
1000697c:	459a      	cmp	sl, r3
1000697e:	d1f1      	bne.n	10006964 <__gedf2+0x5c>
10006980:	42a6      	cmp	r6, r4
10006982:	dcef      	bgt.n	10006964 <__gedf2+0x5c>
10006984:	da1a      	bge.n	100069bc <__gedf2+0xb4>
10006986:	4650      	mov	r0, sl
10006988:	4241      	negs	r1, r0
1000698a:	4148      	adcs	r0, r1
1000698c:	2301      	movs	r3, #1
1000698e:	4241      	negs	r1, r0
10006990:	4319      	orrs	r1, r3
10006992:	1c08      	adds	r0, r1, #0
10006994:	e7eb      	b.n	1000696e <__gedf2+0x66>
10006996:	464a      	mov	r2, r9
10006998:	2a00      	cmp	r2, #0
1000699a:	d0e1      	beq.n	10006960 <__gedf2+0x58>
1000699c:	4258      	negs	r0, r3
1000699e:	4158      	adcs	r0, r3
100069a0:	2201      	movs	r2, #1
100069a2:	4241      	negs	r1, r0
100069a4:	4311      	orrs	r1, r2
100069a6:	1c08      	adds	r0, r1, #0
100069a8:	e7e1      	b.n	1000696e <__gedf2+0x66>
100069aa:	1c29      	adds	r1, r5, #0
100069ac:	4311      	orrs	r1, r2
100069ae:	d102      	bne.n	100069b6 <__gedf2+0xae>
100069b0:	2e00      	cmp	r6, #0
100069b2:	d0c2      	beq.n	1000693a <__gedf2+0x32>
100069b4:	e7d4      	b.n	10006960 <__gedf2+0x58>
100069b6:	2002      	movs	r0, #2
100069b8:	4240      	negs	r0, r0
100069ba:	e7d8      	b.n	1000696e <__gedf2+0x66>
100069bc:	42af      	cmp	r7, r5
100069be:	d8d1      	bhi.n	10006964 <__gedf2+0x5c>
100069c0:	d009      	beq.n	100069d6 <__gedf2+0xce>
100069c2:	2000      	movs	r0, #0
100069c4:	42af      	cmp	r7, r5
100069c6:	d2d2      	bcs.n	1000696e <__gedf2+0x66>
100069c8:	4650      	mov	r0, sl
100069ca:	4241      	negs	r1, r0
100069cc:	4148      	adcs	r0, r1
100069ce:	2301      	movs	r3, #1
100069d0:	4240      	negs	r0, r0
100069d2:	4318      	orrs	r0, r3
100069d4:	e7cb      	b.n	1000696e <__gedf2+0x66>
100069d6:	45c4      	cmp	ip, r8
100069d8:	d8c4      	bhi.n	10006964 <__gedf2+0x5c>
100069da:	2000      	movs	r0, #0
100069dc:	45c4      	cmp	ip, r8
100069de:	d3f3      	bcc.n	100069c8 <__gedf2+0xc0>
100069e0:	e7c5      	b.n	1000696e <__gedf2+0x66>
100069e2:	46c0      	nop			; (mov r8, r8)
100069e4:	000007ff 	.word	0x000007ff

100069e8 <__ledf2>:
100069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100069ea:	465f      	mov	r7, fp
100069ec:	464d      	mov	r5, r9
100069ee:	4644      	mov	r4, r8
100069f0:	4656      	mov	r6, sl
100069f2:	4680      	mov	r8, r0
100069f4:	b4f0      	push	{r4, r5, r6, r7}
100069f6:	1c06      	adds	r6, r0, #0
100069f8:	0308      	lsls	r0, r1, #12
100069fa:	0b00      	lsrs	r0, r0, #12
100069fc:	4684      	mov	ip, r0
100069fe:	482c      	ldr	r0, [pc, #176]	; (10006ab0 <__ledf2+0xc8>)
10006a00:	004c      	lsls	r4, r1, #1
10006a02:	031f      	lsls	r7, r3, #12
10006a04:	005d      	lsls	r5, r3, #1
10006a06:	0fc9      	lsrs	r1, r1, #31
10006a08:	0d64      	lsrs	r4, r4, #21
10006a0a:	468b      	mov	fp, r1
10006a0c:	4691      	mov	r9, r2
10006a0e:	0b3f      	lsrs	r7, r7, #12
10006a10:	0d6d      	lsrs	r5, r5, #21
10006a12:	0fdb      	lsrs	r3, r3, #31
10006a14:	4284      	cmp	r4, r0
10006a16:	d012      	beq.n	10006a3e <__ledf2+0x56>
10006a18:	4285      	cmp	r5, r0
10006a1a:	d025      	beq.n	10006a68 <__ledf2+0x80>
10006a1c:	2c00      	cmp	r4, #0
10006a1e:	d114      	bne.n	10006a4a <__ledf2+0x62>
10006a20:	4661      	mov	r1, ip
10006a22:	430e      	orrs	r6, r1
10006a24:	4270      	negs	r0, r6
10006a26:	4146      	adcs	r6, r0
10006a28:	2d00      	cmp	r5, #0
10006a2a:	d035      	beq.n	10006a98 <__ledf2+0xb0>
10006a2c:	2e00      	cmp	r6, #0
10006a2e:	d021      	beq.n	10006a74 <__ledf2+0x8c>
10006a30:	4258      	negs	r0, r3
10006a32:	4158      	adcs	r0, r3
10006a34:	2101      	movs	r1, #1
10006a36:	4243      	negs	r3, r0
10006a38:	430b      	orrs	r3, r1
10006a3a:	1c18      	adds	r0, r3, #0
10006a3c:	e00e      	b.n	10006a5c <__ledf2+0x74>
10006a3e:	4661      	mov	r1, ip
10006a40:	2002      	movs	r0, #2
10006a42:	4331      	orrs	r1, r6
10006a44:	d10a      	bne.n	10006a5c <__ledf2+0x74>
10006a46:	42a5      	cmp	r5, r4
10006a48:	d00e      	beq.n	10006a68 <__ledf2+0x80>
10006a4a:	2d00      	cmp	r5, #0
10006a4c:	d112      	bne.n	10006a74 <__ledf2+0x8c>
10006a4e:	433a      	orrs	r2, r7
10006a50:	d110      	bne.n	10006a74 <__ledf2+0x8c>
10006a52:	465b      	mov	r3, fp
10006a54:	4259      	negs	r1, r3
10006a56:	2301      	movs	r3, #1
10006a58:	4319      	orrs	r1, r3
10006a5a:	1c08      	adds	r0, r1, #0
10006a5c:	bc3c      	pop	{r2, r3, r4, r5}
10006a5e:	4690      	mov	r8, r2
10006a60:	4699      	mov	r9, r3
10006a62:	46a2      	mov	sl, r4
10006a64:	46ab      	mov	fp, r5
10006a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006a68:	1c39      	adds	r1, r7, #0
10006a6a:	2002      	movs	r0, #2
10006a6c:	4311      	orrs	r1, r2
10006a6e:	d1f5      	bne.n	10006a5c <__ledf2+0x74>
10006a70:	2c00      	cmp	r4, #0
10006a72:	d0d5      	beq.n	10006a20 <__ledf2+0x38>
10006a74:	459b      	cmp	fp, r3
10006a76:	d1ec      	bne.n	10006a52 <__ledf2+0x6a>
10006a78:	42ac      	cmp	r4, r5
10006a7a:	dcea      	bgt.n	10006a52 <__ledf2+0x6a>
10006a7c:	db05      	blt.n	10006a8a <__ledf2+0xa2>
10006a7e:	45bc      	cmp	ip, r7
10006a80:	d8e7      	bhi.n	10006a52 <__ledf2+0x6a>
10006a82:	d00f      	beq.n	10006aa4 <__ledf2+0xbc>
10006a84:	2000      	movs	r0, #0
10006a86:	45bc      	cmp	ip, r7
10006a88:	d2e8      	bcs.n	10006a5c <__ledf2+0x74>
10006a8a:	4658      	mov	r0, fp
10006a8c:	4241      	negs	r1, r0
10006a8e:	4148      	adcs	r0, r1
10006a90:	4241      	negs	r1, r0
10006a92:	2001      	movs	r0, #1
10006a94:	4308      	orrs	r0, r1
10006a96:	e7e1      	b.n	10006a5c <__ledf2+0x74>
10006a98:	433a      	orrs	r2, r7
10006a9a:	d1c7      	bne.n	10006a2c <__ledf2+0x44>
10006a9c:	2000      	movs	r0, #0
10006a9e:	2e00      	cmp	r6, #0
10006aa0:	d1dc      	bne.n	10006a5c <__ledf2+0x74>
10006aa2:	e7d6      	b.n	10006a52 <__ledf2+0x6a>
10006aa4:	45c8      	cmp	r8, r9
10006aa6:	d8d4      	bhi.n	10006a52 <__ledf2+0x6a>
10006aa8:	2000      	movs	r0, #0
10006aaa:	45c8      	cmp	r8, r9
10006aac:	d3ed      	bcc.n	10006a8a <__ledf2+0xa2>
10006aae:	e7d5      	b.n	10006a5c <__ledf2+0x74>
10006ab0:	000007ff 	.word	0x000007ff

10006ab4 <__aeabi_dmul>:
10006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
10006ab6:	465f      	mov	r7, fp
10006ab8:	4656      	mov	r6, sl
10006aba:	464d      	mov	r5, r9
10006abc:	4644      	mov	r4, r8
10006abe:	b4f0      	push	{r4, r5, r6, r7}
10006ac0:	1c05      	adds	r5, r0, #0
10006ac2:	1c06      	adds	r6, r0, #0
10006ac4:	0308      	lsls	r0, r1, #12
10006ac6:	b087      	sub	sp, #28
10006ac8:	4699      	mov	r9, r3
10006aca:	004f      	lsls	r7, r1, #1
10006acc:	0b03      	lsrs	r3, r0, #12
10006ace:	0fcc      	lsrs	r4, r1, #31
10006ad0:	4692      	mov	sl, r2
10006ad2:	469b      	mov	fp, r3
10006ad4:	0d7f      	lsrs	r7, r7, #21
10006ad6:	9401      	str	r4, [sp, #4]
10006ad8:	d067      	beq.n	10006baa <__aeabi_dmul+0xf6>
10006ada:	4b6c      	ldr	r3, [pc, #432]	; (10006c8c <__aeabi_dmul+0x1d8>)
10006adc:	429f      	cmp	r7, r3
10006ade:	d036      	beq.n	10006b4e <__aeabi_dmul+0x9a>
10006ae0:	2080      	movs	r0, #128	; 0x80
10006ae2:	465b      	mov	r3, fp
10006ae4:	0340      	lsls	r0, r0, #13
10006ae6:	4318      	orrs	r0, r3
10006ae8:	00c0      	lsls	r0, r0, #3
10006aea:	0f6b      	lsrs	r3, r5, #29
10006aec:	4318      	orrs	r0, r3
10006aee:	4b68      	ldr	r3, [pc, #416]	; (10006c90 <__aeabi_dmul+0x1dc>)
10006af0:	4683      	mov	fp, r0
10006af2:	469c      	mov	ip, r3
10006af4:	2300      	movs	r3, #0
10006af6:	4698      	mov	r8, r3
10006af8:	00ee      	lsls	r6, r5, #3
10006afa:	4467      	add	r7, ip
10006afc:	9300      	str	r3, [sp, #0]
10006afe:	464b      	mov	r3, r9
10006b00:	4649      	mov	r1, r9
10006b02:	031d      	lsls	r5, r3, #12
10006b04:	0fc9      	lsrs	r1, r1, #31
10006b06:	005b      	lsls	r3, r3, #1
10006b08:	4652      	mov	r2, sl
10006b0a:	0b2d      	lsrs	r5, r5, #12
10006b0c:	0d5b      	lsrs	r3, r3, #21
10006b0e:	4689      	mov	r9, r1
10006b10:	d100      	bne.n	10006b14 <__aeabi_dmul+0x60>
10006b12:	e06e      	b.n	10006bf2 <__aeabi_dmul+0x13e>
10006b14:	495d      	ldr	r1, [pc, #372]	; (10006c8c <__aeabi_dmul+0x1d8>)
10006b16:	428b      	cmp	r3, r1
10006b18:	d064      	beq.n	10006be4 <__aeabi_dmul+0x130>
10006b1a:	2080      	movs	r0, #128	; 0x80
10006b1c:	495c      	ldr	r1, [pc, #368]	; (10006c90 <__aeabi_dmul+0x1dc>)
10006b1e:	0340      	lsls	r0, r0, #13
10006b20:	468c      	mov	ip, r1
10006b22:	2100      	movs	r1, #0
10006b24:	4305      	orrs	r5, r0
10006b26:	00ed      	lsls	r5, r5, #3
10006b28:	0f50      	lsrs	r0, r2, #29
10006b2a:	4305      	orrs	r5, r0
10006b2c:	00d2      	lsls	r2, r2, #3
10006b2e:	4463      	add	r3, ip
10006b30:	4648      	mov	r0, r9
10006b32:	18ff      	adds	r7, r7, r3
10006b34:	1c7b      	adds	r3, r7, #1
10006b36:	469a      	mov	sl, r3
10006b38:	9b00      	ldr	r3, [sp, #0]
10006b3a:	4060      	eors	r0, r4
10006b3c:	9002      	str	r0, [sp, #8]
10006b3e:	430b      	orrs	r3, r1
10006b40:	2b0f      	cmp	r3, #15
10006b42:	d900      	bls.n	10006b46 <__aeabi_dmul+0x92>
10006b44:	e0ac      	b.n	10006ca0 <__aeabi_dmul+0x1ec>
10006b46:	4853      	ldr	r0, [pc, #332]	; (10006c94 <__aeabi_dmul+0x1e0>)
10006b48:	009b      	lsls	r3, r3, #2
10006b4a:	58c3      	ldr	r3, [r0, r3]
10006b4c:	469f      	mov	pc, r3
10006b4e:	465b      	mov	r3, fp
10006b50:	431d      	orrs	r5, r3
10006b52:	d000      	beq.n	10006b56 <__aeabi_dmul+0xa2>
10006b54:	e082      	b.n	10006c5c <__aeabi_dmul+0x1a8>
10006b56:	2308      	movs	r3, #8
10006b58:	9300      	str	r3, [sp, #0]
10006b5a:	2300      	movs	r3, #0
10006b5c:	469b      	mov	fp, r3
10006b5e:	3302      	adds	r3, #2
10006b60:	2600      	movs	r6, #0
10006b62:	4698      	mov	r8, r3
10006b64:	e7cb      	b.n	10006afe <__aeabi_dmul+0x4a>
10006b66:	9b02      	ldr	r3, [sp, #8]
10006b68:	9301      	str	r3, [sp, #4]
10006b6a:	4643      	mov	r3, r8
10006b6c:	2b02      	cmp	r3, #2
10006b6e:	d159      	bne.n	10006c24 <__aeabi_dmul+0x170>
10006b70:	2401      	movs	r4, #1
10006b72:	2500      	movs	r5, #0
10006b74:	2600      	movs	r6, #0
10006b76:	9b01      	ldr	r3, [sp, #4]
10006b78:	401c      	ands	r4, r3
10006b7a:	4b44      	ldr	r3, [pc, #272]	; (10006c8c <__aeabi_dmul+0x1d8>)
10006b7c:	2100      	movs	r1, #0
10006b7e:	032d      	lsls	r5, r5, #12
10006b80:	0d0a      	lsrs	r2, r1, #20
10006b82:	0512      	lsls	r2, r2, #20
10006b84:	0b2d      	lsrs	r5, r5, #12
10006b86:	4315      	orrs	r5, r2
10006b88:	4a43      	ldr	r2, [pc, #268]	; (10006c98 <__aeabi_dmul+0x1e4>)
10006b8a:	051b      	lsls	r3, r3, #20
10006b8c:	4015      	ands	r5, r2
10006b8e:	431d      	orrs	r5, r3
10006b90:	006d      	lsls	r5, r5, #1
10006b92:	07e4      	lsls	r4, r4, #31
10006b94:	086d      	lsrs	r5, r5, #1
10006b96:	4325      	orrs	r5, r4
10006b98:	1c30      	adds	r0, r6, #0
10006b9a:	1c29      	adds	r1, r5, #0
10006b9c:	b007      	add	sp, #28
10006b9e:	bc3c      	pop	{r2, r3, r4, r5}
10006ba0:	4690      	mov	r8, r2
10006ba2:	4699      	mov	r9, r3
10006ba4:	46a2      	mov	sl, r4
10006ba6:	46ab      	mov	fp, r5
10006ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006baa:	432b      	orrs	r3, r5
10006bac:	d04e      	beq.n	10006c4c <__aeabi_dmul+0x198>
10006bae:	465b      	mov	r3, fp
10006bb0:	2b00      	cmp	r3, #0
10006bb2:	d100      	bne.n	10006bb6 <__aeabi_dmul+0x102>
10006bb4:	e185      	b.n	10006ec2 <__aeabi_dmul+0x40e>
10006bb6:	4658      	mov	r0, fp
10006bb8:	f7fd fa10 	bl	10003fdc <__clzsi2>
10006bbc:	1c02      	adds	r2, r0, #0
10006bbe:	2328      	movs	r3, #40	; 0x28
10006bc0:	1c29      	adds	r1, r5, #0
10006bc2:	1a9b      	subs	r3, r3, r2
10006bc4:	1c16      	adds	r6, r2, #0
10006bc6:	4658      	mov	r0, fp
10006bc8:	40d9      	lsrs	r1, r3
10006bca:	3e08      	subs	r6, #8
10006bcc:	40b0      	lsls	r0, r6
10006bce:	1c0b      	adds	r3, r1, #0
10006bd0:	40b5      	lsls	r5, r6
10006bd2:	4303      	orrs	r3, r0
10006bd4:	469b      	mov	fp, r3
10006bd6:	1c2e      	adds	r6, r5, #0
10006bd8:	2300      	movs	r3, #0
10006bda:	4f30      	ldr	r7, [pc, #192]	; (10006c9c <__aeabi_dmul+0x1e8>)
10006bdc:	9300      	str	r3, [sp, #0]
10006bde:	1abf      	subs	r7, r7, r2
10006be0:	4698      	mov	r8, r3
10006be2:	e78c      	b.n	10006afe <__aeabi_dmul+0x4a>
10006be4:	4651      	mov	r1, sl
10006be6:	4329      	orrs	r1, r5
10006be8:	d12e      	bne.n	10006c48 <__aeabi_dmul+0x194>
10006bea:	2500      	movs	r5, #0
10006bec:	2200      	movs	r2, #0
10006bee:	2102      	movs	r1, #2
10006bf0:	e79e      	b.n	10006b30 <__aeabi_dmul+0x7c>
10006bf2:	4651      	mov	r1, sl
10006bf4:	4329      	orrs	r1, r5
10006bf6:	d023      	beq.n	10006c40 <__aeabi_dmul+0x18c>
10006bf8:	2d00      	cmp	r5, #0
10006bfa:	d100      	bne.n	10006bfe <__aeabi_dmul+0x14a>
10006bfc:	e154      	b.n	10006ea8 <__aeabi_dmul+0x3f4>
10006bfe:	1c28      	adds	r0, r5, #0
10006c00:	f7fd f9ec 	bl	10003fdc <__clzsi2>
10006c04:	1c03      	adds	r3, r0, #0
10006c06:	2128      	movs	r1, #40	; 0x28
10006c08:	4650      	mov	r0, sl
10006c0a:	1ac9      	subs	r1, r1, r3
10006c0c:	1c1a      	adds	r2, r3, #0
10006c0e:	40c8      	lsrs	r0, r1
10006c10:	4651      	mov	r1, sl
10006c12:	3a08      	subs	r2, #8
10006c14:	4091      	lsls	r1, r2
10006c16:	4095      	lsls	r5, r2
10006c18:	1c0a      	adds	r2, r1, #0
10006c1a:	4305      	orrs	r5, r0
10006c1c:	481f      	ldr	r0, [pc, #124]	; (10006c9c <__aeabi_dmul+0x1e8>)
10006c1e:	2100      	movs	r1, #0
10006c20:	1ac3      	subs	r3, r0, r3
10006c22:	e785      	b.n	10006b30 <__aeabi_dmul+0x7c>
10006c24:	2b03      	cmp	r3, #3
10006c26:	d100      	bne.n	10006c2a <__aeabi_dmul+0x176>
10006c28:	e1c2      	b.n	10006fb0 <__aeabi_dmul+0x4fc>
10006c2a:	2b01      	cmp	r3, #1
10006c2c:	d000      	beq.n	10006c30 <__aeabi_dmul+0x17c>
10006c2e:	e16d      	b.n	10006f0c <__aeabi_dmul+0x458>
10006c30:	4644      	mov	r4, r8
10006c32:	9b01      	ldr	r3, [sp, #4]
10006c34:	2500      	movs	r5, #0
10006c36:	401c      	ands	r4, r3
10006c38:	b2e4      	uxtb	r4, r4
10006c3a:	2300      	movs	r3, #0
10006c3c:	2600      	movs	r6, #0
10006c3e:	e79d      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006c40:	2500      	movs	r5, #0
10006c42:	2200      	movs	r2, #0
10006c44:	2101      	movs	r1, #1
10006c46:	e773      	b.n	10006b30 <__aeabi_dmul+0x7c>
10006c48:	2103      	movs	r1, #3
10006c4a:	e771      	b.n	10006b30 <__aeabi_dmul+0x7c>
10006c4c:	2304      	movs	r3, #4
10006c4e:	9300      	str	r3, [sp, #0]
10006c50:	2300      	movs	r3, #0
10006c52:	469b      	mov	fp, r3
10006c54:	3301      	adds	r3, #1
10006c56:	2600      	movs	r6, #0
10006c58:	4698      	mov	r8, r3
10006c5a:	e750      	b.n	10006afe <__aeabi_dmul+0x4a>
10006c5c:	230c      	movs	r3, #12
10006c5e:	9300      	str	r3, [sp, #0]
10006c60:	3b09      	subs	r3, #9
10006c62:	4698      	mov	r8, r3
10006c64:	e74b      	b.n	10006afe <__aeabi_dmul+0x4a>
10006c66:	2580      	movs	r5, #128	; 0x80
10006c68:	2400      	movs	r4, #0
10006c6a:	032d      	lsls	r5, r5, #12
10006c6c:	2600      	movs	r6, #0
10006c6e:	4b07      	ldr	r3, [pc, #28]	; (10006c8c <__aeabi_dmul+0x1d8>)
10006c70:	e784      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006c72:	464b      	mov	r3, r9
10006c74:	46ab      	mov	fp, r5
10006c76:	1c16      	adds	r6, r2, #0
10006c78:	9301      	str	r3, [sp, #4]
10006c7a:	4688      	mov	r8, r1
10006c7c:	e775      	b.n	10006b6a <__aeabi_dmul+0xb6>
10006c7e:	9b02      	ldr	r3, [sp, #8]
10006c80:	46ab      	mov	fp, r5
10006c82:	1c16      	adds	r6, r2, #0
10006c84:	9301      	str	r3, [sp, #4]
10006c86:	4688      	mov	r8, r1
10006c88:	e76f      	b.n	10006b6a <__aeabi_dmul+0xb6>
10006c8a:	46c0      	nop			; (mov r8, r8)
10006c8c:	000007ff 	.word	0x000007ff
10006c90:	fffffc01 	.word	0xfffffc01
10006c94:	10007b24 	.word	0x10007b24
10006c98:	800fffff 	.word	0x800fffff
10006c9c:	fffffc0d 	.word	0xfffffc0d
10006ca0:	0c33      	lsrs	r3, r6, #16
10006ca2:	0436      	lsls	r6, r6, #16
10006ca4:	0c36      	lsrs	r6, r6, #16
10006ca6:	469c      	mov	ip, r3
10006ca8:	1c33      	adds	r3, r6, #0
10006caa:	0c14      	lsrs	r4, r2, #16
10006cac:	0412      	lsls	r2, r2, #16
10006cae:	0c12      	lsrs	r2, r2, #16
10006cb0:	4353      	muls	r3, r2
10006cb2:	4698      	mov	r8, r3
10006cb4:	4663      	mov	r3, ip
10006cb6:	4353      	muls	r3, r2
10006cb8:	4699      	mov	r9, r3
10006cba:	4663      	mov	r3, ip
10006cbc:	4363      	muls	r3, r4
10006cbe:	9301      	str	r3, [sp, #4]
10006cc0:	1c33      	adds	r3, r6, #0
10006cc2:	4641      	mov	r1, r8
10006cc4:	4363      	muls	r3, r4
10006cc6:	0c09      	lsrs	r1, r1, #16
10006cc8:	444b      	add	r3, r9
10006cca:	185b      	adds	r3, r3, r1
10006ccc:	4599      	cmp	r9, r3
10006cce:	d905      	bls.n	10006cdc <__aeabi_dmul+0x228>
10006cd0:	2080      	movs	r0, #128	; 0x80
10006cd2:	0240      	lsls	r0, r0, #9
10006cd4:	4681      	mov	r9, r0
10006cd6:	9901      	ldr	r1, [sp, #4]
10006cd8:	4449      	add	r1, r9
10006cda:	9101      	str	r1, [sp, #4]
10006cdc:	0c19      	lsrs	r1, r3, #16
10006cde:	9103      	str	r1, [sp, #12]
10006ce0:	4641      	mov	r1, r8
10006ce2:	0409      	lsls	r1, r1, #16
10006ce4:	0c09      	lsrs	r1, r1, #16
10006ce6:	041b      	lsls	r3, r3, #16
10006ce8:	185b      	adds	r3, r3, r1
10006cea:	9304      	str	r3, [sp, #16]
10006cec:	0c2b      	lsrs	r3, r5, #16
10006cee:	4698      	mov	r8, r3
10006cf0:	1c33      	adds	r3, r6, #0
10006cf2:	042d      	lsls	r5, r5, #16
10006cf4:	0c29      	lsrs	r1, r5, #16
10006cf6:	434b      	muls	r3, r1
10006cf8:	4660      	mov	r0, ip
10006cfa:	9300      	str	r3, [sp, #0]
10006cfc:	4643      	mov	r3, r8
10006cfe:	4665      	mov	r5, ip
10006d00:	4358      	muls	r0, r3
10006d02:	435e      	muls	r6, r3
10006d04:	9b00      	ldr	r3, [sp, #0]
10006d06:	434d      	muls	r5, r1
10006d08:	0c1b      	lsrs	r3, r3, #16
10006d0a:	4699      	mov	r9, r3
10006d0c:	19ae      	adds	r6, r5, r6
10006d0e:	444e      	add	r6, r9
10006d10:	4684      	mov	ip, r0
10006d12:	42b5      	cmp	r5, r6
10006d14:	d903      	bls.n	10006d1e <__aeabi_dmul+0x26a>
10006d16:	2380      	movs	r3, #128	; 0x80
10006d18:	025b      	lsls	r3, r3, #9
10006d1a:	4699      	mov	r9, r3
10006d1c:	44cc      	add	ip, r9
10006d1e:	0c35      	lsrs	r5, r6, #16
10006d20:	1c2b      	adds	r3, r5, #0
10006d22:	9803      	ldr	r0, [sp, #12]
10006d24:	4463      	add	r3, ip
10006d26:	4684      	mov	ip, r0
10006d28:	9305      	str	r3, [sp, #20]
10006d2a:	9b00      	ldr	r3, [sp, #0]
10006d2c:	0436      	lsls	r6, r6, #16
10006d2e:	041b      	lsls	r3, r3, #16
10006d30:	0c1b      	lsrs	r3, r3, #16
10006d32:	18f3      	adds	r3, r6, r3
10006d34:	449c      	add	ip, r3
10006d36:	4660      	mov	r0, ip
10006d38:	9003      	str	r0, [sp, #12]
10006d3a:	4658      	mov	r0, fp
10006d3c:	0405      	lsls	r5, r0, #16
10006d3e:	0c06      	lsrs	r6, r0, #16
10006d40:	0c28      	lsrs	r0, r5, #16
10006d42:	4684      	mov	ip, r0
10006d44:	4350      	muls	r0, r2
10006d46:	1c35      	adds	r5, r6, #0
10006d48:	4681      	mov	r9, r0
10006d4a:	4660      	mov	r0, ip
10006d4c:	4365      	muls	r5, r4
10006d4e:	4344      	muls	r4, r0
10006d50:	4648      	mov	r0, r9
10006d52:	0c00      	lsrs	r0, r0, #16
10006d54:	4683      	mov	fp, r0
10006d56:	4372      	muls	r2, r6
10006d58:	1914      	adds	r4, r2, r4
10006d5a:	445c      	add	r4, fp
10006d5c:	42a2      	cmp	r2, r4
10006d5e:	d903      	bls.n	10006d68 <__aeabi_dmul+0x2b4>
10006d60:	2280      	movs	r2, #128	; 0x80
10006d62:	0252      	lsls	r2, r2, #9
10006d64:	4693      	mov	fp, r2
10006d66:	445d      	add	r5, fp
10006d68:	0c22      	lsrs	r2, r4, #16
10006d6a:	18ad      	adds	r5, r5, r2
10006d6c:	464a      	mov	r2, r9
10006d6e:	0412      	lsls	r2, r2, #16
10006d70:	0c12      	lsrs	r2, r2, #16
10006d72:	0424      	lsls	r4, r4, #16
10006d74:	4640      	mov	r0, r8
10006d76:	18a4      	adds	r4, r4, r2
10006d78:	4662      	mov	r2, ip
10006d7a:	434a      	muls	r2, r1
10006d7c:	4371      	muls	r1, r6
10006d7e:	4346      	muls	r6, r0
10006d80:	4660      	mov	r0, ip
10006d82:	9600      	str	r6, [sp, #0]
10006d84:	4646      	mov	r6, r8
10006d86:	4370      	muls	r0, r6
10006d88:	4680      	mov	r8, r0
10006d8a:	0c10      	lsrs	r0, r2, #16
10006d8c:	4684      	mov	ip, r0
10006d8e:	4488      	add	r8, r1
10006d90:	44e0      	add	r8, ip
10006d92:	4541      	cmp	r1, r8
10006d94:	d905      	bls.n	10006da2 <__aeabi_dmul+0x2ee>
10006d96:	2180      	movs	r1, #128	; 0x80
10006d98:	0249      	lsls	r1, r1, #9
10006d9a:	468c      	mov	ip, r1
10006d9c:	9900      	ldr	r1, [sp, #0]
10006d9e:	4461      	add	r1, ip
10006da0:	9100      	str	r1, [sp, #0]
10006da2:	9801      	ldr	r0, [sp, #4]
10006da4:	9903      	ldr	r1, [sp, #12]
10006da6:	4684      	mov	ip, r0
10006da8:	4461      	add	r1, ip
10006daa:	4299      	cmp	r1, r3
10006dac:	419b      	sbcs	r3, r3
10006dae:	425b      	negs	r3, r3
10006db0:	4699      	mov	r9, r3
10006db2:	9805      	ldr	r0, [sp, #20]
10006db4:	4643      	mov	r3, r8
10006db6:	4684      	mov	ip, r0
10006db8:	0412      	lsls	r2, r2, #16
10006dba:	0c12      	lsrs	r2, r2, #16
10006dbc:	041b      	lsls	r3, r3, #16
10006dbe:	189b      	adds	r3, r3, r2
10006dc0:	4463      	add	r3, ip
10006dc2:	469c      	mov	ip, r3
10006dc4:	46ab      	mov	fp, r5
10006dc6:	4283      	cmp	r3, r0
10006dc8:	419b      	sbcs	r3, r3
10006dca:	4640      	mov	r0, r8
10006dcc:	190a      	adds	r2, r1, r4
10006dce:	44cc      	add	ip, r9
10006dd0:	42a2      	cmp	r2, r4
10006dd2:	4189      	sbcs	r1, r1
10006dd4:	44e3      	add	fp, ip
10006dd6:	45cc      	cmp	ip, r9
10006dd8:	41b6      	sbcs	r6, r6
10006dda:	465c      	mov	r4, fp
10006ddc:	0c00      	lsrs	r0, r0, #16
10006dde:	4680      	mov	r8, r0
10006de0:	4249      	negs	r1, r1
10006de2:	4276      	negs	r6, r6
10006de4:	425b      	negs	r3, r3
10006de6:	1864      	adds	r4, r4, r1
10006de8:	4333      	orrs	r3, r6
10006dea:	4498      	add	r8, r3
10006dec:	428c      	cmp	r4, r1
10006dee:	4189      	sbcs	r1, r1
10006df0:	45ab      	cmp	fp, r5
10006df2:	419b      	sbcs	r3, r3
10006df4:	4249      	negs	r1, r1
10006df6:	425b      	negs	r3, r3
10006df8:	4319      	orrs	r1, r3
10006dfa:	1c0d      	adds	r5, r1, #0
10006dfc:	9b00      	ldr	r3, [sp, #0]
10006dfe:	4445      	add	r5, r8
10006e00:	18ee      	adds	r6, r5, r3
10006e02:	0276      	lsls	r6, r6, #9
10006e04:	0de5      	lsrs	r5, r4, #23
10006e06:	432e      	orrs	r6, r5
10006e08:	46b3      	mov	fp, r6
10006e0a:	9b04      	ldr	r3, [sp, #16]
10006e0c:	0256      	lsls	r6, r2, #9
10006e0e:	431e      	orrs	r6, r3
10006e10:	1e73      	subs	r3, r6, #1
10006e12:	419e      	sbcs	r6, r3
10006e14:	465b      	mov	r3, fp
10006e16:	0dd2      	lsrs	r2, r2, #23
10006e18:	4332      	orrs	r2, r6
10006e1a:	0266      	lsls	r6, r4, #9
10006e1c:	4316      	orrs	r6, r2
10006e1e:	01db      	lsls	r3, r3, #7
10006e20:	d50a      	bpl.n	10006e38 <__aeabi_dmul+0x384>
10006e22:	2301      	movs	r3, #1
10006e24:	4033      	ands	r3, r6
10006e26:	0876      	lsrs	r6, r6, #1
10006e28:	431e      	orrs	r6, r3
10006e2a:	465b      	mov	r3, fp
10006e2c:	07db      	lsls	r3, r3, #31
10006e2e:	431e      	orrs	r6, r3
10006e30:	465b      	mov	r3, fp
10006e32:	085b      	lsrs	r3, r3, #1
10006e34:	469b      	mov	fp, r3
10006e36:	4657      	mov	r7, sl
10006e38:	4b63      	ldr	r3, [pc, #396]	; (10006fc8 <__aeabi_dmul+0x514>)
10006e3a:	18fb      	adds	r3, r7, r3
10006e3c:	2b00      	cmp	r3, #0
10006e3e:	dd5a      	ble.n	10006ef6 <__aeabi_dmul+0x442>
10006e40:	0772      	lsls	r2, r6, #29
10006e42:	d009      	beq.n	10006e58 <__aeabi_dmul+0x3a4>
10006e44:	220f      	movs	r2, #15
10006e46:	4032      	ands	r2, r6
10006e48:	2a04      	cmp	r2, #4
10006e4a:	d005      	beq.n	10006e58 <__aeabi_dmul+0x3a4>
10006e4c:	1d32      	adds	r2, r6, #4
10006e4e:	42b2      	cmp	r2, r6
10006e50:	41b6      	sbcs	r6, r6
10006e52:	4276      	negs	r6, r6
10006e54:	44b3      	add	fp, r6
10006e56:	1c16      	adds	r6, r2, #0
10006e58:	465a      	mov	r2, fp
10006e5a:	01d2      	lsls	r2, r2, #7
10006e5c:	d506      	bpl.n	10006e6c <__aeabi_dmul+0x3b8>
10006e5e:	465a      	mov	r2, fp
10006e60:	4b5a      	ldr	r3, [pc, #360]	; (10006fcc <__aeabi_dmul+0x518>)
10006e62:	401a      	ands	r2, r3
10006e64:	2380      	movs	r3, #128	; 0x80
10006e66:	4693      	mov	fp, r2
10006e68:	00db      	lsls	r3, r3, #3
10006e6a:	18fb      	adds	r3, r7, r3
10006e6c:	4a58      	ldr	r2, [pc, #352]	; (10006fd0 <__aeabi_dmul+0x51c>)
10006e6e:	4293      	cmp	r3, r2
10006e70:	dd34      	ble.n	10006edc <__aeabi_dmul+0x428>
10006e72:	2401      	movs	r4, #1
10006e74:	9b02      	ldr	r3, [sp, #8]
10006e76:	2500      	movs	r5, #0
10006e78:	401c      	ands	r4, r3
10006e7a:	2600      	movs	r6, #0
10006e7c:	4b55      	ldr	r3, [pc, #340]	; (10006fd4 <__aeabi_dmul+0x520>)
10006e7e:	e67d      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006e80:	2080      	movs	r0, #128	; 0x80
10006e82:	465b      	mov	r3, fp
10006e84:	0300      	lsls	r0, r0, #12
10006e86:	4203      	tst	r3, r0
10006e88:	d008      	beq.n	10006e9c <__aeabi_dmul+0x3e8>
10006e8a:	4205      	tst	r5, r0
10006e8c:	d106      	bne.n	10006e9c <__aeabi_dmul+0x3e8>
10006e8e:	4305      	orrs	r5, r0
10006e90:	032d      	lsls	r5, r5, #12
10006e92:	0b2d      	lsrs	r5, r5, #12
10006e94:	464c      	mov	r4, r9
10006e96:	1c16      	adds	r6, r2, #0
10006e98:	4b4e      	ldr	r3, [pc, #312]	; (10006fd4 <__aeabi_dmul+0x520>)
10006e9a:	e66f      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006e9c:	465d      	mov	r5, fp
10006e9e:	4305      	orrs	r5, r0
10006ea0:	032d      	lsls	r5, r5, #12
10006ea2:	0b2d      	lsrs	r5, r5, #12
10006ea4:	4b4b      	ldr	r3, [pc, #300]	; (10006fd4 <__aeabi_dmul+0x520>)
10006ea6:	e669      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006ea8:	4650      	mov	r0, sl
10006eaa:	f7fd f897 	bl	10003fdc <__clzsi2>
10006eae:	1c03      	adds	r3, r0, #0
10006eb0:	3320      	adds	r3, #32
10006eb2:	2b27      	cmp	r3, #39	; 0x27
10006eb4:	dc00      	bgt.n	10006eb8 <__aeabi_dmul+0x404>
10006eb6:	e6a6      	b.n	10006c06 <__aeabi_dmul+0x152>
10006eb8:	4655      	mov	r5, sl
10006eba:	3808      	subs	r0, #8
10006ebc:	4085      	lsls	r5, r0
10006ebe:	2200      	movs	r2, #0
10006ec0:	e6ac      	b.n	10006c1c <__aeabi_dmul+0x168>
10006ec2:	1c28      	adds	r0, r5, #0
10006ec4:	f7fd f88a 	bl	10003fdc <__clzsi2>
10006ec8:	1c02      	adds	r2, r0, #0
10006eca:	3220      	adds	r2, #32
10006ecc:	2a27      	cmp	r2, #39	; 0x27
10006ece:	dc00      	bgt.n	10006ed2 <__aeabi_dmul+0x41e>
10006ed0:	e675      	b.n	10006bbe <__aeabi_dmul+0x10a>
10006ed2:	3808      	subs	r0, #8
10006ed4:	4085      	lsls	r5, r0
10006ed6:	2600      	movs	r6, #0
10006ed8:	46ab      	mov	fp, r5
10006eda:	e67d      	b.n	10006bd8 <__aeabi_dmul+0x124>
10006edc:	465a      	mov	r2, fp
10006ede:	08f6      	lsrs	r6, r6, #3
10006ee0:	0752      	lsls	r2, r2, #29
10006ee2:	4316      	orrs	r6, r2
10006ee4:	465a      	mov	r2, fp
10006ee6:	2401      	movs	r4, #1
10006ee8:	0255      	lsls	r5, r2, #9
10006eea:	9a02      	ldr	r2, [sp, #8]
10006eec:	055b      	lsls	r3, r3, #21
10006eee:	0b2d      	lsrs	r5, r5, #12
10006ef0:	0d5b      	lsrs	r3, r3, #21
10006ef2:	4014      	ands	r4, r2
10006ef4:	e642      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006ef6:	4d38      	ldr	r5, [pc, #224]	; (10006fd8 <__aeabi_dmul+0x524>)
10006ef8:	1bed      	subs	r5, r5, r7
10006efa:	2d38      	cmp	r5, #56	; 0x38
10006efc:	dd0a      	ble.n	10006f14 <__aeabi_dmul+0x460>
10006efe:	2401      	movs	r4, #1
10006f00:	9b02      	ldr	r3, [sp, #8]
10006f02:	2500      	movs	r5, #0
10006f04:	401c      	ands	r4, r3
10006f06:	2600      	movs	r6, #0
10006f08:	2300      	movs	r3, #0
10006f0a:	e637      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006f0c:	9b01      	ldr	r3, [sp, #4]
10006f0e:	4657      	mov	r7, sl
10006f10:	9302      	str	r3, [sp, #8]
10006f12:	e791      	b.n	10006e38 <__aeabi_dmul+0x384>
10006f14:	2d1f      	cmp	r5, #31
10006f16:	dc25      	bgt.n	10006f64 <__aeabi_dmul+0x4b0>
10006f18:	4b30      	ldr	r3, [pc, #192]	; (10006fdc <__aeabi_dmul+0x528>)
10006f1a:	1c32      	adds	r2, r6, #0
10006f1c:	469c      	mov	ip, r3
10006f1e:	4467      	add	r7, ip
10006f20:	40be      	lsls	r6, r7
10006f22:	465b      	mov	r3, fp
10006f24:	40bb      	lsls	r3, r7
10006f26:	1c37      	adds	r7, r6, #0
10006f28:	40ea      	lsrs	r2, r5
10006f2a:	1e7e      	subs	r6, r7, #1
10006f2c:	41b7      	sbcs	r7, r6
10006f2e:	4313      	orrs	r3, r2
10006f30:	433b      	orrs	r3, r7
10006f32:	1c1e      	adds	r6, r3, #0
10006f34:	465b      	mov	r3, fp
10006f36:	40eb      	lsrs	r3, r5
10006f38:	1c1d      	adds	r5, r3, #0
10006f3a:	0773      	lsls	r3, r6, #29
10006f3c:	d009      	beq.n	10006f52 <__aeabi_dmul+0x49e>
10006f3e:	230f      	movs	r3, #15
10006f40:	4033      	ands	r3, r6
10006f42:	2b04      	cmp	r3, #4
10006f44:	d005      	beq.n	10006f52 <__aeabi_dmul+0x49e>
10006f46:	1d33      	adds	r3, r6, #4
10006f48:	42b3      	cmp	r3, r6
10006f4a:	41b6      	sbcs	r6, r6
10006f4c:	4276      	negs	r6, r6
10006f4e:	19ad      	adds	r5, r5, r6
10006f50:	1c1e      	adds	r6, r3, #0
10006f52:	022b      	lsls	r3, r5, #8
10006f54:	d520      	bpl.n	10006f98 <__aeabi_dmul+0x4e4>
10006f56:	2401      	movs	r4, #1
10006f58:	9b02      	ldr	r3, [sp, #8]
10006f5a:	2500      	movs	r5, #0
10006f5c:	401c      	ands	r4, r3
10006f5e:	2600      	movs	r6, #0
10006f60:	2301      	movs	r3, #1
10006f62:	e60b      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006f64:	465a      	mov	r2, fp
10006f66:	4b1e      	ldr	r3, [pc, #120]	; (10006fe0 <__aeabi_dmul+0x52c>)
10006f68:	1bdb      	subs	r3, r3, r7
10006f6a:	40da      	lsrs	r2, r3
10006f6c:	1c13      	adds	r3, r2, #0
10006f6e:	2d20      	cmp	r5, #32
10006f70:	d01c      	beq.n	10006fac <__aeabi_dmul+0x4f8>
10006f72:	4a1c      	ldr	r2, [pc, #112]	; (10006fe4 <__aeabi_dmul+0x530>)
10006f74:	4694      	mov	ip, r2
10006f76:	465a      	mov	r2, fp
10006f78:	4467      	add	r7, ip
10006f7a:	40ba      	lsls	r2, r7
10006f7c:	1c17      	adds	r7, r2, #0
10006f7e:	433e      	orrs	r6, r7
10006f80:	1e72      	subs	r2, r6, #1
10006f82:	4196      	sbcs	r6, r2
10006f84:	431e      	orrs	r6, r3
10006f86:	2307      	movs	r3, #7
10006f88:	2500      	movs	r5, #0
10006f8a:	4033      	ands	r3, r6
10006f8c:	d007      	beq.n	10006f9e <__aeabi_dmul+0x4ea>
10006f8e:	230f      	movs	r3, #15
10006f90:	2500      	movs	r5, #0
10006f92:	4033      	ands	r3, r6
10006f94:	2b04      	cmp	r3, #4
10006f96:	d1d6      	bne.n	10006f46 <__aeabi_dmul+0x492>
10006f98:	076b      	lsls	r3, r5, #29
10006f9a:	026d      	lsls	r5, r5, #9
10006f9c:	0b2d      	lsrs	r5, r5, #12
10006f9e:	2401      	movs	r4, #1
10006fa0:	08f6      	lsrs	r6, r6, #3
10006fa2:	431e      	orrs	r6, r3
10006fa4:	9b02      	ldr	r3, [sp, #8]
10006fa6:	401c      	ands	r4, r3
10006fa8:	2300      	movs	r3, #0
10006faa:	e5e7      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006fac:	2700      	movs	r7, #0
10006fae:	e7e6      	b.n	10006f7e <__aeabi_dmul+0x4ca>
10006fb0:	2580      	movs	r5, #128	; 0x80
10006fb2:	465b      	mov	r3, fp
10006fb4:	2401      	movs	r4, #1
10006fb6:	032d      	lsls	r5, r5, #12
10006fb8:	431d      	orrs	r5, r3
10006fba:	9b01      	ldr	r3, [sp, #4]
10006fbc:	032d      	lsls	r5, r5, #12
10006fbe:	4023      	ands	r3, r4
10006fc0:	1c1c      	adds	r4, r3, #0
10006fc2:	0b2d      	lsrs	r5, r5, #12
10006fc4:	4b03      	ldr	r3, [pc, #12]	; (10006fd4 <__aeabi_dmul+0x520>)
10006fc6:	e5d9      	b.n	10006b7c <__aeabi_dmul+0xc8>
10006fc8:	000003ff 	.word	0x000003ff
10006fcc:	feffffff 	.word	0xfeffffff
10006fd0:	000007fe 	.word	0x000007fe
10006fd4:	000007ff 	.word	0x000007ff
10006fd8:	fffffc02 	.word	0xfffffc02
10006fdc:	0000041e 	.word	0x0000041e
10006fe0:	fffffbe2 	.word	0xfffffbe2
10006fe4:	0000043e 	.word	0x0000043e

10006fe8 <__aeabi_dsub>:
10006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
10006fea:	464d      	mov	r5, r9
10006fec:	4644      	mov	r4, r8
10006fee:	465f      	mov	r7, fp
10006ff0:	4656      	mov	r6, sl
10006ff2:	b4f0      	push	{r4, r5, r6, r7}
10006ff4:	1c0e      	adds	r6, r1, #0
10006ff6:	1c11      	adds	r1, r2, #0
10006ff8:	0332      	lsls	r2, r6, #12
10006ffa:	0a52      	lsrs	r2, r2, #9
10006ffc:	0f47      	lsrs	r7, r0, #29
10006ffe:	4317      	orrs	r7, r2
10007000:	00c5      	lsls	r5, r0, #3
10007002:	031a      	lsls	r2, r3, #12
10007004:	0058      	lsls	r0, r3, #1
10007006:	0fdb      	lsrs	r3, r3, #31
10007008:	4699      	mov	r9, r3
1000700a:	0a52      	lsrs	r2, r2, #9
1000700c:	0f4b      	lsrs	r3, r1, #29
1000700e:	b083      	sub	sp, #12
10007010:	431a      	orrs	r2, r3
10007012:	00cb      	lsls	r3, r1, #3
10007014:	9301      	str	r3, [sp, #4]
10007016:	4bcf      	ldr	r3, [pc, #828]	; (10007354 <__aeabi_dsub+0x36c>)
10007018:	0074      	lsls	r4, r6, #1
1000701a:	0ff6      	lsrs	r6, r6, #31
1000701c:	0d64      	lsrs	r4, r4, #21
1000701e:	46b0      	mov	r8, r6
10007020:	0d40      	lsrs	r0, r0, #21
10007022:	4298      	cmp	r0, r3
10007024:	d100      	bne.n	10007028 <__aeabi_dsub+0x40>
10007026:	e0e8      	b.n	100071fa <__aeabi_dsub+0x212>
10007028:	2301      	movs	r3, #1
1000702a:	4649      	mov	r1, r9
1000702c:	4059      	eors	r1, r3
1000702e:	1c0b      	adds	r3, r1, #0
10007030:	429e      	cmp	r6, r3
10007032:	d100      	bne.n	10007036 <__aeabi_dsub+0x4e>
10007034:	e0b1      	b.n	1000719a <__aeabi_dsub+0x1b2>
10007036:	1a26      	subs	r6, r4, r0
10007038:	2e00      	cmp	r6, #0
1000703a:	dc00      	bgt.n	1000703e <__aeabi_dsub+0x56>
1000703c:	e11c      	b.n	10007278 <__aeabi_dsub+0x290>
1000703e:	2800      	cmp	r0, #0
10007040:	d142      	bne.n	100070c8 <__aeabi_dsub+0xe0>
10007042:	1c13      	adds	r3, r2, #0
10007044:	9901      	ldr	r1, [sp, #4]
10007046:	430b      	orrs	r3, r1
10007048:	d000      	beq.n	1000704c <__aeabi_dsub+0x64>
1000704a:	e0e6      	b.n	1000721a <__aeabi_dsub+0x232>
1000704c:	076b      	lsls	r3, r5, #29
1000704e:	d100      	bne.n	10007052 <__aeabi_dsub+0x6a>
10007050:	e08e      	b.n	10007170 <__aeabi_dsub+0x188>
10007052:	230f      	movs	r3, #15
10007054:	402b      	ands	r3, r5
10007056:	2b04      	cmp	r3, #4
10007058:	d100      	bne.n	1000705c <__aeabi_dsub+0x74>
1000705a:	e089      	b.n	10007170 <__aeabi_dsub+0x188>
1000705c:	1d2a      	adds	r2, r5, #4
1000705e:	42aa      	cmp	r2, r5
10007060:	41ad      	sbcs	r5, r5
10007062:	2380      	movs	r3, #128	; 0x80
10007064:	2601      	movs	r6, #1
10007066:	4641      	mov	r1, r8
10007068:	426d      	negs	r5, r5
1000706a:	197f      	adds	r7, r7, r5
1000706c:	041b      	lsls	r3, r3, #16
1000706e:	403b      	ands	r3, r7
10007070:	400e      	ands	r6, r1
10007072:	1c15      	adds	r5, r2, #0
10007074:	2b00      	cmp	r3, #0
10007076:	d100      	bne.n	1000707a <__aeabi_dsub+0x92>
10007078:	e083      	b.n	10007182 <__aeabi_dsub+0x19a>
1000707a:	4bb6      	ldr	r3, [pc, #728]	; (10007354 <__aeabi_dsub+0x36c>)
1000707c:	3401      	adds	r4, #1
1000707e:	429c      	cmp	r4, r3
10007080:	d100      	bne.n	10007084 <__aeabi_dsub+0x9c>
10007082:	e116      	b.n	100072b2 <__aeabi_dsub+0x2ca>
10007084:	1c3a      	adds	r2, r7, #0
10007086:	4bb4      	ldr	r3, [pc, #720]	; (10007358 <__aeabi_dsub+0x370>)
10007088:	08ed      	lsrs	r5, r5, #3
1000708a:	401a      	ands	r2, r3
1000708c:	0750      	lsls	r0, r2, #29
1000708e:	0564      	lsls	r4, r4, #21
10007090:	0252      	lsls	r2, r2, #9
10007092:	4305      	orrs	r5, r0
10007094:	0b12      	lsrs	r2, r2, #12
10007096:	0d64      	lsrs	r4, r4, #21
10007098:	2100      	movs	r1, #0
1000709a:	0312      	lsls	r2, r2, #12
1000709c:	0d0b      	lsrs	r3, r1, #20
1000709e:	051b      	lsls	r3, r3, #20
100070a0:	0564      	lsls	r4, r4, #21
100070a2:	0b12      	lsrs	r2, r2, #12
100070a4:	431a      	orrs	r2, r3
100070a6:	0863      	lsrs	r3, r4, #1
100070a8:	4cac      	ldr	r4, [pc, #688]	; (1000735c <__aeabi_dsub+0x374>)
100070aa:	07f6      	lsls	r6, r6, #31
100070ac:	4014      	ands	r4, r2
100070ae:	431c      	orrs	r4, r3
100070b0:	0064      	lsls	r4, r4, #1
100070b2:	0864      	lsrs	r4, r4, #1
100070b4:	4334      	orrs	r4, r6
100070b6:	1c28      	adds	r0, r5, #0
100070b8:	1c21      	adds	r1, r4, #0
100070ba:	b003      	add	sp, #12
100070bc:	bc3c      	pop	{r2, r3, r4, r5}
100070be:	4690      	mov	r8, r2
100070c0:	4699      	mov	r9, r3
100070c2:	46a2      	mov	sl, r4
100070c4:	46ab      	mov	fp, r5
100070c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100070c8:	4ba2      	ldr	r3, [pc, #648]	; (10007354 <__aeabi_dsub+0x36c>)
100070ca:	429c      	cmp	r4, r3
100070cc:	d0be      	beq.n	1000704c <__aeabi_dsub+0x64>
100070ce:	2380      	movs	r3, #128	; 0x80
100070d0:	041b      	lsls	r3, r3, #16
100070d2:	431a      	orrs	r2, r3
100070d4:	2e38      	cmp	r6, #56	; 0x38
100070d6:	dd00      	ble.n	100070da <__aeabi_dsub+0xf2>
100070d8:	e103      	b.n	100072e2 <__aeabi_dsub+0x2fa>
100070da:	2e1f      	cmp	r6, #31
100070dc:	dd00      	ble.n	100070e0 <__aeabi_dsub+0xf8>
100070de:	e13f      	b.n	10007360 <__aeabi_dsub+0x378>
100070e0:	2020      	movs	r0, #32
100070e2:	1b83      	subs	r3, r0, r6
100070e4:	4699      	mov	r9, r3
100070e6:	1c13      	adds	r3, r2, #0
100070e8:	4649      	mov	r1, r9
100070ea:	408b      	lsls	r3, r1
100070ec:	469c      	mov	ip, r3
100070ee:	9b01      	ldr	r3, [sp, #4]
100070f0:	4660      	mov	r0, ip
100070f2:	40f3      	lsrs	r3, r6
100070f4:	4303      	orrs	r3, r0
100070f6:	9801      	ldr	r0, [sp, #4]
100070f8:	40f2      	lsrs	r2, r6
100070fa:	4088      	lsls	r0, r1
100070fc:	1c01      	adds	r1, r0, #0
100070fe:	1e48      	subs	r0, r1, #1
10007100:	4181      	sbcs	r1, r0
10007102:	430b      	orrs	r3, r1
10007104:	1aeb      	subs	r3, r5, r3
10007106:	429d      	cmp	r5, r3
10007108:	4180      	sbcs	r0, r0
1000710a:	1c1d      	adds	r5, r3, #0
1000710c:	1aba      	subs	r2, r7, r2
1000710e:	4240      	negs	r0, r0
10007110:	1a17      	subs	r7, r2, r0
10007112:	023b      	lsls	r3, r7, #8
10007114:	d400      	bmi.n	10007118 <__aeabi_dsub+0x130>
10007116:	e0a8      	b.n	1000726a <__aeabi_dsub+0x282>
10007118:	027a      	lsls	r2, r7, #9
1000711a:	0a56      	lsrs	r6, r2, #9
1000711c:	2e00      	cmp	r6, #0
1000711e:	d100      	bne.n	10007122 <__aeabi_dsub+0x13a>
10007120:	e0ca      	b.n	100072b8 <__aeabi_dsub+0x2d0>
10007122:	1c30      	adds	r0, r6, #0
10007124:	f7fc ff5a 	bl	10003fdc <__clzsi2>
10007128:	1c03      	adds	r3, r0, #0
1000712a:	3b08      	subs	r3, #8
1000712c:	2b1f      	cmp	r3, #31
1000712e:	dd00      	ble.n	10007132 <__aeabi_dsub+0x14a>
10007130:	e0cb      	b.n	100072ca <__aeabi_dsub+0x2e2>
10007132:	2228      	movs	r2, #40	; 0x28
10007134:	1c29      	adds	r1, r5, #0
10007136:	1a12      	subs	r2, r2, r0
10007138:	40d1      	lsrs	r1, r2
1000713a:	409e      	lsls	r6, r3
1000713c:	1c0a      	adds	r2, r1, #0
1000713e:	409d      	lsls	r5, r3
10007140:	4332      	orrs	r2, r6
10007142:	429c      	cmp	r4, r3
10007144:	dd00      	ble.n	10007148 <__aeabi_dsub+0x160>
10007146:	e0c8      	b.n	100072da <__aeabi_dsub+0x2f2>
10007148:	1b1c      	subs	r4, r3, r4
1000714a:	1c67      	adds	r7, r4, #1
1000714c:	2f1f      	cmp	r7, #31
1000714e:	dd00      	ble.n	10007152 <__aeabi_dsub+0x16a>
10007150:	e0ed      	b.n	1000732e <__aeabi_dsub+0x346>
10007152:	231f      	movs	r3, #31
10007154:	1c29      	adds	r1, r5, #0
10007156:	1b1c      	subs	r4, r3, r4
10007158:	1c13      	adds	r3, r2, #0
1000715a:	40a5      	lsls	r5, r4
1000715c:	40a3      	lsls	r3, r4
1000715e:	40f9      	lsrs	r1, r7
10007160:	1e6c      	subs	r4, r5, #1
10007162:	41a5      	sbcs	r5, r4
10007164:	40fa      	lsrs	r2, r7
10007166:	4319      	orrs	r1, r3
10007168:	430d      	orrs	r5, r1
1000716a:	1c17      	adds	r7, r2, #0
1000716c:	2400      	movs	r4, #0
1000716e:	e76d      	b.n	1000704c <__aeabi_dsub+0x64>
10007170:	2380      	movs	r3, #128	; 0x80
10007172:	2601      	movs	r6, #1
10007174:	4642      	mov	r2, r8
10007176:	041b      	lsls	r3, r3, #16
10007178:	403b      	ands	r3, r7
1000717a:	4016      	ands	r6, r2
1000717c:	2b00      	cmp	r3, #0
1000717e:	d000      	beq.n	10007182 <__aeabi_dsub+0x19a>
10007180:	e77b      	b.n	1000707a <__aeabi_dsub+0x92>
10007182:	4b74      	ldr	r3, [pc, #464]	; (10007354 <__aeabi_dsub+0x36c>)
10007184:	08ed      	lsrs	r5, r5, #3
10007186:	0778      	lsls	r0, r7, #29
10007188:	4305      	orrs	r5, r0
1000718a:	08fa      	lsrs	r2, r7, #3
1000718c:	429c      	cmp	r4, r3
1000718e:	d03b      	beq.n	10007208 <__aeabi_dsub+0x220>
10007190:	0312      	lsls	r2, r2, #12
10007192:	0564      	lsls	r4, r4, #21
10007194:	0b12      	lsrs	r2, r2, #12
10007196:	0d64      	lsrs	r4, r4, #21
10007198:	e77e      	b.n	10007098 <__aeabi_dsub+0xb0>
1000719a:	1a23      	subs	r3, r4, r0
1000719c:	469a      	mov	sl, r3
1000719e:	2b00      	cmp	r3, #0
100071a0:	dc00      	bgt.n	100071a4 <__aeabi_dsub+0x1bc>
100071a2:	e0a5      	b.n	100072f0 <__aeabi_dsub+0x308>
100071a4:	2800      	cmp	r0, #0
100071a6:	d044      	beq.n	10007232 <__aeabi_dsub+0x24a>
100071a8:	486a      	ldr	r0, [pc, #424]	; (10007354 <__aeabi_dsub+0x36c>)
100071aa:	4284      	cmp	r4, r0
100071ac:	d100      	bne.n	100071b0 <__aeabi_dsub+0x1c8>
100071ae:	e74d      	b.n	1000704c <__aeabi_dsub+0x64>
100071b0:	2080      	movs	r0, #128	; 0x80
100071b2:	0400      	lsls	r0, r0, #16
100071b4:	4302      	orrs	r2, r0
100071b6:	4653      	mov	r3, sl
100071b8:	2b38      	cmp	r3, #56	; 0x38
100071ba:	dc00      	bgt.n	100071be <__aeabi_dsub+0x1d6>
100071bc:	e11c      	b.n	100073f8 <__aeabi_dsub+0x410>
100071be:	9b01      	ldr	r3, [sp, #4]
100071c0:	431a      	orrs	r2, r3
100071c2:	1e51      	subs	r1, r2, #1
100071c4:	418a      	sbcs	r2, r1
100071c6:	b2d1      	uxtb	r1, r2
100071c8:	2200      	movs	r2, #0
100071ca:	1949      	adds	r1, r1, r5
100071cc:	42a9      	cmp	r1, r5
100071ce:	4180      	sbcs	r0, r0
100071d0:	1c0d      	adds	r5, r1, #0
100071d2:	19d2      	adds	r2, r2, r7
100071d4:	4240      	negs	r0, r0
100071d6:	1817      	adds	r7, r2, r0
100071d8:	023b      	lsls	r3, r7, #8
100071da:	d546      	bpl.n	1000726a <__aeabi_dsub+0x282>
100071dc:	4b5d      	ldr	r3, [pc, #372]	; (10007354 <__aeabi_dsub+0x36c>)
100071de:	3401      	adds	r4, #1
100071e0:	429c      	cmp	r4, r3
100071e2:	d100      	bne.n	100071e6 <__aeabi_dsub+0x1fe>
100071e4:	e169      	b.n	100074ba <__aeabi_dsub+0x4d2>
100071e6:	2001      	movs	r0, #1
100071e8:	4a5b      	ldr	r2, [pc, #364]	; (10007358 <__aeabi_dsub+0x370>)
100071ea:	086b      	lsrs	r3, r5, #1
100071ec:	403a      	ands	r2, r7
100071ee:	4028      	ands	r0, r5
100071f0:	4318      	orrs	r0, r3
100071f2:	07d5      	lsls	r5, r2, #31
100071f4:	4305      	orrs	r5, r0
100071f6:	0857      	lsrs	r7, r2, #1
100071f8:	e728      	b.n	1000704c <__aeabi_dsub+0x64>
100071fa:	1c13      	adds	r3, r2, #0
100071fc:	9901      	ldr	r1, [sp, #4]
100071fe:	430b      	orrs	r3, r1
10007200:	d100      	bne.n	10007204 <__aeabi_dsub+0x21c>
10007202:	e711      	b.n	10007028 <__aeabi_dsub+0x40>
10007204:	464b      	mov	r3, r9
10007206:	e713      	b.n	10007030 <__aeabi_dsub+0x48>
10007208:	1c2b      	adds	r3, r5, #0
1000720a:	4313      	orrs	r3, r2
1000720c:	d051      	beq.n	100072b2 <__aeabi_dsub+0x2ca>
1000720e:	2380      	movs	r3, #128	; 0x80
10007210:	031b      	lsls	r3, r3, #12
10007212:	431a      	orrs	r2, r3
10007214:	0312      	lsls	r2, r2, #12
10007216:	0b12      	lsrs	r2, r2, #12
10007218:	e73e      	b.n	10007098 <__aeabi_dsub+0xb0>
1000721a:	3e01      	subs	r6, #1
1000721c:	2e00      	cmp	r6, #0
1000721e:	d000      	beq.n	10007222 <__aeabi_dsub+0x23a>
10007220:	e080      	b.n	10007324 <__aeabi_dsub+0x33c>
10007222:	1a69      	subs	r1, r5, r1
10007224:	428d      	cmp	r5, r1
10007226:	419b      	sbcs	r3, r3
10007228:	1aba      	subs	r2, r7, r2
1000722a:	425b      	negs	r3, r3
1000722c:	1ad7      	subs	r7, r2, r3
1000722e:	1c0d      	adds	r5, r1, #0
10007230:	e76f      	b.n	10007112 <__aeabi_dsub+0x12a>
10007232:	1c10      	adds	r0, r2, #0
10007234:	9b01      	ldr	r3, [sp, #4]
10007236:	4318      	orrs	r0, r3
10007238:	d100      	bne.n	1000723c <__aeabi_dsub+0x254>
1000723a:	e707      	b.n	1000704c <__aeabi_dsub+0x64>
1000723c:	2301      	movs	r3, #1
1000723e:	425b      	negs	r3, r3
10007240:	469c      	mov	ip, r3
10007242:	44e2      	add	sl, ip
10007244:	4653      	mov	r3, sl
10007246:	2b00      	cmp	r3, #0
10007248:	d000      	beq.n	1000724c <__aeabi_dsub+0x264>
1000724a:	e102      	b.n	10007452 <__aeabi_dsub+0x46a>
1000724c:	9b01      	ldr	r3, [sp, #4]
1000724e:	19d2      	adds	r2, r2, r7
10007250:	1959      	adds	r1, r3, r5
10007252:	42a9      	cmp	r1, r5
10007254:	419b      	sbcs	r3, r3
10007256:	425b      	negs	r3, r3
10007258:	18d7      	adds	r7, r2, r3
1000725a:	1c0d      	adds	r5, r1, #0
1000725c:	e7bc      	b.n	100071d8 <__aeabi_dsub+0x1f0>
1000725e:	4663      	mov	r3, ip
10007260:	4303      	orrs	r3, r0
10007262:	d100      	bne.n	10007266 <__aeabi_dsub+0x27e>
10007264:	e128      	b.n	100074b8 <__aeabi_dsub+0x4d0>
10007266:	1c07      	adds	r7, r0, #0
10007268:	4665      	mov	r5, ip
1000726a:	076b      	lsls	r3, r5, #29
1000726c:	d000      	beq.n	10007270 <__aeabi_dsub+0x288>
1000726e:	e6f0      	b.n	10007052 <__aeabi_dsub+0x6a>
10007270:	2601      	movs	r6, #1
10007272:	4643      	mov	r3, r8
10007274:	401e      	ands	r6, r3
10007276:	e784      	b.n	10007182 <__aeabi_dsub+0x19a>
10007278:	2e00      	cmp	r6, #0
1000727a:	d000      	beq.n	1000727e <__aeabi_dsub+0x296>
1000727c:	e081      	b.n	10007382 <__aeabi_dsub+0x39a>
1000727e:	1c60      	adds	r0, r4, #1
10007280:	0540      	lsls	r0, r0, #21
10007282:	0d40      	lsrs	r0, r0, #21
10007284:	2801      	cmp	r0, #1
10007286:	dc00      	bgt.n	1000728a <__aeabi_dsub+0x2a2>
10007288:	e107      	b.n	1000749a <__aeabi_dsub+0x4b2>
1000728a:	9901      	ldr	r1, [sp, #4]
1000728c:	1a68      	subs	r0, r5, r1
1000728e:	4684      	mov	ip, r0
10007290:	4565      	cmp	r5, ip
10007292:	41b6      	sbcs	r6, r6
10007294:	1ab8      	subs	r0, r7, r2
10007296:	4276      	negs	r6, r6
10007298:	1b86      	subs	r6, r0, r6
1000729a:	0230      	lsls	r0, r6, #8
1000729c:	d400      	bmi.n	100072a0 <__aeabi_dsub+0x2b8>
1000729e:	e0a1      	b.n	100073e4 <__aeabi_dsub+0x3fc>
100072a0:	468c      	mov	ip, r1
100072a2:	1b4d      	subs	r5, r1, r5
100072a4:	45ac      	cmp	ip, r5
100072a6:	4189      	sbcs	r1, r1
100072a8:	1bd2      	subs	r2, r2, r7
100072aa:	4249      	negs	r1, r1
100072ac:	1a56      	subs	r6, r2, r1
100072ae:	4698      	mov	r8, r3
100072b0:	e734      	b.n	1000711c <__aeabi_dsub+0x134>
100072b2:	2200      	movs	r2, #0
100072b4:	2500      	movs	r5, #0
100072b6:	e6ef      	b.n	10007098 <__aeabi_dsub+0xb0>
100072b8:	1c28      	adds	r0, r5, #0
100072ba:	f7fc fe8f 	bl	10003fdc <__clzsi2>
100072be:	3020      	adds	r0, #32
100072c0:	1c03      	adds	r3, r0, #0
100072c2:	3b08      	subs	r3, #8
100072c4:	2b1f      	cmp	r3, #31
100072c6:	dc00      	bgt.n	100072ca <__aeabi_dsub+0x2e2>
100072c8:	e733      	b.n	10007132 <__aeabi_dsub+0x14a>
100072ca:	1c02      	adds	r2, r0, #0
100072cc:	3a28      	subs	r2, #40	; 0x28
100072ce:	4095      	lsls	r5, r2
100072d0:	1c2a      	adds	r2, r5, #0
100072d2:	2500      	movs	r5, #0
100072d4:	429c      	cmp	r4, r3
100072d6:	dc00      	bgt.n	100072da <__aeabi_dsub+0x2f2>
100072d8:	e736      	b.n	10007148 <__aeabi_dsub+0x160>
100072da:	4f1f      	ldr	r7, [pc, #124]	; (10007358 <__aeabi_dsub+0x370>)
100072dc:	1ae4      	subs	r4, r4, r3
100072de:	4017      	ands	r7, r2
100072e0:	e6b4      	b.n	1000704c <__aeabi_dsub+0x64>
100072e2:	9b01      	ldr	r3, [sp, #4]
100072e4:	431a      	orrs	r2, r3
100072e6:	1e51      	subs	r1, r2, #1
100072e8:	418a      	sbcs	r2, r1
100072ea:	b2d3      	uxtb	r3, r2
100072ec:	2200      	movs	r2, #0
100072ee:	e709      	b.n	10007104 <__aeabi_dsub+0x11c>
100072f0:	2b00      	cmp	r3, #0
100072f2:	d000      	beq.n	100072f6 <__aeabi_dsub+0x30e>
100072f4:	e101      	b.n	100074fa <__aeabi_dsub+0x512>
100072f6:	1c60      	adds	r0, r4, #1
100072f8:	0543      	lsls	r3, r0, #21
100072fa:	0d5b      	lsrs	r3, r3, #21
100072fc:	2b01      	cmp	r3, #1
100072fe:	dc00      	bgt.n	10007302 <__aeabi_dsub+0x31a>
10007300:	e0b0      	b.n	10007464 <__aeabi_dsub+0x47c>
10007302:	4b14      	ldr	r3, [pc, #80]	; (10007354 <__aeabi_dsub+0x36c>)
10007304:	4298      	cmp	r0, r3
10007306:	d100      	bne.n	1000730a <__aeabi_dsub+0x322>
10007308:	e11e      	b.n	10007548 <__aeabi_dsub+0x560>
1000730a:	9b01      	ldr	r3, [sp, #4]
1000730c:	19d2      	adds	r2, r2, r7
1000730e:	1959      	adds	r1, r3, r5
10007310:	42a9      	cmp	r1, r5
10007312:	419b      	sbcs	r3, r3
10007314:	425b      	negs	r3, r3
10007316:	18d2      	adds	r2, r2, r3
10007318:	0849      	lsrs	r1, r1, #1
1000731a:	07d5      	lsls	r5, r2, #31
1000731c:	430d      	orrs	r5, r1
1000731e:	0857      	lsrs	r7, r2, #1
10007320:	1c04      	adds	r4, r0, #0
10007322:	e693      	b.n	1000704c <__aeabi_dsub+0x64>
10007324:	4b0b      	ldr	r3, [pc, #44]	; (10007354 <__aeabi_dsub+0x36c>)
10007326:	429c      	cmp	r4, r3
10007328:	d000      	beq.n	1000732c <__aeabi_dsub+0x344>
1000732a:	e6d3      	b.n	100070d4 <__aeabi_dsub+0xec>
1000732c:	e68e      	b.n	1000704c <__aeabi_dsub+0x64>
1000732e:	1c21      	adds	r1, r4, #0
10007330:	1c13      	adds	r3, r2, #0
10007332:	391f      	subs	r1, #31
10007334:	40cb      	lsrs	r3, r1
10007336:	1c19      	adds	r1, r3, #0
10007338:	2f20      	cmp	r7, #32
1000733a:	d100      	bne.n	1000733e <__aeabi_dsub+0x356>
1000733c:	e08e      	b.n	1000745c <__aeabi_dsub+0x474>
1000733e:	233f      	movs	r3, #63	; 0x3f
10007340:	1b1c      	subs	r4, r3, r4
10007342:	40a2      	lsls	r2, r4
10007344:	4315      	orrs	r5, r2
10007346:	1e6a      	subs	r2, r5, #1
10007348:	4195      	sbcs	r5, r2
1000734a:	2700      	movs	r7, #0
1000734c:	430d      	orrs	r5, r1
1000734e:	2400      	movs	r4, #0
10007350:	e78b      	b.n	1000726a <__aeabi_dsub+0x282>
10007352:	46c0      	nop			; (mov r8, r8)
10007354:	000007ff 	.word	0x000007ff
10007358:	ff7fffff 	.word	0xff7fffff
1000735c:	800fffff 	.word	0x800fffff
10007360:	1c33      	adds	r3, r6, #0
10007362:	1c10      	adds	r0, r2, #0
10007364:	3b20      	subs	r3, #32
10007366:	40d8      	lsrs	r0, r3
10007368:	2e20      	cmp	r6, #32
1000736a:	d079      	beq.n	10007460 <__aeabi_dsub+0x478>
1000736c:	2340      	movs	r3, #64	; 0x40
1000736e:	1b9b      	subs	r3, r3, r6
10007370:	409a      	lsls	r2, r3
10007372:	1c13      	adds	r3, r2, #0
10007374:	9a01      	ldr	r2, [sp, #4]
10007376:	4313      	orrs	r3, r2
10007378:	1e59      	subs	r1, r3, #1
1000737a:	418b      	sbcs	r3, r1
1000737c:	2200      	movs	r2, #0
1000737e:	4303      	orrs	r3, r0
10007380:	e6c0      	b.n	10007104 <__aeabi_dsub+0x11c>
10007382:	2c00      	cmp	r4, #0
10007384:	d053      	beq.n	1000742e <__aeabi_dsub+0x446>
10007386:	4cc7      	ldr	r4, [pc, #796]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007388:	42a0      	cmp	r0, r4
1000738a:	d100      	bne.n	1000738e <__aeabi_dsub+0x3a6>
1000738c:	e0b0      	b.n	100074f0 <__aeabi_dsub+0x508>
1000738e:	2480      	movs	r4, #128	; 0x80
10007390:	4271      	negs	r1, r6
10007392:	4689      	mov	r9, r1
10007394:	0424      	lsls	r4, r4, #16
10007396:	4327      	orrs	r7, r4
10007398:	4649      	mov	r1, r9
1000739a:	2938      	cmp	r1, #56	; 0x38
1000739c:	dd00      	ble.n	100073a0 <__aeabi_dsub+0x3b8>
1000739e:	e0cd      	b.n	1000753c <__aeabi_dsub+0x554>
100073a0:	291f      	cmp	r1, #31
100073a2:	dd00      	ble.n	100073a6 <__aeabi_dsub+0x3be>
100073a4:	e159      	b.n	1000765a <__aeabi_dsub+0x672>
100073a6:	2420      	movs	r4, #32
100073a8:	1c3e      	adds	r6, r7, #0
100073aa:	1a61      	subs	r1, r4, r1
100073ac:	408e      	lsls	r6, r1
100073ae:	468a      	mov	sl, r1
100073b0:	46b0      	mov	r8, r6
100073b2:	4649      	mov	r1, r9
100073b4:	1c2e      	adds	r6, r5, #0
100073b6:	40ce      	lsrs	r6, r1
100073b8:	4651      	mov	r1, sl
100073ba:	46b4      	mov	ip, r6
100073bc:	408d      	lsls	r5, r1
100073be:	4664      	mov	r4, ip
100073c0:	4646      	mov	r6, r8
100073c2:	4649      	mov	r1, r9
100073c4:	4326      	orrs	r6, r4
100073c6:	1e6c      	subs	r4, r5, #1
100073c8:	41a5      	sbcs	r5, r4
100073ca:	40cf      	lsrs	r7, r1
100073cc:	4335      	orrs	r5, r6
100073ce:	9901      	ldr	r1, [sp, #4]
100073d0:	1bd7      	subs	r7, r2, r7
100073d2:	468c      	mov	ip, r1
100073d4:	1b4d      	subs	r5, r1, r5
100073d6:	45ac      	cmp	ip, r5
100073d8:	4192      	sbcs	r2, r2
100073da:	4252      	negs	r2, r2
100073dc:	1abf      	subs	r7, r7, r2
100073de:	1c04      	adds	r4, r0, #0
100073e0:	4698      	mov	r8, r3
100073e2:	e696      	b.n	10007112 <__aeabi_dsub+0x12a>
100073e4:	4663      	mov	r3, ip
100073e6:	4665      	mov	r5, ip
100073e8:	4333      	orrs	r3, r6
100073ea:	d000      	beq.n	100073ee <__aeabi_dsub+0x406>
100073ec:	e696      	b.n	1000711c <__aeabi_dsub+0x134>
100073ee:	2600      	movs	r6, #0
100073f0:	2700      	movs	r7, #0
100073f2:	2400      	movs	r4, #0
100073f4:	2500      	movs	r5, #0
100073f6:	e6c4      	b.n	10007182 <__aeabi_dsub+0x19a>
100073f8:	2b1f      	cmp	r3, #31
100073fa:	dc61      	bgt.n	100074c0 <__aeabi_dsub+0x4d8>
100073fc:	2020      	movs	r0, #32
100073fe:	1ac3      	subs	r3, r0, r3
10007400:	469b      	mov	fp, r3
10007402:	1c13      	adds	r3, r2, #0
10007404:	4659      	mov	r1, fp
10007406:	408b      	lsls	r3, r1
10007408:	4651      	mov	r1, sl
1000740a:	4699      	mov	r9, r3
1000740c:	9b01      	ldr	r3, [sp, #4]
1000740e:	40cb      	lsrs	r3, r1
10007410:	469c      	mov	ip, r3
10007412:	464b      	mov	r3, r9
10007414:	4660      	mov	r0, ip
10007416:	4303      	orrs	r3, r0
10007418:	469c      	mov	ip, r3
1000741a:	465b      	mov	r3, fp
1000741c:	9901      	ldr	r1, [sp, #4]
1000741e:	4099      	lsls	r1, r3
10007420:	4663      	mov	r3, ip
10007422:	1e48      	subs	r0, r1, #1
10007424:	4181      	sbcs	r1, r0
10007426:	4319      	orrs	r1, r3
10007428:	4653      	mov	r3, sl
1000742a:	40da      	lsrs	r2, r3
1000742c:	e6cd      	b.n	100071ca <__aeabi_dsub+0x1e2>
1000742e:	1c3c      	adds	r4, r7, #0
10007430:	432c      	orrs	r4, r5
10007432:	d05d      	beq.n	100074f0 <__aeabi_dsub+0x508>
10007434:	43f1      	mvns	r1, r6
10007436:	4689      	mov	r9, r1
10007438:	2900      	cmp	r1, #0
1000743a:	d155      	bne.n	100074e8 <__aeabi_dsub+0x500>
1000743c:	9901      	ldr	r1, [sp, #4]
1000743e:	1bd2      	subs	r2, r2, r7
10007440:	468c      	mov	ip, r1
10007442:	1b4d      	subs	r5, r1, r5
10007444:	45ac      	cmp	ip, r5
10007446:	4189      	sbcs	r1, r1
10007448:	4249      	negs	r1, r1
1000744a:	1a57      	subs	r7, r2, r1
1000744c:	1c04      	adds	r4, r0, #0
1000744e:	4698      	mov	r8, r3
10007450:	e65f      	b.n	10007112 <__aeabi_dsub+0x12a>
10007452:	4894      	ldr	r0, [pc, #592]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007454:	4284      	cmp	r4, r0
10007456:	d000      	beq.n	1000745a <__aeabi_dsub+0x472>
10007458:	e6ad      	b.n	100071b6 <__aeabi_dsub+0x1ce>
1000745a:	e5f7      	b.n	1000704c <__aeabi_dsub+0x64>
1000745c:	2200      	movs	r2, #0
1000745e:	e771      	b.n	10007344 <__aeabi_dsub+0x35c>
10007460:	2300      	movs	r3, #0
10007462:	e787      	b.n	10007374 <__aeabi_dsub+0x38c>
10007464:	1c3b      	adds	r3, r7, #0
10007466:	432b      	orrs	r3, r5
10007468:	2c00      	cmp	r4, #0
1000746a:	d000      	beq.n	1000746e <__aeabi_dsub+0x486>
1000746c:	e0da      	b.n	10007624 <__aeabi_dsub+0x63c>
1000746e:	2b00      	cmp	r3, #0
10007470:	d100      	bne.n	10007474 <__aeabi_dsub+0x48c>
10007472:	e113      	b.n	1000769c <__aeabi_dsub+0x6b4>
10007474:	1c13      	adds	r3, r2, #0
10007476:	9901      	ldr	r1, [sp, #4]
10007478:	430b      	orrs	r3, r1
1000747a:	d100      	bne.n	1000747e <__aeabi_dsub+0x496>
1000747c:	e5e6      	b.n	1000704c <__aeabi_dsub+0x64>
1000747e:	1949      	adds	r1, r1, r5
10007480:	42a9      	cmp	r1, r5
10007482:	419b      	sbcs	r3, r3
10007484:	19d2      	adds	r2, r2, r7
10007486:	425b      	negs	r3, r3
10007488:	18d7      	adds	r7, r2, r3
1000748a:	023b      	lsls	r3, r7, #8
1000748c:	d400      	bmi.n	10007490 <__aeabi_dsub+0x4a8>
1000748e:	e121      	b.n	100076d4 <__aeabi_dsub+0x6ec>
10007490:	4b85      	ldr	r3, [pc, #532]	; (100076a8 <__aeabi_dsub+0x6c0>)
10007492:	1c0d      	adds	r5, r1, #0
10007494:	401f      	ands	r7, r3
10007496:	1c04      	adds	r4, r0, #0
10007498:	e5d8      	b.n	1000704c <__aeabi_dsub+0x64>
1000749a:	1c38      	adds	r0, r7, #0
1000749c:	4328      	orrs	r0, r5
1000749e:	2c00      	cmp	r4, #0
100074a0:	d140      	bne.n	10007524 <__aeabi_dsub+0x53c>
100074a2:	2800      	cmp	r0, #0
100074a4:	d000      	beq.n	100074a8 <__aeabi_dsub+0x4c0>
100074a6:	e083      	b.n	100075b0 <__aeabi_dsub+0x5c8>
100074a8:	1c10      	adds	r0, r2, #0
100074aa:	9901      	ldr	r1, [sp, #4]
100074ac:	4308      	orrs	r0, r1
100074ae:	d003      	beq.n	100074b8 <__aeabi_dsub+0x4d0>
100074b0:	1c17      	adds	r7, r2, #0
100074b2:	1c0d      	adds	r5, r1, #0
100074b4:	4698      	mov	r8, r3
100074b6:	e5c9      	b.n	1000704c <__aeabi_dsub+0x64>
100074b8:	2600      	movs	r6, #0
100074ba:	2700      	movs	r7, #0
100074bc:	2500      	movs	r5, #0
100074be:	e660      	b.n	10007182 <__aeabi_dsub+0x19a>
100074c0:	4650      	mov	r0, sl
100074c2:	1c13      	adds	r3, r2, #0
100074c4:	3820      	subs	r0, #32
100074c6:	40c3      	lsrs	r3, r0
100074c8:	1c18      	adds	r0, r3, #0
100074ca:	4653      	mov	r3, sl
100074cc:	2b20      	cmp	r3, #32
100074ce:	d100      	bne.n	100074d2 <__aeabi_dsub+0x4ea>
100074d0:	e0c1      	b.n	10007656 <__aeabi_dsub+0x66e>
100074d2:	2340      	movs	r3, #64	; 0x40
100074d4:	4651      	mov	r1, sl
100074d6:	1a5b      	subs	r3, r3, r1
100074d8:	409a      	lsls	r2, r3
100074da:	9901      	ldr	r1, [sp, #4]
100074dc:	4311      	orrs	r1, r2
100074de:	1e4a      	subs	r2, r1, #1
100074e0:	4191      	sbcs	r1, r2
100074e2:	2200      	movs	r2, #0
100074e4:	4301      	orrs	r1, r0
100074e6:	e670      	b.n	100071ca <__aeabi_dsub+0x1e2>
100074e8:	4c6e      	ldr	r4, [pc, #440]	; (100076a4 <__aeabi_dsub+0x6bc>)
100074ea:	42a0      	cmp	r0, r4
100074ec:	d000      	beq.n	100074f0 <__aeabi_dsub+0x508>
100074ee:	e753      	b.n	10007398 <__aeabi_dsub+0x3b0>
100074f0:	1c17      	adds	r7, r2, #0
100074f2:	9d01      	ldr	r5, [sp, #4]
100074f4:	1c04      	adds	r4, r0, #0
100074f6:	4698      	mov	r8, r3
100074f8:	e5a8      	b.n	1000704c <__aeabi_dsub+0x64>
100074fa:	2c00      	cmp	r4, #0
100074fc:	d128      	bne.n	10007550 <__aeabi_dsub+0x568>
100074fe:	1c3c      	adds	r4, r7, #0
10007500:	432c      	orrs	r4, r5
10007502:	d100      	bne.n	10007506 <__aeabi_dsub+0x51e>
10007504:	e08a      	b.n	1000761c <__aeabi_dsub+0x634>
10007506:	43db      	mvns	r3, r3
10007508:	469a      	mov	sl, r3
1000750a:	2b00      	cmp	r3, #0
1000750c:	d000      	beq.n	10007510 <__aeabi_dsub+0x528>
1000750e:	e082      	b.n	10007616 <__aeabi_dsub+0x62e>
10007510:	9b01      	ldr	r3, [sp, #4]
10007512:	19d2      	adds	r2, r2, r7
10007514:	469c      	mov	ip, r3
10007516:	4465      	add	r5, ip
10007518:	429d      	cmp	r5, r3
1000751a:	4189      	sbcs	r1, r1
1000751c:	4249      	negs	r1, r1
1000751e:	1857      	adds	r7, r2, r1
10007520:	1c04      	adds	r4, r0, #0
10007522:	e659      	b.n	100071d8 <__aeabi_dsub+0x1f0>
10007524:	2800      	cmp	r0, #0
10007526:	d15b      	bne.n	100075e0 <__aeabi_dsub+0x5f8>
10007528:	1c10      	adds	r0, r2, #0
1000752a:	9901      	ldr	r1, [sp, #4]
1000752c:	4308      	orrs	r0, r1
1000752e:	d100      	bne.n	10007532 <__aeabi_dsub+0x54a>
10007530:	e0a4      	b.n	1000767c <__aeabi_dsub+0x694>
10007532:	1c17      	adds	r7, r2, #0
10007534:	1c0d      	adds	r5, r1, #0
10007536:	4698      	mov	r8, r3
10007538:	4c5a      	ldr	r4, [pc, #360]	; (100076a4 <__aeabi_dsub+0x6bc>)
1000753a:	e587      	b.n	1000704c <__aeabi_dsub+0x64>
1000753c:	433d      	orrs	r5, r7
1000753e:	1e6f      	subs	r7, r5, #1
10007540:	41bd      	sbcs	r5, r7
10007542:	2700      	movs	r7, #0
10007544:	b2ed      	uxtb	r5, r5
10007546:	e742      	b.n	100073ce <__aeabi_dsub+0x3e6>
10007548:	1c04      	adds	r4, r0, #0
1000754a:	2700      	movs	r7, #0
1000754c:	2500      	movs	r5, #0
1000754e:	e618      	b.n	10007182 <__aeabi_dsub+0x19a>
10007550:	4c54      	ldr	r4, [pc, #336]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007552:	42a0      	cmp	r0, r4
10007554:	d062      	beq.n	1000761c <__aeabi_dsub+0x634>
10007556:	4653      	mov	r3, sl
10007558:	2480      	movs	r4, #128	; 0x80
1000755a:	425b      	negs	r3, r3
1000755c:	469a      	mov	sl, r3
1000755e:	0424      	lsls	r4, r4, #16
10007560:	4327      	orrs	r7, r4
10007562:	4653      	mov	r3, sl
10007564:	2b38      	cmp	r3, #56	; 0x38
10007566:	dd00      	ble.n	1000756a <__aeabi_dsub+0x582>
10007568:	e08e      	b.n	10007688 <__aeabi_dsub+0x6a0>
1000756a:	2b1f      	cmp	r3, #31
1000756c:	dd00      	ble.n	10007570 <__aeabi_dsub+0x588>
1000756e:	e09d      	b.n	100076ac <__aeabi_dsub+0x6c4>
10007570:	2420      	movs	r4, #32
10007572:	1ae3      	subs	r3, r4, r3
10007574:	469b      	mov	fp, r3
10007576:	1c3b      	adds	r3, r7, #0
10007578:	4659      	mov	r1, fp
1000757a:	408b      	lsls	r3, r1
1000757c:	4651      	mov	r1, sl
1000757e:	4699      	mov	r9, r3
10007580:	1c2b      	adds	r3, r5, #0
10007582:	40cb      	lsrs	r3, r1
10007584:	469c      	mov	ip, r3
10007586:	464b      	mov	r3, r9
10007588:	4664      	mov	r4, ip
1000758a:	4323      	orrs	r3, r4
1000758c:	469c      	mov	ip, r3
1000758e:	465b      	mov	r3, fp
10007590:	409d      	lsls	r5, r3
10007592:	4663      	mov	r3, ip
10007594:	1e6c      	subs	r4, r5, #1
10007596:	41a5      	sbcs	r5, r4
10007598:	40cf      	lsrs	r7, r1
1000759a:	431d      	orrs	r5, r3
1000759c:	9b01      	ldr	r3, [sp, #4]
1000759e:	18bf      	adds	r7, r7, r2
100075a0:	469c      	mov	ip, r3
100075a2:	4465      	add	r5, ip
100075a4:	429d      	cmp	r5, r3
100075a6:	4192      	sbcs	r2, r2
100075a8:	4252      	negs	r2, r2
100075aa:	18bf      	adds	r7, r7, r2
100075ac:	1c04      	adds	r4, r0, #0
100075ae:	e613      	b.n	100071d8 <__aeabi_dsub+0x1f0>
100075b0:	1c10      	adds	r0, r2, #0
100075b2:	9901      	ldr	r1, [sp, #4]
100075b4:	4308      	orrs	r0, r1
100075b6:	d100      	bne.n	100075ba <__aeabi_dsub+0x5d2>
100075b8:	e548      	b.n	1000704c <__aeabi_dsub+0x64>
100075ba:	1a68      	subs	r0, r5, r1
100075bc:	4684      	mov	ip, r0
100075be:	4285      	cmp	r5, r0
100075c0:	4180      	sbcs	r0, r0
100075c2:	1abe      	subs	r6, r7, r2
100075c4:	4240      	negs	r0, r0
100075c6:	1a30      	subs	r0, r6, r0
100075c8:	0206      	lsls	r6, r0, #8
100075ca:	d400      	bmi.n	100075ce <__aeabi_dsub+0x5e6>
100075cc:	e647      	b.n	1000725e <__aeabi_dsub+0x276>
100075ce:	468c      	mov	ip, r1
100075d0:	1b4d      	subs	r5, r1, r5
100075d2:	45ac      	cmp	ip, r5
100075d4:	4189      	sbcs	r1, r1
100075d6:	1bd2      	subs	r2, r2, r7
100075d8:	4249      	negs	r1, r1
100075da:	1a57      	subs	r7, r2, r1
100075dc:	4698      	mov	r8, r3
100075de:	e535      	b.n	1000704c <__aeabi_dsub+0x64>
100075e0:	1c10      	adds	r0, r2, #0
100075e2:	9901      	ldr	r1, [sp, #4]
100075e4:	4308      	orrs	r0, r1
100075e6:	d034      	beq.n	10007652 <__aeabi_dsub+0x66a>
100075e8:	2480      	movs	r4, #128	; 0x80
100075ea:	0778      	lsls	r0, r7, #29
100075ec:	08ed      	lsrs	r5, r5, #3
100075ee:	08ff      	lsrs	r7, r7, #3
100075f0:	0324      	lsls	r4, r4, #12
100075f2:	4328      	orrs	r0, r5
100075f4:	4227      	tst	r7, r4
100075f6:	d008      	beq.n	1000760a <__aeabi_dsub+0x622>
100075f8:	08d6      	lsrs	r6, r2, #3
100075fa:	4226      	tst	r6, r4
100075fc:	d105      	bne.n	1000760a <__aeabi_dsub+0x622>
100075fe:	08c9      	lsrs	r1, r1, #3
10007600:	0752      	lsls	r2, r2, #29
10007602:	430a      	orrs	r2, r1
10007604:	1c10      	adds	r0, r2, #0
10007606:	1c37      	adds	r7, r6, #0
10007608:	4698      	mov	r8, r3
1000760a:	00ff      	lsls	r7, r7, #3
1000760c:	0f42      	lsrs	r2, r0, #29
1000760e:	4317      	orrs	r7, r2
10007610:	00c5      	lsls	r5, r0, #3
10007612:	4c24      	ldr	r4, [pc, #144]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007614:	e51a      	b.n	1000704c <__aeabi_dsub+0x64>
10007616:	4c23      	ldr	r4, [pc, #140]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007618:	42a0      	cmp	r0, r4
1000761a:	d1a2      	bne.n	10007562 <__aeabi_dsub+0x57a>
1000761c:	1c17      	adds	r7, r2, #0
1000761e:	9d01      	ldr	r5, [sp, #4]
10007620:	1c04      	adds	r4, r0, #0
10007622:	e513      	b.n	1000704c <__aeabi_dsub+0x64>
10007624:	2b00      	cmp	r3, #0
10007626:	d035      	beq.n	10007694 <__aeabi_dsub+0x6ac>
10007628:	1c13      	adds	r3, r2, #0
1000762a:	9901      	ldr	r1, [sp, #4]
1000762c:	430b      	orrs	r3, r1
1000762e:	d010      	beq.n	10007652 <__aeabi_dsub+0x66a>
10007630:	2480      	movs	r4, #128	; 0x80
10007632:	0778      	lsls	r0, r7, #29
10007634:	08ed      	lsrs	r5, r5, #3
10007636:	08ff      	lsrs	r7, r7, #3
10007638:	0324      	lsls	r4, r4, #12
1000763a:	4328      	orrs	r0, r5
1000763c:	4227      	tst	r7, r4
1000763e:	d0e4      	beq.n	1000760a <__aeabi_dsub+0x622>
10007640:	08d3      	lsrs	r3, r2, #3
10007642:	4223      	tst	r3, r4
10007644:	d1e1      	bne.n	1000760a <__aeabi_dsub+0x622>
10007646:	08c9      	lsrs	r1, r1, #3
10007648:	0752      	lsls	r2, r2, #29
1000764a:	430a      	orrs	r2, r1
1000764c:	1c10      	adds	r0, r2, #0
1000764e:	1c1f      	adds	r7, r3, #0
10007650:	e7db      	b.n	1000760a <__aeabi_dsub+0x622>
10007652:	4c14      	ldr	r4, [pc, #80]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007654:	e4fa      	b.n	1000704c <__aeabi_dsub+0x64>
10007656:	2200      	movs	r2, #0
10007658:	e73f      	b.n	100074da <__aeabi_dsub+0x4f2>
1000765a:	464c      	mov	r4, r9
1000765c:	1c3e      	adds	r6, r7, #0
1000765e:	3c20      	subs	r4, #32
10007660:	40e6      	lsrs	r6, r4
10007662:	4649      	mov	r1, r9
10007664:	1c34      	adds	r4, r6, #0
10007666:	2920      	cmp	r1, #32
10007668:	d032      	beq.n	100076d0 <__aeabi_dsub+0x6e8>
1000766a:	2640      	movs	r6, #64	; 0x40
1000766c:	1a76      	subs	r6, r6, r1
1000766e:	40b7      	lsls	r7, r6
10007670:	433d      	orrs	r5, r7
10007672:	1e6f      	subs	r7, r5, #1
10007674:	41bd      	sbcs	r5, r7
10007676:	2700      	movs	r7, #0
10007678:	4325      	orrs	r5, r4
1000767a:	e6a8      	b.n	100073ce <__aeabi_dsub+0x3e6>
1000767c:	2780      	movs	r7, #128	; 0x80
1000767e:	2600      	movs	r6, #0
10007680:	03ff      	lsls	r7, r7, #15
10007682:	4c08      	ldr	r4, [pc, #32]	; (100076a4 <__aeabi_dsub+0x6bc>)
10007684:	2500      	movs	r5, #0
10007686:	e57c      	b.n	10007182 <__aeabi_dsub+0x19a>
10007688:	433d      	orrs	r5, r7
1000768a:	1e6f      	subs	r7, r5, #1
1000768c:	41bd      	sbcs	r5, r7
1000768e:	2700      	movs	r7, #0
10007690:	b2ed      	uxtb	r5, r5
10007692:	e783      	b.n	1000759c <__aeabi_dsub+0x5b4>
10007694:	1c17      	adds	r7, r2, #0
10007696:	9d01      	ldr	r5, [sp, #4]
10007698:	4c02      	ldr	r4, [pc, #8]	; (100076a4 <__aeabi_dsub+0x6bc>)
1000769a:	e4d7      	b.n	1000704c <__aeabi_dsub+0x64>
1000769c:	1c17      	adds	r7, r2, #0
1000769e:	9d01      	ldr	r5, [sp, #4]
100076a0:	e4d4      	b.n	1000704c <__aeabi_dsub+0x64>
100076a2:	46c0      	nop			; (mov r8, r8)
100076a4:	000007ff 	.word	0x000007ff
100076a8:	ff7fffff 	.word	0xff7fffff
100076ac:	4654      	mov	r4, sl
100076ae:	1c3b      	adds	r3, r7, #0
100076b0:	3c20      	subs	r4, #32
100076b2:	40e3      	lsrs	r3, r4
100076b4:	1c1c      	adds	r4, r3, #0
100076b6:	4653      	mov	r3, sl
100076b8:	2b20      	cmp	r3, #32
100076ba:	d00d      	beq.n	100076d8 <__aeabi_dsub+0x6f0>
100076bc:	2340      	movs	r3, #64	; 0x40
100076be:	4651      	mov	r1, sl
100076c0:	1a5b      	subs	r3, r3, r1
100076c2:	409f      	lsls	r7, r3
100076c4:	433d      	orrs	r5, r7
100076c6:	1e6f      	subs	r7, r5, #1
100076c8:	41bd      	sbcs	r5, r7
100076ca:	2700      	movs	r7, #0
100076cc:	4325      	orrs	r5, r4
100076ce:	e765      	b.n	1000759c <__aeabi_dsub+0x5b4>
100076d0:	2700      	movs	r7, #0
100076d2:	e7cd      	b.n	10007670 <__aeabi_dsub+0x688>
100076d4:	1c0d      	adds	r5, r1, #0
100076d6:	e5c8      	b.n	1000726a <__aeabi_dsub+0x282>
100076d8:	2700      	movs	r7, #0
100076da:	e7f3      	b.n	100076c4 <__aeabi_dsub+0x6dc>

100076dc <__aeabi_d2iz>:
100076dc:	030b      	lsls	r3, r1, #12
100076de:	b530      	push	{r4, r5, lr}
100076e0:	4c13      	ldr	r4, [pc, #76]	; (10007730 <__aeabi_d2iz+0x54>)
100076e2:	0b1a      	lsrs	r2, r3, #12
100076e4:	004b      	lsls	r3, r1, #1
100076e6:	1c05      	adds	r5, r0, #0
100076e8:	0d5b      	lsrs	r3, r3, #21
100076ea:	0fc9      	lsrs	r1, r1, #31
100076ec:	2000      	movs	r0, #0
100076ee:	42a3      	cmp	r3, r4
100076f0:	dd10      	ble.n	10007714 <__aeabi_d2iz+0x38>
100076f2:	4810      	ldr	r0, [pc, #64]	; (10007734 <__aeabi_d2iz+0x58>)
100076f4:	4283      	cmp	r3, r0
100076f6:	dc0e      	bgt.n	10007716 <__aeabi_d2iz+0x3a>
100076f8:	2080      	movs	r0, #128	; 0x80
100076fa:	4c0f      	ldr	r4, [pc, #60]	; (10007738 <__aeabi_d2iz+0x5c>)
100076fc:	0340      	lsls	r0, r0, #13
100076fe:	4302      	orrs	r2, r0
10007700:	1ae4      	subs	r4, r4, r3
10007702:	2c1f      	cmp	r4, #31
10007704:	dd0a      	ble.n	1000771c <__aeabi_d2iz+0x40>
10007706:	480d      	ldr	r0, [pc, #52]	; (1000773c <__aeabi_d2iz+0x60>)
10007708:	1ac3      	subs	r3, r0, r3
1000770a:	40da      	lsrs	r2, r3
1000770c:	1c13      	adds	r3, r2, #0
1000770e:	4248      	negs	r0, r1
10007710:	4043      	eors	r3, r0
10007712:	1858      	adds	r0, r3, r1
10007714:	bd30      	pop	{r4, r5, pc}
10007716:	4b0a      	ldr	r3, [pc, #40]	; (10007740 <__aeabi_d2iz+0x64>)
10007718:	18c8      	adds	r0, r1, r3
1000771a:	e7fb      	b.n	10007714 <__aeabi_d2iz+0x38>
1000771c:	1c28      	adds	r0, r5, #0
1000771e:	40e0      	lsrs	r0, r4
10007720:	4c08      	ldr	r4, [pc, #32]	; (10007744 <__aeabi_d2iz+0x68>)
10007722:	46a4      	mov	ip, r4
10007724:	4463      	add	r3, ip
10007726:	409a      	lsls	r2, r3
10007728:	1c13      	adds	r3, r2, #0
1000772a:	4303      	orrs	r3, r0
1000772c:	e7ef      	b.n	1000770e <__aeabi_d2iz+0x32>
1000772e:	46c0      	nop			; (mov r8, r8)
10007730:	000003fe 	.word	0x000003fe
10007734:	0000041d 	.word	0x0000041d
10007738:	00000433 	.word	0x00000433
1000773c:	00000413 	.word	0x00000413
10007740:	7fffffff 	.word	0x7fffffff
10007744:	fffffbed 	.word	0xfffffbed

10007748 <__aeabi_i2d>:
10007748:	b538      	push	{r3, r4, r5, lr}
1000774a:	1e04      	subs	r4, r0, #0
1000774c:	d016      	beq.n	1000777c <__aeabi_i2d+0x34>
1000774e:	0fc5      	lsrs	r5, r0, #31
10007750:	d000      	beq.n	10007754 <__aeabi_i2d+0xc>
10007752:	4244      	negs	r4, r0
10007754:	1c20      	adds	r0, r4, #0
10007756:	f7fc fc41 	bl	10003fdc <__clzsi2>
1000775a:	4b17      	ldr	r3, [pc, #92]	; (100077b8 <__aeabi_i2d+0x70>)
1000775c:	1a1b      	subs	r3, r3, r0
1000775e:	280a      	cmp	r0, #10
10007760:	dc21      	bgt.n	100077a6 <__aeabi_i2d+0x5e>
10007762:	1c02      	adds	r2, r0, #0
10007764:	1c21      	adds	r1, r4, #0
10007766:	3215      	adds	r2, #21
10007768:	4091      	lsls	r1, r2
1000776a:	1c0a      	adds	r2, r1, #0
1000776c:	210b      	movs	r1, #11
1000776e:	1a08      	subs	r0, r1, r0
10007770:	40c4      	lsrs	r4, r0
10007772:	055b      	lsls	r3, r3, #21
10007774:	0324      	lsls	r4, r4, #12
10007776:	0b24      	lsrs	r4, r4, #12
10007778:	0d5b      	lsrs	r3, r3, #21
1000777a:	e003      	b.n	10007784 <__aeabi_i2d+0x3c>
1000777c:	2500      	movs	r5, #0
1000777e:	2300      	movs	r3, #0
10007780:	2400      	movs	r4, #0
10007782:	2200      	movs	r2, #0
10007784:	2100      	movs	r1, #0
10007786:	1c10      	adds	r0, r2, #0
10007788:	0324      	lsls	r4, r4, #12
1000778a:	0d0a      	lsrs	r2, r1, #20
1000778c:	0512      	lsls	r2, r2, #20
1000778e:	0b24      	lsrs	r4, r4, #12
10007790:	4314      	orrs	r4, r2
10007792:	4a0a      	ldr	r2, [pc, #40]	; (100077bc <__aeabi_i2d+0x74>)
10007794:	051b      	lsls	r3, r3, #20
10007796:	4014      	ands	r4, r2
10007798:	431c      	orrs	r4, r3
1000779a:	0064      	lsls	r4, r4, #1
1000779c:	07ed      	lsls	r5, r5, #31
1000779e:	0864      	lsrs	r4, r4, #1
100077a0:	432c      	orrs	r4, r5
100077a2:	1c21      	adds	r1, r4, #0
100077a4:	bd38      	pop	{r3, r4, r5, pc}
100077a6:	380b      	subs	r0, #11
100077a8:	4084      	lsls	r4, r0
100077aa:	055b      	lsls	r3, r3, #21
100077ac:	0324      	lsls	r4, r4, #12
100077ae:	0b24      	lsrs	r4, r4, #12
100077b0:	0d5b      	lsrs	r3, r3, #21
100077b2:	2200      	movs	r2, #0
100077b4:	e7e6      	b.n	10007784 <__aeabi_i2d+0x3c>
100077b6:	46c0      	nop			; (mov r8, r8)
100077b8:	0000041e 	.word	0x0000041e
100077bc:	800fffff 	.word	0x800fffff

100077c0 <__aeabi_ui2d>:
100077c0:	b510      	push	{r4, lr}
100077c2:	1e04      	subs	r4, r0, #0
100077c4:	d010      	beq.n	100077e8 <__aeabi_ui2d+0x28>
100077c6:	f7fc fc09 	bl	10003fdc <__clzsi2>
100077ca:	4a14      	ldr	r2, [pc, #80]	; (1000781c <__aeabi_ui2d+0x5c>)
100077cc:	1a12      	subs	r2, r2, r0
100077ce:	280a      	cmp	r0, #10
100077d0:	dc1a      	bgt.n	10007808 <__aeabi_ui2d+0x48>
100077d2:	230b      	movs	r3, #11
100077d4:	1c21      	adds	r1, r4, #0
100077d6:	1a1b      	subs	r3, r3, r0
100077d8:	40d9      	lsrs	r1, r3
100077da:	3015      	adds	r0, #21
100077dc:	030b      	lsls	r3, r1, #12
100077de:	0552      	lsls	r2, r2, #21
100077e0:	4084      	lsls	r4, r0
100077e2:	0b1b      	lsrs	r3, r3, #12
100077e4:	0d52      	lsrs	r2, r2, #21
100077e6:	e001      	b.n	100077ec <__aeabi_ui2d+0x2c>
100077e8:	2200      	movs	r2, #0
100077ea:	2300      	movs	r3, #0
100077ec:	2100      	movs	r1, #0
100077ee:	031b      	lsls	r3, r3, #12
100077f0:	1c20      	adds	r0, r4, #0
100077f2:	0b1c      	lsrs	r4, r3, #12
100077f4:	0d0b      	lsrs	r3, r1, #20
100077f6:	051b      	lsls	r3, r3, #20
100077f8:	4323      	orrs	r3, r4
100077fa:	4c09      	ldr	r4, [pc, #36]	; (10007820 <__aeabi_ui2d+0x60>)
100077fc:	0512      	lsls	r2, r2, #20
100077fe:	4023      	ands	r3, r4
10007800:	4313      	orrs	r3, r2
10007802:	005b      	lsls	r3, r3, #1
10007804:	0859      	lsrs	r1, r3, #1
10007806:	bd10      	pop	{r4, pc}
10007808:	1c03      	adds	r3, r0, #0
1000780a:	3b0b      	subs	r3, #11
1000780c:	409c      	lsls	r4, r3
1000780e:	0552      	lsls	r2, r2, #21
10007810:	0323      	lsls	r3, r4, #12
10007812:	0b1b      	lsrs	r3, r3, #12
10007814:	0d52      	lsrs	r2, r2, #21
10007816:	2400      	movs	r4, #0
10007818:	e7e8      	b.n	100077ec <__aeabi_ui2d+0x2c>
1000781a:	46c0      	nop			; (mov r8, r8)
1000781c:	0000041e 	.word	0x0000041e
10007820:	800fffff 	.word	0x800fffff
10007824:	10001af2 	.word	0x10001af2
10007828:	10001af2 	.word	0x10001af2
1000782c:	10001afc 	.word	0x10001afc
10007830:	10001afc 	.word	0x10001afc
10007834:	10001b2a 	.word	0x10001b2a
10007838:	10001b2a 	.word	0x10001b2a
1000783c:	10001b2a 	.word	0x10001b2a
10007840:	10001b2a 	.word	0x10001b2a
10007844:	10001b06 	.word	0x10001b06
10007848:	10001b12 	.word	0x10001b12
1000784c:	10001b1e 	.word	0x10001b1e
10007850:	10001b1e 	.word	0x10001b1e

10007854 <PWM_CCU4_LED_STATUS_timer_handle>:
	...

1000785c <PWM_CCU4_LED_STATUS_event0_config>:
1000785c:	00010000                                ....

10007860 <PWM_CCU4_LED_STATUS_event1_config>:
10007860:	00010000                                ....

10007864 <PWM_CCU4_LED_STATUS_event2_config>:
10007864:	00010000                                ....

10007868 <PWM_CCU4_LED_STATUS_config_handle>:
10007868:	f9ff0001 0000e600 00000000 00000000     ................
10007878:	00000000 1000785c 10007860 10007864     ....\x..`x..dx..
	...
10007894:	01000000 00000000 04000000 10007854     ............Tx..
	...
100078b4:	20000548                                H.. 

100078b8 <global_config>:
	...

100078cc <IO_USB_SI>:
100078cc:	40040200 00000080 00010000 00000000     ...@............

100078dc <IO_USB_OE>:
100078dc:	40040000 00000080 00010000 00000009     ...@............

100078ec <IO_LED_R_STATUS>:
100078ec:	40040000 000000a0 00010000 00000006     ...@............

100078fc <IO_SW_USB>:
100078fc:	40040000 00000010 00000000 00000008     ...@............

1000790c <IO_SW_UP>:
1000790c:	40040200 00000010 00000000 00000007     ...@............

1000791c <IO_SW_DOWN>:
1000791c:	40040200 00000010 00000000 00000009     ...@............

1000792c <IO_USBPWR_2>:
1000792c:	40040000 00000080 00010000 00000005     ...@............

1000793c <IO_USBPWR_1>:
1000793c:	40040200 00000080 00010000 0000000a     ...@............

1000794c <IO_RELAY>:
1000794c:	40040000 00000080 00010000 00000007     ...@............

1000795c <IO_LED_USB2>:
1000795c:	40040000 00000080 00010000 00000000     ...@............

1000796c <IO_LED_USB1>:
1000796c:	40040200 00000080 00010000 0000000b     ...@............
1000797c:	00000100 00010000 00000000              ............

10007988 <global_iclass_config>:
10007988:	0000001f                                ....

1000798c <global_result_intr_handle>:
1000798c:	0000000f 00000003                       ........

10007994 <backgnd_config>:
10007994:	00000005 00000000 00000000 100030c6     .............0..
100079a4:	100030d4 100030e0 1000310e 10003160     .0...0...1..`1..
100079b4:	100031b4 4e490043 6e690046 414e0066     .1..C.INF.inf.NA
100079c4:	616e004e 0030006e 69666e49 7974696e     N.nan.0.Infinity
100079d4:	4e614e00 534f5000 2e005849 00000000     .NaN.POSIX......
100079e4:	00000000                                ....

100079e8 <__mprec_tens>:
100079e8:	00000000 3ff00000 00000000 40240000     .......?......$@
100079f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
10007a08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
10007a18:	00000000 412e8480 00000000 416312d0     .......A......cA
10007a28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10007a38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10007a48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10007a58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10007a68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10007a78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10007a88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10007a98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10007aa8:	79d99db4 44ea7843                       ...yCx.D

10007ab0 <__mprec_bigtens>:
10007ab0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10007ac0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
10007ad0:	7f73bf3c 75154fdd                       <.s..O.u

10007ad8 <p05.5277>:
10007ad8:	00000005 00000019 0000007d 1000640c     ........}....d..
10007ae8:	100062fa 100063e0 100062e6 100063e0     .b...c...b...c..
10007af8:	100063ea 100063e0 100062e6 100062fa     .c...c...b...b..
10007b08:	100062fa 100063ea 100062e6 100062f0     .b...c...b...b..
10007b18:	100062f0 100062f0 10006652 10006ca0     .b...b..Rf...l..
10007b28:	10006c7e 10006c7e 10006c72 10006b66     ~l..~l..rl..fk..
10007b38:	10006b66 10006c66 10006c72 10006b66     fk..fl..rl..fk..
10007b48:	10006c66 10006b66 10006c72 10006b6a     fl..fk..rl..jk..
10007b58:	10006b6a 10006b6a 10006e80              jk..jk...n..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10002215 	.word	0x10002215
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10003c8d 	.word	0x10003c8d
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10001099 	.word	0x10001099
