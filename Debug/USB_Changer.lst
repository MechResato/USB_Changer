
USB_Changer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f24  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000110  2000000c  10005f24  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  2000011c  00000000  0000011c  2**0
                  ALLOC
  3 .data         00000098  20000520  10006034  00008520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000318  200005b8  0000049c  000085b8  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003ee0  0000011c  2**2
                  ALLOC
  6 .debug_aranges 00000ae0  00000000  00000000  000085b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012fca  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bcc  00000000  00000000  0001c062  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000058de  00000000  00000000  0001ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000224c  00000000  00000000  0002450c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007233  00000000  00000000  00026758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000380c  00000000  00000000  0002d98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f0  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000005b4  00000000  00000000  00031a88  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	20 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10      .. ............
10001010:	00 04 01 00 00 00 00 80                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10005f24 	.word	0x10005f24
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	2000011c 	.word	0x2000011c
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10006034 	.word	0x10006034
	ldr	r2, =__data_start
10001074:	20000520 	.word	0x20000520
	ldr	r3, =__data_end
10001078:	200005b8 	.word	0x200005b8
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	100060cc 	.word	0x100060cc
	ldr	r2, =__ram_code_start
10001080:	200005b8 	.word	0x200005b8
	ldr	r3, =__ram_code_end
10001084:	200005b8 	.word	0x200005b8
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	200005b8 	.word	0x200005b8
	ldr	r2, =__bss_end
1000108c:	200008d0 	.word	0x200008d0
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10005d09 	.word	0x10005d09
    blx  r0
#endif

    ldr  r0, =main
10001094:	1000555d 	.word	0x1000555d

10001098 <CCU40_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <CCU40_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f003 fa8c 	bl	100045bc <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f003 fad0 	bl	10004648 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreClockUpdate>:
  
  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b0:	4b12      	ldr	r3, [pc, #72]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010b2:	681a      	ldr	r2, [r3, #0]
100010b4:	23ff      	movs	r3, #255	; 0xff
100010b6:	021b      	lsls	r3, r3, #8
100010b8:	4013      	ands	r3, r2
100010ba:	0a1a      	lsrs	r2, r3, #8
100010bc:	4b10      	ldr	r3, [pc, #64]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010be:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010c0:	4b0e      	ldr	r3, [pc, #56]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010c2:	681b      	ldr	r3, [r3, #0]
100010c4:	22ff      	movs	r2, #255	; 0xff
100010c6:	401a      	ands	r2, r3
100010c8:	4b0e      	ldr	r3, [pc, #56]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010ca:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
100010cc:	4b0c      	ldr	r3, [pc, #48]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	2b00      	cmp	r3, #0
100010d2:	d00e      	beq.n	100010f2 <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010d4:	4b0a      	ldr	r3, [pc, #40]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010d6:	681b      	ldr	r3, [r3, #0]
100010d8:	021a      	lsls	r2, r3, #8
100010da:	4b0a      	ldr	r3, [pc, #40]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	18d3      	adds	r3, r2, r3
100010e0:	4809      	ldr	r0, [pc, #36]	; (10001108 <SystemCoreClockUpdate+0x5c>)
100010e2:	1c19      	adds	r1, r3, #0
100010e4:	f004 fd7e 	bl	10005be4 <__aeabi_uidiv>
100010e8:	1c03      	adds	r3, r0, #0
100010ea:	005a      	lsls	r2, r3, #1
100010ec:	4b07      	ldr	r3, [pc, #28]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010ee:	601a      	str	r2, [r3, #0]
100010f0:	e002      	b.n	100010f8 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010f2:	4b06      	ldr	r3, [pc, #24]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010f4:	4a06      	ldr	r2, [pc, #24]	; (10001110 <SystemCoreClockUpdate+0x64>)
100010f6:	601a      	str	r2, [r3, #0]
  }
}
100010f8:	46bd      	mov	sp, r7
100010fa:	bd80      	pop	{r7, pc}
100010fc:	40010300 	.word	0x40010300
10001100:	200005b8 	.word	0x200005b8
10001104:	200005bc 	.word	0x200005bc
10001108:	f4240000 	.word	0xf4240000
1000110c:	20003ffc 	.word	0x20003ffc
10001110:	01e84800 	.word	0x01e84800

10001114 <XMC_FLASH_IsBusy>:
 * \par<b>Related APIs:</b><BR>
 * XMC_FLASH_GetStatus()\n\n\n
 *
 */
__STATIC_INLINE bool XMC_FLASH_IsBusy(void)
{
10001114:	b580      	push	{r7, lr}
10001116:	af00      	add	r7, sp, #0
  return (bool)(XMC_FLASH_GetStatus() & XMC_FLASH_STATUS_BUSY);
10001118:	f000 f81a 	bl	10001150 <XMC_FLASH_GetStatus>
1000111c:	1c02      	adds	r2, r0, #0
1000111e:	2301      	movs	r3, #1
10001120:	4013      	ands	r3, r2
10001122:	1e5a      	subs	r2, r3, #1
10001124:	4193      	sbcs	r3, r2
10001126:	b2db      	uxtb	r3, r3
}
10001128:	1c18      	adds	r0, r3, #0
1000112a:	46bd      	mov	sp, r7
1000112c:	bd80      	pop	{r7, pc}
1000112e:	46c0      	nop			; (mov r8, r8)

10001130 <XMC_FLASH_ClearStatus>:

/*
 * This API shall clear the ECC and VERIFICATION error status.
 */
void XMC_FLASH_ClearStatus(void)
{
10001130:	b580      	push	{r7, lr}
10001132:	af00      	add	r7, sp, #0
  NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk | (uint16_t)NVM_NVMPROG_RSTECC_Msk);
10001134:	4905      	ldr	r1, [pc, #20]	; (1000114c <XMC_FLASH_ClearStatus+0x1c>)
10001136:	4b05      	ldr	r3, [pc, #20]	; (1000114c <XMC_FLASH_ClearStatus+0x1c>)
10001138:	889b      	ldrh	r3, [r3, #4]
1000113a:	b29b      	uxth	r3, r3
1000113c:	22c0      	movs	r2, #192	; 0xc0
1000113e:	0192      	lsls	r2, r2, #6
10001140:	4313      	orrs	r3, r2
10001142:	b29b      	uxth	r3, r3
10001144:	808b      	strh	r3, [r1, #4]
}
10001146:	46bd      	mov	sp, r7
10001148:	bd80      	pop	{r7, pc}
1000114a:	46c0      	nop			; (mov r8, r8)
1000114c:	40050000 	.word	0x40050000

10001150 <XMC_FLASH_GetStatus>:

/*
 * This API shall return the status of NVM.
 */
uint32_t XMC_FLASH_GetStatus(void)
{
10001150:	b580      	push	{r7, lr}
10001152:	af00      	add	r7, sp, #0
  return NVM->NVMSTATUS;
10001154:	4b02      	ldr	r3, [pc, #8]	; (10001160 <XMC_FLASH_GetStatus+0x10>)
10001156:	881b      	ldrh	r3, [r3, #0]
10001158:	b29b      	uxth	r3, r3
}
1000115a:	1c18      	adds	r0, r3, #0
1000115c:	46bd      	mov	sp, r7
1000115e:	bd80      	pop	{r7, pc}
10001160:	40050000 	.word	0x40050000

10001164 <XMC_FLASH_ProgramVerifyPage>:
{
  return XMC1000_NvmErasePage(address);
}

int32_t XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data)
{
10001164:	b580      	push	{r7, lr}
10001166:	b082      	sub	sp, #8
10001168:	af00      	add	r7, sp, #0
1000116a:	6078      	str	r0, [r7, #4]
1000116c:	6039      	str	r1, [r7, #0]
  return XMC1000_NvmProgVerify(data, address);
1000116e:	2382      	movs	r3, #130	; 0x82
10001170:	005b      	lsls	r3, r3, #1
10001172:	681b      	ldr	r3, [r3, #0]
10001174:	6839      	ldr	r1, [r7, #0]
10001176:	687a      	ldr	r2, [r7, #4]
10001178:	1c08      	adds	r0, r1, #0
1000117a:	1c11      	adds	r1, r2, #0
1000117c:	4798      	blx	r3
1000117e:	1c03      	adds	r3, r0, #0
}
10001180:	1c18      	adds	r0, r3, #0
10001182:	46bd      	mov	sp, r7
10001184:	b002      	add	sp, #8
10001186:	bd80      	pop	{r7, pc}

10001188 <XMC_FLASH_WriteBlocks>:

/* Write blocks of data into flash*/
void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verify)
{
10001188:	b580      	push	{r7, lr}
1000118a:	b086      	sub	sp, #24
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	60b9      	str	r1, [r7, #8]
10001192:	607a      	str	r2, [r7, #4]
10001194:	1c1a      	adds	r2, r3, #0
10001196:	1cfb      	adds	r3, r7, #3
10001198:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_FLASH_WriteBlocks: Starting address not aligned to Block",
             ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  /* Configure the continuous Write option command and reset the NVM error / verification status*/
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
1000119a:	4a29      	ldr	r2, [pc, #164]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
1000119c:	4b28      	ldr	r3, [pc, #160]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
1000119e:	889b      	ldrh	r3, [r3, #4]
100011a0:	b29b      	uxth	r3, r3
100011a2:	21ff      	movs	r1, #255	; 0xff
100011a4:	438b      	bics	r3, r1
100011a6:	b29b      	uxth	r3, r3
100011a8:	8093      	strh	r3, [r2, #4]
  NVM->NVMPROG |= (uint16_t)(NVM_NVMPROG_RSTVERR_Msk | NVM_NVMPROG_RSTECC_Msk);
100011aa:	4925      	ldr	r1, [pc, #148]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
100011ac:	4b24      	ldr	r3, [pc, #144]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
100011ae:	889b      	ldrh	r3, [r3, #4]
100011b0:	b29b      	uxth	r3, r3
100011b2:	22c0      	movs	r2, #192	; 0xc0
100011b4:	0192      	lsls	r2, r2, #6
100011b6:	4313      	orrs	r3, r2
100011b8:	b29b      	uxth	r3, r3
100011ba:	808b      	strh	r3, [r1, #4]

  if (verify == true)
100011bc:	1cfb      	adds	r3, r7, #3
100011be:	781b      	ldrb	r3, [r3, #0]
100011c0:	2b00      	cmp	r3, #0
100011c2:	d008      	beq.n	100011d6 <XMC_FLASH_WriteBlocks+0x4e>
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE_VERIFY;
100011c4:	4a1e      	ldr	r2, [pc, #120]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
100011c6:	4b1e      	ldr	r3, [pc, #120]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
100011c8:	889b      	ldrh	r3, [r3, #4]
100011ca:	b29b      	uxth	r3, r3
100011cc:	2161      	movs	r1, #97	; 0x61
100011ce:	430b      	orrs	r3, r1
100011d0:	b29b      	uxth	r3, r3
100011d2:	8093      	strh	r3, [r2, #4]
100011d4:	e007      	b.n	100011e6 <XMC_FLASH_WriteBlocks+0x5e>
  }
  else
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
100011d6:	4a1a      	ldr	r2, [pc, #104]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
100011d8:	4b19      	ldr	r3, [pc, #100]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
100011da:	889b      	ldrh	r3, [r3, #4]
100011dc:	b29b      	uxth	r3, r3
100011de:	21a1      	movs	r1, #161	; 0xa1
100011e0:	430b      	orrs	r3, r1
100011e2:	b29b      	uxth	r3, r3
100011e4:	8093      	strh	r3, [r2, #4]
  }

  for (block = 0U; block < num_blocks; ++block)
100011e6:	2300      	movs	r3, #0
100011e8:	613b      	str	r3, [r7, #16]
100011ea:	e01a      	b.n	10001222 <XMC_FLASH_WriteBlocks+0x9a>
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
100011ec:	2300      	movs	r3, #0
100011ee:	617b      	str	r3, [r7, #20]
100011f0:	e00c      	b.n	1000120c <XMC_FLASH_WriteBlocks+0x84>
    {
      *address = *data;
100011f2:	68bb      	ldr	r3, [r7, #8]
100011f4:	681a      	ldr	r2, [r3, #0]
100011f6:	68fb      	ldr	r3, [r7, #12]
100011f8:	601a      	str	r2, [r3, #0]
      data++;
100011fa:	68bb      	ldr	r3, [r7, #8]
100011fc:	3304      	adds	r3, #4
100011fe:	60bb      	str	r3, [r7, #8]
      address++;
10001200:	68fb      	ldr	r3, [r7, #12]
10001202:	3304      	adds	r3, #4
10001204:	60fb      	str	r3, [r7, #12]
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
  }

  for (block = 0U; block < num_blocks; ++block)
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
10001206:	697b      	ldr	r3, [r7, #20]
10001208:	3301      	adds	r3, #1
1000120a:	617b      	str	r3, [r7, #20]
1000120c:	697b      	ldr	r3, [r7, #20]
1000120e:	2b03      	cmp	r3, #3
10001210:	d9ef      	bls.n	100011f2 <XMC_FLASH_WriteBlocks+0x6a>
      *address = *data;
      data++;
      address++;
    }

    while (XMC_FLASH_IsBusy() == true)
10001212:	46c0      	nop			; (mov r8, r8)
10001214:	f7ff ff7e 	bl	10001114 <XMC_FLASH_IsBusy>
10001218:	1e03      	subs	r3, r0, #0
1000121a:	d1fb      	bne.n	10001214 <XMC_FLASH_WriteBlocks+0x8c>
  else
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
  }

  for (block = 0U; block < num_blocks; ++block)
1000121c:	693b      	ldr	r3, [r7, #16]
1000121e:	3301      	adds	r3, #1
10001220:	613b      	str	r3, [r7, #16]
10001222:	693a      	ldr	r2, [r7, #16]
10001224:	687b      	ldr	r3, [r7, #4]
10001226:	429a      	cmp	r2, r3
10001228:	d3e0      	bcc.n	100011ec <XMC_FLASH_WriteBlocks+0x64>
    {
    }
  }

  /* Stop continuous write operation */
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
1000122a:	4a05      	ldr	r2, [pc, #20]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
1000122c:	4b04      	ldr	r3, [pc, #16]	; (10001240 <XMC_FLASH_WriteBlocks+0xb8>)
1000122e:	889b      	ldrh	r3, [r3, #4]
10001230:	b29b      	uxth	r3, r3
10001232:	21ff      	movs	r1, #255	; 0xff
10001234:	438b      	bics	r3, r1
10001236:	b29b      	uxth	r3, r3
10001238:	8093      	strh	r3, [r2, #4]
}
1000123a:	46bd      	mov	sp, r7
1000123c:	b006      	add	sp, #24
1000123e:	bd80      	pop	{r7, pc}
10001240:	40050000 	.word	0x40050000

10001244 <XMC_FLASH_ErasePages>:

/* Erase flash pages */
int32_t XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages)
{
10001244:	b580      	push	{r7, lr}
10001246:	b084      	sub	sp, #16
10001248:	af00      	add	r7, sp, #0
1000124a:	6078      	str	r0, [r7, #4]
1000124c:	6039      	str	r1, [r7, #0]
  uint32_t page;

  XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
             ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)

  int32_t status = NVM_E_FAIL;
1000124e:	4b12      	ldr	r3, [pc, #72]	; (10001298 <XMC_FLASH_ErasePages+0x54>)
10001250:	60bb      	str	r3, [r7, #8]
  for (page = 0U; page < num_pages; ++page)
10001252:	2300      	movs	r3, #0
10001254:	60fb      	str	r3, [r7, #12]
10001256:	e015      	b.n	10001284 <XMC_FLASH_ErasePages+0x40>
  {
    status = XMC1000_NvmErasePage(address);
10001258:	2380      	movs	r3, #128	; 0x80
1000125a:	005b      	lsls	r3, r3, #1
1000125c:	681b      	ldr	r3, [r3, #0]
1000125e:	687a      	ldr	r2, [r7, #4]
10001260:	1c10      	adds	r0, r2, #0
10001262:	4798      	blx	r3
10001264:	1c03      	adds	r3, r0, #0
10001266:	60bb      	str	r3, [r7, #8]
    if (status != NVM_PASS)
10001268:	68ba      	ldr	r2, [r7, #8]
1000126a:	2380      	movs	r3, #128	; 0x80
1000126c:	025b      	lsls	r3, r3, #9
1000126e:	429a      	cmp	r2, r3
10001270:	d001      	beq.n	10001276 <XMC_FLASH_ErasePages+0x32>
    {
      return status;
10001272:	68bb      	ldr	r3, [r7, #8]
10001274:	e00b      	b.n	1000128e <XMC_FLASH_ErasePages+0x4a>
    }

    /* Increment the page address for the next erase */
    address += XMC_FLASH_WORDS_PER_PAGE;
10001276:	687b      	ldr	r3, [r7, #4]
10001278:	3301      	adds	r3, #1
1000127a:	33ff      	adds	r3, #255	; 0xff
1000127c:	607b      	str	r3, [r7, #4]

  XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
             ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)

  int32_t status = NVM_E_FAIL;
  for (page = 0U; page < num_pages; ++page)
1000127e:	68fb      	ldr	r3, [r7, #12]
10001280:	3301      	adds	r3, #1
10001282:	60fb      	str	r3, [r7, #12]
10001284:	68fa      	ldr	r2, [r7, #12]
10001286:	683b      	ldr	r3, [r7, #0]
10001288:	429a      	cmp	r2, r3
1000128a:	d3e5      	bcc.n	10001258 <XMC_FLASH_ErasePages+0x14>

    /* Increment the page address for the next erase */
    address += XMC_FLASH_WORDS_PER_PAGE;
  }

  return status;
1000128c:	68bb      	ldr	r3, [r7, #8]

}
1000128e:	1c18      	adds	r0, r3, #0
10001290:	46bd      	mov	sp, r7
10001292:	b004      	add	sp, #16
10001294:	bd80      	pop	{r7, pc}
10001296:	46c0      	nop			; (mov r8, r8)
10001298:	80010001 	.word	0x80010001

1000129c <XMC_FLASH_ReadBlocks>:
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
}

/* Read data blocks from flash */
void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks)
{
1000129c:	b580      	push	{r7, lr}
1000129e:	b086      	sub	sp, #24
100012a0:	af00      	add	r7, sp, #0
100012a2:	60f8      	str	r0, [r7, #12]
100012a4:	60b9      	str	r1, [r7, #8]
100012a6:	607a      	str	r2, [r7, #4]
  uint32_t block;

  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
             ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
100012a8:	2300      	movs	r3, #0
100012aa:	613b      	str	r3, [r7, #16]
100012ac:	e015      	b.n	100012da <XMC_FLASH_ReadBlocks+0x3e>
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
100012ae:	2300      	movs	r3, #0
100012b0:	617b      	str	r3, [r7, #20]
100012b2:	e00c      	b.n	100012ce <XMC_FLASH_ReadBlocks+0x32>
    {
      *data = *address;
100012b4:	68fb      	ldr	r3, [r7, #12]
100012b6:	681a      	ldr	r2, [r3, #0]
100012b8:	68bb      	ldr	r3, [r7, #8]
100012ba:	601a      	str	r2, [r3, #0]
      data++;
100012bc:	68bb      	ldr	r3, [r7, #8]
100012be:	3304      	adds	r3, #4
100012c0:	60bb      	str	r3, [r7, #8]
      address++;
100012c2:	68fb      	ldr	r3, [r7, #12]
100012c4:	3304      	adds	r3, #4
100012c6:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
             ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
100012c8:	697b      	ldr	r3, [r7, #20]
100012ca:	3301      	adds	r3, #1
100012cc:	617b      	str	r3, [r7, #20]
100012ce:	697b      	ldr	r3, [r7, #20]
100012d0:	2b03      	cmp	r3, #3
100012d2:	d9ef      	bls.n	100012b4 <XMC_FLASH_ReadBlocks+0x18>
  uint32_t block;

  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
             ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
100012d4:	693b      	ldr	r3, [r7, #16]
100012d6:	3301      	adds	r3, #1
100012d8:	613b      	str	r3, [r7, #16]
100012da:	693a      	ldr	r2, [r7, #16]
100012dc:	687b      	ldr	r3, [r7, #4]
100012de:	429a      	cmp	r2, r3
100012e0:	d3e5      	bcc.n	100012ae <XMC_FLASH_ReadBlocks+0x12>
      *data = *address;
      data++;
      address++;
    }
  }
}
100012e2:	46bd      	mov	sp, r7
100012e4:	b006      	add	sp, #24
100012e6:	bd80      	pop	{r7, pc}

100012e8 <XMC_FLASH_ProgramPage>:
  return XMC_FLASH_ErasePages(address, XMC_FLASH_PAGES_PER_SECTOR);
}

/* Program single page */
int32_t XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
100012e8:	b580      	push	{r7, lr}
100012ea:	b082      	sub	sp, #8
100012ec:	af00      	add	r7, sp, #0
100012ee:	6078      	str	r0, [r7, #4]
100012f0:	6039      	str	r1, [r7, #0]
  return XMC_FLASH_ProgramVerifyPage(address, data);
100012f2:	687a      	ldr	r2, [r7, #4]
100012f4:	683b      	ldr	r3, [r7, #0]
100012f6:	1c10      	adds	r0, r2, #0
100012f8:	1c19      	adds	r1, r3, #0
100012fa:	f7ff ff33 	bl	10001164 <XMC_FLASH_ProgramVerifyPage>
100012fe:	1c03      	adds	r3, r0, #0
}
10001300:	1c18      	adds	r0, r3, #0
10001302:	46bd      	mov	sp, r7
10001304:	b002      	add	sp, #8
10001306:	bd80      	pop	{r7, pc}

10001308 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001308:	b590      	push	{r4, r7, lr}
1000130a:	b085      	sub	sp, #20
1000130c:	af00      	add	r7, sp, #0
1000130e:	60f8      	str	r0, [r7, #12]
10001310:	607a      	str	r2, [r7, #4]
10001312:	230b      	movs	r3, #11
10001314:	18fb      	adds	r3, r7, r3
10001316:	1c0a      	adds	r2, r1, #0
10001318:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000131a:	230b      	movs	r3, #11
1000131c:	18fb      	adds	r3, r7, r3
1000131e:	781b      	ldrb	r3, [r3, #0]
10001320:	089b      	lsrs	r3, r3, #2
10001322:	b2db      	uxtb	r3, r3
10001324:	1c18      	adds	r0, r3, #0
10001326:	230b      	movs	r3, #11
10001328:	18fb      	adds	r3, r7, r3
1000132a:	781b      	ldrb	r3, [r3, #0]
1000132c:	089b      	lsrs	r3, r3, #2
1000132e:	b2db      	uxtb	r3, r3
10001330:	1c1a      	adds	r2, r3, #0
10001332:	68fb      	ldr	r3, [r7, #12]
10001334:	3204      	adds	r2, #4
10001336:	0092      	lsls	r2, r2, #2
10001338:	58d3      	ldr	r3, [r2, r3]
1000133a:	220b      	movs	r2, #11
1000133c:	18ba      	adds	r2, r7, r2
1000133e:	7812      	ldrb	r2, [r2, #0]
10001340:	2103      	movs	r1, #3
10001342:	400a      	ands	r2, r1
10001344:	00d2      	lsls	r2, r2, #3
10001346:	1c11      	adds	r1, r2, #0
10001348:	22f8      	movs	r2, #248	; 0xf8
1000134a:	408a      	lsls	r2, r1
1000134c:	43d2      	mvns	r2, r2
1000134e:	401a      	ands	r2, r3
10001350:	1c11      	adds	r1, r2, #0
10001352:	68fb      	ldr	r3, [r7, #12]
10001354:	1d02      	adds	r2, r0, #4
10001356:	0092      	lsls	r2, r2, #2
10001358:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000135a:	68fb      	ldr	r3, [r7, #12]
1000135c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000135e:	220b      	movs	r2, #11
10001360:	18ba      	adds	r2, r7, r2
10001362:	7812      	ldrb	r2, [r2, #0]
10001364:	0052      	lsls	r2, r2, #1
10001366:	1c11      	adds	r1, r2, #0
10001368:	2203      	movs	r2, #3
1000136a:	408a      	lsls	r2, r1
1000136c:	43d2      	mvns	r2, r2
1000136e:	401a      	ands	r2, r3
10001370:	68fb      	ldr	r3, [r7, #12]
10001372:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001374:	230b      	movs	r3, #11
10001376:	18fb      	adds	r3, r7, r3
10001378:	781b      	ldrb	r3, [r3, #0]
1000137a:	08db      	lsrs	r3, r3, #3
1000137c:	b2db      	uxtb	r3, r3
1000137e:	1c18      	adds	r0, r3, #0
10001380:	230b      	movs	r3, #11
10001382:	18fb      	adds	r3, r7, r3
10001384:	781b      	ldrb	r3, [r3, #0]
10001386:	08db      	lsrs	r3, r3, #3
10001388:	b2db      	uxtb	r3, r3
1000138a:	1c1a      	adds	r2, r3, #0
1000138c:	68fb      	ldr	r3, [r7, #12]
1000138e:	3210      	adds	r2, #16
10001390:	0092      	lsls	r2, r2, #2
10001392:	58d3      	ldr	r3, [r2, r3]
10001394:	220b      	movs	r2, #11
10001396:	18ba      	adds	r2, r7, r2
10001398:	7812      	ldrb	r2, [r2, #0]
1000139a:	2107      	movs	r1, #7
1000139c:	400a      	ands	r2, r1
1000139e:	0092      	lsls	r2, r2, #2
100013a0:	1c11      	adds	r1, r2, #0
100013a2:	2204      	movs	r2, #4
100013a4:	408a      	lsls	r2, r1
100013a6:	43d2      	mvns	r2, r2
100013a8:	401a      	ands	r2, r3
100013aa:	1c11      	adds	r1, r2, #0
100013ac:	68fb      	ldr	r3, [r7, #12]
100013ae:	1c02      	adds	r2, r0, #0
100013b0:	3210      	adds	r2, #16
100013b2:	0092      	lsls	r2, r2, #2
100013b4:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
100013b6:	230b      	movs	r3, #11
100013b8:	18fb      	adds	r3, r7, r3
100013ba:	781b      	ldrb	r3, [r3, #0]
100013bc:	08db      	lsrs	r3, r3, #3
100013be:	b2db      	uxtb	r3, r3
100013c0:	1c18      	adds	r0, r3, #0
100013c2:	230b      	movs	r3, #11
100013c4:	18fb      	adds	r3, r7, r3
100013c6:	781b      	ldrb	r3, [r3, #0]
100013c8:	08db      	lsrs	r3, r3, #3
100013ca:	b2db      	uxtb	r3, r3
100013cc:	1c1a      	adds	r2, r3, #0
100013ce:	68fb      	ldr	r3, [r7, #12]
100013d0:	3210      	adds	r2, #16
100013d2:	0092      	lsls	r2, r2, #2
100013d4:	58d2      	ldr	r2, [r2, r3]
100013d6:	687b      	ldr	r3, [r7, #4]
100013d8:	785b      	ldrb	r3, [r3, #1]
100013da:	1c1c      	adds	r4, r3, #0
100013dc:	230b      	movs	r3, #11
100013de:	18fb      	adds	r3, r7, r3
100013e0:	781b      	ldrb	r3, [r3, #0]
100013e2:	2107      	movs	r1, #7
100013e4:	400b      	ands	r3, r1
100013e6:	009b      	lsls	r3, r3, #2
100013e8:	409c      	lsls	r4, r3
100013ea:	1c23      	adds	r3, r4, #0
100013ec:	431a      	orrs	r2, r3
100013ee:	1c11      	adds	r1, r2, #0
100013f0:	68fb      	ldr	r3, [r7, #12]
100013f2:	1c02      	adds	r2, r0, #0
100013f4:	3210      	adds	r2, #16
100013f6:	0092      	lsls	r2, r2, #2
100013f8:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
100013fa:	68fb      	ldr	r3, [r7, #12]
100013fc:	4a20      	ldr	r2, [pc, #128]	; (10001480 <XMC_GPIO_Init+0x178>)
100013fe:	4293      	cmp	r3, r2
10001400:	d10b      	bne.n	1000141a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001402:	68fb      	ldr	r3, [r7, #12]
10001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001406:	220b      	movs	r2, #11
10001408:	18ba      	adds	r2, r7, r2
1000140a:	7812      	ldrb	r2, [r2, #0]
1000140c:	2101      	movs	r1, #1
1000140e:	4091      	lsls	r1, r2
10001410:	1c0a      	adds	r2, r1, #0
10001412:	43d2      	mvns	r2, r2
10001414:	401a      	ands	r2, r3
10001416:	68fb      	ldr	r3, [r7, #12]
10001418:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000141a:	687b      	ldr	r3, [r7, #4]
1000141c:	781b      	ldrb	r3, [r3, #0]
1000141e:	b2db      	uxtb	r3, r3
10001420:	b25b      	sxtb	r3, r3
10001422:	2b00      	cmp	r3, #0
10001424:	da07      	bge.n	10001436 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
10001426:	687b      	ldr	r3, [r7, #4]
10001428:	685a      	ldr	r2, [r3, #4]
1000142a:	230b      	movs	r3, #11
1000142c:	18fb      	adds	r3, r7, r3
1000142e:	781b      	ldrb	r3, [r3, #0]
10001430:	409a      	lsls	r2, r3
10001432:	68fb      	ldr	r3, [r7, #12]
10001434:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001436:	230b      	movs	r3, #11
10001438:	18fb      	adds	r3, r7, r3
1000143a:	781b      	ldrb	r3, [r3, #0]
1000143c:	089b      	lsrs	r3, r3, #2
1000143e:	b2db      	uxtb	r3, r3
10001440:	1c18      	adds	r0, r3, #0
10001442:	230b      	movs	r3, #11
10001444:	18fb      	adds	r3, r7, r3
10001446:	781b      	ldrb	r3, [r3, #0]
10001448:	089b      	lsrs	r3, r3, #2
1000144a:	b2db      	uxtb	r3, r3
1000144c:	1c1a      	adds	r2, r3, #0
1000144e:	68fb      	ldr	r3, [r7, #12]
10001450:	3204      	adds	r2, #4
10001452:	0092      	lsls	r2, r2, #2
10001454:	58d2      	ldr	r2, [r2, r3]
10001456:	687b      	ldr	r3, [r7, #4]
10001458:	781b      	ldrb	r3, [r3, #0]
1000145a:	1c1c      	adds	r4, r3, #0
1000145c:	230b      	movs	r3, #11
1000145e:	18fb      	adds	r3, r7, r3
10001460:	781b      	ldrb	r3, [r3, #0]
10001462:	2103      	movs	r1, #3
10001464:	400b      	ands	r3, r1
10001466:	00db      	lsls	r3, r3, #3
10001468:	409c      	lsls	r4, r3
1000146a:	1c23      	adds	r3, r4, #0
1000146c:	431a      	orrs	r2, r3
1000146e:	1c11      	adds	r1, r2, #0
10001470:	68fb      	ldr	r3, [r7, #12]
10001472:	1d02      	adds	r2, r0, #4
10001474:	0092      	lsls	r2, r2, #2
10001476:	50d1      	str	r1, [r2, r3]
}
10001478:	46bd      	mov	sp, r7
1000147a:	b005      	add	sp, #20
1000147c:	bd90      	pop	{r4, r7, pc}
1000147e:	46c0      	nop			; (mov r8, r8)
10001480:	40040200 	.word	0x40040200

10001484 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001484:	b580      	push	{r7, lr}
10001486:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001488:	4b02      	ldr	r3, [pc, #8]	; (10001494 <XMC_SCU_LockProtectedBits+0x10>)
1000148a:	22c3      	movs	r2, #195	; 0xc3
1000148c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000148e:	46bd      	mov	sp, r7
10001490:	bd80      	pop	{r7, pc}
10001492:	46c0      	nop			; (mov r8, r8)
10001494:	40010000 	.word	0x40010000

10001498 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001498:	b580      	push	{r7, lr}
1000149a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000149c:	4b05      	ldr	r3, [pc, #20]	; (100014b4 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000149e:	22c0      	movs	r2, #192	; 0xc0
100014a0:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100014a2:	46c0      	nop			; (mov r8, r8)
100014a4:	4b03      	ldr	r3, [pc, #12]	; (100014b4 <XMC_SCU_UnlockProtectedBits+0x1c>)
100014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014a8:	2204      	movs	r2, #4
100014aa:	4013      	ands	r3, r2
100014ac:	d1fa      	bne.n	100014a4 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100014ae:	46bd      	mov	sp, r7
100014b0:	bd80      	pop	{r7, pc}
100014b2:	46c0      	nop			; (mov r8, r8)
100014b4:	40010000 	.word	0x40010000

100014b8 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100014b8:	b580      	push	{r7, lr}
100014ba:	b082      	sub	sp, #8
100014bc:	af00      	add	r7, sp, #0
100014be:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100014c0:	f7ff ffea 	bl	10001498 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100014c4:	4a0c      	ldr	r2, [pc, #48]	; (100014f8 <XMC_SCU_CLOCK_Init+0x40>)
100014c6:	4b0c      	ldr	r3, [pc, #48]	; (100014f8 <XMC_SCU_CLOCK_Init+0x40>)
100014c8:	681b      	ldr	r3, [r3, #0]
100014ca:	490c      	ldr	r1, [pc, #48]	; (100014fc <XMC_SCU_CLOCK_Init+0x44>)
100014cc:	4019      	ands	r1, r3
                   config->rtc_src |
100014ce:	687b      	ldr	r3, [r7, #4]
100014d0:	689b      	ldr	r3, [r3, #8]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100014d2:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
100014d4:	687b      	ldr	r3, [r7, #4]
100014d6:	685b      	ldr	r3, [r3, #4]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
100014d8:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100014da:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
100014dc:	f7ff ffd2 	bl	10001484 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
100014e0:	687b      	ldr	r3, [r7, #4]
100014e2:	785b      	ldrb	r3, [r3, #1]
100014e4:	1c1a      	adds	r2, r3, #0
100014e6:	687b      	ldr	r3, [r7, #4]
100014e8:	781b      	ldrb	r3, [r3, #0]
100014ea:	1c10      	adds	r0, r2, #0
100014ec:	1c19      	adds	r1, r3, #0
100014ee:	f000 f825 	bl	1000153c <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
100014f2:	46bd      	mov	sp, r7
100014f4:	b002      	add	sp, #8
100014f6:	bd80      	pop	{r7, pc}
100014f8:	40010300 	.word	0x40010300
100014fc:	fff0ffff 	.word	0xfff0ffff

10001500 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10001500:	b580      	push	{r7, lr}
10001502:	b082      	sub	sp, #8
10001504:	af00      	add	r7, sp, #0
10001506:	1c02      	adds	r2, r0, #0
10001508:	1dbb      	adds	r3, r7, #6
1000150a:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
1000150c:	f7ff ffc4 	bl	10001498 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001510:	4b09      	ldr	r3, [pc, #36]	; (10001538 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001512:	4a09      	ldr	r2, [pc, #36]	; (10001538 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001514:	6911      	ldr	r1, [r2, #16]
10001516:	1dba      	adds	r2, r7, #6
10001518:	8812      	ldrh	r2, [r2, #0]
1000151a:	430a      	orrs	r2, r1
1000151c:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000151e:	46c0      	nop			; (mov r8, r8)
10001520:	4b05      	ldr	r3, [pc, #20]	; (10001538 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001522:	681a      	ldr	r2, [r3, #0]
10001524:	2380      	movs	r3, #128	; 0x80
10001526:	05db      	lsls	r3, r3, #23
10001528:	4013      	ands	r3, r2
1000152a:	d1f9      	bne.n	10001520 <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
1000152c:	f7ff ffaa 	bl	10001484 <XMC_SCU_LockProtectedBits>
}
10001530:	46bd      	mov	sp, r7
10001532:	b002      	add	sp, #8
10001534:	bd80      	pop	{r7, pc}
10001536:	46c0      	nop			; (mov r8, r8)
10001538:	40010300 	.word	0x40010300

1000153c <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
1000153c:	b580      	push	{r7, lr}
1000153e:	b084      	sub	sp, #16
10001540:	af00      	add	r7, sp, #0
10001542:	6078      	str	r0, [r7, #4]
10001544:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001546:	f7ff ffa7 	bl	10001498 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000154a:	4b21      	ldr	r3, [pc, #132]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000154c:	681a      	ldr	r2, [r3, #0]
1000154e:	23ff      	movs	r3, #255	; 0xff
10001550:	021b      	lsls	r3, r3, #8
10001552:	4013      	ands	r3, r2
10001554:	0a1b      	lsrs	r3, r3, #8
10001556:	60fb      	str	r3, [r7, #12]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001558:	4b1d      	ldr	r3, [pc, #116]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000155a:	4a1d      	ldr	r2, [pc, #116]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000155c:	6812      	ldr	r2, [r2, #0]
1000155e:	491d      	ldr	r1, [pc, #116]	; (100015d4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)
10001560:	4011      	ands	r1, r2
10001562:	683a      	ldr	r2, [r7, #0]
10001564:	430a      	orrs	r2, r1
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
10001566:	491c      	ldr	r1, [pc, #112]	; (100015d8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
10001568:	430a      	orrs	r2, r1

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000156a:	601a      	str	r2, [r3, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000156c:	46c0      	nop			; (mov r8, r8)
1000156e:	4b18      	ldr	r3, [pc, #96]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001570:	681a      	ldr	r2, [r3, #0]
10001572:	2380      	movs	r3, #128	; 0x80
10001574:	05db      	lsls	r3, r3, #23
10001576:	4013      	ands	r3, r2
10001578:	d1f9      	bne.n	1000156e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x32>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000157a:	68fa      	ldr	r2, [r7, #12]
1000157c:	687b      	ldr	r3, [r7, #4]
1000157e:	429a      	cmp	r2, r3
10001580:	d806      	bhi.n	10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x54>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001582:	68fa      	ldr	r2, [r7, #12]
10001584:	687b      	ldr	r3, [r7, #4]
10001586:	1c10      	adds	r0, r2, #0
10001588:	1c19      	adds	r1, r3, #0
1000158a:	f000 f853 	bl	10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000158e:	e005      	b.n	1000159c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001590:	68fa      	ldr	r2, [r7, #12]
10001592:	687b      	ldr	r3, [r7, #4]
10001594:	1c10      	adds	r0, r2, #0
10001596:	1c19      	adds	r1, r3, #0
10001598:	f000 f822 	bl	100015e0 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000159c:	4b0c      	ldr	r3, [pc, #48]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000159e:	4a0c      	ldr	r2, [pc, #48]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100015a0:	6812      	ldr	r2, [r2, #0]
100015a2:	490e      	ldr	r1, [pc, #56]	; (100015dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
100015a4:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100015a6:	687a      	ldr	r2, [r7, #4]
100015a8:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015aa:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100015ac:	490a      	ldr	r1, [pc, #40]	; (100015d8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
100015ae:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015b0:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015b2:	46c0      	nop			; (mov r8, r8)
100015b4:	4b06      	ldr	r3, [pc, #24]	; (100015d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100015b6:	681a      	ldr	r2, [r3, #0]
100015b8:	2380      	movs	r3, #128	; 0x80
100015ba:	05db      	lsls	r3, r3, #23
100015bc:	4013      	ands	r3, r2
100015be:	d1f9      	bne.n	100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
100015c0:	f7ff ff60 	bl	10001484 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
100015c4:	f7ff fd72 	bl	100010ac <SystemCoreClockUpdate>

}
100015c8:	46bd      	mov	sp, r7
100015ca:	b004      	add	sp, #16
100015cc:	bd80      	pop	{r7, pc}
100015ce:	46c0      	nop			; (mov r8, r8)
100015d0:	40010300 	.word	0x40010300
100015d4:	c00fff00 	.word	0xc00fff00
100015d8:	3ff00000 	.word	0x3ff00000
100015dc:	c00f00ff 	.word	0xc00f00ff

100015e0 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015e0:	b580      	push	{r7, lr}
100015e2:	b082      	sub	sp, #8
100015e4:	af00      	add	r7, sp, #0
100015e6:	6078      	str	r0, [r7, #4]
100015e8:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100015ea:	e014      	b.n	10001616 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100015ec:	687b      	ldr	r3, [r7, #4]
100015ee:	089b      	lsrs	r3, r3, #2
100015f0:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015f2:	4b0d      	ldr	r3, [pc, #52]	; (10001628 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015f4:	4a0c      	ldr	r2, [pc, #48]	; (10001628 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015f6:	6812      	ldr	r2, [r2, #0]
100015f8:	490c      	ldr	r1, [pc, #48]	; (1000162c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015fa:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015fc:	687a      	ldr	r2, [r7, #4]
100015fe:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001600:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001602:	490b      	ldr	r1, [pc, #44]	; (10001630 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001604:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001606:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001608:	46c0      	nop			; (mov r8, r8)
1000160a:	4b07      	ldr	r3, [pc, #28]	; (10001628 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
1000160c:	681a      	ldr	r2, [r3, #0]
1000160e:	2380      	movs	r3, #128	; 0x80
10001610:	05db      	lsls	r3, r3, #23
10001612:	4013      	ands	r3, r2
10001614:	d1f9      	bne.n	1000160a <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001616:	683b      	ldr	r3, [r7, #0]
10001618:	009a      	lsls	r2, r3, #2
1000161a:	687b      	ldr	r3, [r7, #4]
1000161c:	429a      	cmp	r2, r3
1000161e:	d3e5      	bcc.n	100015ec <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001620:	46bd      	mov	sp, r7
10001622:	b002      	add	sp, #8
10001624:	bd80      	pop	{r7, pc}
10001626:	46c0      	nop			; (mov r8, r8)
10001628:	40010300 	.word	0x40010300
1000162c:	c00f00ff 	.word	0xc00f00ff
10001630:	3ff00000 	.word	0x3ff00000

10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001634:	b580      	push	{r7, lr}
10001636:	b082      	sub	sp, #8
10001638:	af00      	add	r7, sp, #0
1000163a:	6078      	str	r0, [r7, #4]
1000163c:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
1000163e:	e019      	b.n	10001674 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001640:	687b      	ldr	r3, [r7, #4]
10001642:	2b00      	cmp	r3, #0
10001644:	d101      	bne.n	1000164a <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10001646:	2301      	movs	r3, #1
10001648:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000164a:	687b      	ldr	r3, [r7, #4]
1000164c:	009b      	lsls	r3, r3, #2
1000164e:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001650:	4b0c      	ldr	r3, [pc, #48]	; (10001684 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001652:	4a0c      	ldr	r2, [pc, #48]	; (10001684 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001654:	6812      	ldr	r2, [r2, #0]
10001656:	490c      	ldr	r1, [pc, #48]	; (10001688 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001658:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000165a:	687a      	ldr	r2, [r7, #4]
1000165c:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000165e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001660:	490a      	ldr	r1, [pc, #40]	; (1000168c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001662:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001664:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001666:	46c0      	nop			; (mov r8, r8)
10001668:	4b06      	ldr	r3, [pc, #24]	; (10001684 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000166a:	681a      	ldr	r2, [r3, #0]
1000166c:	2380      	movs	r3, #128	; 0x80
1000166e:	05db      	lsls	r3, r3, #23
10001670:	4013      	ands	r3, r2
10001672:	d1f9      	bne.n	10001668 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001674:	687b      	ldr	r3, [r7, #4]
10001676:	009a      	lsls	r2, r3, #2
10001678:	683b      	ldr	r3, [r7, #0]
1000167a:	429a      	cmp	r2, r3
1000167c:	d3e0      	bcc.n	10001640 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000167e:	46bd      	mov	sp, r7
10001680:	b002      	add	sp, #8
10001682:	bd80      	pop	{r7, pc}
10001684:	40010300 	.word	0x40010300
10001688:	c00f00ff 	.word	0xc00f00ff
1000168c:	3ff00000 	.word	0x3ff00000

10001690 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001690:	b580      	push	{r7, lr}
10001692:	b082      	sub	sp, #8
10001694:	af00      	add	r7, sp, #0
10001696:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001698:	687b      	ldr	r3, [r7, #4]
1000169a:	2280      	movs	r2, #128	; 0x80
1000169c:	0052      	lsls	r2, r2, #1
1000169e:	60da      	str	r2, [r3, #12]
}
100016a0:	46bd      	mov	sp, r7
100016a2:	b002      	add	sp, #8
100016a4:	bd80      	pop	{r7, pc}
100016a6:	46c0      	nop			; (mov r8, r8)

100016a8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100016a8:	b580      	push	{r7, lr}
100016aa:	b082      	sub	sp, #8
100016ac:	af00      	add	r7, sp, #0
100016ae:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100016b0:	687b      	ldr	r3, [r7, #4]
100016b2:	4a04      	ldr	r2, [pc, #16]	; (100016c4 <XMC_CCU4_lUngateClock+0x1c>)
100016b4:	4293      	cmp	r3, r2
100016b6:	d102      	bne.n	100016be <XMC_CCU4_lUngateClock+0x16>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100016b8:	2004      	movs	r0, #4
100016ba:	f7ff ff21 	bl	10001500 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
100016be:	46bd      	mov	sp, r7
100016c0:	b002      	add	sp, #8
100016c2:	bd80      	pop	{r7, pc}
100016c4:	48040000 	.word	0x48040000

100016c8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
100016c8:	b580      	push	{r7, lr}
100016ca:	b082      	sub	sp, #8
100016cc:	af00      	add	r7, sp, #0
100016ce:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
100016d0:	687b      	ldr	r3, [r7, #4]
100016d2:	1c18      	adds	r0, r3, #0
100016d4:	f7ff ffe8 	bl	100016a8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
100016d8:	46bd      	mov	sp, r7
100016da:	b002      	add	sp, #8
100016dc:	bd80      	pop	{r7, pc}
100016de:	46c0      	nop			; (mov r8, r8)

100016e0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100016e0:	b580      	push	{r7, lr}
100016e2:	b084      	sub	sp, #16
100016e4:	af00      	add	r7, sp, #0
100016e6:	6078      	str	r0, [r7, #4]
100016e8:	1c0a      	adds	r2, r1, #0
100016ea:	1cfb      	adds	r3, r7, #3
100016ec:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
100016ee:	687b      	ldr	r3, [r7, #4]
100016f0:	1c18      	adds	r0, r3, #0
100016f2:	f7ff ffe9 	bl	100016c8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
100016f6:	687b      	ldr	r3, [r7, #4]
100016f8:	1c18      	adds	r0, r3, #0
100016fa:	f7ff ffc9 	bl	10001690 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
100016fe:	687b      	ldr	r3, [r7, #4]
10001700:	681b      	ldr	r3, [r3, #0]
10001702:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001704:	68fb      	ldr	r3, [r7, #12]
10001706:	4a07      	ldr	r2, [pc, #28]	; (10001724 <XMC_CCU4_Init+0x44>)
10001708:	4013      	ands	r3, r2
1000170a:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
1000170c:	1cfb      	adds	r3, r7, #3
1000170e:	781b      	ldrb	r3, [r3, #0]
10001710:	039b      	lsls	r3, r3, #14
10001712:	68fa      	ldr	r2, [r7, #12]
10001714:	4313      	orrs	r3, r2
10001716:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10001718:	687b      	ldr	r3, [r7, #4]
1000171a:	68fa      	ldr	r2, [r7, #12]
1000171c:	601a      	str	r2, [r3, #0]
}
1000171e:	46bd      	mov	sp, r7
10001720:	b004      	add	sp, #16
10001722:	bd80      	pop	{r7, pc}
10001724:	ffff3fff 	.word	0xffff3fff

10001728 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
10001728:	b580      	push	{r7, lr}
1000172a:	b084      	sub	sp, #16
1000172c:	af00      	add	r7, sp, #0
1000172e:	6078      	str	r0, [r7, #4]
10001730:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));

  gctrl = module->GCTRL;
10001732:	687b      	ldr	r3, [r7, #4]
10001734:	681b      	ldr	r3, [r3, #0]
10001736:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001738:	683b      	ldr	r3, [r7, #0]
1000173a:	0c1b      	lsrs	r3, r3, #16
1000173c:	43da      	mvns	r2, r3
1000173e:	68fb      	ldr	r3, [r7, #12]
10001740:	4013      	ands	r3, r2
10001742:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10001744:	683b      	ldr	r3, [r7, #0]
10001746:	041b      	lsls	r3, r3, #16
10001748:	0c1b      	lsrs	r3, r3, #16
1000174a:	68fa      	ldr	r2, [r7, #12]
1000174c:	4313      	orrs	r3, r2
1000174e:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
10001750:	687b      	ldr	r3, [r7, #4]
10001752:	68fa      	ldr	r2, [r7, #12]
10001754:	601a      	str	r2, [r3, #0]
}
10001756:	46bd      	mov	sp, r7
10001758:	b004      	add	sp, #16
1000175a:	bd80      	pop	{r7, pc}

1000175c <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
1000175c:	b580      	push	{r7, lr}
1000175e:	b082      	sub	sp, #8
10001760:	af00      	add	r7, sp, #0
10001762:	6078      	str	r0, [r7, #4]
10001764:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001766:	683b      	ldr	r3, [r7, #0]
10001768:	681a      	ldr	r2, [r3, #0]
1000176a:	687b      	ldr	r3, [r7, #4]
1000176c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000176e:	683b      	ldr	r3, [r7, #0]
10001770:	795b      	ldrb	r3, [r3, #5]
10001772:	069b      	lsls	r3, r3, #26
10001774:	0fdb      	lsrs	r3, r3, #31
10001776:	b2db      	uxtb	r3, r3
10001778:	051a      	lsls	r2, r3, #20
1000177a:	687b      	ldr	r3, [r7, #4]
1000177c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000177e:	683b      	ldr	r3, [r7, #0]
10001780:	791b      	ldrb	r3, [r3, #4]
10001782:	071b      	lsls	r3, r3, #28
10001784:	0f1b      	lsrs	r3, r3, #28
10001786:	b2db      	uxtb	r3, r3
10001788:	1c1a      	adds	r2, r3, #0
1000178a:	687b      	ldr	r3, [r7, #4]
1000178c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000178e:	683b      	ldr	r3, [r7, #0]
10001790:	795b      	ldrb	r3, [r3, #5]
10001792:	071b      	lsls	r3, r3, #28
10001794:	0f1b      	lsrs	r3, r3, #28
10001796:	b2db      	uxtb	r3, r3
10001798:	1c1a      	adds	r2, r3, #0
1000179a:	687b      	ldr	r3, [r7, #4]
1000179c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
1000179e:	683b      	ldr	r3, [r7, #0]
100017a0:	795b      	ldrb	r3, [r3, #5]
100017a2:	06db      	lsls	r3, r3, #27
100017a4:	0fdb      	lsrs	r3, r3, #31
100017a6:	b2db      	uxtb	r3, r3
100017a8:	1c1a      	adds	r2, r3, #0
100017aa:	687b      	ldr	r3, [r7, #4]
100017ac:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100017ae:	683b      	ldr	r3, [r7, #0]
100017b0:	791b      	ldrb	r3, [r3, #4]
100017b2:	061b      	lsls	r3, r3, #24
100017b4:	0f1b      	lsrs	r3, r3, #28
100017b6:	b2db      	uxtb	r3, r3
100017b8:	1c1a      	adds	r2, r3, #0
100017ba:	687b      	ldr	r3, [r7, #4]
100017bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
100017be:	46bd      	mov	sp, r7
100017c0:	b002      	add	sp, #8
100017c2:	bd80      	pop	{r7, pc}

100017c4 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
100017c4:	b580      	push	{r7, lr}
100017c6:	b084      	sub	sp, #16
100017c8:	af00      	add	r7, sp, #0
100017ca:	6078      	str	r0, [r7, #4]
100017cc:	1c08      	adds	r0, r1, #0
100017ce:	1c11      	adds	r1, r2, #0
100017d0:	1cfb      	adds	r3, r7, #3
100017d2:	1c02      	adds	r2, r0, #0
100017d4:	701a      	strb	r2, [r3, #0]
100017d6:	1cbb      	adds	r3, r7, #2
100017d8:	1c0a      	adds	r2, r1, #0
100017da:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) || \
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
100017dc:	687b      	ldr	r3, [r7, #4]
100017de:	685b      	ldr	r3, [r3, #4]
100017e0:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
100017e2:	68bb      	ldr	r3, [r7, #8]
100017e4:	2203      	movs	r2, #3
100017e6:	4393      	bics	r3, r2
100017e8:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
100017ea:	1cfb      	adds	r3, r7, #3
100017ec:	781b      	ldrb	r3, [r3, #0]
100017ee:	68ba      	ldr	r2, [r7, #8]
100017f0:	4313      	orrs	r3, r2
100017f2:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
100017f4:	687b      	ldr	r3, [r7, #4]
100017f6:	68ba      	ldr	r2, [r7, #8]
100017f8:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
100017fa:	687b      	ldr	r3, [r7, #4]
100017fc:	695b      	ldr	r3, [r3, #20]
100017fe:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
10001800:	1cbb      	adds	r3, r7, #2
10001802:	781b      	ldrb	r3, [r3, #0]
10001804:	2b01      	cmp	r3, #1
10001806:	d105      	bne.n	10001814 <XMC_CCU4_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
10001808:	68fb      	ldr	r3, [r7, #12]
1000180a:	2280      	movs	r2, #128	; 0x80
1000180c:	00d2      	lsls	r2, r2, #3
1000180e:	4313      	orrs	r3, r2
10001810:	60fb      	str	r3, [r7, #12]
10001812:	e003      	b.n	1000181c <XMC_CCU4_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
10001814:	68fb      	ldr	r3, [r7, #12]
10001816:	4a04      	ldr	r2, [pc, #16]	; (10001828 <XMC_CCU4_SLICE_StartConfig+0x64>)
10001818:	4013      	ands	r3, r2
1000181a:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
1000181c:	687b      	ldr	r3, [r7, #4]
1000181e:	68fa      	ldr	r2, [r7, #12]
10001820:	615a      	str	r2, [r3, #20]
}
10001822:	46bd      	mov	sp, r7
10001824:	b004      	add	sp, #16
10001826:	bd80      	pop	{r7, pc}
10001828:	fffffbff 	.word	0xfffffbff

1000182c <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
1000182c:	b580      	push	{r7, lr}
1000182e:	b084      	sub	sp, #16
10001830:	af00      	add	r7, sp, #0
10001832:	6078      	str	r0, [r7, #4]
10001834:	1c08      	adds	r0, r1, #0
10001836:	1c11      	adds	r1, r2, #0
10001838:	1cfb      	adds	r3, r7, #3
1000183a:	1c02      	adds	r2, r0, #0
1000183c:	701a      	strb	r2, [r3, #0]
1000183e:	1cbb      	adds	r3, r7, #2
10001840:	1c0a      	adds	r2, r1, #0
10001842:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));

  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001844:	687b      	ldr	r3, [r7, #4]
10001846:	685b      	ldr	r3, [r3, #4]
10001848:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
1000184a:	68fb      	ldr	r3, [r7, #12]
1000184c:	220c      	movs	r2, #12
1000184e:	4393      	bics	r3, r2
10001850:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
10001852:	1cfb      	adds	r3, r7, #3
10001854:	781b      	ldrb	r3, [r3, #0]
10001856:	009b      	lsls	r3, r3, #2
10001858:	68fa      	ldr	r2, [r7, #12]
1000185a:	4313      	orrs	r3, r2
1000185c:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000185e:	687b      	ldr	r3, [r7, #4]
10001860:	68fa      	ldr	r2, [r7, #12]
10001862:	605a      	str	r2, [r3, #4]

  /* Next, Configure the stop mode */
  tc = slice->TC;
10001864:	687b      	ldr	r3, [r7, #4]
10001866:	695b      	ldr	r3, [r3, #20]
10001868:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
1000186a:	68bb      	ldr	r3, [r7, #8]
1000186c:	4a07      	ldr	r2, [pc, #28]	; (1000188c <XMC_CCU4_SLICE_StopConfig+0x60>)
1000186e:	4013      	ands	r3, r2
10001870:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
10001872:	1cbb      	adds	r3, r7, #2
10001874:	781b      	ldrb	r3, [r3, #0]
10001876:	021b      	lsls	r3, r3, #8
10001878:	68ba      	ldr	r2, [r7, #8]
1000187a:	4313      	orrs	r3, r2
1000187c:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
1000187e:	687b      	ldr	r3, [r7, #4]
10001880:	68ba      	ldr	r2, [r7, #8]
10001882:	615a      	str	r2, [r3, #20]
}
10001884:	46bd      	mov	sp, r7
10001886:	b004      	add	sp, #16
10001888:	bd80      	pop	{r7, pc}
1000188a:	46c0      	nop			; (mov r8, r8)
1000188c:	fffffcff 	.word	0xfffffcff

10001890 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001890:	b580      	push	{r7, lr}
10001892:	b084      	sub	sp, #16
10001894:	af00      	add	r7, sp, #0
10001896:	6078      	str	r0, [r7, #4]
10001898:	1c0a      	adds	r2, r1, #0
1000189a:	1cfb      	adds	r3, r7, #3
1000189c:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the load function */
  cmc = slice->CMC;
1000189e:	687b      	ldr	r3, [r7, #4]
100018a0:	685b      	ldr	r3, [r3, #4]
100018a2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
100018a4:	68fb      	ldr	r3, [r7, #12]
100018a6:	4a07      	ldr	r2, [pc, #28]	; (100018c4 <XMC_CCU4_SLICE_LoadConfig+0x34>)
100018a8:	4013      	ands	r3, r2
100018aa:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
100018ac:	1cfb      	adds	r3, r7, #3
100018ae:	781b      	ldrb	r3, [r3, #0]
100018b0:	031b      	lsls	r3, r3, #12
100018b2:	68fa      	ldr	r2, [r7, #12]
100018b4:	4313      	orrs	r3, r2
100018b6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100018b8:	687b      	ldr	r3, [r7, #4]
100018ba:	68fa      	ldr	r2, [r7, #12]
100018bc:	605a      	str	r2, [r3, #4]
}
100018be:	46bd      	mov	sp, r7
100018c0:	b004      	add	sp, #16
100018c2:	bd80      	pop	{r7, pc}
100018c4:	ffffcfff 	.word	0xffffcfff

100018c8 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
100018c8:	b590      	push	{r4, r7, lr}
100018ca:	b085      	sub	sp, #20
100018cc:	af00      	add	r7, sp, #0
100018ce:	6078      	str	r0, [r7, #4]
100018d0:	1c0c      	adds	r4, r1, #0
100018d2:	1c10      	adds	r0, r2, #0
100018d4:	1c19      	adds	r1, r3, #0
100018d6:	1cfb      	adds	r3, r7, #3
100018d8:	1c22      	adds	r2, r4, #0
100018da:	701a      	strb	r2, [r3, #0]
100018dc:	1cbb      	adds	r3, r7, #2
100018de:	1c02      	adds	r2, r0, #0
100018e0:	701a      	strb	r2, [r3, #0]
100018e2:	1c7b      	adds	r3, r7, #1
100018e4:	1c0a      	adds	r2, r1, #0
100018e6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) || \
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));

  tc  = slice->TC;
100018e8:	687b      	ldr	r3, [r7, #4]
100018ea:	695b      	ldr	r3, [r3, #20]
100018ec:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
100018ee:	687b      	ldr	r3, [r7, #4]
100018f0:	685b      	ldr	r3, [r3, #4]
100018f2:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
100018f4:	68bb      	ldr	r3, [r7, #8]
100018f6:	4a17      	ldr	r2, [pc, #92]	; (10001954 <XMC_CCU4_SLICE_ModulationConfig+0x8c>)
100018f8:	4013      	ands	r3, r2
100018fa:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
100018fc:	1cfb      	adds	r3, r7, #3
100018fe:	781b      	ldrb	r3, [r3, #0]
10001900:	049b      	lsls	r3, r3, #18
10001902:	68ba      	ldr	r2, [r7, #8]
10001904:	4313      	orrs	r3, r2
10001906:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001908:	687b      	ldr	r3, [r7, #4]
1000190a:	68ba      	ldr	r2, [r7, #8]
1000190c:	605a      	str	r2, [r3, #4]

  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
1000190e:	1cbb      	adds	r3, r7, #2
10001910:	781b      	ldrb	r3, [r3, #0]
10001912:	2b01      	cmp	r3, #1
10001914:	d105      	bne.n	10001922 <XMC_CCU4_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
10001916:	68fb      	ldr	r3, [r7, #12]
10001918:	2280      	movs	r2, #128	; 0x80
1000191a:	0452      	lsls	r2, r2, #17
1000191c:	4313      	orrs	r3, r2
1000191e:	60fb      	str	r3, [r7, #12]
10001920:	e003      	b.n	1000192a <XMC_CCU4_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
10001922:	68fb      	ldr	r3, [r7, #12]
10001924:	4a0c      	ldr	r2, [pc, #48]	; (10001958 <XMC_CCU4_SLICE_ModulationConfig+0x90>)
10001926:	4013      	ands	r3, r2
10001928:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
1000192a:	1c7b      	adds	r3, r7, #1
1000192c:	781b      	ldrb	r3, [r3, #0]
1000192e:	2b00      	cmp	r3, #0
10001930:	d005      	beq.n	1000193e <XMC_CCU4_SLICE_ModulationConfig+0x76>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
10001932:	68fb      	ldr	r3, [r7, #12]
10001934:	2280      	movs	r2, #128	; 0x80
10001936:	0412      	lsls	r2, r2, #16
10001938:	4313      	orrs	r3, r2
1000193a:	60fb      	str	r3, [r7, #12]
1000193c:	e003      	b.n	10001946 <XMC_CCU4_SLICE_ModulationConfig+0x7e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
1000193e:	68fb      	ldr	r3, [r7, #12]
10001940:	4a06      	ldr	r2, [pc, #24]	; (1000195c <XMC_CCU4_SLICE_ModulationConfig+0x94>)
10001942:	4013      	ands	r3, r2
10001944:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001946:	687b      	ldr	r3, [r7, #4]
10001948:	68fa      	ldr	r2, [r7, #12]
1000194a:	615a      	str	r2, [r3, #20]
}
1000194c:	46bd      	mov	sp, r7
1000194e:	b005      	add	sp, #20
10001950:	bd90      	pop	{r4, r7, pc}
10001952:	46c0      	nop			; (mov r8, r8)
10001954:	fff3ffff 	.word	0xfff3ffff
10001958:	feffffff 	.word	0xfeffffff
1000195c:	ff7fffff 	.word	0xff7fffff

10001960 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001960:	b580      	push	{r7, lr}
10001962:	b084      	sub	sp, #16
10001964:	af00      	add	r7, sp, #0
10001966:	6078      	str	r0, [r7, #4]
10001968:	1c0a      	adds	r2, r1, #0
1000196a:	1cfb      	adds	r3, r7, #3
1000196c:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
1000196e:	687b      	ldr	r3, [r7, #4]
10001970:	685b      	ldr	r3, [r3, #4]
10001972:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
10001974:	68fb      	ldr	r3, [r7, #12]
10001976:	4a07      	ldr	r2, [pc, #28]	; (10001994 <XMC_CCU4_SLICE_CountConfig+0x34>)
10001978:	4013      	ands	r3, r2
1000197a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
1000197c:	1cfb      	adds	r3, r7, #3
1000197e:	781b      	ldrb	r3, [r3, #0]
10001980:	039b      	lsls	r3, r3, #14
10001982:	68fa      	ldr	r2, [r7, #12]
10001984:	4313      	orrs	r3, r2
10001986:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001988:	687b      	ldr	r3, [r7, #4]
1000198a:	68fa      	ldr	r2, [r7, #12]
1000198c:	605a      	str	r2, [r3, #4]
}
1000198e:	46bd      	mov	sp, r7
10001990:	b004      	add	sp, #16
10001992:	bd80      	pop	{r7, pc}
10001994:	ffff3fff 	.word	0xffff3fff

10001998 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001998:	b580      	push	{r7, lr}
1000199a:	b084      	sub	sp, #16
1000199c:	af00      	add	r7, sp, #0
1000199e:	6078      	str	r0, [r7, #4]
100019a0:	1c0a      	adds	r2, r1, #0
100019a2:	1cfb      	adds	r3, r7, #3
100019a4:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
100019a6:	687b      	ldr	r3, [r7, #4]
100019a8:	685b      	ldr	r3, [r3, #4]
100019aa:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
100019ac:	68fb      	ldr	r3, [r7, #12]
100019ae:	4a07      	ldr	r2, [pc, #28]	; (100019cc <XMC_CCU4_SLICE_GateConfig+0x34>)
100019b0:	4013      	ands	r3, r2
100019b2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
100019b4:	1cfb      	adds	r3, r7, #3
100019b6:	781b      	ldrb	r3, [r3, #0]
100019b8:	021b      	lsls	r3, r3, #8
100019ba:	68fa      	ldr	r2, [r7, #12]
100019bc:	4313      	orrs	r3, r2
100019be:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100019c0:	687b      	ldr	r3, [r7, #4]
100019c2:	68fa      	ldr	r2, [r7, #12]
100019c4:	605a      	str	r2, [r3, #4]
}
100019c6:	46bd      	mov	sp, r7
100019c8:	b004      	add	sp, #16
100019ca:	bd80      	pop	{r7, pc}
100019cc:	fffffcff 	.word	0xfffffcff

100019d0 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100019d0:	b580      	push	{r7, lr}
100019d2:	b084      	sub	sp, #16
100019d4:	af00      	add	r7, sp, #0
100019d6:	6078      	str	r0, [r7, #4]
100019d8:	1c0a      	adds	r2, r1, #0
100019da:	1cfb      	adds	r3, r7, #3
100019dc:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the direction function */
  cmc = slice->CMC;
100019de:	687b      	ldr	r3, [r7, #4]
100019e0:	685b      	ldr	r3, [r3, #4]
100019e2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
100019e4:	68fb      	ldr	r3, [r7, #12]
100019e6:	4a07      	ldr	r2, [pc, #28]	; (10001a04 <XMC_CCU4_SLICE_DirectionConfig+0x34>)
100019e8:	4013      	ands	r3, r2
100019ea:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
100019ec:	1cfb      	adds	r3, r7, #3
100019ee:	781b      	ldrb	r3, [r3, #0]
100019f0:	029b      	lsls	r3, r3, #10
100019f2:	68fa      	ldr	r2, [r7, #12]
100019f4:	4313      	orrs	r3, r2
100019f6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100019f8:	687b      	ldr	r3, [r7, #4]
100019fa:	68fa      	ldr	r2, [r7, #12]
100019fc:	605a      	str	r2, [r3, #4]
}
100019fe:	46bd      	mov	sp, r7
10001a00:	b004      	add	sp, #16
10001a02:	bd80      	pop	{r7, pc}
10001a04:	fffff3ff 	.word	0xfffff3ff

10001a08 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
10001a08:	b580      	push	{r7, lr}
10001a0a:	b084      	sub	sp, #16
10001a0c:	af00      	add	r7, sp, #0
10001a0e:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  /* Bind the event with the override function */
  cmc = slice->CMC;
10001a10:	687b      	ldr	r3, [r7, #4]
10001a12:	685b      	ldr	r3, [r3, #4]
10001a14:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
10001a16:	68fb      	ldr	r3, [r7, #12]
10001a18:	4a06      	ldr	r2, [pc, #24]	; (10001a34 <XMC_CCU4_SLICE_StatusBitOverrideConfig+0x2c>)
10001a1a:	4013      	ands	r3, r2
10001a1c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
10001a1e:	68fb      	ldr	r3, [r7, #12]
10001a20:	2280      	movs	r2, #128	; 0x80
10001a22:	0252      	lsls	r2, r2, #9
10001a24:	4313      	orrs	r3, r2
10001a26:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001a28:	687b      	ldr	r3, [r7, #4]
10001a2a:	68fa      	ldr	r2, [r7, #12]
10001a2c:	605a      	str	r2, [r3, #4]
}
10001a2e:	46bd      	mov	sp, r7
10001a30:	b004      	add	sp, #16
10001a32:	bd80      	pop	{r7, pc}
10001a34:	fffeffff 	.word	0xfffeffff

10001a38 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
10001a38:	b580      	push	{r7, lr}
10001a3a:	b084      	sub	sp, #16
10001a3c:	af00      	add	r7, sp, #0
10001a3e:	6078      	str	r0, [r7, #4]
10001a40:	1c08      	adds	r0, r1, #0
10001a42:	1c11      	adds	r1, r2, #0
10001a44:	1cfb      	adds	r3, r7, #3
10001a46:	1c02      	adds	r2, r0, #0
10001a48:	701a      	strb	r2, [r3, #0]
10001a4a:	1cbb      	adds	r3, r7, #2
10001a4c:	1c0a      	adds	r2, r1, #0
10001a4e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));

  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	685b      	ldr	r3, [r3, #4]
10001a54:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
10001a56:	68bb      	ldr	r3, [r7, #8]
10001a58:	4a17      	ldr	r2, [pc, #92]	; (10001ab8 <XMC_CCU4_SLICE_TrapConfig+0x80>)
10001a5a:	4013      	ands	r3, r2
10001a5c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
10001a5e:	68bb      	ldr	r3, [r7, #8]
10001a60:	2280      	movs	r2, #128	; 0x80
10001a62:	0292      	lsls	r2, r2, #10
10001a64:	4313      	orrs	r3, r2
10001a66:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001a68:	687b      	ldr	r3, [r7, #4]
10001a6a:	68ba      	ldr	r2, [r7, #8]
10001a6c:	605a      	str	r2, [r3, #4]

  /* Next, Configure synchronization option */
  tc = slice->TC;
10001a6e:	687b      	ldr	r3, [r7, #4]
10001a70:	695b      	ldr	r3, [r3, #20]
10001a72:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
10001a74:	1cbb      	adds	r3, r7, #2
10001a76:	781b      	ldrb	r3, [r3, #0]
10001a78:	2b00      	cmp	r3, #0
10001a7a:	d005      	beq.n	10001a88 <XMC_CCU4_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
10001a7c:	68fb      	ldr	r3, [r7, #12]
10001a7e:	2280      	movs	r2, #128	; 0x80
10001a80:	0392      	lsls	r2, r2, #14
10001a82:	4313      	orrs	r3, r2
10001a84:	60fb      	str	r3, [r7, #12]
10001a86:	e003      	b.n	10001a90 <XMC_CCU4_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
10001a88:	68fb      	ldr	r3, [r7, #12]
10001a8a:	4a0c      	ldr	r2, [pc, #48]	; (10001abc <XMC_CCU4_SLICE_TrapConfig+0x84>)
10001a8c:	4013      	ands	r3, r2
10001a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
10001a90:	1cfb      	adds	r3, r7, #3
10001a92:	781b      	ldrb	r3, [r3, #0]
10001a94:	2b01      	cmp	r3, #1
10001a96:	d105      	bne.n	10001aa4 <XMC_CCU4_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
10001a98:	68fb      	ldr	r3, [r7, #12]
10001a9a:	2280      	movs	r2, #128	; 0x80
10001a9c:	03d2      	lsls	r2, r2, #15
10001a9e:	4313      	orrs	r3, r2
10001aa0:	60fb      	str	r3, [r7, #12]
10001aa2:	e003      	b.n	10001aac <XMC_CCU4_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
10001aa4:	68fb      	ldr	r3, [r7, #12]
10001aa6:	4a06      	ldr	r2, [pc, #24]	; (10001ac0 <XMC_CCU4_SLICE_TrapConfig+0x88>)
10001aa8:	4013      	ands	r3, r2
10001aaa:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001aac:	687b      	ldr	r3, [r7, #4]
10001aae:	68fa      	ldr	r2, [r7, #12]
10001ab0:	615a      	str	r2, [r3, #20]
}
10001ab2:	46bd      	mov	sp, r7
10001ab4:	b004      	add	sp, #16
10001ab6:	bd80      	pop	{r7, pc}
10001ab8:	fffdffff 	.word	0xfffdffff
10001abc:	ffdfffff 	.word	0xffdfffff
10001ac0:	ffbfffff 	.word	0xffbfffff

10001ac4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10001ac4:	b580      	push	{r7, lr}
10001ac6:	b086      	sub	sp, #24
10001ac8:	af00      	add	r7, sp, #0
10001aca:	60f8      	str	r0, [r7, #12]
10001acc:	60b9      	str	r1, [r7, #8]
10001ace:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;

  slice->INS1 = ins;
#else
  ins = slice->INS;
10001ad0:	68fb      	ldr	r3, [r7, #12]
10001ad2:	681b      	ldr	r3, [r3, #0]
10001ad4:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
10001ad6:	697b      	ldr	r3, [r7, #20]
10001ad8:	4a2a      	ldr	r2, [pc, #168]	; (10001b84 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc0>)
10001ada:	4013      	ands	r3, r2
10001adc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
10001ade:	68bb      	ldr	r3, [r7, #8]
10001ae0:	785b      	ldrb	r3, [r3, #1]
10001ae2:	049b      	lsls	r3, r3, #18
10001ae4:	697a      	ldr	r2, [r7, #20]
10001ae6:	4313      	orrs	r3, r2
10001ae8:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
10001aea:	697b      	ldr	r3, [r7, #20]
10001aec:	4a26      	ldr	r2, [pc, #152]	; (10001b88 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc4>)
10001aee:	4013      	ands	r3, r2
10001af0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
10001af2:	687b      	ldr	r3, [r7, #4]
10001af4:	785b      	ldrb	r3, [r3, #1]
10001af6:	051b      	lsls	r3, r3, #20
10001af8:	697a      	ldr	r2, [r7, #20]
10001afa:	4313      	orrs	r3, r2
10001afc:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
10001afe:	697b      	ldr	r3, [r7, #20]
10001b00:	4a22      	ldr	r2, [pc, #136]	; (10001b8c <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc8>)
10001b02:	4013      	ands	r3, r2
10001b04:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
10001b06:	68bb      	ldr	r3, [r7, #8]
10001b08:	789b      	ldrb	r3, [r3, #2]
10001b0a:	05db      	lsls	r3, r3, #23
10001b0c:	697a      	ldr	r2, [r7, #20]
10001b0e:	4313      	orrs	r3, r2
10001b10:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
10001b12:	697b      	ldr	r3, [r7, #20]
10001b14:	4a1e      	ldr	r2, [pc, #120]	; (10001b90 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xcc>)
10001b16:	4013      	ands	r3, r2
10001b18:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
10001b1a:	687b      	ldr	r3, [r7, #4]
10001b1c:	789b      	ldrb	r3, [r3, #2]
10001b1e:	061b      	lsls	r3, r3, #24
10001b20:	697a      	ldr	r2, [r7, #20]
10001b22:	4313      	orrs	r3, r2
10001b24:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
10001b26:	697b      	ldr	r3, [r7, #20]
10001b28:	4a1a      	ldr	r2, [pc, #104]	; (10001b94 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
10001b2a:	4013      	ands	r3, r2
10001b2c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
10001b2e:	68bb      	ldr	r3, [r7, #8]
10001b30:	78db      	ldrb	r3, [r3, #3]
10001b32:	06db      	lsls	r3, r3, #27
10001b34:	697a      	ldr	r2, [r7, #20]
10001b36:	4313      	orrs	r3, r2
10001b38:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
10001b3a:	697b      	ldr	r3, [r7, #20]
10001b3c:	4a16      	ldr	r2, [pc, #88]	; (10001b98 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
10001b3e:	4013      	ands	r3, r2
10001b40:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
10001b42:	687b      	ldr	r3, [r7, #4]
10001b44:	78db      	ldrb	r3, [r3, #3]
10001b46:	075b      	lsls	r3, r3, #29
10001b48:	697a      	ldr	r2, [r7, #20]
10001b4a:	4313      	orrs	r3, r2
10001b4c:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
10001b4e:	697b      	ldr	r3, [r7, #20]
10001b50:	22f0      	movs	r2, #240	; 0xf0
10001b52:	4393      	bics	r3, r2
10001b54:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
10001b56:	68bb      	ldr	r3, [r7, #8]
10001b58:	781b      	ldrb	r3, [r3, #0]
10001b5a:	011b      	lsls	r3, r3, #4
10001b5c:	697a      	ldr	r2, [r7, #20]
10001b5e:	4313      	orrs	r3, r2
10001b60:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
10001b62:	697b      	ldr	r3, [r7, #20]
10001b64:	4a0d      	ldr	r2, [pc, #52]	; (10001b9c <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
10001b66:	4013      	ands	r3, r2
10001b68:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
10001b6a:	687b      	ldr	r3, [r7, #4]
10001b6c:	781b      	ldrb	r3, [r3, #0]
10001b6e:	021b      	lsls	r3, r3, #8
10001b70:	697a      	ldr	r2, [r7, #20]
10001b72:	4313      	orrs	r3, r2
10001b74:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
10001b76:	68fb      	ldr	r3, [r7, #12]
10001b78:	697a      	ldr	r2, [r7, #20]
10001b7a:	601a      	str	r2, [r3, #0]
#endif
}
10001b7c:	46bd      	mov	sp, r7
10001b7e:	b006      	add	sp, #24
10001b80:	bd80      	pop	{r7, pc}
10001b82:	46c0      	nop			; (mov r8, r8)
10001b84:	fff3ffff 	.word	0xfff3ffff
10001b88:	ffcfffff 	.word	0xffcfffff
10001b8c:	ff7fffff 	.word	0xff7fffff
10001b90:	feffffff 	.word	0xfeffffff
10001b94:	e7ffffff 	.word	0xe7ffffff
10001b98:	9fffffff 	.word	0x9fffffff
10001b9c:	fffff0ff 	.word	0xfffff0ff

10001ba0 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
10001ba0:	b580      	push	{r7, lr}
10001ba2:	b088      	sub	sp, #32
10001ba4:	af00      	add	r7, sp, #0
10001ba6:	60f8      	str	r0, [r7, #12]
10001ba8:	607a      	str	r2, [r7, #4]
10001baa:	230b      	movs	r3, #11
10001bac:	18fb      	adds	r3, r7, r3
10001bae:	1c0a      	adds	r2, r1, #0
10001bb0:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
10001bb2:	231f      	movs	r3, #31
10001bb4:	18fb      	adds	r3, r7, r3
10001bb6:	220b      	movs	r2, #11
10001bb8:	18ba      	adds	r2, r7, r2
10001bba:	7812      	ldrb	r2, [r2, #0]
10001bbc:	3a01      	subs	r2, #1
10001bbe:	701a      	strb	r2, [r3, #0]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
10001bc0:	68fb      	ldr	r3, [r7, #12]
10001bc2:	681b      	ldr	r3, [r3, #0]
10001bc4:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
10001bc6:	231f      	movs	r3, #31
10001bc8:	18fb      	adds	r3, r7, r3
10001bca:	781b      	ldrb	r3, [r3, #0]
10001bcc:	18db      	adds	r3, r3, r3
10001bce:	b2da      	uxtb	r2, r3
10001bd0:	2317      	movs	r3, #23
10001bd2:	18fb      	adds	r3, r7, r3
10001bd4:	3210      	adds	r2, #16
10001bd6:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
10001bd8:	2317      	movs	r3, #23
10001bda:	18fb      	adds	r3, r7, r3
10001bdc:	781b      	ldrb	r3, [r3, #0]
10001bde:	2203      	movs	r2, #3
10001be0:	409a      	lsls	r2, r3
10001be2:	1c13      	adds	r3, r2, #0
10001be4:	43da      	mvns	r2, r3
10001be6:	69bb      	ldr	r3, [r7, #24]
10001be8:	4013      	ands	r3, r2
10001bea:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10001bec:	687b      	ldr	r3, [r7, #4]
10001bee:	785b      	ldrb	r3, [r3, #1]
10001bf0:	1c1a      	adds	r2, r3, #0
10001bf2:	2317      	movs	r3, #23
10001bf4:	18fb      	adds	r3, r7, r3
10001bf6:	781b      	ldrb	r3, [r3, #0]
10001bf8:	409a      	lsls	r2, r3
10001bfa:	1c13      	adds	r3, r2, #0
10001bfc:	69ba      	ldr	r2, [r7, #24]
10001bfe:	4313      	orrs	r3, r2
10001c00:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
10001c02:	2317      	movs	r3, #23
10001c04:	18fb      	adds	r3, r7, r3
10001c06:	221f      	movs	r2, #31
10001c08:	18ba      	adds	r2, r7, r2
10001c0a:	7812      	ldrb	r2, [r2, #0]
10001c0c:	3216      	adds	r2, #22
10001c0e:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001c10:	2317      	movs	r3, #23
10001c12:	18fb      	adds	r3, r7, r3
10001c14:	781b      	ldrb	r3, [r3, #0]
10001c16:	2201      	movs	r2, #1
10001c18:	409a      	lsls	r2, r3
10001c1a:	1c13      	adds	r3, r2, #0
10001c1c:	43da      	mvns	r2, r3
10001c1e:	69bb      	ldr	r3, [r7, #24]
10001c20:	4013      	ands	r3, r2
10001c22:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
10001c24:	687b      	ldr	r3, [r7, #4]
10001c26:	789b      	ldrb	r3, [r3, #2]
10001c28:	1c1a      	adds	r2, r3, #0
10001c2a:	2317      	movs	r3, #23
10001c2c:	18fb      	adds	r3, r7, r3
10001c2e:	781b      	ldrb	r3, [r3, #0]
10001c30:	409a      	lsls	r2, r3
10001c32:	1c13      	adds	r3, r2, #0
10001c34:	69ba      	ldr	r2, [r7, #24]
10001c36:	4313      	orrs	r3, r2
10001c38:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
10001c3a:	231f      	movs	r3, #31
10001c3c:	18fb      	adds	r3, r7, r3
10001c3e:	781b      	ldrb	r3, [r3, #0]
10001c40:	18db      	adds	r3, r3, r3
10001c42:	b2da      	uxtb	r2, r3
10001c44:	2317      	movs	r3, #23
10001c46:	18fb      	adds	r3, r7, r3
10001c48:	3219      	adds	r2, #25
10001c4a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001c4c:	2317      	movs	r3, #23
10001c4e:	18fb      	adds	r3, r7, r3
10001c50:	781b      	ldrb	r3, [r3, #0]
10001c52:	2203      	movs	r2, #3
10001c54:	409a      	lsls	r2, r3
10001c56:	1c13      	adds	r3, r2, #0
10001c58:	43da      	mvns	r2, r3
10001c5a:	69bb      	ldr	r3, [r7, #24]
10001c5c:	4013      	ands	r3, r2
10001c5e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	78db      	ldrb	r3, [r3, #3]
10001c64:	1c1a      	adds	r2, r3, #0
10001c66:	2317      	movs	r3, #23
10001c68:	18fb      	adds	r3, r7, r3
10001c6a:	781b      	ldrb	r3, [r3, #0]
10001c6c:	409a      	lsls	r2, r3
10001c6e:	1c13      	adds	r3, r2, #0
10001c70:	69ba      	ldr	r2, [r7, #24]
10001c72:	4313      	orrs	r3, r2
10001c74:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
10001c76:	2317      	movs	r3, #23
10001c78:	18fb      	adds	r3, r7, r3
10001c7a:	221f      	movs	r2, #31
10001c7c:	18ba      	adds	r2, r7, r2
10001c7e:	7812      	ldrb	r2, [r2, #0]
10001c80:	0092      	lsls	r2, r2, #2
10001c82:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001c84:	2317      	movs	r3, #23
10001c86:	18fb      	adds	r3, r7, r3
10001c88:	781b      	ldrb	r3, [r3, #0]
10001c8a:	220f      	movs	r2, #15
10001c8c:	409a      	lsls	r2, r3
10001c8e:	1c13      	adds	r3, r2, #0
10001c90:	43da      	mvns	r2, r3
10001c92:	69bb      	ldr	r3, [r7, #24]
10001c94:	4013      	ands	r3, r2
10001c96:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10001c98:	687b      	ldr	r3, [r7, #4]
10001c9a:	781b      	ldrb	r3, [r3, #0]
10001c9c:	1c1a      	adds	r2, r3, #0
10001c9e:	2317      	movs	r3, #23
10001ca0:	18fb      	adds	r3, r7, r3
10001ca2:	781b      	ldrb	r3, [r3, #0]
10001ca4:	409a      	lsls	r2, r3
10001ca6:	1c13      	adds	r3, r2, #0
10001ca8:	69ba      	ldr	r2, [r7, #24]
10001caa:	4313      	orrs	r3, r2
10001cac:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
10001cae:	68fb      	ldr	r3, [r7, #12]
10001cb0:	69ba      	ldr	r2, [r7, #24]
10001cb2:	601a      	str	r2, [r3, #0]
#endif
}
10001cb4:	46bd      	mov	sp, r7
10001cb6:	b008      	add	sp, #32
10001cb8:	bd80      	pop	{r7, pc}
10001cba:	46c0      	nop			; (mov r8, r8)

10001cbc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001cbc:	b580      	push	{r7, lr}
10001cbe:	b086      	sub	sp, #24
10001cc0:	af00      	add	r7, sp, #0
10001cc2:	6078      	str	r0, [r7, #4]
10001cc4:	1c08      	adds	r0, r1, #0
10001cc6:	1c11      	adds	r1, r2, #0
10001cc8:	1cfb      	adds	r3, r7, #3
10001cca:	1c02      	adds	r2, r0, #0
10001ccc:	701a      	strb	r2, [r3, #0]
10001cce:	1cbb      	adds	r3, r7, #2
10001cd0:	1c0a      	adds	r2, r1, #0
10001cd2:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001cd4:	1cfb      	adds	r3, r7, #3
10001cd6:	781b      	ldrb	r3, [r3, #0]
10001cd8:	2b0b      	cmp	r3, #11
10001cda:	d820      	bhi.n	10001d1e <XMC_CCU4_SLICE_SetInterruptNode+0x62>
10001cdc:	009a      	lsls	r2, r3, #2
10001cde:	4b20      	ldr	r3, [pc, #128]	; (10001d60 <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10001ce0:	18d3      	adds	r3, r2, r3
10001ce2:	681b      	ldr	r3, [r3, #0]
10001ce4:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001ce6:	2303      	movs	r3, #3
10001ce8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001cea:	2300      	movs	r3, #0
10001cec:	617b      	str	r3, [r7, #20]
      break;
10001cee:	e01b      	b.n	10001d28 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001cf0:	230c      	movs	r3, #12
10001cf2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001cf4:	2302      	movs	r3, #2
10001cf6:	617b      	str	r3, [r7, #20]
      break;
10001cf8:	e016      	b.n	10001d28 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001cfa:	23c0      	movs	r3, #192	; 0xc0
10001cfc:	009b      	lsls	r3, r3, #2
10001cfe:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001d00:	2308      	movs	r3, #8
10001d02:	617b      	str	r3, [r7, #20]
      break;
10001d04:	e010      	b.n	10001d28 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001d06:	23c0      	movs	r3, #192	; 0xc0
10001d08:	011b      	lsls	r3, r3, #4
10001d0a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001d0c:	230a      	movs	r3, #10
10001d0e:	617b      	str	r3, [r7, #20]
      break;
10001d10:	e00a      	b.n	10001d28 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001d12:	23c0      	movs	r3, #192	; 0xc0
10001d14:	019b      	lsls	r3, r3, #6
10001d16:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001d18:	230c      	movs	r3, #12
10001d1a:	617b      	str	r3, [r7, #20]
      break;
10001d1c:	e004      	b.n	10001d28 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
10001d1e:	2300      	movs	r3, #0
10001d20:	613b      	str	r3, [r7, #16]
	  pos = 0;
10001d22:	2300      	movs	r3, #0
10001d24:	617b      	str	r3, [r7, #20]
	  break;
10001d26:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001d28:	693b      	ldr	r3, [r7, #16]
10001d2a:	2b00      	cmp	r3, #0
10001d2c:	d014      	beq.n	10001d58 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
10001d2e:	687b      	ldr	r3, [r7, #4]
10001d30:	22a8      	movs	r2, #168	; 0xa8
10001d32:	589b      	ldr	r3, [r3, r2]
10001d34:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001d36:	693b      	ldr	r3, [r7, #16]
10001d38:	43da      	mvns	r2, r3
10001d3a:	68fb      	ldr	r3, [r7, #12]
10001d3c:	4013      	ands	r3, r2
10001d3e:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10001d40:	1cbb      	adds	r3, r7, #2
10001d42:	781a      	ldrb	r2, [r3, #0]
10001d44:	697b      	ldr	r3, [r7, #20]
10001d46:	409a      	lsls	r2, r3
10001d48:	1c13      	adds	r3, r2, #0
10001d4a:	68fa      	ldr	r2, [r7, #12]
10001d4c:	4313      	orrs	r3, r2
10001d4e:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10001d50:	687b      	ldr	r3, [r7, #4]
10001d52:	21a8      	movs	r1, #168	; 0xa8
10001d54:	68fa      	ldr	r2, [r7, #12]
10001d56:	505a      	str	r2, [r3, r1]
  }
}
10001d58:	46bd      	mov	sp, r7
10001d5a:	b006      	add	sp, #24
10001d5c:	bd80      	pop	{r7, pc}
10001d5e:	46c0      	nop			; (mov r8, r8)
10001d60:	10005d54 	.word	0x10005d54

10001d64 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001d64:	b580      	push	{r7, lr}
10001d66:	b082      	sub	sp, #8
10001d68:	af00      	add	r7, sp, #0
10001d6a:	6078      	str	r0, [r7, #4]
10001d6c:	1c08      	adds	r0, r1, #0
10001d6e:	1c11      	adds	r1, r2, #0
10001d70:	1cfb      	adds	r3, r7, #3
10001d72:	1c02      	adds	r2, r0, #0
10001d74:	701a      	strb	r2, [r3, #0]
10001d76:	1cbb      	adds	r3, r7, #2
10001d78:	1c0a      	adds	r2, r1, #0
10001d7a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001d7c:	687b      	ldr	r3, [r7, #4]
10001d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001d80:	1cfa      	adds	r2, r7, #3
10001d82:	7812      	ldrb	r2, [r2, #0]
10001d84:	0052      	lsls	r2, r2, #1
10001d86:	1c11      	adds	r1, r2, #0
10001d88:	2203      	movs	r2, #3
10001d8a:	408a      	lsls	r2, r1
10001d8c:	43d2      	mvns	r2, r2
10001d8e:	401a      	ands	r2, r3
10001d90:	687b      	ldr	r3, [r7, #4]
10001d92:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001d94:	687b      	ldr	r3, [r7, #4]
10001d96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001d98:	1cbb      	adds	r3, r7, #2
10001d9a:	781b      	ldrb	r3, [r3, #0]
10001d9c:	1cf9      	adds	r1, r7, #3
10001d9e:	7809      	ldrb	r1, [r1, #0]
10001da0:	0049      	lsls	r1, r1, #1
10001da2:	408b      	lsls	r3, r1
10001da4:	431a      	orrs	r2, r3
10001da6:	687b      	ldr	r3, [r7, #4]
10001da8:	675a      	str	r2, [r3, #116]	; 0x74
}
10001daa:	46bd      	mov	sp, r7
10001dac:	b002      	add	sp, #8
10001dae:	bd80      	pop	{r7, pc}

10001db0 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10001db0:	b580      	push	{r7, lr}
10001db2:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10001db4:	2001      	movs	r0, #1
10001db6:	f7ff fba3 	bl	10001500 <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10001dba:	46bd      	mov	sp, r7
10001dbc:	bd80      	pop	{r7, pc}
10001dbe:	46c0      	nop			; (mov r8, r8)

10001dc0 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10001dc0:	b580      	push	{r7, lr}
10001dc2:	b084      	sub	sp, #16
10001dc4:	af00      	add	r7, sp, #0
10001dc6:	6078      	str	r0, [r7, #4]
10001dc8:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10001dca:	f7ff fff1 	bl	10001db0 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10001dce:	683b      	ldr	r3, [r7, #0]
10001dd0:	691a      	ldr	r2, [r3, #16]
10001dd2:	687b      	ldr	r3, [r7, #4]
10001dd4:	601a      	str	r2, [r3, #0]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10001dd6:	683b      	ldr	r3, [r7, #0]
10001dd8:	685a      	ldr	r2, [r3, #4]
10001dda:	687b      	ldr	r3, [r7, #4]
10001ddc:	21a0      	movs	r1, #160	; 0xa0
10001dde:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10001de0:	683b      	ldr	r3, [r7, #0]
10001de2:	689a      	ldr	r2, [r3, #8]
10001de4:	687b      	ldr	r3, [r7, #4]
10001de6:	21a4      	movs	r1, #164	; 0xa4
10001de8:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
10001dea:	683b      	ldr	r3, [r7, #0]
10001dec:	68d9      	ldr	r1, [r3, #12]
10001dee:	687a      	ldr	r2, [r7, #4]
10001df0:	23a0      	movs	r3, #160	; 0xa0
10001df2:	009b      	lsls	r3, r3, #2
10001df4:	50d1      	str	r1, [r2, r3]

  /* Configure the SHS register that are needed for XMC11xx devices*/
#if (XMC_VADC_GROUP_AVAILABLE == 0U)

  /* Enabling the Analog part of the converter*/
  reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
10001df6:	4b09      	ldr	r3, [pc, #36]	; (10001e1c <XMC_VADC_GLOBAL_Init+0x5c>)
10001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001dfa:	2280      	movs	r2, #128	; 0x80
10001dfc:	0212      	lsls	r2, r2, #8
10001dfe:	4313      	orrs	r3, r2
10001e00:	60fb      	str	r3, [r7, #12]
  reg &= ~(SHS_SHSCFG_ANOFF_Msk);
10001e02:	68fb      	ldr	r3, [r7, #12]
10001e04:	4a06      	ldr	r2, [pc, #24]	; (10001e20 <XMC_VADC_GLOBAL_Init+0x60>)
10001e06:	4013      	ands	r3, r2
10001e08:	60fb      	str	r3, [r7, #12]
  SHS0->SHSCFG = reg;
10001e0a:	4b04      	ldr	r3, [pc, #16]	; (10001e1c <XMC_VADC_GLOBAL_Init+0x5c>)
10001e0c:	68fa      	ldr	r2, [r7, #12]
10001e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
10001e10:	4b04      	ldr	r3, [pc, #16]	; (10001e24 <XMC_VADC_GLOBAL_Init+0x64>)
10001e12:	2201      	movs	r2, #1
10001e14:	601a      	str	r2, [r3, #0]
#endif

}
10001e16:	46bd      	mov	sp, r7
10001e18:	b004      	add	sp, #16
10001e1a:	bd80      	pop	{r7, pc}
10001e1c:	48034000 	.word	0x48034000
10001e20:	ffffefff 	.word	0xffffefff
10001e24:	40010500 	.word	0x40010500

10001e28 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10001e28:	b580      	push	{r7, lr}
10001e2a:	b084      	sub	sp, #16
10001e2c:	af00      	add	r7, sp, #0
10001e2e:	60f8      	str	r0, [r7, #12]
10001e30:	60b9      	str	r1, [r7, #8]
10001e32:	603b      	str	r3, [r7, #0]
10001e34:	1dfb      	adds	r3, r7, #7
10001e36:	701a      	strb	r2, [r3, #0]
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
10001e38:	68bb      	ldr	r3, [r7, #8]
10001e3a:	4a05      	ldr	r2, [pc, #20]	; (10001e50 <XMC_VADC_GLOBAL_InputClassInit+0x28>)
10001e3c:	4013      	ands	r3, r2
10001e3e:	1c19      	adds	r1, r3, #0
10001e40:	68fb      	ldr	r3, [r7, #12]
10001e42:	683a      	ldr	r2, [r7, #0]
10001e44:	3228      	adds	r2, #40	; 0x28
10001e46:	0092      	lsls	r2, r2, #2
10001e48:	50d1      	str	r1, [r2, r3]
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
  }
#endif
}
10001e4a:	46bd      	mov	sp, r7
10001e4c:	b004      	add	sp, #16
10001e4e:	bd80      	pop	{r7, pc}
10001e50:	0000071f 	.word	0x0000071f

10001e54 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
10001e54:	b580      	push	{r7, lr}
10001e56:	b082      	sub	sp, #8
10001e58:	af00      	add	r7, sp, #0
10001e5a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10001e5c:	687b      	ldr	r3, [r7, #4]
10001e5e:	2280      	movs	r2, #128	; 0x80
10001e60:	589b      	ldr	r3, [r3, r2]
10001e62:	2280      	movs	r2, #128	; 0x80
10001e64:	0612      	lsls	r2, r2, #24
10001e66:	431a      	orrs	r2, r3
10001e68:	687b      	ldr	r3, [r7, #4]
10001e6a:	2180      	movs	r1, #128	; 0x80
10001e6c:	505a      	str	r2, [r3, r1]
    }
  }
#else

  /* Loop until calibration is started */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
10001e6e:	e000      	b.n	10001e72 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
  {
    __NOP();
10001e70:	46c0      	nop			; (mov r8, r8)
    }
  }
#else

  /* Loop until calibration is started */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
10001e72:	4b07      	ldr	r3, [pc, #28]	; (10001e90 <XMC_VADC_GLOBAL_StartupCalibration+0x3c>)
10001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001e76:	0f1b      	lsrs	r3, r3, #28
10001e78:	2b03      	cmp	r3, #3
10001e7a:	d1f9      	bne.n	10001e70 <XMC_VADC_GLOBAL_StartupCalibration+0x1c>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
  {
    __NOP();
  }
  /* Loop until it finishes calibration */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
10001e7c:	e000      	b.n	10001e80 <XMC_VADC_GLOBAL_StartupCalibration+0x2c>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
10001e7e:	46c0      	nop			; (mov r8, r8)
         XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
  {
    __NOP();
  }
  /* Loop until it finishes calibration */
  while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
10001e80:	4b03      	ldr	r3, [pc, #12]	; (10001e90 <XMC_VADC_GLOBAL_StartupCalibration+0x3c>)
10001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001e84:	0f1b      	lsrs	r3, r3, #28
10001e86:	2b03      	cmp	r3, #3
10001e88:	d0f9      	beq.n	10001e7e <XMC_VADC_GLOBAL_StartupCalibration+0x2a>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
10001e8a:	46bd      	mov	sp, r7
10001e8c:	b002      	add	sp, #8
10001e8e:	bd80      	pop	{r7, pc}
10001e90:	48034000 	.word	0x48034000

10001e94 <XMC_VADC_GLOBAL_SetResultEventInterruptNode>:
}
#endif

/* API to bind result event with a service request line */
void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
10001e94:	b580      	push	{r7, lr}
10001e96:	b084      	sub	sp, #16
10001e98:	af00      	add	r7, sp, #0
10001e9a:	6078      	str	r0, [r7, #4]
10001e9c:	1c0a      	adds	r2, r1, #0
10001e9e:	1cfb      	adds	r3, r7, #3
10001ea0:	701a      	strb	r2, [r3, #0]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHARED_SR3))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
10001ea2:	1cfb      	adds	r3, r7, #3
10001ea4:	781b      	ldrb	r3, [r3, #0]
10001ea6:	2b03      	cmp	r3, #3
10001ea8:	d904      	bls.n	10001eb4 <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x20>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
10001eaa:	1cfb      	adds	r3, r7, #3
10001eac:	781b      	ldrb	r3, [r3, #0]
10001eae:	3b04      	subs	r3, #4
10001eb0:	60fb      	str	r3, [r7, #12]
10001eb2:	e002      	b.n	10001eba <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x26>
  }
  else
  {
    node = (uint32_t)sr;
10001eb4:	1cfb      	adds	r3, r7, #3
10001eb6:	781b      	ldrb	r3, [r3, #0]
10001eb8:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
10001eba:	687a      	ldr	r2, [r7, #4]
10001ebc:	23a0      	movs	r3, #160	; 0xa0
10001ebe:	005b      	lsls	r3, r3, #1
10001ec0:	58d3      	ldr	r3, [r2, r3]
10001ec2:	4a0b      	ldr	r2, [pc, #44]	; (10001ef0 <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x5c>)
10001ec4:	4013      	ands	r3, r2
10001ec6:	1c19      	adds	r1, r3, #0
10001ec8:	687a      	ldr	r2, [r7, #4]
10001eca:	23a0      	movs	r3, #160	; 0xa0
10001ecc:	005b      	lsls	r3, r3, #1
10001ece:	50d1      	str	r1, [r2, r3]
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
10001ed0:	687a      	ldr	r2, [r7, #4]
10001ed2:	23a0      	movs	r3, #160	; 0xa0
10001ed4:	005b      	lsls	r3, r3, #1
10001ed6:	58d2      	ldr	r2, [r2, r3]
10001ed8:	68fb      	ldr	r3, [r7, #12]
10001eda:	041b      	lsls	r3, r3, #16
10001edc:	431a      	orrs	r2, r3
10001ede:	1c11      	adds	r1, r2, #0
10001ee0:	687a      	ldr	r2, [r7, #4]
10001ee2:	23a0      	movs	r3, #160	; 0xa0
10001ee4:	005b      	lsls	r3, r3, #1
10001ee6:	50d1      	str	r1, [r2, r3]
}
10001ee8:	46bd      	mov	sp, r7
10001eea:	b004      	add	sp, #16
10001eec:	bd80      	pop	{r7, pc}
10001eee:	46c0      	nop			; (mov r8, r8)
10001ef0:	fff0ffff 	.word	0xfff0ffff

10001ef4 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
10001ef4:	b580      	push	{r7, lr}
10001ef6:	b082      	sub	sp, #8
10001ef8:	af00      	add	r7, sp, #0
10001efa:	6078      	str	r0, [r7, #4]
10001efc:	6039      	str	r1, [r7, #0]

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
10001efe:	683b      	ldr	r3, [r7, #0]
10001f00:	685b      	ldr	r3, [r3, #4]
10001f02:	4a09      	ldr	r2, [pc, #36]	; (10001f28 <XMC_VADC_GLOBAL_BackgroundInit+0x34>)
10001f04:	431a      	orrs	r2, r3
10001f06:	1c11      	adds	r1, r2, #0
10001f08:	687a      	ldr	r2, [r7, #4]
10001f0a:	2380      	movs	r3, #128	; 0x80
10001f0c:	009b      	lsls	r3, r3, #2
10001f0e:	50d1      	str	r1, [r2, r3]

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
10001f10:	683b      	ldr	r3, [r7, #0]
10001f12:	689b      	ldr	r3, [r3, #8]
10001f14:	2201      	movs	r2, #1
10001f16:	431a      	orrs	r2, r3
10001f18:	1c11      	adds	r1, r2, #0
10001f1a:	687a      	ldr	r2, [r7, #4]
10001f1c:	2381      	movs	r3, #129	; 0x81
10001f1e:	009b      	lsls	r3, r3, #2
10001f20:	50d1      	str	r1, [r2, r3]
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
10001f22:	46bd      	mov	sp, r7
10001f24:	b002      	add	sp, #8
10001f26:	bd80      	pop	{r7, pc}
10001f28:	00808000 	.word	0x00808000

10001f2c <_init>:
  }
}

/* Init */
void _init(void)
{}
10001f2c:	b580      	push	{r7, lr}
10001f2e:	af00      	add	r7, sp, #0
10001f30:	46bd      	mov	sp, r7
10001f32:	bd80      	pop	{r7, pc}

10001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001f34:	b5b0      	push	{r4, r5, r7, lr}
10001f36:	b082      	sub	sp, #8
10001f38:	af00      	add	r7, sp, #0
10001f3a:	1c02      	adds	r2, r0, #0
10001f3c:	6039      	str	r1, [r7, #0]
10001f3e:	1dfb      	adds	r3, r7, #7
10001f40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10001f42:	1dfb      	adds	r3, r7, #7
10001f44:	781b      	ldrb	r3, [r3, #0]
10001f46:	2b7f      	cmp	r3, #127	; 0x7f
10001f48:	d827      	bhi.n	10001f9a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f4a:	4c2d      	ldr	r4, [pc, #180]	; (10002000 <__NVIC_SetPriority+0xcc>)
10001f4c:	1dfb      	adds	r3, r7, #7
10001f4e:	781b      	ldrb	r3, [r3, #0]
10001f50:	b25b      	sxtb	r3, r3
10001f52:	089b      	lsrs	r3, r3, #2
10001f54:	492a      	ldr	r1, [pc, #168]	; (10002000 <__NVIC_SetPriority+0xcc>)
10001f56:	1dfa      	adds	r2, r7, #7
10001f58:	7812      	ldrb	r2, [r2, #0]
10001f5a:	b252      	sxtb	r2, r2
10001f5c:	0892      	lsrs	r2, r2, #2
10001f5e:	32c0      	adds	r2, #192	; 0xc0
10001f60:	0092      	lsls	r2, r2, #2
10001f62:	5852      	ldr	r2, [r2, r1]
10001f64:	1df9      	adds	r1, r7, #7
10001f66:	7809      	ldrb	r1, [r1, #0]
10001f68:	1c08      	adds	r0, r1, #0
10001f6a:	2103      	movs	r1, #3
10001f6c:	4001      	ands	r1, r0
10001f6e:	00c9      	lsls	r1, r1, #3
10001f70:	1c08      	adds	r0, r1, #0
10001f72:	21ff      	movs	r1, #255	; 0xff
10001f74:	4081      	lsls	r1, r0
10001f76:	43c9      	mvns	r1, r1
10001f78:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001f7a:	683a      	ldr	r2, [r7, #0]
10001f7c:	0192      	lsls	r2, r2, #6
10001f7e:	20ff      	movs	r0, #255	; 0xff
10001f80:	4002      	ands	r2, r0
10001f82:	1df8      	adds	r0, r7, #7
10001f84:	7800      	ldrb	r0, [r0, #0]
10001f86:	1c05      	adds	r5, r0, #0
10001f88:	2003      	movs	r0, #3
10001f8a:	4028      	ands	r0, r5
10001f8c:	00c0      	lsls	r0, r0, #3
10001f8e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f90:	430a      	orrs	r2, r1
10001f92:	33c0      	adds	r3, #192	; 0xc0
10001f94:	009b      	lsls	r3, r3, #2
10001f96:	511a      	str	r2, [r3, r4]
10001f98:	e02e      	b.n	10001ff8 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f9a:	4c1a      	ldr	r4, [pc, #104]	; (10002004 <__NVIC_SetPriority+0xd0>)
10001f9c:	1dfb      	adds	r3, r7, #7
10001f9e:	781b      	ldrb	r3, [r3, #0]
10001fa0:	1c1a      	adds	r2, r3, #0
10001fa2:	230f      	movs	r3, #15
10001fa4:	4013      	ands	r3, r2
10001fa6:	3b08      	subs	r3, #8
10001fa8:	0899      	lsrs	r1, r3, #2
10001faa:	4a16      	ldr	r2, [pc, #88]	; (10002004 <__NVIC_SetPriority+0xd0>)
10001fac:	1dfb      	adds	r3, r7, #7
10001fae:	781b      	ldrb	r3, [r3, #0]
10001fb0:	1c18      	adds	r0, r3, #0
10001fb2:	230f      	movs	r3, #15
10001fb4:	4003      	ands	r3, r0
10001fb6:	3b08      	subs	r3, #8
10001fb8:	089b      	lsrs	r3, r3, #2
10001fba:	3306      	adds	r3, #6
10001fbc:	009b      	lsls	r3, r3, #2
10001fbe:	18d3      	adds	r3, r2, r3
10001fc0:	685b      	ldr	r3, [r3, #4]
10001fc2:	1dfa      	adds	r2, r7, #7
10001fc4:	7812      	ldrb	r2, [r2, #0]
10001fc6:	1c10      	adds	r0, r2, #0
10001fc8:	2203      	movs	r2, #3
10001fca:	4002      	ands	r2, r0
10001fcc:	00d2      	lsls	r2, r2, #3
10001fce:	1c10      	adds	r0, r2, #0
10001fd0:	22ff      	movs	r2, #255	; 0xff
10001fd2:	4082      	lsls	r2, r0
10001fd4:	43d2      	mvns	r2, r2
10001fd6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001fd8:	683b      	ldr	r3, [r7, #0]
10001fda:	019b      	lsls	r3, r3, #6
10001fdc:	20ff      	movs	r0, #255	; 0xff
10001fde:	4003      	ands	r3, r0
10001fe0:	1df8      	adds	r0, r7, #7
10001fe2:	7800      	ldrb	r0, [r0, #0]
10001fe4:	1c05      	adds	r5, r0, #0
10001fe6:	2003      	movs	r0, #3
10001fe8:	4028      	ands	r0, r5
10001fea:	00c0      	lsls	r0, r0, #3
10001fec:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001fee:	431a      	orrs	r2, r3
10001ff0:	1d8b      	adds	r3, r1, #6
10001ff2:	009b      	lsls	r3, r3, #2
10001ff4:	18e3      	adds	r3, r4, r3
10001ff6:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10001ff8:	46bd      	mov	sp, r7
10001ffa:	b002      	add	sp, #8
10001ffc:	bdb0      	pop	{r4, r5, r7, pc}
10001ffe:	46c0      	nop			; (mov r8, r8)
10002000:	e000e100 	.word	0xe000e100
10002004:	e000ed00 	.word	0xe000ed00

10002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002008:	b580      	push	{r7, lr}
1000200a:	b082      	sub	sp, #8
1000200c:	af00      	add	r7, sp, #0
1000200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002010:	687b      	ldr	r3, [r7, #4]
10002012:	3b01      	subs	r3, #1
10002014:	4a0c      	ldr	r2, [pc, #48]	; (10002048 <SysTick_Config+0x40>)
10002016:	4293      	cmp	r3, r2
10002018:	d901      	bls.n	1000201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000201a:	2301      	movs	r3, #1
1000201c:	e010      	b.n	10002040 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000201e:	4b0b      	ldr	r3, [pc, #44]	; (1000204c <SysTick_Config+0x44>)
10002020:	687a      	ldr	r2, [r7, #4]
10002022:	3a01      	subs	r2, #1
10002024:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10002026:	2301      	movs	r3, #1
10002028:	425b      	negs	r3, r3
1000202a:	1c18      	adds	r0, r3, #0
1000202c:	2103      	movs	r1, #3
1000202e:	f7ff ff81 	bl	10001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10002032:	4b06      	ldr	r3, [pc, #24]	; (1000204c <SysTick_Config+0x44>)
10002034:	2200      	movs	r2, #0
10002036:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002038:	4b04      	ldr	r3, [pc, #16]	; (1000204c <SysTick_Config+0x44>)
1000203a:	2207      	movs	r2, #7
1000203c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000203e:	2300      	movs	r3, #0
}
10002040:	1c18      	adds	r0, r3, #0
10002042:	46bd      	mov	sp, r7
10002044:	b002      	add	sp, #8
10002046:	bd80      	pop	{r7, pc}
10002048:	00ffffff 	.word	0x00ffffff
1000204c:	e000e010 	.word	0xe000e010

10002050 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
10002050:	b590      	push	{r4, r7, lr}
10002052:	b087      	sub	sp, #28
10002054:	af00      	add	r7, sp, #0
10002056:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
10002058:	230f      	movs	r3, #15
1000205a:	18fb      	adds	r3, r7, r3
1000205c:	2200      	movs	r2, #0
1000205e:	701a      	strb	r2, [r3, #0]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
10002060:	496b      	ldr	r1, [pc, #428]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002062:	687a      	ldr	r2, [r7, #4]
10002064:	1c13      	adds	r3, r2, #0
10002066:	00db      	lsls	r3, r3, #3
10002068:	189b      	adds	r3, r3, r2
1000206a:	009b      	lsls	r3, r3, #2
1000206c:	18cb      	adds	r3, r1, r3
1000206e:	3318      	adds	r3, #24
10002070:	681b      	ldr	r3, [r3, #0]
10002072:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
10002074:	4b67      	ldr	r3, [pc, #412]	; (10002214 <SYSTIMER_lInsertTimerList+0x1c4>)
10002076:	681b      	ldr	r3, [r3, #0]
10002078:	2b00      	cmp	r3, #0
1000207a:	d109      	bne.n	10002090 <SYSTIMER_lInsertTimerList+0x40>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
1000207c:	687a      	ldr	r2, [r7, #4]
1000207e:	1c13      	adds	r3, r2, #0
10002080:	00db      	lsls	r3, r3, #3
10002082:	189b      	adds	r3, r3, r2
10002084:	009b      	lsls	r3, r3, #2
10002086:	4a62      	ldr	r2, [pc, #392]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002088:	189a      	adds	r2, r3, r2
1000208a:	4b62      	ldr	r3, [pc, #392]	; (10002214 <SYSTIMER_lInsertTimerList+0x1c4>)
1000208c:	601a      	str	r2, [r3, #0]
1000208e:	e0bc      	b.n	1000220a <SYSTIMER_lInsertTimerList+0x1ba>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
10002090:	4b60      	ldr	r3, [pc, #384]	; (10002214 <SYSTIMER_lInsertTimerList+0x1c4>)
10002092:	681b      	ldr	r3, [r3, #0]
10002094:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
10002096:	68bb      	ldr	r3, [r7, #8]
10002098:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
1000209a:	e0aa      	b.n	100021f2 <SYSTIMER_lInsertTimerList+0x1a2>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
1000209c:	697b      	ldr	r3, [r7, #20]
1000209e:	699b      	ldr	r3, [r3, #24]
100020a0:	1c1a      	adds	r2, r3, #0
100020a2:	693b      	ldr	r3, [r7, #16]
100020a4:	1a9b      	subs	r3, r3, r2
100020a6:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
100020a8:	693b      	ldr	r3, [r7, #16]
100020aa:	2b00      	cmp	r3, #0
100020ac:	dc77      	bgt.n	1000219e <SYSTIMER_lInsertTimerList+0x14e>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
100020ae:	697b      	ldr	r3, [r7, #20]
100020b0:	685b      	ldr	r3, [r3, #4]
100020b2:	2b00      	cmp	r3, #0
100020b4:	d025      	beq.n	10002102 <SYSTIMER_lInsertTimerList+0xb2>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
100020b6:	697b      	ldr	r3, [r7, #20]
100020b8:	685a      	ldr	r2, [r3, #4]
100020ba:	6879      	ldr	r1, [r7, #4]
100020bc:	1c0b      	adds	r3, r1, #0
100020be:	00db      	lsls	r3, r3, #3
100020c0:	185b      	adds	r3, r3, r1
100020c2:	009b      	lsls	r3, r3, #2
100020c4:	4952      	ldr	r1, [pc, #328]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100020c6:	185b      	adds	r3, r3, r1
100020c8:	6013      	str	r3, [r2, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
100020ca:	697b      	ldr	r3, [r7, #20]
100020cc:	6859      	ldr	r1, [r3, #4]
100020ce:	4850      	ldr	r0, [pc, #320]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100020d0:	687a      	ldr	r2, [r7, #4]
100020d2:	1c13      	adds	r3, r2, #0
100020d4:	00db      	lsls	r3, r3, #3
100020d6:	189b      	adds	r3, r3, r2
100020d8:	009b      	lsls	r3, r3, #2
100020da:	18c3      	adds	r3, r0, r3
100020dc:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
100020de:	494c      	ldr	r1, [pc, #304]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100020e0:	687a      	ldr	r2, [r7, #4]
100020e2:	1c13      	adds	r3, r2, #0
100020e4:	00db      	lsls	r3, r3, #3
100020e6:	189b      	adds	r3, r3, r2
100020e8:	009b      	lsls	r3, r3, #2
100020ea:	697a      	ldr	r2, [r7, #20]
100020ec:	505a      	str	r2, [r3, r1]
          object_ptr->prev = &g_timer_tbl[tbl_index];
100020ee:	687a      	ldr	r2, [r7, #4]
100020f0:	1c13      	adds	r3, r2, #0
100020f2:	00db      	lsls	r3, r3, #3
100020f4:	189b      	adds	r3, r3, r2
100020f6:	009b      	lsls	r3, r3, #2
100020f8:	4a45      	ldr	r2, [pc, #276]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100020fa:	189a      	adds	r2, r3, r2
100020fc:	697b      	ldr	r3, [r7, #20]
100020fe:	605a      	str	r2, [r3, #4]
10002100:	e01b      	b.n	1000213a <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
10002102:	4b44      	ldr	r3, [pc, #272]	; (10002214 <SYSTIMER_lInsertTimerList+0x1c4>)
10002104:	6818      	ldr	r0, [r3, #0]
10002106:	4942      	ldr	r1, [pc, #264]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002108:	687a      	ldr	r2, [r7, #4]
1000210a:	1c13      	adds	r3, r2, #0
1000210c:	00db      	lsls	r3, r3, #3
1000210e:	189b      	adds	r3, r3, r2
10002110:	009b      	lsls	r3, r3, #2
10002112:	5058      	str	r0, [r3, r1]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
10002114:	4b3f      	ldr	r3, [pc, #252]	; (10002214 <SYSTIMER_lInsertTimerList+0x1c4>)
10002116:	681a      	ldr	r2, [r3, #0]
10002118:	6879      	ldr	r1, [r7, #4]
1000211a:	1c0b      	adds	r3, r1, #0
1000211c:	00db      	lsls	r3, r3, #3
1000211e:	185b      	adds	r3, r3, r1
10002120:	009b      	lsls	r3, r3, #2
10002122:	493b      	ldr	r1, [pc, #236]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002124:	185b      	adds	r3, r3, r1
10002126:	6053      	str	r3, [r2, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
10002128:	687a      	ldr	r2, [r7, #4]
1000212a:	1c13      	adds	r3, r2, #0
1000212c:	00db      	lsls	r3, r3, #3
1000212e:	189b      	adds	r3, r3, r2
10002130:	009b      	lsls	r3, r3, #2
10002132:	4a37      	ldr	r2, [pc, #220]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002134:	189a      	adds	r2, r3, r2
10002136:	4b37      	ldr	r3, [pc, #220]	; (10002214 <SYSTIMER_lInsertTimerList+0x1c4>)
10002138:	601a      	str	r2, [r3, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
1000213a:	4935      	ldr	r1, [pc, #212]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
1000213c:	687a      	ldr	r2, [r7, #4]
1000213e:	1c13      	adds	r3, r2, #0
10002140:	00db      	lsls	r3, r3, #3
10002142:	189b      	adds	r3, r3, r2
10002144:	009b      	lsls	r3, r3, #2
10002146:	585b      	ldr	r3, [r3, r1]
10002148:	699a      	ldr	r2, [r3, #24]
1000214a:	693b      	ldr	r3, [r7, #16]
1000214c:	18d1      	adds	r1, r2, r3
1000214e:	4830      	ldr	r0, [pc, #192]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002150:	687a      	ldr	r2, [r7, #4]
10002152:	1c13      	adds	r3, r2, #0
10002154:	00db      	lsls	r3, r3, #3
10002156:	189b      	adds	r3, r3, r2
10002158:	009b      	lsls	r3, r3, #2
1000215a:	18c3      	adds	r3, r0, r3
1000215c:	3318      	adds	r3, #24
1000215e:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
10002160:	492b      	ldr	r1, [pc, #172]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002162:	687a      	ldr	r2, [r7, #4]
10002164:	1c13      	adds	r3, r2, #0
10002166:	00db      	lsls	r3, r3, #3
10002168:	189b      	adds	r3, r3, r2
1000216a:	009b      	lsls	r3, r3, #2
1000216c:	585a      	ldr	r2, [r3, r1]
1000216e:	4828      	ldr	r0, [pc, #160]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002170:	6879      	ldr	r1, [r7, #4]
10002172:	1c0b      	adds	r3, r1, #0
10002174:	00db      	lsls	r3, r3, #3
10002176:	185b      	adds	r3, r3, r1
10002178:	009b      	lsls	r3, r3, #2
1000217a:	581b      	ldr	r3, [r3, r0]
1000217c:	6998      	ldr	r0, [r3, #24]
1000217e:	4c24      	ldr	r4, [pc, #144]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
10002180:	6879      	ldr	r1, [r7, #4]
10002182:	1c0b      	adds	r3, r1, #0
10002184:	00db      	lsls	r3, r3, #3
10002186:	185b      	adds	r3, r3, r1
10002188:	009b      	lsls	r3, r3, #2
1000218a:	18e3      	adds	r3, r4, r3
1000218c:	3318      	adds	r3, #24
1000218e:	681b      	ldr	r3, [r3, #0]
10002190:	1ac3      	subs	r3, r0, r3
10002192:	6193      	str	r3, [r2, #24]
        found_flag = true;
10002194:	230f      	movs	r3, #15
10002196:	18fb      	adds	r3, r7, r3
10002198:	2201      	movs	r2, #1
1000219a:	701a      	strb	r2, [r3, #0]
1000219c:	e026      	b.n	100021ec <SYSTIMER_lInsertTimerList+0x19c>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
1000219e:	693b      	ldr	r3, [r7, #16]
100021a0:	2b00      	cmp	r3, #0
100021a2:	dd23      	ble.n	100021ec <SYSTIMER_lInsertTimerList+0x19c>
100021a4:	697b      	ldr	r3, [r7, #20]
100021a6:	681b      	ldr	r3, [r3, #0]
100021a8:	2b00      	cmp	r3, #0
100021aa:	d11f      	bne.n	100021ec <SYSTIMER_lInsertTimerList+0x19c>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
100021ac:	4918      	ldr	r1, [pc, #96]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100021ae:	687a      	ldr	r2, [r7, #4]
100021b0:	1c13      	adds	r3, r2, #0
100021b2:	00db      	lsls	r3, r3, #3
100021b4:	189b      	adds	r3, r3, r2
100021b6:	009b      	lsls	r3, r3, #2
100021b8:	18cb      	adds	r3, r1, r3
100021ba:	697a      	ldr	r2, [r7, #20]
100021bc:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
100021be:	687a      	ldr	r2, [r7, #4]
100021c0:	1c13      	adds	r3, r2, #0
100021c2:	00db      	lsls	r3, r3, #3
100021c4:	189b      	adds	r3, r3, r2
100021c6:	009b      	lsls	r3, r3, #2
100021c8:	4a11      	ldr	r2, [pc, #68]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100021ca:	189a      	adds	r2, r3, r2
100021cc:	697b      	ldr	r3, [r7, #20]
100021ce:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
100021d0:	6939      	ldr	r1, [r7, #16]
100021d2:	480f      	ldr	r0, [pc, #60]	; (10002210 <SYSTIMER_lInsertTimerList+0x1c0>)
100021d4:	687a      	ldr	r2, [r7, #4]
100021d6:	1c13      	adds	r3, r2, #0
100021d8:	00db      	lsls	r3, r3, #3
100021da:	189b      	adds	r3, r3, r2
100021dc:	009b      	lsls	r3, r3, #2
100021de:	18c3      	adds	r3, r0, r3
100021e0:	3318      	adds	r3, #24
100021e2:	6019      	str	r1, [r3, #0]
          found_flag = true;
100021e4:	230f      	movs	r3, #15
100021e6:	18fb      	adds	r3, r7, r3
100021e8:	2201      	movs	r2, #1
100021ea:	701a      	strb	r2, [r3, #0]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
100021ec:	697b      	ldr	r3, [r7, #20]
100021ee:	681b      	ldr	r3, [r3, #0]
100021f0:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
100021f2:	697b      	ldr	r3, [r7, #20]
100021f4:	2b00      	cmp	r3, #0
100021f6:	d008      	beq.n	1000220a <SYSTIMER_lInsertTimerList+0x1ba>
100021f8:	230f      	movs	r3, #15
100021fa:	18fb      	adds	r3, r7, r3
100021fc:	781b      	ldrb	r3, [r3, #0]
100021fe:	2201      	movs	r2, #1
10002200:	4053      	eors	r3, r2
10002202:	b2db      	uxtb	r3, r3
10002204:	2b00      	cmp	r3, #0
10002206:	d000      	beq.n	1000220a <SYSTIMER_lInsertTimerList+0x1ba>
10002208:	e748      	b.n	1000209c <SYSTIMER_lInsertTimerList+0x4c>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
1000220a:	46bd      	mov	sp, r7
1000220c:	b007      	add	sp, #28
1000220e:	bd90      	pop	{r4, r7, pc}
10002210:	20000628 	.word	0x20000628
10002214:	200005c0 	.word	0x200005c0

10002218 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
10002218:	b580      	push	{r7, lr}
1000221a:	b084      	sub	sp, #16
1000221c:	af00      	add	r7, sp, #0
1000221e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
10002220:	687a      	ldr	r2, [r7, #4]
10002222:	1c13      	adds	r3, r2, #0
10002224:	00db      	lsls	r3, r3, #3
10002226:	189b      	adds	r3, r3, r2
10002228:	009b      	lsls	r3, r3, #2
1000222a:	4a28      	ldr	r2, [pc, #160]	; (100022cc <SYSTIMER_lRemoveTimerList+0xb4>)
1000222c:	189b      	adds	r3, r3, r2
1000222e:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
10002230:	68fb      	ldr	r3, [r7, #12]
10002232:	685b      	ldr	r3, [r3, #4]
10002234:	2b00      	cmp	r3, #0
10002236:	d107      	bne.n	10002248 <SYSTIMER_lRemoveTimerList+0x30>
10002238:	68fb      	ldr	r3, [r7, #12]
1000223a:	681b      	ldr	r3, [r3, #0]
1000223c:	2b00      	cmp	r3, #0
1000223e:	d103      	bne.n	10002248 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
10002240:	4b23      	ldr	r3, [pc, #140]	; (100022d0 <SYSTIMER_lRemoveTimerList+0xb8>)
10002242:	2200      	movs	r2, #0
10002244:	601a      	str	r2, [r3, #0]
10002246:	e03d      	b.n	100022c4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
10002248:	68fb      	ldr	r3, [r7, #12]
1000224a:	685b      	ldr	r3, [r3, #4]
1000224c:	2b00      	cmp	r3, #0
1000224e:	d114      	bne.n	1000227a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
10002250:	68fb      	ldr	r3, [r7, #12]
10002252:	681a      	ldr	r2, [r3, #0]
10002254:	4b1e      	ldr	r3, [pc, #120]	; (100022d0 <SYSTIMER_lRemoveTimerList+0xb8>)
10002256:	601a      	str	r2, [r3, #0]
    g_timer_list->prev = NULL;
10002258:	4b1d      	ldr	r3, [pc, #116]	; (100022d0 <SYSTIMER_lRemoveTimerList+0xb8>)
1000225a:	681b      	ldr	r3, [r3, #0]
1000225c:	2200      	movs	r2, #0
1000225e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
10002260:	4b1b      	ldr	r3, [pc, #108]	; (100022d0 <SYSTIMER_lRemoveTimerList+0xb8>)
10002262:	681b      	ldr	r3, [r3, #0]
10002264:	4a1a      	ldr	r2, [pc, #104]	; (100022d0 <SYSTIMER_lRemoveTimerList+0xb8>)
10002266:	6812      	ldr	r2, [r2, #0]
10002268:	6991      	ldr	r1, [r2, #24]
1000226a:	68fa      	ldr	r2, [r7, #12]
1000226c:	6992      	ldr	r2, [r2, #24]
1000226e:	188a      	adds	r2, r1, r2
10002270:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
10002272:	68fb      	ldr	r3, [r7, #12]
10002274:	2200      	movs	r2, #0
10002276:	601a      	str	r2, [r3, #0]
10002278:	e024      	b.n	100022c4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
1000227a:	68fb      	ldr	r3, [r7, #12]
1000227c:	681b      	ldr	r3, [r3, #0]
1000227e:	2b00      	cmp	r3, #0
10002280:	d107      	bne.n	10002292 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
10002282:	68fb      	ldr	r3, [r7, #12]
10002284:	685b      	ldr	r3, [r3, #4]
10002286:	2200      	movs	r2, #0
10002288:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
1000228a:	68fb      	ldr	r3, [r7, #12]
1000228c:	2200      	movs	r2, #0
1000228e:	605a      	str	r2, [r3, #4]
10002290:	e018      	b.n	100022c4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
10002292:	68fb      	ldr	r3, [r7, #12]
10002294:	685b      	ldr	r3, [r3, #4]
10002296:	68fa      	ldr	r2, [r7, #12]
10002298:	6812      	ldr	r2, [r2, #0]
1000229a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
1000229c:	68fb      	ldr	r3, [r7, #12]
1000229e:	681b      	ldr	r3, [r3, #0]
100022a0:	68fa      	ldr	r2, [r7, #12]
100022a2:	6852      	ldr	r2, [r2, #4]
100022a4:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
100022a6:	68fb      	ldr	r3, [r7, #12]
100022a8:	681b      	ldr	r3, [r3, #0]
100022aa:	68fa      	ldr	r2, [r7, #12]
100022ac:	6812      	ldr	r2, [r2, #0]
100022ae:	6991      	ldr	r1, [r2, #24]
100022b0:	68fa      	ldr	r2, [r7, #12]
100022b2:	6992      	ldr	r2, [r2, #24]
100022b4:	188a      	adds	r2, r1, r2
100022b6:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
100022b8:	68fb      	ldr	r3, [r7, #12]
100022ba:	2200      	movs	r2, #0
100022bc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
100022be:	68fb      	ldr	r3, [r7, #12]
100022c0:	2200      	movs	r2, #0
100022c2:	605a      	str	r2, [r3, #4]
  }
}
100022c4:	46bd      	mov	sp, r7
100022c6:	b004      	add	sp, #16
100022c8:	bd80      	pop	{r7, pc}
100022ca:	46c0      	nop			; (mov r8, r8)
100022cc:	20000628 	.word	0x20000628
100022d0:	200005c0 	.word	0x200005c0

100022d4 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
100022d4:	b580      	push	{r7, lr}
100022d6:	b082      	sub	sp, #8
100022d8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
100022da:	4b2f      	ldr	r3, [pc, #188]	; (10002398 <SYSTIMER_lTimerHandler+0xc4>)
100022dc:	681b      	ldr	r3, [r3, #0]
100022de:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
100022e0:	e050      	b.n	10002384 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
100022e2:	687b      	ldr	r3, [r7, #4]
100022e4:	2220      	movs	r2, #32
100022e6:	5c9b      	ldrb	r3, [r3, r2]
100022e8:	2b00      	cmp	r3, #0
100022ea:	d013      	beq.n	10002314 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
100022ec:	687b      	ldr	r3, [r7, #4]
100022ee:	695b      	ldr	r3, [r3, #20]
100022f0:	1c18      	adds	r0, r3, #0
100022f2:	f7ff ff91 	bl	10002218 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
100022f6:	687b      	ldr	r3, [r7, #4]
100022f8:	2200      	movs	r2, #0
100022fa:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
100022fc:	687b      	ldr	r3, [r7, #4]
100022fe:	695b      	ldr	r3, [r3, #20]
10002300:	1c1a      	adds	r2, r3, #0
10002302:	2301      	movs	r3, #1
10002304:	4093      	lsls	r3, r2
10002306:	43da      	mvns	r2, r3
10002308:	4b24      	ldr	r3, [pc, #144]	; (1000239c <SYSTIMER_lTimerHandler+0xc8>)
1000230a:	681b      	ldr	r3, [r3, #0]
1000230c:	401a      	ands	r2, r3
1000230e:	4b23      	ldr	r3, [pc, #140]	; (1000239c <SYSTIMER_lTimerHandler+0xc8>)
10002310:	601a      	str	r2, [r3, #0]
10002312:	e034      	b.n	1000237e <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
10002314:	687b      	ldr	r3, [r7, #4]
10002316:	7b1b      	ldrb	r3, [r3, #12]
10002318:	2b00      	cmp	r3, #0
1000231a:	d112      	bne.n	10002342 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	7b5b      	ldrb	r3, [r3, #13]
10002320:	2b01      	cmp	r3, #1
10002322:	d12c      	bne.n	1000237e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10002324:	687b      	ldr	r3, [r7, #4]
10002326:	695b      	ldr	r3, [r3, #20]
10002328:	1c18      	adds	r0, r3, #0
1000232a:	f7ff ff75 	bl	10002218 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
1000232e:	687b      	ldr	r3, [r7, #4]
10002330:	2202      	movs	r2, #2
10002332:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
10002334:	687b      	ldr	r3, [r7, #4]
10002336:	689a      	ldr	r2, [r3, #8]
10002338:	687b      	ldr	r3, [r7, #4]
1000233a:	691b      	ldr	r3, [r3, #16]
1000233c:	1c18      	adds	r0, r3, #0
1000233e:	4790      	blx	r2
10002340:	e01d      	b.n	1000237e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	7b1b      	ldrb	r3, [r3, #12]
10002346:	2b01      	cmp	r3, #1
10002348:	d118      	bne.n	1000237c <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
1000234a:	687b      	ldr	r3, [r7, #4]
1000234c:	7b5b      	ldrb	r3, [r3, #13]
1000234e:	2b01      	cmp	r3, #1
10002350:	d115      	bne.n	1000237e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	695b      	ldr	r3, [r3, #20]
10002356:	1c18      	adds	r0, r3, #0
10002358:	f7ff ff5e 	bl	10002218 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
1000235c:	687b      	ldr	r3, [r7, #4]
1000235e:	69da      	ldr	r2, [r3, #28]
10002360:	687b      	ldr	r3, [r7, #4]
10002362:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
10002364:	687b      	ldr	r3, [r7, #4]
10002366:	695b      	ldr	r3, [r3, #20]
10002368:	1c18      	adds	r0, r3, #0
1000236a:	f7ff fe71 	bl	10002050 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
1000236e:	687b      	ldr	r3, [r7, #4]
10002370:	689a      	ldr	r2, [r3, #8]
10002372:	687b      	ldr	r3, [r7, #4]
10002374:	691b      	ldr	r3, [r3, #16]
10002376:	1c18      	adds	r0, r3, #0
10002378:	4790      	blx	r2
1000237a:	e000      	b.n	1000237e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
1000237c:	e009      	b.n	10002392 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
1000237e:	4b06      	ldr	r3, [pc, #24]	; (10002398 <SYSTIMER_lTimerHandler+0xc4>)
10002380:	681b      	ldr	r3, [r3, #0]
10002382:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
10002384:	687b      	ldr	r3, [r7, #4]
10002386:	2b00      	cmp	r3, #0
10002388:	d003      	beq.n	10002392 <SYSTIMER_lTimerHandler+0xbe>
1000238a:	687b      	ldr	r3, [r7, #4]
1000238c:	699b      	ldr	r3, [r3, #24]
1000238e:	2b00      	cmp	r3, #0
10002390:	d0a7      	beq.n	100022e2 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
10002392:	46bd      	mov	sp, r7
10002394:	b002      	add	sp, #8
10002396:	bd80      	pop	{r7, pc}
10002398:	200005c0 	.word	0x200005c0
1000239c:	200005c4 	.word	0x200005c4

100023a0 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
100023a0:	b580      	push	{r7, lr}
100023a2:	b082      	sub	sp, #8
100023a4:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
100023a6:	4b0e      	ldr	r3, [pc, #56]	; (100023e0 <SysTick_Handler+0x40>)
100023a8:	681b      	ldr	r3, [r3, #0]
100023aa:	607b      	str	r3, [r7, #4]
  g_systick_count++;
100023ac:	4b0d      	ldr	r3, [pc, #52]	; (100023e4 <SysTick_Handler+0x44>)
100023ae:	681b      	ldr	r3, [r3, #0]
100023b0:	1c5a      	adds	r2, r3, #1
100023b2:	4b0c      	ldr	r3, [pc, #48]	; (100023e4 <SysTick_Handler+0x44>)
100023b4:	601a      	str	r2, [r3, #0]

  if (NULL != object_ptr)
100023b6:	687b      	ldr	r3, [r7, #4]
100023b8:	2b00      	cmp	r3, #0
100023ba:	d00e      	beq.n	100023da <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
100023bc:	687b      	ldr	r3, [r7, #4]
100023be:	699b      	ldr	r3, [r3, #24]
100023c0:	2b01      	cmp	r3, #1
100023c2:	d905      	bls.n	100023d0 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
100023c4:	687b      	ldr	r3, [r7, #4]
100023c6:	699b      	ldr	r3, [r3, #24]
100023c8:	1e5a      	subs	r2, r3, #1
100023ca:	687b      	ldr	r3, [r7, #4]
100023cc:	619a      	str	r2, [r3, #24]
100023ce:	e004      	b.n	100023da <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
100023d0:	687b      	ldr	r3, [r7, #4]
100023d2:	2200      	movs	r2, #0
100023d4:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
100023d6:	f7ff ff7d 	bl	100022d4 <SYSTIMER_lTimerHandler>
    }
  }
}
100023da:	46bd      	mov	sp, r7
100023dc:	b002      	add	sp, #8
100023de:	bd80      	pop	{r7, pc}
100023e0:	200005c0 	.word	0x200005c0
100023e4:	200005c8 	.word	0x200005c8

100023e8 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
100023e8:	b580      	push	{r7, lr}
100023ea:	b084      	sub	sp, #16
100023ec:	af00      	add	r7, sp, #0
100023ee:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
100023f0:	230f      	movs	r3, #15
100023f2:	18fb      	adds	r3, r7, r3
100023f4:	2200      	movs	r2, #0
100023f6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
100023f8:	687b      	ldr	r3, [r7, #4]
100023fa:	781b      	ldrb	r3, [r3, #0]
100023fc:	2201      	movs	r2, #1
100023fe:	4053      	eors	r3, r2
10002400:	b2db      	uxtb	r3, r3
10002402:	2b00      	cmp	r3, #0
10002404:	d020      	beq.n	10002448 <SYSTIMER_Init+0x60>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
10002406:	4b14      	ldr	r3, [pc, #80]	; (10002458 <SYSTIMER_Init+0x70>)
10002408:	2200      	movs	r2, #0
1000240a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
1000240c:	23fa      	movs	r3, #250	; 0xfa
1000240e:	01db      	lsls	r3, r3, #7
10002410:	1c18      	adds	r0, r3, #0
10002412:	f7ff fdf9 	bl	10002008 <SysTick_Config>
10002416:	1c02      	adds	r2, r0, #0
10002418:	230f      	movs	r3, #15
1000241a:	18fb      	adds	r3, r7, r3
1000241c:	701a      	strb	r2, [r3, #0]

    if (SYSTIMER_STATUS_FAILURE == status)
1000241e:	230f      	movs	r3, #15
10002420:	18fb      	adds	r3, r7, r3
10002422:	781b      	ldrb	r3, [r3, #0]
10002424:	2b01      	cmp	r3, #1
10002426:	d00f      	beq.n	10002448 <SYSTIMER_Init+0x60>
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
10002428:	2301      	movs	r3, #1
1000242a:	425b      	negs	r3, r3
1000242c:	1c18      	adds	r0, r3, #0
1000242e:	2103      	movs	r1, #3
10002430:	f7ff fd80 	bl	10001f34 <__NVIC_SetPriority>
#endif      
      g_timer_tracker = 0U;
10002434:	4b09      	ldr	r3, [pc, #36]	; (1000245c <SYSTIMER_Init+0x74>)
10002436:	2200      	movs	r2, #0
10002438:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
1000243a:	687b      	ldr	r3, [r7, #4]
1000243c:	2201      	movs	r2, #1
1000243e:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
10002440:	230f      	movs	r3, #15
10002442:	18fb      	adds	r3, r7, r3
10002444:	2200      	movs	r2, #0
10002446:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
10002448:	230f      	movs	r3, #15
1000244a:	18fb      	adds	r3, r7, r3
1000244c:	781b      	ldrb	r3, [r3, #0]
}
1000244e:	1c18      	adds	r0, r3, #0
10002450:	46bd      	mov	sp, r7
10002452:	b004      	add	sp, #16
10002454:	bd80      	pop	{r7, pc}
10002456:	46c0      	nop			; (mov r8, r8)
10002458:	200005c0 	.word	0x200005c0
1000245c:	200005c4 	.word	0x200005c4

10002460 <SYSTIMER_GetTime>:

/*
 *  API to get the current SysTick time in microsecond.
 */
uint32_t SYSTIMER_GetTime(void)
{
10002460:	b580      	push	{r7, lr}
10002462:	af00      	add	r7, sp, #0
  return (g_systick_count * SYSTIMER_TICK_PERIOD_US);
10002464:	4b03      	ldr	r3, [pc, #12]	; (10002474 <SYSTIMER_GetTime+0x14>)
10002466:	681b      	ldr	r3, [r3, #0]
10002468:	22fa      	movs	r2, #250	; 0xfa
1000246a:	0092      	lsls	r2, r2, #2
1000246c:	4353      	muls	r3, r2
}
1000246e:	1c18      	adds	r0, r3, #0
10002470:	46bd      	mov	sp, r7
10002472:	bd80      	pop	{r7, pc}
10002474:	200005c8 	.word	0x200005c8

10002478 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002478:	b580      	push	{r7, lr}
1000247a:	b082      	sub	sp, #8
1000247c:	af00      	add	r7, sp, #0
1000247e:	6078      	str	r0, [r7, #4]
10002480:	1c0a      	adds	r2, r1, #0
10002482:	1cfb      	adds	r3, r7, #3
10002484:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002486:	1cfb      	adds	r3, r7, #3
10002488:	781b      	ldrb	r3, [r3, #0]
1000248a:	2201      	movs	r2, #1
1000248c:	409a      	lsls	r2, r3
1000248e:	687b      	ldr	r3, [r7, #4]
10002490:	60da      	str	r2, [r3, #12]
}
10002492:	46bd      	mov	sp, r7
10002494:	b002      	add	sp, #8
10002496:	bd80      	pop	{r7, pc}

10002498 <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
10002498:	b580      	push	{r7, lr}
1000249a:	b082      	sub	sp, #8
1000249c:	af00      	add	r7, sp, #0
1000249e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
100024a0:	687b      	ldr	r3, [r7, #4]
100024a2:	695b      	ldr	r3, [r3, #20]
100024a4:	2280      	movs	r2, #128	; 0x80
100024a6:	0292      	lsls	r2, r2, #10
100024a8:	431a      	orrs	r2, r3
100024aa:	687b      	ldr	r3, [r7, #4]
100024ac:	615a      	str	r2, [r3, #20]
}
100024ae:	46bd      	mov	sp, r7
100024b0:	b002      	add	sp, #8
100024b2:	bd80      	pop	{r7, pc}

100024b4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100024b4:	b580      	push	{r7, lr}
100024b6:	b082      	sub	sp, #8
100024b8:	af00      	add	r7, sp, #0
100024ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100024bc:	687b      	ldr	r3, [r7, #4]
100024be:	2201      	movs	r2, #1
100024c0:	60da      	str	r2, [r3, #12]
}
100024c2:	46bd      	mov	sp, r7
100024c4:	b002      	add	sp, #8
100024c6:	bd80      	pop	{r7, pc}

100024c8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100024c8:	b580      	push	{r7, lr}
100024ca:	b082      	sub	sp, #8
100024cc:	af00      	add	r7, sp, #0
100024ce:	6078      	str	r0, [r7, #4]
100024d0:	1c0a      	adds	r2, r1, #0
100024d2:	1cbb      	adds	r3, r7, #2
100024d4:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100024d6:	1cbb      	adds	r3, r7, #2
100024d8:	881a      	ldrh	r2, [r3, #0]
100024da:	687b      	ldr	r3, [r7, #4]
100024dc:	635a      	str	r2, [r3, #52]	; 0x34
}
100024de:	46bd      	mov	sp, r7
100024e0:	b002      	add	sp, #8
100024e2:	bd80      	pop	{r7, pc}

100024e4 <XMC_CCU4_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
{
100024e4:	b580      	push	{r7, lr}
100024e6:	b082      	sub	sp, #8
100024e8:	af00      	add	r7, sp, #0
100024ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return ((uint16_t)slice->PR);
100024ec:	687b      	ldr	r3, [r7, #4]
100024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100024f0:	b29b      	uxth	r3, r3
}
100024f2:	1c18      	adds	r0, r3, #0
100024f4:	46bd      	mov	sp, r7
100024f6:	b002      	add	sp, #8
100024f8:	bd80      	pop	{r7, pc}
100024fa:	46c0      	nop			; (mov r8, r8)

100024fc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100024fc:	b580      	push	{r7, lr}
100024fe:	b082      	sub	sp, #8
10002500:	af00      	add	r7, sp, #0
10002502:	6078      	str	r0, [r7, #4]
10002504:	1c0a      	adds	r2, r1, #0
10002506:	1cbb      	adds	r3, r7, #2
10002508:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000250a:	1cbb      	adds	r3, r7, #2
1000250c:	881a      	ldrh	r2, [r3, #0]
1000250e:	687b      	ldr	r3, [r7, #4]
10002510:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002512:	46bd      	mov	sp, r7
10002514:	b002      	add	sp, #8
10002516:	bd80      	pop	{r7, pc}

10002518 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002518:	b580      	push	{r7, lr}
1000251a:	b082      	sub	sp, #8
1000251c:	af00      	add	r7, sp, #0
1000251e:	6078      	str	r0, [r7, #4]
10002520:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002522:	687b      	ldr	r3, [r7, #4]
10002524:	683a      	ldr	r2, [r7, #0]
10002526:	611a      	str	r2, [r3, #16]
}
10002528:	46bd      	mov	sp, r7
1000252a:	b002      	add	sp, #8
1000252c:	bd80      	pop	{r7, pc}
1000252e:	46c0      	nop			; (mov r8, r8)

10002530 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002530:	b580      	push	{r7, lr}
10002532:	b082      	sub	sp, #8
10002534:	af00      	add	r7, sp, #0
10002536:	6078      	str	r0, [r7, #4]
10002538:	1c0a      	adds	r2, r1, #0
1000253a:	1cfb      	adds	r3, r7, #3
1000253c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000253e:	687b      	ldr	r3, [r7, #4]
10002540:	22a4      	movs	r2, #164	; 0xa4
10002542:	589a      	ldr	r2, [r3, r2]
10002544:	1cfb      	adds	r3, r7, #3
10002546:	781b      	ldrb	r3, [r3, #0]
10002548:	2101      	movs	r1, #1
1000254a:	4099      	lsls	r1, r3
1000254c:	1c0b      	adds	r3, r1, #0
1000254e:	431a      	orrs	r2, r3
10002550:	687b      	ldr	r3, [r7, #4]
10002552:	21a4      	movs	r1, #164	; 0xa4
10002554:	505a      	str	r2, [r3, r1]
}
10002556:	46bd      	mov	sp, r7
10002558:	b002      	add	sp, #8
1000255a:	bd80      	pop	{r7, pc}

1000255c <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
1000255c:	b590      	push	{r4, r7, lr}
1000255e:	b087      	sub	sp, #28
10002560:	af00      	add	r7, sp, #0
10002562:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
10002564:	2317      	movs	r3, #23
10002566:	18fb      	adds	r3, r7, r3
10002568:	2201      	movs	r2, #1
1000256a:	701a      	strb	r2, [r3, #0]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
1000256c:	2316      	movs	r3, #22
1000256e:	18fb      	adds	r3, r7, r3
10002570:	2201      	movs	r2, #1
10002572:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
10002574:	687b      	ldr	r3, [r7, #4]
10002576:	7f1b      	ldrb	r3, [r3, #28]
10002578:	2b00      	cmp	r3, #0
1000257a:	d000      	beq.n	1000257e <PWM_CCU4_Init+0x22>
1000257c:	e097      	b.n	100026ae <PWM_CCU4_Init+0x152>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
1000257e:	687b      	ldr	r3, [r7, #4]
10002580:	681b      	ldr	r3, [r3, #0]
10002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002584:	2216      	movs	r2, #22
10002586:	18bc      	adds	r4, r7, r2
10002588:	1c18      	adds	r0, r3, #0
1000258a:	f000 fa95 	bl	10002ab8 <GLOBAL_CCU4_Init>
1000258e:	1c03      	adds	r3, r0, #0
10002590:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
10002592:	2316      	movs	r3, #22
10002594:	18fb      	adds	r3, r7, r3
10002596:	781b      	ldrb	r3, [r3, #0]
10002598:	2b00      	cmp	r3, #0
1000259a:	d000      	beq.n	1000259e <PWM_CCU4_Init+0x42>
1000259c:	e083      	b.n	100026a6 <PWM_CCU4_Init+0x14a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
1000259e:	687b      	ldr	r3, [r7, #4]
100025a0:	689a      	ldr	r2, [r3, #8]
100025a2:	687b      	ldr	r3, [r7, #4]
100025a4:	681b      	ldr	r3, [r3, #0]
100025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100025a8:	1c10      	adds	r0, r2, #0
100025aa:	1c19      	adds	r1, r3, #0
100025ac:	f7ff f8d6 	bl	1000175c <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
100025b0:	687b      	ldr	r3, [r7, #4]
100025b2:	689a      	ldr	r2, [r3, #8]
100025b4:	687b      	ldr	r3, [r7, #4]
100025b6:	681b      	ldr	r3, [r3, #0]
100025b8:	885b      	ldrh	r3, [r3, #2]
100025ba:	1c10      	adds	r0, r2, #0
100025bc:	1c19      	adds	r1, r3, #0
100025be:	f7ff ff83 	bl	100024c8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
100025c2:	687b      	ldr	r3, [r7, #4]
100025c4:	689a      	ldr	r2, [r3, #8]
100025c6:	687b      	ldr	r3, [r7, #4]
100025c8:	681b      	ldr	r3, [r3, #0]
100025ca:	889b      	ldrh	r3, [r3, #4]
100025cc:	1c10      	adds	r0, r2, #0
100025ce:	1c19      	adds	r1, r3, #0
100025d0:	f7ff ff94 	bl	100024fc <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
100025d4:	687b      	ldr	r3, [r7, #4]
100025d6:	681b      	ldr	r3, [r3, #0]
100025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100025da:	78db      	ldrb	r3, [r3, #3]
100025dc:	2202      	movs	r2, #2
100025de:	4013      	ands	r3, r2
100025e0:	b2db      	uxtb	r3, r3
100025e2:	2b00      	cmp	r3, #0
100025e4:	d008      	beq.n	100025f8 <PWM_CCU4_Init+0x9c>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
100025e6:	687b      	ldr	r3, [r7, #4]
100025e8:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
100025ea:	687b      	ldr	r3, [r7, #4]
100025ec:	681b      	ldr	r3, [r3, #0]
100025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
100025f0:	1c10      	adds	r0, r2, #0
100025f2:	1c19      	adds	r1, r3, #0
100025f4:	f7ff f898 	bl	10001728 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
100025f8:	687b      	ldr	r3, [r7, #4]
100025fa:	685a      	ldr	r2, [r3, #4]
100025fc:	687b      	ldr	r3, [r7, #4]
100025fe:	691b      	ldr	r3, [r3, #16]
10002600:	1c10      	adds	r0, r2, #0
10002602:	1c19      	adds	r1, r3, #0
10002604:	f7ff ff88 	bl	10002518 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
10002608:	687b      	ldr	r3, [r7, #4]
1000260a:	685a      	ldr	r2, [r3, #4]
1000260c:	687b      	ldr	r3, [r7, #4]
1000260e:	695b      	ldr	r3, [r3, #20]
10002610:	1c10      	adds	r0, r2, #0
10002612:	1c19      	adds	r1, r3, #0
10002614:	f7ff ff80 	bl	10002518 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
10002618:	687b      	ldr	r3, [r7, #4]
1000261a:	1c18      	adds	r0, r3, #0
1000261c:	f000 f8ec 	bl	100027f8 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
10002620:	687b      	ldr	r3, [r7, #4]
10002622:	1c18      	adds	r0, r3, #0
10002624:	f000 f84e 	bl	100026c4 <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
10002628:	687b      	ldr	r3, [r7, #4]
1000262a:	681b      	ldr	r3, [r3, #0]
1000262c:	223c      	movs	r2, #60	; 0x3c
1000262e:	5c9b      	ldrb	r3, [r3, r2]
10002630:	2b00      	cmp	r3, #0
10002632:	d00e      	beq.n	10002652 <PWM_CCU4_Init+0xf6>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10002634:	687b      	ldr	r3, [r7, #4]
10002636:	681b      	ldr	r3, [r3, #0]
10002638:	6c19      	ldr	r1, [r3, #64]	; 0x40
1000263a:	687b      	ldr	r3, [r7, #4]
1000263c:	681b      	ldr	r3, [r3, #0]
1000263e:	2244      	movs	r2, #68	; 0x44
10002640:	5c9a      	ldrb	r2, [r3, r2]
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
10002642:	687b      	ldr	r3, [r7, #4]
10002644:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10002646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002648:	1c08      	adds	r0, r1, #0
1000264a:	1c11      	adds	r1, r2, #0
1000264c:	1c1a      	adds	r2, r3, #0
1000264e:	f7fe fe5b 	bl	10001308 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
10002652:	687b      	ldr	r3, [r7, #4]
10002654:	681b      	ldr	r3, [r3, #0]
10002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002658:	681b      	ldr	r3, [r3, #0]
1000265a:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
1000265c:	687b      	ldr	r3, [r7, #4]
1000265e:	681b      	ldr	r3, [r3, #0]
10002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002662:	791b      	ldrb	r3, [r3, #4]
10002664:	071b      	lsls	r3, r3, #28
10002666:	0f1b      	lsrs	r3, r3, #28
10002668:	b2db      	uxtb	r3, r3
1000266a:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
1000266c:	68fb      	ldr	r3, [r7, #12]
1000266e:	693a      	ldr	r2, [r7, #16]
10002670:	40da      	lsrs	r2, r3
10002672:	1c13      	adds	r3, r2, #0
10002674:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
10002676:	687b      	ldr	r3, [r7, #4]
10002678:	693a      	ldr	r2, [r7, #16]
1000267a:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
1000267c:	687b      	ldr	r3, [r7, #4]
1000267e:	2201      	movs	r2, #1
10002680:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
10002682:	2317      	movs	r3, #23
10002684:	18fb      	adds	r3, r7, r3
10002686:	2200      	movs	r2, #0
10002688:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
1000268a:	687b      	ldr	r3, [r7, #4]
1000268c:	681b      	ldr	r3, [r3, #0]
1000268e:	781b      	ldrb	r3, [r3, #0]
10002690:	2b00      	cmp	r3, #0
10002692:	d010      	beq.n	100026b6 <PWM_CCU4_Init+0x15a>
      {
        status = PWM_CCU4_Start(handle_ptr);
10002694:	2317      	movs	r3, #23
10002696:	18fc      	adds	r4, r7, r3
10002698:	687b      	ldr	r3, [r7, #4]
1000269a:	1c18      	adds	r0, r3, #0
1000269c:	f000 f98a 	bl	100029b4 <PWM_CCU4_Start>
100026a0:	1c03      	adds	r3, r0, #0
100026a2:	7023      	strb	r3, [r4, #0]
100026a4:	e007      	b.n	100026b6 <PWM_CCU4_Init+0x15a>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
100026a6:	687b      	ldr	r3, [r7, #4]
100026a8:	2200      	movs	r2, #0
100026aa:	771a      	strb	r2, [r3, #28]
100026ac:	e003      	b.n	100026b6 <PWM_CCU4_Init+0x15a>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
100026ae:	2317      	movs	r3, #23
100026b0:	18fb      	adds	r3, r7, r3
100026b2:	2202      	movs	r2, #2
100026b4:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
100026b6:	2317      	movs	r3, #23
100026b8:	18fb      	adds	r3, r7, r3
100026ba:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Init() api */
100026bc:	1c18      	adds	r0, r3, #0
100026be:	46bd      	mov	sp, r7
100026c0:	b007      	add	sp, #28
100026c2:	bd90      	pop	{r4, r7, pc}

100026c4 <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
100026c4:	b580      	push	{r7, lr}
100026c6:	b082      	sub	sp, #8
100026c8:	af00      	add	r7, sp, #0
100026ca:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
100026cc:	687b      	ldr	r3, [r7, #4]
100026ce:	681b      	ldr	r3, [r3, #0]
100026d0:	799b      	ldrb	r3, [r3, #6]
100026d2:	2b00      	cmp	r3, #0
100026d4:	d00f      	beq.n	100026f6 <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100026d6:	687b      	ldr	r3, [r7, #4]
100026d8:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
100026da:	687b      	ldr	r3, [r7, #4]
100026dc:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100026de:	7b5b      	ldrb	r3, [r3, #13]
100026e0:	1c10      	adds	r0, r2, #0
100026e2:	2100      	movs	r1, #0
100026e4:	1c1a      	adds	r2, r3, #0
100026e6:	f7ff fae9 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100026ea:	687b      	ldr	r3, [r7, #4]
100026ec:	689b      	ldr	r3, [r3, #8]
100026ee:	1c18      	adds	r0, r3, #0
100026f0:	2100      	movs	r1, #0
100026f2:	f7ff ff1d 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
100026f6:	687b      	ldr	r3, [r7, #4]
100026f8:	681b      	ldr	r3, [r3, #0]
100026fa:	79db      	ldrb	r3, [r3, #7]
100026fc:	2b00      	cmp	r3, #0
100026fe:	d00f      	beq.n	10002720 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002700:	687b      	ldr	r3, [r7, #4]
10002702:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
10002704:	687b      	ldr	r3, [r7, #4]
10002706:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002708:	7b9b      	ldrb	r3, [r3, #14]
1000270a:	1c10      	adds	r0, r2, #0
1000270c:	2102      	movs	r1, #2
1000270e:	1c1a      	adds	r2, r3, #0
10002710:	f7ff fad4 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10002714:	687b      	ldr	r3, [r7, #4]
10002716:	689b      	ldr	r3, [r3, #8]
10002718:	1c18      	adds	r0, r3, #0
1000271a:	2102      	movs	r1, #2
1000271c:	f7ff ff08 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
10002720:	687b      	ldr	r3, [r7, #4]
10002722:	681b      	ldr	r3, [r3, #0]
10002724:	7a1b      	ldrb	r3, [r3, #8]
10002726:	2b00      	cmp	r3, #0
10002728:	d00f      	beq.n	1000274a <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
1000272a:	687b      	ldr	r3, [r7, #4]
1000272c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
1000272e:	687b      	ldr	r3, [r7, #4]
10002730:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
10002732:	7bdb      	ldrb	r3, [r3, #15]
10002734:	1c10      	adds	r0, r2, #0
10002736:	2103      	movs	r1, #3
10002738:	1c1a      	adds	r2, r3, #0
1000273a:	f7ff fabf 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
1000273e:	687b      	ldr	r3, [r7, #4]
10002740:	689b      	ldr	r3, [r3, #8]
10002742:	1c18      	adds	r0, r3, #0
10002744:	2103      	movs	r1, #3
10002746:	f7ff fef3 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
1000274a:	687b      	ldr	r3, [r7, #4]
1000274c:	681b      	ldr	r3, [r3, #0]
1000274e:	7a5b      	ldrb	r3, [r3, #9]
10002750:	2b00      	cmp	r3, #0
10002752:	d00f      	beq.n	10002774 <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10002754:	687b      	ldr	r3, [r7, #4]
10002756:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
10002758:	687b      	ldr	r3, [r7, #4]
1000275a:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
1000275c:	7c1b      	ldrb	r3, [r3, #16]
1000275e:	1c10      	adds	r0, r2, #0
10002760:	2101      	movs	r1, #1
10002762:	1c1a      	adds	r2, r3, #0
10002764:	f7ff faaa 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
10002768:	687b      	ldr	r3, [r7, #4]
1000276a:	689b      	ldr	r3, [r3, #8]
1000276c:	1c18      	adds	r0, r3, #0
1000276e:	2101      	movs	r1, #1
10002770:	f7ff fede 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10002774:	687b      	ldr	r3, [r7, #4]
10002776:	681b      	ldr	r3, [r3, #0]
10002778:	7a9b      	ldrb	r3, [r3, #10]
1000277a:	2b00      	cmp	r3, #0
1000277c:	d00f      	beq.n	1000279e <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
1000277e:	687b      	ldr	r3, [r7, #4]
10002780:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
10002782:	687b      	ldr	r3, [r7, #4]
10002784:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10002786:	7c5b      	ldrb	r3, [r3, #17]
10002788:	1c10      	adds	r0, r2, #0
1000278a:	2108      	movs	r1, #8
1000278c:	1c1a      	adds	r2, r3, #0
1000278e:	f7ff fa95 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
10002792:	687b      	ldr	r3, [r7, #4]
10002794:	689b      	ldr	r3, [r3, #8]
10002796:	1c18      	adds	r0, r3, #0
10002798:	2108      	movs	r1, #8
1000279a:	f7ff fec9 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
1000279e:	687b      	ldr	r3, [r7, #4]
100027a0:	681b      	ldr	r3, [r3, #0]
100027a2:	7adb      	ldrb	r3, [r3, #11]
100027a4:	2b00      	cmp	r3, #0
100027a6:	d00f      	beq.n	100027c8 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100027a8:	687b      	ldr	r3, [r7, #4]
100027aa:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
100027ac:	687b      	ldr	r3, [r7, #4]
100027ae:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100027b0:	7c9b      	ldrb	r3, [r3, #18]
100027b2:	1c10      	adds	r0, r2, #0
100027b4:	2109      	movs	r1, #9
100027b6:	1c1a      	adds	r2, r3, #0
100027b8:	f7ff fa80 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
100027bc:	687b      	ldr	r3, [r7, #4]
100027be:	689b      	ldr	r3, [r3, #8]
100027c0:	1c18      	adds	r0, r3, #0
100027c2:	2109      	movs	r1, #9
100027c4:	f7ff feb4 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
100027c8:	687b      	ldr	r3, [r7, #4]
100027ca:	681b      	ldr	r3, [r3, #0]
100027cc:	7b1b      	ldrb	r3, [r3, #12]
100027ce:	2b00      	cmp	r3, #0
100027d0:	d00f      	beq.n	100027f2 <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100027d2:	687b      	ldr	r3, [r7, #4]
100027d4:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
100027d6:	687b      	ldr	r3, [r7, #4]
100027d8:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100027da:	7cdb      	ldrb	r3, [r3, #19]
100027dc:	1c10      	adds	r0, r2, #0
100027de:	210a      	movs	r1, #10
100027e0:	1c1a      	adds	r2, r3, #0
100027e2:	f7ff fa6b 	bl	10001cbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
100027e6:	687b      	ldr	r3, [r7, #4]
100027e8:	689b      	ldr	r3, [r3, #8]
100027ea:	1c18      	adds	r0, r3, #0
100027ec:	210a      	movs	r1, #10
100027ee:	f7ff fe9f 	bl	10002530 <XMC_CCU4_SLICE_EnableEvent>
  }
}
100027f2:	46bd      	mov	sp, r7
100027f4:	b002      	add	sp, #8
100027f6:	bd80      	pop	{r7, pc}

100027f8 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
100027f8:	b590      	push	{r4, r7, lr}
100027fa:	b083      	sub	sp, #12
100027fc:	af00      	add	r7, sp, #0
100027fe:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10002800:	687b      	ldr	r3, [r7, #4]
10002802:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
10002804:	687b      	ldr	r3, [r7, #4]
10002806:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10002808:	695b      	ldr	r3, [r3, #20]
1000280a:	1c10      	adds	r0, r2, #0
1000280c:	2101      	movs	r1, #1
1000280e:	1c1a      	adds	r2, r3, #0
10002810:	f7ff f9c6 	bl	10001ba0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10002814:	687b      	ldr	r3, [r7, #4]
10002816:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
10002818:	687b      	ldr	r3, [r7, #4]
1000281a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
1000281c:	699b      	ldr	r3, [r3, #24]
1000281e:	1c10      	adds	r0, r2, #0
10002820:	2102      	movs	r1, #2
10002822:	1c1a      	adds	r2, r3, #0
10002824:	f7ff f9bc 	bl	10001ba0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10002828:	687b      	ldr	r3, [r7, #4]
1000282a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
1000282c:	687b      	ldr	r3, [r7, #4]
1000282e:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10002830:	69db      	ldr	r3, [r3, #28]
10002832:	1c10      	adds	r0, r2, #0
10002834:	2103      	movs	r1, #3
10002836:	1c1a      	adds	r2, r3, #0
10002838:	f7ff f9b2 	bl	10001ba0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
1000283c:	687b      	ldr	r3, [r7, #4]
1000283e:	681b      	ldr	r3, [r3, #0]
10002840:	2220      	movs	r2, #32
10002842:	5c9b      	ldrb	r3, [r3, r2]
10002844:	2b00      	cmp	r3, #0
10002846:	d00c      	beq.n	10002862 <PWM_CCU4_lConfigure_Events+0x6a>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10002848:	687b      	ldr	r3, [r7, #4]
1000284a:	6898      	ldr	r0, [r3, #8]
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	681b      	ldr	r3, [r3, #0]
10002850:	2220      	movs	r2, #32
10002852:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
10002854:	687b      	ldr	r3, [r7, #4]
10002856:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10002858:	2221      	movs	r2, #33	; 0x21
1000285a:	5c9b      	ldrb	r3, [r3, r2]
1000285c:	1c1a      	adds	r2, r3, #0
1000285e:	f7fe ffb1 	bl	100017c4 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	681b      	ldr	r3, [r3, #0]
10002866:	2222      	movs	r2, #34	; 0x22
10002868:	5c9b      	ldrb	r3, [r3, r2]
1000286a:	2b00      	cmp	r3, #0
1000286c:	d00c      	beq.n	10002888 <PWM_CCU4_lConfigure_Events+0x90>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
1000286e:	687b      	ldr	r3, [r7, #4]
10002870:	6898      	ldr	r0, [r3, #8]
10002872:	687b      	ldr	r3, [r7, #4]
10002874:	681b      	ldr	r3, [r3, #0]
10002876:	2222      	movs	r2, #34	; 0x22
10002878:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
1000287a:	687b      	ldr	r3, [r7, #4]
1000287c:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
1000287e:	2223      	movs	r2, #35	; 0x23
10002880:	5c9b      	ldrb	r3, [r3, r2]
10002882:	1c1a      	adds	r2, r3, #0
10002884:	f7fe ffd2 	bl	1000182c <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10002888:	687b      	ldr	r3, [r7, #4]
1000288a:	681b      	ldr	r3, [r3, #0]
1000288c:	2224      	movs	r2, #36	; 0x24
1000288e:	5c9b      	ldrb	r3, [r3, r2]
10002890:	2b00      	cmp	r3, #0
10002892:	d009      	beq.n	100028a8 <PWM_CCU4_lConfigure_Events+0xb0>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
10002894:	687b      	ldr	r3, [r7, #4]
10002896:	6899      	ldr	r1, [r3, #8]
10002898:	687b      	ldr	r3, [r7, #4]
1000289a:	681b      	ldr	r3, [r3, #0]
1000289c:	2224      	movs	r2, #36	; 0x24
1000289e:	5c9b      	ldrb	r3, [r3, r2]
100028a0:	1c08      	adds	r0, r1, #0
100028a2:	1c19      	adds	r1, r3, #0
100028a4:	f7ff f894 	bl	100019d0 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
100028a8:	687b      	ldr	r3, [r7, #4]
100028aa:	681b      	ldr	r3, [r3, #0]
100028ac:	2225      	movs	r2, #37	; 0x25
100028ae:	5c9b      	ldrb	r3, [r3, r2]
100028b0:	2b00      	cmp	r3, #0
100028b2:	d009      	beq.n	100028c8 <PWM_CCU4_lConfigure_Events+0xd0>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
100028b4:	687b      	ldr	r3, [r7, #4]
100028b6:	6899      	ldr	r1, [r3, #8]
100028b8:	687b      	ldr	r3, [r7, #4]
100028ba:	681b      	ldr	r3, [r3, #0]
100028bc:	2225      	movs	r2, #37	; 0x25
100028be:	5c9b      	ldrb	r3, [r3, r2]
100028c0:	1c08      	adds	r0, r1, #0
100028c2:	1c19      	adds	r1, r3, #0
100028c4:	f7ff f868 	bl	10001998 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
100028c8:	687b      	ldr	r3, [r7, #4]
100028ca:	681b      	ldr	r3, [r3, #0]
100028cc:	2226      	movs	r2, #38	; 0x26
100028ce:	5c9b      	ldrb	r3, [r3, r2]
100028d0:	2b00      	cmp	r3, #0
100028d2:	d009      	beq.n	100028e8 <PWM_CCU4_lConfigure_Events+0xf0>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
100028d4:	687b      	ldr	r3, [r7, #4]
100028d6:	6899      	ldr	r1, [r3, #8]
100028d8:	687b      	ldr	r3, [r7, #4]
100028da:	681b      	ldr	r3, [r3, #0]
100028dc:	2226      	movs	r2, #38	; 0x26
100028de:	5c9b      	ldrb	r3, [r3, r2]
100028e0:	1c08      	adds	r0, r1, #0
100028e2:	1c19      	adds	r1, r3, #0
100028e4:	f7ff f83c 	bl	10001960 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
100028e8:	687b      	ldr	r3, [r7, #4]
100028ea:	681b      	ldr	r3, [r3, #0]
100028ec:	2227      	movs	r2, #39	; 0x27
100028ee:	5c9b      	ldrb	r3, [r3, r2]
100028f0:	2b00      	cmp	r3, #0
100028f2:	d009      	beq.n	10002908 <PWM_CCU4_lConfigure_Events+0x110>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
100028f4:	687b      	ldr	r3, [r7, #4]
100028f6:	6899      	ldr	r1, [r3, #8]
100028f8:	687b      	ldr	r3, [r7, #4]
100028fa:	681b      	ldr	r3, [r3, #0]
100028fc:	2227      	movs	r2, #39	; 0x27
100028fe:	5c9b      	ldrb	r3, [r3, r2]
10002900:	1c08      	adds	r0, r1, #0
10002902:	1c19      	adds	r1, r3, #0
10002904:	f7fe ffc4 	bl	10001890 <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10002908:	687b      	ldr	r3, [r7, #4]
1000290a:	681b      	ldr	r3, [r3, #0]
1000290c:	2228      	movs	r2, #40	; 0x28
1000290e:	5c9b      	ldrb	r3, [r3, r2]
10002910:	2b00      	cmp	r3, #0
10002912:	d010      	beq.n	10002936 <PWM_CCU4_lConfigure_Events+0x13e>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002914:	687b      	ldr	r3, [r7, #4]
10002916:	6898      	ldr	r0, [r3, #8]
10002918:	687b      	ldr	r3, [r7, #4]
1000291a:	681b      	ldr	r3, [r3, #0]
1000291c:	2228      	movs	r2, #40	; 0x28
1000291e:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10002920:	687b      	ldr	r3, [r7, #4]
10002922:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002924:	2229      	movs	r2, #41	; 0x29
10002926:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10002928:	687b      	ldr	r3, [r7, #4]
1000292a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
1000292c:	222a      	movs	r2, #42	; 0x2a
1000292e:	5c9b      	ldrb	r3, [r3, r2]
10002930:	1c22      	adds	r2, r4, #0
10002932:	f7fe ffc9 	bl	100018c8 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	681b      	ldr	r3, [r3, #0]
1000293a:	222e      	movs	r2, #46	; 0x2e
1000293c:	5c9b      	ldrb	r3, [r3, r2]
1000293e:	2b03      	cmp	r3, #3
10002940:	d117      	bne.n	10002972 <PWM_CCU4_lConfigure_Events+0x17a>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10002942:	687b      	ldr	r3, [r7, #4]
10002944:	6898      	ldr	r0, [r3, #8]
10002946:	687b      	ldr	r3, [r7, #4]
10002948:	681b      	ldr	r3, [r3, #0]
1000294a:	2230      	movs	r2, #48	; 0x30
1000294c:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
1000294e:	687b      	ldr	r3, [r7, #4]
10002950:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10002952:	222f      	movs	r2, #47	; 0x2f
10002954:	5c9b      	ldrb	r3, [r3, r2]
10002956:	1c1a      	adds	r2, r3, #0
10002958:	f7ff f86e 	bl	10001a38 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
1000295c:	687b      	ldr	r3, [r7, #4]
1000295e:	681b      	ldr	r3, [r3, #0]
10002960:	222d      	movs	r2, #45	; 0x2d
10002962:	5c9b      	ldrb	r3, [r3, r2]
10002964:	2b00      	cmp	r3, #0
10002966:	d004      	beq.n	10002972 <PWM_CCU4_lConfigure_Events+0x17a>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
10002968:	687b      	ldr	r3, [r7, #4]
1000296a:	689b      	ldr	r3, [r3, #8]
1000296c:	1c18      	adds	r0, r3, #0
1000296e:	f7ff fd93 	bl	10002498 <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10002972:	687b      	ldr	r3, [r7, #4]
10002974:	681b      	ldr	r3, [r3, #0]
10002976:	222b      	movs	r2, #43	; 0x2b
10002978:	5c9b      	ldrb	r3, [r3, r2]
1000297a:	2b02      	cmp	r3, #2
1000297c:	d117      	bne.n	100029ae <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
1000297e:	687b      	ldr	r3, [r7, #4]
10002980:	681b      	ldr	r3, [r3, #0]
10002982:	222c      	movs	r2, #44	; 0x2c
10002984:	5c9b      	ldrb	r3, [r3, r2]
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10002986:	2b03      	cmp	r3, #3
10002988:	d111      	bne.n	100029ae <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
1000298a:	687b      	ldr	r3, [r7, #4]
1000298c:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
1000298e:	687b      	ldr	r3, [r7, #4]
10002990:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10002992:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
10002994:	687b      	ldr	r3, [r7, #4]
10002996:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10002998:	69db      	ldr	r3, [r3, #28]
1000299a:	1c08      	adds	r0, r1, #0
1000299c:	1c11      	adds	r1, r2, #0
1000299e:	1c1a      	adds	r2, r3, #0
100029a0:	f7ff f890 	bl	10001ac4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
100029a4:	687b      	ldr	r3, [r7, #4]
100029a6:	689b      	ldr	r3, [r3, #8]
100029a8:	1c18      	adds	r0, r3, #0
100029aa:	f7ff f82d 	bl	10001a08 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
100029ae:	46bd      	mov	sp, r7
100029b0:	b003      	add	sp, #12
100029b2:	bd90      	pop	{r4, r7, pc}

100029b4 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
100029b4:	b580      	push	{r7, lr}
100029b6:	b084      	sub	sp, #16
100029b8:	af00      	add	r7, sp, #0
100029ba:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
100029bc:	230f      	movs	r3, #15
100029be:	18fb      	adds	r3, r7, r3
100029c0:	2201      	movs	r2, #1
100029c2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
100029c4:	687b      	ldr	r3, [r7, #4]
100029c6:	7f1b      	ldrb	r3, [r3, #28]
100029c8:	2b01      	cmp	r3, #1
100029ca:	d003      	beq.n	100029d4 <PWM_CCU4_Start+0x20>
100029cc:	687b      	ldr	r3, [r7, #4]
100029ce:	7f1b      	ldrb	r3, [r3, #28]
100029d0:	2b03      	cmp	r3, #3
100029d2:	d119      	bne.n	10002a08 <PWM_CCU4_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
100029d4:	687b      	ldr	r3, [r7, #4]
100029d6:	685a      	ldr	r2, [r3, #4]
100029d8:	687b      	ldr	r3, [r7, #4]
100029da:	7b5b      	ldrb	r3, [r3, #13]
100029dc:	1c10      	adds	r0, r2, #0
100029de:	1c19      	adds	r1, r3, #0
100029e0:	f7ff fd4a 	bl	10002478 <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
100029e4:	687b      	ldr	r3, [r7, #4]
100029e6:	681b      	ldr	r3, [r3, #0]
100029e8:	2220      	movs	r2, #32
100029ea:	5c9b      	ldrb	r3, [r3, r2]
100029ec:	2b00      	cmp	r3, #0
100029ee:	d104      	bne.n	100029fa <PWM_CCU4_Start+0x46>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100029f0:	687b      	ldr	r3, [r7, #4]
100029f2:	689b      	ldr	r3, [r3, #8]
100029f4:	1c18      	adds	r0, r3, #0
100029f6:	f7ff fd5d 	bl	100024b4 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
100029fa:	687b      	ldr	r3, [r7, #4]
100029fc:	2202      	movs	r2, #2
100029fe:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
10002a00:	230f      	movs	r3, #15
10002a02:	18fb      	adds	r3, r7, r3
10002a04:	2200      	movs	r2, #0
10002a06:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
10002a08:	230f      	movs	r3, #15
10002a0a:	18fb      	adds	r3, r7, r3
10002a0c:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Start() api */
10002a0e:	1c18      	adds	r0, r3, #0
10002a10:	46bd      	mov	sp, r7
10002a12:	b004      	add	sp, #16
10002a14:	bd80      	pop	{r7, pc}
10002a16:	46c0      	nop			; (mov r8, r8)

10002a18 <PWM_CCU4_SetDutyCycle>:

/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_SetDutyCycle(PWM_CCU4_t* handle_ptr, uint32_t duty_cycle)
{
10002a18:	b580      	push	{r7, lr}
10002a1a:	b086      	sub	sp, #24
10002a1c:	af00      	add	r7, sp, #0
10002a1e:	6078      	str	r0, [r7, #4]
10002a20:	6039      	str	r1, [r7, #0]
  PWM_CCU4_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU4_STATUS_FAILURE;
10002a22:	2317      	movs	r3, #23
10002a24:	18fb      	adds	r3, r7, r3
10002a26:	2201      	movs	r2, #1
10002a28:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_SetDutyCycle:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
10002a2a:	687b      	ldr	r3, [r7, #4]
10002a2c:	7f1b      	ldrb	r3, [r3, #28]
10002a2e:	2b00      	cmp	r3, #0
10002a30:	d02d      	beq.n	10002a8e <PWM_CCU4_SetDutyCycle+0x76>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU4_SYM_DUTY_MAX))
10002a32:	683b      	ldr	r3, [r7, #0]
10002a34:	4a19      	ldr	r2, [pc, #100]	; (10002a9c <PWM_CCU4_SetDutyCycle+0x84>)
10002a36:	4293      	cmp	r3, r2
10002a38:	d829      	bhi.n	10002a8e <PWM_CCU4_SetDutyCycle+0x76>
    {
      XMC_DEBUG("PWM_CCU4_SetDutyCycle:Cannot set duty cycle > 100%%");
    }
    else
    {
      period = (uint32_t) XMC_CCU4_SLICE_GetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr) + 1U;
10002a3a:	687b      	ldr	r3, [r7, #4]
10002a3c:	689b      	ldr	r3, [r3, #8]
10002a3e:	1c18      	adds	r0, r3, #0
10002a40:	f7ff fd50 	bl	100024e4 <XMC_CCU4_SLICE_GetTimerPeriodMatch>
10002a44:	1c03      	adds	r3, r0, #0
10002a46:	3301      	adds	r3, #1
10002a48:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_CCU4_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU4_DUTY_FULL_SCALE);
10002a4a:	683b      	ldr	r3, [r7, #0]
10002a4c:	4a13      	ldr	r2, [pc, #76]	; (10002a9c <PWM_CCU4_SetDutyCycle+0x84>)
10002a4e:	1ad3      	subs	r3, r2, r3
10002a50:	693a      	ldr	r2, [r7, #16]
10002a52:	4353      	muls	r3, r2
10002a54:	1c18      	adds	r0, r3, #0
10002a56:	4911      	ldr	r1, [pc, #68]	; (10002a9c <PWM_CCU4_SetDutyCycle+0x84>)
10002a58:	f003 f8c4 	bl	10005be4 <__aeabi_uidiv>
10002a5c:	1c03      	adds	r3, r0, #0
10002a5e:	60fb      	str	r3, [r7, #12]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) compare);
10002a60:	687b      	ldr	r3, [r7, #4]
10002a62:	689a      	ldr	r2, [r3, #8]
10002a64:	68fb      	ldr	r3, [r7, #12]
10002a66:	b29b      	uxth	r3, r3
10002a68:	1c10      	adds	r0, r2, #0
10002a6a:	1c19      	adds	r1, r3, #0
10002a6c:	f7ff fd46 	bl	100024fc <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
10002a70:	687b      	ldr	r3, [r7, #4]
10002a72:	685a      	ldr	r2, [r3, #4]
10002a74:	687b      	ldr	r3, [r7, #4]
10002a76:	691b      	ldr	r3, [r3, #16]
10002a78:	1c10      	adds	r0, r2, #0
10002a7a:	1c19      	adds	r1, r3, #0
10002a7c:	f7ff fd4c 	bl	10002518 <XMC_CCU4_EnableShadowTransfer>

      handle_ptr->sym_duty = duty_cycle;
10002a80:	687b      	ldr	r3, [r7, #4]
10002a82:	683a      	ldr	r2, [r7, #0]
10002a84:	625a      	str	r2, [r3, #36]	; 0x24

      XMC_DEBUG("PWM_CCU4_SetDutyCycle:dutycycle set");
      status = PWM_CCU4_STATUS_SUCCESS;
10002a86:	2317      	movs	r3, #23
10002a88:	18fb      	adds	r3, r7, r3
10002a8a:	2200      	movs	r2, #0
10002a8c:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002a8e:	2317      	movs	r3, #23
10002a90:	18fb      	adds	r3, r7, r3
10002a92:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_SetDutyCycle() api */
10002a94:	1c18      	adds	r0, r3, #0
10002a96:	46bd      	mov	sp, r7
10002a98:	b006      	add	sp, #24
10002a9a:	bd80      	pop	{r7, pc}
10002a9c:	00002710 	.word	0x00002710

10002aa0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002aa0:	b580      	push	{r7, lr}
10002aa2:	b082      	sub	sp, #8
10002aa4:	af00      	add	r7, sp, #0
10002aa6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002aa8:	687b      	ldr	r3, [r7, #4]
10002aaa:	2280      	movs	r2, #128	; 0x80
10002aac:	0052      	lsls	r2, r2, #1
10002aae:	60da      	str	r2, [r3, #12]
}
10002ab0:	46bd      	mov	sp, r7
10002ab2:	b002      	add	sp, #8
10002ab4:	bd80      	pop	{r7, pc}
10002ab6:	46c0      	nop			; (mov r8, r8)

10002ab8 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002ab8:	b580      	push	{r7, lr}
10002aba:	b082      	sub	sp, #8
10002abc:	af00      	add	r7, sp, #0
10002abe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10002ac0:	687b      	ldr	r3, [r7, #4]
10002ac2:	7b5b      	ldrb	r3, [r3, #13]
10002ac4:	2201      	movs	r2, #1
10002ac6:	4053      	eors	r3, r2
10002ac8:	b2db      	uxtb	r3, r3
10002aca:	2b00      	cmp	r3, #0
10002acc:	d00f      	beq.n	10002aee <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10002ace:	687b      	ldr	r3, [r7, #4]
10002ad0:	689a      	ldr	r2, [r3, #8]
10002ad2:	687b      	ldr	r3, [r7, #4]
10002ad4:	7b1b      	ldrb	r3, [r3, #12]
10002ad6:	1c10      	adds	r0, r2, #0
10002ad8:	1c19      	adds	r1, r3, #0
10002ada:	f7fe fe01 	bl	100016e0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10002ade:	687b      	ldr	r3, [r7, #4]
10002ae0:	689b      	ldr	r3, [r3, #8]
10002ae2:	1c18      	adds	r0, r3, #0
10002ae4:	f7ff ffdc 	bl	10002aa0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10002ae8:	687b      	ldr	r3, [r7, #4]
10002aea:	2201      	movs	r2, #1
10002aec:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10002aee:	2300      	movs	r3, #0
}
10002af0:	1c18      	adds	r0, r3, #0
10002af2:	46bd      	mov	sp, r7
10002af4:	b002      	add	sp, #8
10002af6:	bd80      	pop	{r7, pc}

10002af8 <XMC_VADC_GLOBAL_SHS_SetAnalogReference>:
 * \par<b>Related APIs:</b><BR>
 * None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
    const XMC_VADC_GLOBAL_SHS_AREF_t aref)
{
10002af8:	b580      	push	{r7, lr}
10002afa:	b082      	sub	sp, #8
10002afc:	af00      	add	r7, sp, #0
10002afe:	6078      	str	r0, [r7, #4]
10002b00:	1c0a      	adds	r2, r1, #0
10002b02:	1cbb      	adds	r3, r7, #2
10002b04:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))

  shs_ptr->SHSCFG = (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHSCFG_SCWC_Msk;
10002b06:	687b      	ldr	r3, [r7, #4]
10002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002b0a:	4a06      	ldr	r2, [pc, #24]	; (10002b24 <XMC_VADC_GLOBAL_SHS_SetAnalogReference+0x2c>)
10002b0c:	401a      	ands	r2, r3
10002b0e:	1cbb      	adds	r3, r7, #2
10002b10:	881b      	ldrh	r3, [r3, #0]
10002b12:	4313      	orrs	r3, r2
10002b14:	2280      	movs	r2, #128	; 0x80
10002b16:	0212      	lsls	r2, r2, #8
10002b18:	431a      	orrs	r2, r3
10002b1a:	687b      	ldr	r3, [r7, #4]
10002b1c:	641a      	str	r2, [r3, #64]	; 0x40
}
10002b1e:	46bd      	mov	sp, r7
10002b20:	b002      	add	sp, #8
10002b22:	bd80      	pop	{r7, pc}
10002b24:	fffff3ff 	.word	0xfffff3ff

10002b28 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10002b28:	b580      	push	{r7, lr}
10002b2a:	b082      	sub	sp, #8
10002b2c:	af00      	add	r7, sp, #0
10002b2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10002b30:	687b      	ldr	r3, [r7, #4]
10002b32:	7c1b      	ldrb	r3, [r3, #16]
10002b34:	2b02      	cmp	r3, #2
10002b36:	d119      	bne.n	10002b6c <GLOBAL_ADC_Init+0x44>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10002b38:	687b      	ldr	r3, [r7, #4]
10002b3a:	685a      	ldr	r2, [r3, #4]
10002b3c:	687b      	ldr	r3, [r7, #4]
10002b3e:	681b      	ldr	r3, [r3, #0]
10002b40:	1c10      	adds	r0, r2, #0
10002b42:	1c19      	adds	r1, r3, #0
10002b44:	f7ff f93c 	bl	10001dc0 <XMC_VADC_GLOBAL_Init>
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
10002b48:	687b      	ldr	r3, [r7, #4]
10002b4a:	689b      	ldr	r3, [r3, #8]
10002b4c:	1c18      	adds	r0, r3, #0
10002b4e:	2100      	movs	r1, #0
10002b50:	f7ff ffd2 	bl	10002af8 <XMC_VADC_GLOBAL_SHS_SetAnalogReference>
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
10002b54:	687b      	ldr	r3, [r7, #4]
10002b56:	7c5b      	ldrb	r3, [r3, #17]
10002b58:	2b00      	cmp	r3, #0
10002b5a:	d004      	beq.n	10002b66 <GLOBAL_ADC_Init+0x3e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
10002b5c:	687b      	ldr	r3, [r7, #4]
10002b5e:	685b      	ldr	r3, [r3, #4]
10002b60:	1c18      	adds	r0, r3, #0
10002b62:	f7ff f977 	bl	10001e54 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10002b66:	687b      	ldr	r3, [r7, #4]
10002b68:	2200      	movs	r2, #0
10002b6a:	741a      	strb	r2, [r3, #16]
  }
  return (handle_ptr->init_state);
10002b6c:	687b      	ldr	r3, [r7, #4]
10002b6e:	7c1b      	ldrb	r3, [r3, #16]
}
10002b70:	1c18      	adds	r0, r3, #0
10002b72:	46bd      	mov	sp, r7
10002b74:	b002      	add	sp, #8
10002b76:	bd80      	pop	{r7, pc}

10002b78 <XMC_FLASH_SetHardReadLevel>:
 * \par<b>Related APIs:</b><BR>
 * None
 *
 */
__STATIC_INLINE void XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_t level)
{
10002b78:	b580      	push	{r7, lr}
10002b7a:	b082      	sub	sp, #8
10002b7c:	af00      	add	r7, sp, #0
10002b7e:	1c02      	adds	r2, r0, #0
10002b80:	1dfb      	adds	r3, r7, #7
10002b82:	701a      	strb	r2, [r3, #0]
  NVM->NVMCONF &= (uint16_t)(~(uint16_t)NVM_NVMCONF_HRLEV_Msk);
10002b84:	4a0b      	ldr	r2, [pc, #44]	; (10002bb4 <XMC_FLASH_SetHardReadLevel+0x3c>)
10002b86:	4b0b      	ldr	r3, [pc, #44]	; (10002bb4 <XMC_FLASH_SetHardReadLevel+0x3c>)
10002b88:	891b      	ldrh	r3, [r3, #8]
10002b8a:	b29b      	uxth	r3, r3
10002b8c:	2106      	movs	r1, #6
10002b8e:	438b      	bics	r3, r1
10002b90:	b29b      	uxth	r3, r3
10002b92:	8113      	strh	r3, [r2, #8]
  NVM->NVMCONF |= (uint16_t)(level << (uint16_t)NVM_NVMCONF_HRLEV_Pos);
10002b94:	4907      	ldr	r1, [pc, #28]	; (10002bb4 <XMC_FLASH_SetHardReadLevel+0x3c>)
10002b96:	4b07      	ldr	r3, [pc, #28]	; (10002bb4 <XMC_FLASH_SetHardReadLevel+0x3c>)
10002b98:	891b      	ldrh	r3, [r3, #8]
10002b9a:	b29a      	uxth	r2, r3
10002b9c:	1dfb      	adds	r3, r7, #7
10002b9e:	781b      	ldrb	r3, [r3, #0]
10002ba0:	b29b      	uxth	r3, r3
10002ba2:	18db      	adds	r3, r3, r3
10002ba4:	b29b      	uxth	r3, r3
10002ba6:	4313      	orrs	r3, r2
10002ba8:	b29b      	uxth	r3, r3
10002baa:	810b      	strh	r3, [r1, #8]
}
10002bac:	46bd      	mov	sp, r7
10002bae:	b002      	add	sp, #8
10002bb0:	bd80      	pop	{r7, pc}
10002bb2:	46c0      	nop			; (mov r8, r8)
10002bb4:	40050000 	.word	0x40050000

10002bb8 <E_EEPROM_XMC1_Init>:
 * 
 * Description     : Driver Module Initialization function. This service shall initialize the Flash EEPROM Emulation 
 *                   module using the values provided by configuration set.
 */
E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_Init(E_EEPROM_XMC1_t *const handle_ptr)
{
10002bb8:	b580      	push	{r7, lr}
10002bba:	b086      	sub	sp, #24
10002bbc:	af00      	add	r7, sp, #0
10002bbe:	6078      	str	r0, [r7, #4]
  uint32_t marker_state;

  XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (handle_ptr != NULL));

  /* Check if the E_EEPROM_XMC1_Init API is called once*/
  if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
10002bc0:	687b      	ldr	r3, [r7, #4]
10002bc2:	7a1b      	ldrb	r3, [r3, #8]
10002bc4:	2b00      	cmp	r3, #0
10002bc6:	d100      	bne.n	10002bca <E_EEPROM_XMC1_Init+0x12>
10002bc8:	e084      	b.n	10002cd4 <E_EEPROM_XMC1_Init+0x11c>
    }
    else
    #endif
    {
      /* Initialize the cache variables for the User defined Block configuration list */
      indx = 0U;
10002bca:	2300      	movs	r3, #0
10002bcc:	617b      	str	r3, [r7, #20]
      do
      {
        E_EEPROM_XMC1_CACHE_t * block_ptr;
        block_ptr = &(handle_ptr->data_ptr->block_info[indx]);
10002bce:	687b      	ldr	r3, [r7, #4]
10002bd0:	685a      	ldr	r2, [r3, #4]
10002bd2:	697b      	ldr	r3, [r7, #20]
10002bd4:	00db      	lsls	r3, r3, #3
10002bd6:	18d3      	adds	r3, r2, r3
10002bd8:	613b      	str	r3, [r7, #16]

        block_ptr->address = 0U;
10002bda:	693b      	ldr	r3, [r7, #16]
10002bdc:	2200      	movs	r2, #0
10002bde:	601a      	str	r2, [r3, #0]
        block_ptr->status.consistent = 0U;
10002be0:	693b      	ldr	r3, [r7, #16]
10002be2:	791a      	ldrb	r2, [r3, #4]
10002be4:	2102      	movs	r1, #2
10002be6:	438a      	bics	r2, r1
10002be8:	711a      	strb	r2, [r3, #4]
        block_ptr->status.valid = 1U;
10002bea:	693b      	ldr	r3, [r7, #16]
10002bec:	791a      	ldrb	r2, [r3, #4]
10002bee:	2101      	movs	r1, #1
10002bf0:	430a      	orrs	r2, r1
10002bf2:	711a      	strb	r2, [r3, #4]
        block_ptr->status.copied = 0U;
10002bf4:	693b      	ldr	r3, [r7, #16]
10002bf6:	791a      	ldrb	r2, [r3, #4]
10002bf8:	2104      	movs	r1, #4
10002bfa:	438a      	bics	r2, r1
10002bfc:	711a      	strb	r2, [r3, #4]
        block_ptr->status.crc = 0U;
10002bfe:	693b      	ldr	r3, [r7, #16]
10002c00:	791a      	ldrb	r2, [r3, #4]
10002c02:	2108      	movs	r1, #8
10002c04:	438a      	bics	r2, r1
10002c06:	711a      	strb	r2, [r3, #4]
        indx++;
10002c08:	697b      	ldr	r3, [r7, #20]
10002c0a:	3301      	adds	r3, #1
10002c0c:	617b      	str	r3, [r7, #20]
      } while (indx < handle_ptr->block_count);
10002c0e:	687b      	ldr	r3, [r7, #4]
10002c10:	7a5b      	ldrb	r3, [r3, #9]
10002c12:	1e1a      	subs	r2, r3, #0
10002c14:	697b      	ldr	r3, [r7, #20]
10002c16:	429a      	cmp	r2, r3
10002c18:	d8d9      	bhi.n	10002bce <E_EEPROM_XMC1_Init+0x16>

      /********* Initialize all global variables *****************/
      handle_ptr->data_ptr->updated_cache_index = 0U;
10002c1a:	687b      	ldr	r3, [r7, #4]
10002c1c:	685a      	ldr	r2, [r3, #4]
10002c1e:	23b6      	movs	r3, #182	; 0xb6
10002c20:	005b      	lsls	r3, r3, #1
10002c22:	2100      	movs	r1, #0
10002c24:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->cache_state = E_EEPROM_XMC1_CACHE_IDLE;
10002c26:	687b      	ldr	r3, [r7, #4]
10002c28:	685a      	ldr	r2, [r3, #4]
10002c2a:	23b4      	movs	r3, #180	; 0xb4
10002c2c:	005b      	lsls	r3, r3, #1
10002c2e:	2100      	movs	r1, #0
10002c30:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->gc_state = E_EEPROM_XMC1_GC_UNINT;
10002c32:	687b      	ldr	r3, [r7, #4]
10002c34:	685a      	ldr	r2, [r3, #4]
10002c36:	23ae      	movs	r3, #174	; 0xae
10002c38:	005b      	lsls	r3, r3, #1
10002c3a:	2100      	movs	r1, #0
10002c3c:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->init_gc_state = 0U;
10002c3e:	687b      	ldr	r3, [r7, #4]
10002c40:	685a      	ldr	r2, [r3, #4]
10002c42:	23b0      	movs	r3, #176	; 0xb0
10002c44:	005b      	lsls	r3, r3, #1
10002c46:	2100      	movs	r1, #0
10002c48:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->gc_log_block_count = 0U;
10002c4a:	687b      	ldr	r3, [r7, #4]
10002c4c:	685a      	ldr	r2, [r3, #4]
10002c4e:	23b2      	movs	r3, #178	; 0xb2
10002c50:	005b      	lsls	r3, r3, #1
10002c52:	2100      	movs	r1, #0
10002c54:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->crc_buffer = 0U;
10002c56:	687b      	ldr	r3, [r7, #4]
10002c58:	685b      	ldr	r3, [r3, #4]
10002c5a:	2200      	movs	r2, #0
10002c5c:	655a      	str	r2, [r3, #84]	; 0x54

      handle_ptr->data_ptr->written_block_counter = (uint32_t)0;
10002c5e:	687b      	ldr	r3, [r7, #4]
10002c60:	685b      	ldr	r3, [r3, #4]
10002c62:	2200      	movs	r2, #0
10002c64:	641a      	str	r2, [r3, #64]	; 0x40
      handle_ptr->data_ptr->curr_bank_src_addr = 0U;
10002c66:	687b      	ldr	r3, [r7, #4]
10002c68:	685b      	ldr	r3, [r3, #4]
10002c6a:	2200      	movs	r2, #0
10002c6c:	639a      	str	r2, [r3, #56]	; 0x38
      handle_ptr->data_ptr->gc_src_addr = 0U;
10002c6e:	687b      	ldr	r3, [r7, #4]
10002c70:	685b      	ldr	r3, [r3, #4]
10002c72:	2200      	movs	r2, #0
10002c74:	629a      	str	r2, [r3, #40]	; 0x28
      handle_ptr->data_ptr->gc_dest_addr = 0U;
10002c76:	687b      	ldr	r3, [r7, #4]
10002c78:	685b      	ldr	r3, [r3, #4]
10002c7a:	2200      	movs	r2, #0
10002c7c:	625a      	str	r2, [r3, #36]	; 0x24
      handle_ptr->data_ptr->next_free_block_addr = 0U;
10002c7e:	687b      	ldr	r3, [r7, #4]
10002c80:	685b      	ldr	r3, [r3, #4]
10002c82:	2200      	movs	r2, #0
10002c84:	635a      	str	r2, [r3, #52]	; 0x34
      handle_ptr->data_ptr->gc_block_counter = (uint32_t)0;
10002c86:	687b      	ldr	r3, [r7, #4]
10002c88:	685b      	ldr	r3, [r3, #4]
10002c8a:	2200      	movs	r2, #0
10002c8c:	63da      	str	r2, [r3, #60]	; 0x3c
      handle_ptr->data_ptr->user_write_bytes_count = 0U;
10002c8e:	687b      	ldr	r3, [r7, #4]
10002c90:	685a      	ldr	r2, [r3, #4]
10002c92:	23ac      	movs	r3, #172	; 0xac
10002c94:	005b      	lsls	r3, r3, #1
10002c96:	2100      	movs	r1, #0
10002c98:	50d1      	str	r1, [r2, r3]

      handle_ptr->data_ptr->current_bank = 0U;
10002c9a:	687b      	ldr	r3, [r7, #4]
10002c9c:	685b      	ldr	r3, [r3, #4]
10002c9e:	2200      	movs	r2, #0
10002ca0:	621a      	str	r2, [r3, #32]

      XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_WRITTEN);
10002ca2:	2001      	movs	r0, #1
10002ca4:	f7ff ff68 	bl	10002b78 <XMC_FLASH_SetHardReadLevel>

      /* Read the marker blocks from flash and decide the MARKER STATES */
      marker_state = E_EEPROM_XMC1_lReadMarkerBlocks();
10002ca8:	f000 fff4 	bl	10003c94 <E_EEPROM_XMC1_lReadMarkerBlocks>
10002cac:	1c03      	adds	r3, r0, #0
10002cae:	60fb      	str	r3, [r7, #12]

      /*
       * Call INIT-GC state machine function to take decision on current MARKER STATE available.
       * Progress to GC state machine or PrepareDFLASH State machine after completing  the Cache update
       */
      E_EEPROM_XMC1_lInitGc(marker_state);
10002cb0:	68fb      	ldr	r3, [r7, #12]
10002cb2:	1c18      	adds	r0, r3, #0
10002cb4:	f000 f8ae 	bl	10002e14 <E_EEPROM_XMC1_lInitGc>

      /* If Initialization is done without any errors, set the INIT API called state into Initialized once */
      if (handle_ptr->data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
10002cb8:	687b      	ldr	r3, [r7, #4]
10002cba:	685a      	ldr	r2, [r3, #4]
10002cbc:	23ae      	movs	r3, #174	; 0xae
10002cbe:	005b      	lsls	r3, r3, #1
10002cc0:	58d3      	ldr	r3, [r2, r3]
10002cc2:	2b0a      	cmp	r3, #10
10002cc4:	d103      	bne.n	10002cce <E_EEPROM_XMC1_Init+0x116>
      {
        handle_ptr->state = E_EEPROM_XMC1_STATUS_SUCCESS;
10002cc6:	687b      	ldr	r3, [r7, #4]
10002cc8:	2200      	movs	r2, #0
10002cca:	721a      	strb	r2, [r3, #8]
10002ccc:	e002      	b.n	10002cd4 <E_EEPROM_XMC1_Init+0x11c>
      }
      else
      {
        handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
10002cce:	687b      	ldr	r3, [r7, #4]
10002cd0:	2201      	movs	r2, #1
10002cd2:	721a      	strb	r2, [r3, #8]
      }
    }
  }
  return (handle_ptr->state);
10002cd4:	687b      	ldr	r3, [r7, #4]
10002cd6:	7a1b      	ldrb	r3, [r3, #8]
}
10002cd8:	1c18      	adds	r0, r3, #0
10002cda:	46bd      	mov	sp, r7
10002cdc:	b006      	add	sp, #24
10002cde:	bd80      	pop	{r7, pc}

10002ce0 <E_EEPROM_XMC1_Write>:
 * Return value   : E_EEPROM_XMC1_OPERATION_STATUS_t
 * 
 * Description    : This function shall write user data block into flash.
 */
E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Write(uint8_t block_number, uint8_t *data_buffer_ptr)
{
10002ce0:	b580      	push	{r7, lr}
10002ce2:	b084      	sub	sp, #16
10002ce4:	af00      	add	r7, sp, #0
10002ce6:	1c02      	adds	r2, r0, #0
10002ce8:	6039      	str	r1, [r7, #0]
10002cea:	1dfb      	adds	r3, r7, #7
10002cec:	701a      	strb	r2, [r3, #0]
  E_EEPROM_XMC1_OPERATION_STATUS_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10002cee:	4b10      	ldr	r3, [pc, #64]	; (10002d30 <E_EEPROM_XMC1_Write+0x50>)
10002cf0:	685b      	ldr	r3, [r3, #4]
10002cf2:	60bb      	str	r3, [r7, #8]
  
  XMC_ASSERT("E_EEPROM_XMC1_Write:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(block_number) !=
                                                        E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND));
  XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (data_buffer_ptr != NULL));
  
  status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
10002cf4:	230f      	movs	r3, #15
10002cf6:	18fb      	adds	r3, r7, r3
10002cf8:	2205      	movs	r2, #5
10002cfa:	701a      	strb	r2, [r3, #0]

  /* Execute only if there is no previous pending request and the GC process is in IDLE state */
  if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
10002cfc:	68ba      	ldr	r2, [r7, #8]
10002cfe:	23ae      	movs	r3, #174	; 0xae
10002d00:	005b      	lsls	r3, r3, #1
10002d02:	58d3      	ldr	r3, [r2, r3]
10002d04:	2b0a      	cmp	r3, #10
10002d06:	d10b      	bne.n	10002d20 <E_EEPROM_XMC1_Write+0x40>
  {
    /* Call local function to write the specified block of data into flash */
    status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite(block_number, data_buffer_ptr, 0U);
10002d08:	1dfb      	adds	r3, r7, #7
10002d0a:	781a      	ldrb	r2, [r3, #0]
10002d0c:	683b      	ldr	r3, [r7, #0]
10002d0e:	1c10      	adds	r0, r2, #0
10002d10:	1c19      	adds	r1, r3, #0
10002d12:	2200      	movs	r2, #0
10002d14:	f001 f908 	bl	10003f28 <E_EEPROM_XMC1_lLocalWrite>
10002d18:	1c02      	adds	r2, r0, #0
10002d1a:	230f      	movs	r3, #15
10002d1c:	18fb      	adds	r3, r7, r3
10002d1e:	701a      	strb	r2, [r3, #0]
  }

  return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
10002d20:	230f      	movs	r3, #15
10002d22:	18fb      	adds	r3, r7, r3
10002d24:	781b      	ldrb	r3, [r3, #0]
}
10002d26:	1c18      	adds	r0, r3, #0
10002d28:	46bd      	mov	sp, r7
10002d2a:	b004      	add	sp, #16
10002d2c:	bd80      	pop	{r7, pc}
10002d2e:	46c0      	nop			; (mov r8, r8)
10002d30:	2000056c 	.word	0x2000056c

10002d34 <E_EEPROM_XMC1_Read>:
 */
E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Read(uint8_t block_number,
                                                    uint32_t offset,
                                                    uint8_t *data_buffer_ptr,
                                                    uint32_t length)
{
10002d34:	b580      	push	{r7, lr}
10002d36:	b088      	sub	sp, #32
10002d38:	af00      	add	r7, sp, #0
10002d3a:	60b9      	str	r1, [r7, #8]
10002d3c:	607a      	str	r2, [r7, #4]
10002d3e:	603b      	str	r3, [r7, #0]
10002d40:	230f      	movs	r3, #15
10002d42:	18fb      	adds	r3, r7, r3
10002d44:	1c02      	adds	r2, r0, #0
10002d46:	701a      	strb	r2, [r3, #0]
  uint32_t block_size;
  uint32_t user_block_index;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_OPERATION_STATUS_t status;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10002d48:	4b31      	ldr	r3, [pc, #196]	; (10002e10 <E_EEPROM_XMC1_Read+0xdc>)
10002d4a:	685b      	ldr	r3, [r3, #4]
10002d4c:	61bb      	str	r3, [r7, #24]
  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10002d4e:	230f      	movs	r3, #15
10002d50:	18fb      	adds	r3, r7, r3
10002d52:	781b      	ldrb	r3, [r3, #0]
10002d54:	1c18      	adds	r0, r3, #0
10002d56:	f000 fef5 	bl	10003b44 <E_EEPROM_XMC1_lGetUsrBlockIndex>
10002d5a:	1c03      	adds	r3, r0, #0
10002d5c:	617b      	str	r3, [r7, #20]
  block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
10002d5e:	4b2c      	ldr	r3, [pc, #176]	; (10002e10 <E_EEPROM_XMC1_Read+0xdc>)
10002d60:	681a      	ldr	r2, [r3, #0]
10002d62:	697b      	ldr	r3, [r7, #20]
10002d64:	00db      	lsls	r3, r3, #3
10002d66:	18d3      	adds	r3, r2, r3
10002d68:	685b      	ldr	r3, [r3, #4]
10002d6a:	613b      	str	r3, [r7, #16]
  
  XMC_ASSERT("E_EEPROM_XMC1_Read:Wrong Block Number", (user_block_index  != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND));
  XMC_ASSERT("E_EEPROM_XMC1_Read:Invalid Buffer Pointer", (data_buffer_ptr != NULL));

  status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
10002d6c:	231f      	movs	r3, #31
10002d6e:	18fb      	adds	r3, r7, r3
10002d70:	2205      	movs	r2, #5
10002d72:	701a      	strb	r2, [r3, #0]

  /*Execute only if GC process is in IDLE state */
  if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
10002d74:	69ba      	ldr	r2, [r7, #24]
10002d76:	23ae      	movs	r3, #174	; 0xae
10002d78:	005b      	lsls	r3, r3, #1
10002d7a:	58d3      	ldr	r3, [r2, r3]
10002d7c:	2b0a      	cmp	r3, #10
10002d7e:	d140      	bne.n	10002e02 <E_EEPROM_XMC1_Read+0xce>
10002d80:	68ba      	ldr	r2, [r7, #8]
10002d82:	683b      	ldr	r3, [r7, #0]
10002d84:	18d2      	adds	r2, r2, r3
10002d86:	693b      	ldr	r3, [r7, #16]
10002d88:	429a      	cmp	r2, r3
10002d8a:	d83a      	bhi.n	10002e02 <E_EEPROM_XMC1_Read+0xce>
  {
    if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
10002d8c:	69ba      	ldr	r2, [r7, #24]
10002d8e:	697b      	ldr	r3, [r7, #20]
10002d90:	00db      	lsls	r3, r3, #3
10002d92:	18d3      	adds	r3, r2, r3
10002d94:	791b      	ldrb	r3, [r3, #4]
10002d96:	07db      	lsls	r3, r3, #31
10002d98:	0fdb      	lsrs	r3, r3, #31
10002d9a:	b2db      	uxtb	r3, r3
10002d9c:	2b00      	cmp	r3, #0
10002d9e:	d104      	bne.n	10002daa <E_EEPROM_XMC1_Read+0x76>
    {
      status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
10002da0:	231f      	movs	r3, #31
10002da2:	18fb      	adds	r3, r7, r3
10002da4:	2203      	movs	r2, #3
10002da6:	701a      	strb	r2, [r3, #0]
10002da8:	e02b      	b.n	10002e02 <E_EEPROM_XMC1_Read+0xce>
    }
    else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Invalid */
10002daa:	69ba      	ldr	r2, [r7, #24]
10002dac:	697b      	ldr	r3, [r7, #20]
10002dae:	00db      	lsls	r3, r3, #3
10002db0:	18d3      	adds	r3, r2, r3
10002db2:	791b      	ldrb	r3, [r3, #4]
10002db4:	079b      	lsls	r3, r3, #30
10002db6:	0fdb      	lsrs	r3, r3, #31
10002db8:	b2db      	uxtb	r3, r3
10002dba:	2b00      	cmp	r3, #0
10002dbc:	d104      	bne.n	10002dc8 <E_EEPROM_XMC1_Read+0x94>
    {
      status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
10002dbe:	231f      	movs	r3, #31
10002dc0:	18fb      	adds	r3, r7, r3
10002dc2:	2202      	movs	r2, #2
10002dc4:	701a      	strb	r2, [r3, #0]
10002dc6:	e01c      	b.n	10002e02 <E_EEPROM_XMC1_Read+0xce>
    }
    else
    {
      data_ptr->read_start_address = data_ptr->block_info[user_block_index].address;
10002dc8:	69bb      	ldr	r3, [r7, #24]
10002dca:	697a      	ldr	r2, [r7, #20]
10002dcc:	00d2      	lsls	r2, r2, #3
10002dce:	58d1      	ldr	r1, [r2, r3]
10002dd0:	69ba      	ldr	r2, [r7, #24]
10002dd2:	23ba      	movs	r3, #186	; 0xba
10002dd4:	005b      	lsls	r3, r3, #1
10002dd6:	50d1      	str	r1, [r2, r3]
      status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr , length , offset);
10002dd8:	6879      	ldr	r1, [r7, #4]
10002dda:	683a      	ldr	r2, [r7, #0]
10002ddc:	68bb      	ldr	r3, [r7, #8]
10002dde:	1c08      	adds	r0, r1, #0
10002de0:	1c11      	adds	r1, r2, #0
10002de2:	1c1a      	adds	r2, r3, #0
10002de4:	f001 fb08 	bl	100043f8 <E_EEPROM_XMC1_lReadBlockContents>
10002de8:	1c02      	adds	r2, r0, #0
10002dea:	231f      	movs	r3, #31
10002dec:	18fb      	adds	r3, r7, r3
10002dee:	701a      	strb	r2, [r3, #0]

      if ((uint32_t)status != 0U)
10002df0:	231f      	movs	r3, #31
10002df2:	18fb      	adds	r3, r7, r3
10002df4:	781b      	ldrb	r3, [r3, #0]
10002df6:	2b00      	cmp	r3, #0
10002df8:	d003      	beq.n	10002e02 <E_EEPROM_XMC1_Read+0xce>
      {
         status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
10002dfa:	231f      	movs	r3, #31
10002dfc:	18fb      	adds	r3, r7, r3
10002dfe:	2201      	movs	r2, #1
10002e00:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
10002e02:	231f      	movs	r3, #31
10002e04:	18fb      	adds	r3, r7, r3
10002e06:	781b      	ldrb	r3, [r3, #0]
}
10002e08:	1c18      	adds	r0, r3, #0
10002e0a:	46bd      	mov	sp, r7
10002e0c:	b008      	add	sp, #32
10002e0e:	bd80      	pop	{r7, pc}
10002e10:	2000056c 	.word	0x2000056c

10002e14 <E_EEPROM_XMC1_lInitGc>:
 * Description     : This function shall detect if there was any interruption in the ongoing running state
 *                   (Read/Write/GC). If yes, then this routine shall decide to run a state machine to bring back the 
 *                   emulation to normal state
 */
static void E_EEPROM_XMC1_lInitGc(const uint32_t marker_dirty_state)
{
10002e14:	b580      	push	{r7, lr}
10002e16:	b084      	sub	sp, #16
10002e18:	af00      	add	r7, sp, #0
10002e1a:	6078      	str	r0, [r7, #4]
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10002e1c:	4b25      	ldr	r3, [pc, #148]	; (10002eb4 <E_EEPROM_XMC1_lInitGc+0xa0>)
10002e1e:	685b      	ldr	r3, [r3, #4]
10002e20:	60fb      	str	r3, [r7, #12]
  
  if ( marker_dirty_state == E_EEPROM_XMC1_BOTH_BANKS_INVALID )  /* If both Bank state markers are in dirty state */
10002e22:	687b      	ldr	r3, [r7, #4]
10002e24:	2b03      	cmp	r3, #3
10002e26:	d107      	bne.n	10002e38 <E_EEPROM_XMC1_lInitGc+0x24>
  {
    data_ptr->init_gc_state = E_EEPROM_XMC1_MB_DIRTY;
10002e28:	68fa      	ldr	r2, [r7, #12]
10002e2a:	23b0      	movs	r3, #176	; 0xb0
10002e2c:	005b      	lsls	r3, r3, #1
10002e2e:	21dd      	movs	r1, #221	; 0xdd
10002e30:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitllegalStateMachine();
10002e32:	f000 f841 	bl	10002eb8 <E_EEPROM_XMC1_lInitllegalStateMachine>
10002e36:	e039      	b.n	10002eac <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else if ( marker_dirty_state == E_EEPROM_XMC1_BANK0_INVALID )  /* If Only Bank0 state marker is in dirty state */
10002e38:	687b      	ldr	r3, [r7, #4]
10002e3a:	2b01      	cmp	r3, #1
10002e3c:	d118      	bne.n	10002e70 <E_EEPROM_XMC1_lInitGc+0x5c>
  {
    data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_0F;
10002e3e:	68fa      	ldr	r2, [r7, #12]
10002e40:	23b0      	movs	r3, #176	; 0xb0
10002e42:	005b      	lsls	r3, r3, #1
10002e44:	58d3      	ldr	r3, [r2, r3]
10002e46:	220f      	movs	r2, #15
10002e48:	4013      	ands	r3, r2
10002e4a:	1c19      	adds	r1, r3, #0
10002e4c:	68fa      	ldr	r2, [r7, #12]
10002e4e:	23b0      	movs	r3, #176	; 0xb0
10002e50:	005b      	lsls	r3, r3, #1
10002e52:	50d1      	str	r1, [r2, r3]
    data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_D0;
10002e54:	68fa      	ldr	r2, [r7, #12]
10002e56:	23b0      	movs	r3, #176	; 0xb0
10002e58:	005b      	lsls	r3, r3, #1
10002e5a:	58d3      	ldr	r3, [r2, r3]
10002e5c:	22d0      	movs	r2, #208	; 0xd0
10002e5e:	431a      	orrs	r2, r3
10002e60:	1c11      	adds	r1, r2, #0
10002e62:	68fa      	ldr	r2, [r7, #12]
10002e64:	23b0      	movs	r3, #176	; 0xb0
10002e66:	005b      	lsls	r3, r3, #1
10002e68:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitDirtyStateMachine();
10002e6a:	f000 f841 	bl	10002ef0 <E_EEPROM_XMC1_lInitDirtyStateMachine>
10002e6e:	e01d      	b.n	10002eac <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else if ( marker_dirty_state == E_EEPROM_XMC1_BANK1_INVALID )  /* If Only Bank1 state marker is in dirty state */
10002e70:	687b      	ldr	r3, [r7, #4]
10002e72:	2b02      	cmp	r3, #2
10002e74:	d118      	bne.n	10002ea8 <E_EEPROM_XMC1_lInitGc+0x94>
  {
    data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_F0;
10002e76:	68fa      	ldr	r2, [r7, #12]
10002e78:	23b0      	movs	r3, #176	; 0xb0
10002e7a:	005b      	lsls	r3, r3, #1
10002e7c:	58d3      	ldr	r3, [r2, r3]
10002e7e:	22f0      	movs	r2, #240	; 0xf0
10002e80:	4013      	ands	r3, r2
10002e82:	1c19      	adds	r1, r3, #0
10002e84:	68fa      	ldr	r2, [r7, #12]
10002e86:	23b0      	movs	r3, #176	; 0xb0
10002e88:	005b      	lsls	r3, r3, #1
10002e8a:	50d1      	str	r1, [r2, r3]
    data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_0D;
10002e8c:	68fa      	ldr	r2, [r7, #12]
10002e8e:	23b0      	movs	r3, #176	; 0xb0
10002e90:	005b      	lsls	r3, r3, #1
10002e92:	58d3      	ldr	r3, [r2, r3]
10002e94:	220d      	movs	r2, #13
10002e96:	431a      	orrs	r2, r3
10002e98:	1c11      	adds	r1, r2, #0
10002e9a:	68fa      	ldr	r2, [r7, #12]
10002e9c:	23b0      	movs	r3, #176	; 0xb0
10002e9e:	005b      	lsls	r3, r3, #1
10002ea0:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitDirtyStateMachine();
10002ea2:	f000 f825 	bl	10002ef0 <E_EEPROM_XMC1_lInitDirtyStateMachine>
10002ea6:	e001      	b.n	10002eac <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else                                      /* If both Bank state markers have valid state */
  {
    E_EEPROM_XMC1_lInitNormalStateMachine();
10002ea8:	f000 f876 	bl	10002f98 <E_EEPROM_XMC1_lInitNormalStateMachine>
  }
}
10002eac:	46bd      	mov	sp, r7
10002eae:	b004      	add	sp, #16
10002eb0:	bd80      	pop	{r7, pc}
10002eb2:	46c0      	nop			; (mov r8, r8)
10002eb4:	2000056c 	.word	0x2000056c

10002eb8 <E_EEPROM_XMC1_lInitllegalStateMachine>:
 * Return value    : void
 *
 * Description     : This function shall erase all flash and start from fresh depending upon the user configuration
 */
static void E_EEPROM_XMC1_lInitllegalStateMachine(void)
{
10002eb8:	b580      	push	{r7, lr}
10002eba:	b082      	sub	sp, #8
10002ebc:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10002ebe:	4b0b      	ldr	r3, [pc, #44]	; (10002eec <E_EEPROM_XMC1_lInitllegalStateMachine+0x34>)
10002ec0:	685b      	ldr	r3, [r3, #4]
10002ec2:	607b      	str	r3, [r7, #4]
  
  /*
   * Any state apart from the normal states is considered as Illegal state. Next operation = Start Prepare DFlash
   * (Only if the configuration option Erase all is 1U) IF Configuration Option is 0U, Next Operation = Fail State
   */
  if (E_EEPROM_XMC1_HANDLE_PTR->erase_all_auto_recovery == 1U)
10002ec4:	4b09      	ldr	r3, [pc, #36]	; (10002eec <E_EEPROM_XMC1_lInitllegalStateMachine+0x34>)
10002ec6:	7a9b      	ldrb	r3, [r3, #10]
10002ec8:	2b01      	cmp	r3, #1
10002eca:	d107      	bne.n	10002edc <E_EEPROM_XMC1_lInitllegalStateMachine+0x24>
  {
    /* Change the current Bank to Bank0 */
    data_ptr->current_bank = 0U;
10002ecc:	687b      	ldr	r3, [r7, #4]
10002ece:	2200      	movs	r2, #0
10002ed0:	621a      	str	r2, [r3, #32]
    E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, 1U);
10002ed2:	2001      	movs	r0, #1
10002ed4:	2101      	movs	r1, #1
10002ed6:	f000 f957 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
10002eda:	e004      	b.n	10002ee6 <E_EEPROM_XMC1_lInitllegalStateMachine+0x2e>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10002edc:	687a      	ldr	r2, [r7, #4]
10002ede:	23ae      	movs	r3, #174	; 0xae
10002ee0:	005b      	lsls	r3, r3, #1
10002ee2:	2109      	movs	r1, #9
10002ee4:	50d1      	str	r1, [r2, r3]
  }
}
10002ee6:	46bd      	mov	sp, r7
10002ee8:	b002      	add	sp, #8
10002eea:	bd80      	pop	{r7, pc}
10002eec:	2000056c 	.word	0x2000056c

10002ef0 <E_EEPROM_XMC1_lInitDirtyStateMachine>:
 * Return value   : void
 *
 * Description    : This function shall address the dirty state recovery mechanism by erasing and rewriting states
 */
static void E_EEPROM_XMC1_lInitDirtyStateMachine(void)
{
10002ef0:	b580      	push	{r7, lr}
10002ef2:	b082      	sub	sp, #8
10002ef4:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10002ef6:	4b27      	ldr	r3, [pc, #156]	; (10002f94 <E_EEPROM_XMC1_lInitDirtyStateMachine+0xa4>)
10002ef8:	685b      	ldr	r3, [r3, #4]
10002efa:	607b      	str	r3, [r7, #4]
  switch (data_ptr->init_gc_state)
10002efc:	687a      	ldr	r2, [r7, #4]
10002efe:	23b0      	movs	r3, #176	; 0xb0
10002f00:	005b      	lsls	r3, r3, #1
10002f02:	58d3      	ldr	r3, [r2, r3]
10002f04:	2bad      	cmp	r3, #173	; 0xad
10002f06:	d01a      	beq.n	10002f3e <E_EEPROM_XMC1_lInitDirtyStateMachine+0x4e>
10002f08:	d804      	bhi.n	10002f14 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x24>
10002f0a:	2b0d      	cmp	r3, #13
10002f0c:	d029      	beq.n	10002f62 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x72>
10002f0e:	2b2d      	cmp	r3, #45	; 0x2d
10002f10:	d007      	beq.n	10002f22 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x32>
10002f12:	e038      	b.n	10002f86 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x96>
10002f14:	2bd2      	cmp	r3, #210	; 0xd2
10002f16:	d00b      	beq.n	10002f30 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x40>
10002f18:	2bda      	cmp	r3, #218	; 0xda
10002f1a:	d019      	beq.n	10002f50 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x60>
10002f1c:	2bd0      	cmp	r3, #208	; 0xd0
10002f1e:	d029      	beq.n	10002f74 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x84>
10002f20:	e031      	b.n	10002f86 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x96>
  {
    case E_EEPROM_XMC1_INIT_STATE_2D:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E  */
      data_ptr->current_bank = 0U;
10002f22:	687b      	ldr	r3, [r7, #4]
10002f24:	2200      	movs	r2, #0
10002f26:	621a      	str	r2, [r3, #32]
      /* Transition states : 2D -> 2F -> 2E */
      E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
10002f28:	2030      	movs	r0, #48	; 0x30
10002f2a:	f000 f999 	bl	10003260 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>
      break;
10002f2e:	e02d      	b.n	10002f8c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_D2:
      /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
      data_ptr->current_bank = 1U;
10002f30:	687b      	ldr	r3, [r7, #4]
10002f32:	2201      	movs	r2, #1
10002f34:	621a      	str	r2, [r3, #32]
      /* Transition states : D2 -> F2 -> E2 */
      E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
10002f36:	2030      	movs	r0, #48	; 0x30
10002f38:	f000 f992 	bl	10003260 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>
      break;
10002f3c:	e026      	b.n	10002f8c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_AD:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
      data_ptr->current_bank = 0U;
10002f3e:	687b      	ldr	r3, [r7, #4]
10002f40:	2200      	movs	r2, #0
10002f42:	621a      	str	r2, [r3, #32]
      /* Transition states : AD -> A0 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10002f44:	2000      	movs	r0, #0
10002f46:	2107      	movs	r1, #7
10002f48:	2201      	movs	r2, #1
10002f4a:	f000 f9c3 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
10002f4e:	e01d      	b.n	10002f8c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_DA:
      /* Change the current Bank to Bank1  and recover from the dirty state to E2*/
      data_ptr->current_bank = 1U;
10002f50:	687b      	ldr	r3, [r7, #4]
10002f52:	2201      	movs	r2, #1
10002f54:	621a      	str	r2, [r3, #32]
      /* Transition states : DA -> 0A -> GC PROCESS -> E2 */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10002f56:	2000      	movs	r0, #0
10002f58:	2107      	movs	r1, #7
10002f5a:	2201      	movs	r2, #1
10002f5c:	f000 f9ba 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
10002f60:	e014      	b.n	10002f8c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_0D:
      /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
      data_ptr->current_bank = 1U;
10002f62:	687b      	ldr	r3, [r7, #4]
10002f64:	2201      	movs	r2, #1
10002f66:	621a      	str	r2, [r3, #32]
      /* Transition states : 0D -> 02 -> GC PROCESS -> E2 */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10002f68:	2020      	movs	r0, #32
10002f6a:	2103      	movs	r1, #3
10002f6c:	2200      	movs	r2, #0
10002f6e:	f000 f9b1 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
10002f72:	e00b      	b.n	10002f8c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_D0:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
      data_ptr->current_bank = 0U;
10002f74:	687b      	ldr	r3, [r7, #4]
10002f76:	2200      	movs	r2, #0
10002f78:	621a      	str	r2, [r3, #32]
      /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10002f7a:	2020      	movs	r0, #32
10002f7c:	2103      	movs	r1, #3
10002f7e:	2200      	movs	r2, #0
10002f80:	f000 f9a8 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
10002f84:	e002      	b.n	10002f8c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    default:
      /* Any state apart from the normal states is considered as Illegal state */
      /* Transition states : Illegal -> PREPARE DFLASH -> 2E */
      E_EEPROM_XMC1_lInitllegalStateMachine();
10002f86:	f7ff ff97 	bl	10002eb8 <E_EEPROM_XMC1_lInitllegalStateMachine>
      break;
10002f8a:	46c0      	nop			; (mov r8, r8)
  }
}
10002f8c:	46bd      	mov	sp, r7
10002f8e:	b002      	add	sp, #8
10002f90:	bd80      	pop	{r7, pc}
10002f92:	46c0      	nop			; (mov r8, r8)
10002f94:	2000056c 	.word	0x2000056c

10002f98 <E_EEPROM_XMC1_lInitNormalStateMachine>:
* Return value   : void
*
* Description    : Check which normal bank state machine process has executed.
*/
static void E_EEPROM_XMC1_lInitNormalStateMachine(void)
{
10002f98:	b580      	push	{r7, lr}
10002f9a:	af00      	add	r7, sp, #0
  /* Check if the state matches with any of the normal marker states with active bank as bank-0*/
  if (E_EEPROM_XMC1_lInitBank0NormalStateMachine() == 0U)
10002f9c:	f000 f80e 	bl	10002fbc <E_EEPROM_XMC1_lInitBank0NormalStateMachine>
10002fa0:	1e03      	subs	r3, r0, #0
10002fa2:	d109      	bne.n	10002fb8 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
  {
    /* Check if the state matches with any of the normal marker states with active bank as bank-1*/
    if (E_EEPROM_XMC1_lInitBank1NormalStateMachine() == 0U)
10002fa4:	f000 f856 	bl	10003054 <E_EEPROM_XMC1_lInitBank1NormalStateMachine>
10002fa8:	1e03      	subs	r3, r0, #0
10002faa:	d105      	bne.n	10002fb8 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
    {
      /* Check if the state matches with any other intermediate states from where a recover is possible  */
      if (E_EEPROM_XMC1_lInitOtherNormalStateMachine() == 0U)
10002fac:	f000 f89e 	bl	100030ec <E_EEPROM_XMC1_lInitOtherNormalStateMachine>
10002fb0:	1e03      	subs	r3, r0, #0
10002fb2:	d101      	bne.n	10002fb8 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
      {
        /* If no matches found then go to illegal state and try to recover by erasing complete DFLASH */
        E_EEPROM_XMC1_lInitllegalStateMachine();
10002fb4:	f7ff ff80 	bl	10002eb8 <E_EEPROM_XMC1_lInitllegalStateMachine>
      }
    }
  }
}
10002fb8:	46bd      	mov	sp, r7
10002fba:	bd80      	pop	{r7, pc}

10002fbc <E_EEPROM_XMC1_lInitBank0NormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute bank 0 state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void)
{
10002fbc:	b580      	push	{r7, lr}
10002fbe:	b082      	sub	sp, #8
10002fc0:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10002fc2:	4b23      	ldr	r3, [pc, #140]	; (10003050 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x94>)
10002fc4:	685b      	ldr	r3, [r3, #4]
10002fc6:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
10002fc8:	2301      	movs	r3, #1
10002fca:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
10002fcc:	683a      	ldr	r2, [r7, #0]
10002fce:	23b0      	movs	r3, #176	; 0xb0
10002fd0:	005b      	lsls	r3, r3, #1
10002fd2:	58d3      	ldr	r3, [r2, r3]
10002fd4:	2b2e      	cmp	r3, #46	; 0x2e
10002fd6:	d00a      	beq.n	10002fee <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x32>
10002fd8:	d804      	bhi.n	10002fe4 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x28>
10002fda:	2b20      	cmp	r3, #32
10002fdc:	d01f      	beq.n	1000301e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x62>
10002fde:	2b2a      	cmp	r3, #42	; 0x2a
10002fe0:	d00d      	beq.n	10002ffe <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x42>
10002fe2:	e02c      	b.n	1000303e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x82>
10002fe4:	2b2f      	cmp	r3, #47	; 0x2f
10002fe6:	d022      	beq.n	1000302e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x72>
10002fe8:	2ba0      	cmp	r3, #160	; 0xa0
10002fea:	d010      	beq.n	1000300e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x52>
10002fec:	e027      	b.n	1000303e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x82>
    /*
     * Normal Data write in Bank-0 interrupted (2E), Next step = Cache Update and get ready to accept new request
     * Transition states : Nothing
     */
    case E_EEPROM_XMC1_INIT_NORMAL1:
    data_ptr->current_bank = 0U;
10002fee:	683b      	ldr	r3, [r7, #0]
10002ff0:	2200      	movs	r2, #0
10002ff2:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE);
10002ff4:	200a      	movs	r0, #10
10002ff6:	2100      	movs	r1, #0
10002ff8:	f000 f8c6 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10002ffc:	e022      	b.n	10003044 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Data copy from Bank0 to Bank1 interrupted (2A), Next step = Erasing Bank-1 and restart copy from Bank-0
     * Transition states : (2A) -> ERASE_BANK0 (2F) -> 2E -> GC_PROCESS (2A -> 0A -> 20 -> F2 -> E2)
     */
    case E_EEPROM_XMC1_INIT_DATA_COPY1:
      data_ptr->current_bank = 0U;
10002ffe:	683b      	ldr	r3, [r7, #0]
10003000:	2200      	movs	r2, #0
10003002:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSET);
10003004:	2004      	movs	r0, #4
10003006:	2130      	movs	r1, #48	; 0x30
10003008:	f000 f8ee 	bl	100031e8 <E_EEPROM_XMC1_lInitGcDataCopyState>
      break;
1000300c:	e01a      	b.n	10003044 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after copy completion from Bank1 to Bank0 (A0),Next step = Writing Valid state into Bank-0
     * Transition states : (A0) -> (20) -> GC_PROCESS (2F -> 2E)
     */
    case E_EEPROM_XMC1_INIT_COPY_DONE1:
      data_ptr->current_bank = 0U;
1000300e:	683b      	ldr	r3, [r7, #0]
10003010:	2200      	movs	r2, #0
10003012:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC_STATE);
10003014:	2007      	movs	r0, #7
10003016:	2102      	movs	r1, #2
10003018:	f000 f8b6 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000301c:	e012      	b.n	10003044 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after writing valid state to Bank0 (20), Next step = Erase of old redundant Bank-1 (2F)
     * Transition states : (20) -> (2F) -> GC_PROCESS (2E)
     */
    case E_EEPROM_XMC1_INIT_NEXT_VALID1:
      data_ptr->current_bank = 0U;
1000301e:	683b      	ldr	r3, [r7, #0]
10003020:	2200      	movs	r2, #0
10003022:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC_STATE);
10003024:	2003      	movs	r0, #3
10003026:	2102      	movs	r1, #2
10003028:	f000 f8ae 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000302c:	e00a      	b.n	10003044 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after erase of old bank completed(2F), Next step = Mark erased Bank-1 with Formated state(2E)
     * Transition states : (2F) -> GC_PROCESS (2E)
     */
    case E_EEPROM_XMC1_INIT_END_ERASE1:
      data_ptr->current_bank = 0U;
1000302e:	683b      	ldr	r3, [r7, #0]
10003030:	2200      	movs	r2, #0
10003032:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC_STATE);
10003034:	2008      	movs	r0, #8
10003036:	2102      	movs	r1, #2
10003038:	f000 f8a6 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000303c:	e002      	b.n	10003044 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    
    default:
      state_found = 0U;
1000303e:	2300      	movs	r3, #0
10003040:	607b      	str	r3, [r7, #4]
      break;
10003042:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
10003044:	687b      	ldr	r3, [r7, #4]
}
10003046:	1c18      	adds	r0, r3, #0
10003048:	46bd      	mov	sp, r7
1000304a:	b002      	add	sp, #8
1000304c:	bd80      	pop	{r7, pc}
1000304e:	46c0      	nop			; (mov r8, r8)
10003050:	2000056c 	.word	0x2000056c

10003054 <E_EEPROM_XMC1_lInitBank1NormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute bank 1 state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void)
{
10003054:	b580      	push	{r7, lr}
10003056:	b082      	sub	sp, #8
10003058:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000305a:	4b23      	ldr	r3, [pc, #140]	; (100030e8 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x94>)
1000305c:	685b      	ldr	r3, [r3, #4]
1000305e:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
10003060:	2301      	movs	r3, #1
10003062:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
10003064:	683a      	ldr	r2, [r7, #0]
10003066:	23b0      	movs	r3, #176	; 0xb0
10003068:	005b      	lsls	r3, r3, #1
1000306a:	58d3      	ldr	r3, [r2, r3]
1000306c:	2ba2      	cmp	r3, #162	; 0xa2
1000306e:	d012      	beq.n	10003096 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x42>
10003070:	d804      	bhi.n	1000307c <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x28>
10003072:	2b02      	cmp	r3, #2
10003074:	d01f      	beq.n	100030b6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x62>
10003076:	2b0a      	cmp	r3, #10
10003078:	d015      	beq.n	100030a6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x52>
1000307a:	e02c      	b.n	100030d6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x82>
1000307c:	2be2      	cmp	r3, #226	; 0xe2
1000307e:	d002      	beq.n	10003086 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x32>
10003080:	2bf2      	cmp	r3, #242	; 0xf2
10003082:	d020      	beq.n	100030c6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x72>
10003084:	e027      	b.n	100030d6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x82>
    /*
     * Normal Data write in Bank-1 interrupted (E2), Next step = Cache Update and get ready to accept new request
     * Transition states : Nothing
     */
    case E_EEPROM_XMC1_INIT_NORMAL2:
      data_ptr->current_bank = 1U;
10003086:	683b      	ldr	r3, [r7, #0]
10003088:	2201      	movs	r2, #1
1000308a:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE);
1000308c:	200a      	movs	r0, #10
1000308e:	2100      	movs	r1, #0
10003090:	f000 f87a 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10003094:	e022      	b.n	100030dc <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Data copy from Bank1 to Bank0 interrupted (A2), Next step = Erasing Bank-0 and restart copy from Bank-1
     * Transition states : (A2) -> ERASE_BANK0 (F2) -> E2 -> GC_PROCESS (A2 -> A0 -> 20 -> 2F -> 2E)
     */
    case E_EEPROM_XMC1_INIT_DATA_COPY2:
      data_ptr->current_bank = 1U;
10003096:	683b      	ldr	r3, [r7, #0]
10003098:	2201      	movs	r2, #1
1000309a:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSET);
1000309c:	2004      	movs	r0, #4
1000309e:	2130      	movs	r1, #48	; 0x30
100030a0:	f000 f8a2 	bl	100031e8 <E_EEPROM_XMC1_lInitGcDataCopyState>
      break;
100030a4:	e01a      	b.n	100030dc <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after copy completion from Bank0 to Bank1 (0A),Next step = Writing Valid state into Bank-1
     * Transition states : (0A) -> (02) -> GC_PROCESS (F2 -> E2)
     */
    case E_EEPROM_XMC1_INIT_COPY_DONE2:
      data_ptr->current_bank = 1U;
100030a6:	683b      	ldr	r3, [r7, #0]
100030a8:	2201      	movs	r2, #1
100030aa:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100030ac:	2007      	movs	r0, #7
100030ae:	2102      	movs	r1, #2
100030b0:	f000 f86a 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100030b4:	e012      	b.n	100030dc <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after writing valid state to Bank1 (02), Next step = Erase of old redundant Bank-0 (F2)
     * Transition states : (02) -> (F2) -> GC_PROCESS (E2)
     */
    case E_EEPROM_XMC1_INIT_NEXT_VALID2:
      data_ptr->current_bank = 1U;
100030b6:	683b      	ldr	r3, [r7, #0]
100030b8:	2201      	movs	r2, #1
100030ba:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100030bc:	2003      	movs	r0, #3
100030be:	2102      	movs	r1, #2
100030c0:	f000 f862 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100030c4:	e00a      	b.n	100030dc <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after erase of old bank completed(F2), Next step = Mark erased Bank-0 with Formated state(E2)
     * Transition states : (F2) -> GC_PROCESS (E2)
     */
    case E_EEPROM_XMC1_INIT_END_ERASE2:
      data_ptr->current_bank = 1U;
100030c6:	683b      	ldr	r3, [r7, #0]
100030c8:	2201      	movs	r2, #1
100030ca:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100030cc:	2008      	movs	r0, #8
100030ce:	2102      	movs	r1, #2
100030d0:	f000 f85a 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100030d4:	e002      	b.n	100030dc <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    
    default:
      state_found = 0U;
100030d6:	2300      	movs	r3, #0
100030d8:	607b      	str	r3, [r7, #4]
      break;
100030da:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
100030dc:	687b      	ldr	r3, [r7, #4]
}
100030de:	1c18      	adds	r0, r3, #0
100030e0:	46bd      	mov	sp, r7
100030e2:	b002      	add	sp, #8
100030e4:	bd80      	pop	{r7, pc}
100030e6:	46c0      	nop			; (mov r8, r8)
100030e8:	2000056c 	.word	0x2000056c

100030ec <E_EEPROM_XMC1_lInitOtherNormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute other state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void)
{
100030ec:	b580      	push	{r7, lr}
100030ee:	b082      	sub	sp, #8
100030f0:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100030f2:	4b24      	ldr	r3, [pc, #144]	; (10003184 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x98>)
100030f4:	685b      	ldr	r3, [r3, #4]
100030f6:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
100030f8:	2301      	movs	r3, #1
100030fa:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
100030fc:	683a      	ldr	r2, [r7, #0]
100030fe:	23b0      	movs	r3, #176	; 0xb0
10003100:	005b      	lsls	r3, r3, #1
10003102:	58d3      	ldr	r3, [r2, r3]
10003104:	2bf0      	cmp	r3, #240	; 0xf0
10003106:	d02c      	beq.n	10003162 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x76>
10003108:	d804      	bhi.n	10003114 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x28>
1000310a:	2b0f      	cmp	r3, #15
1000310c:	d020      	beq.n	10003150 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x64>
1000310e:	2baf      	cmp	r3, #175	; 0xaf
10003110:	d00c      	beq.n	1000312c <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x40>
10003112:	e02f      	b.n	10003174 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x88>
10003114:	2bfa      	cmp	r3, #250	; 0xfa
10003116:	d012      	beq.n	1000313e <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x52>
10003118:	2bff      	cmp	r3, #255	; 0xff
1000311a:	d12b      	bne.n	10003174 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x88>
  {
    /* Interrupted after erase of both banks completed (FF), Next step = Start Prepare DFlash  */
    case E_EEPROM_XMC1_INIT_ALL_ERASED:
      /* Change the current Bank to Bank0 */
      data_ptr->current_bank = 0U;
1000311c:	683b      	ldr	r3, [r7, #0]
1000311e:	2200      	movs	r2, #0
10003120:	621a      	str	r2, [r3, #32]
      /* Transition states : FF ->  PREPARE_DFLASH (2F) -> 2E */
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, E_EEPROM_XMC1_EXECUTE_PREP_FLASH);
10003122:	2001      	movs	r0, #1
10003124:	2101      	movs	r1, #1
10003126:	f000 f82f 	bl	10003188 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000312a:	e026      	b.n	1000317a <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
     * Interrupted after erase of Bank1 during previous recovery(AF), Next step = Bank0 marker Page program (A0)
     * Transition states : AF -> A0 -> GC PROCESS -> 20 -> 2F -> 2E
     */
    case E_EEPROM_XMC1_INIT_STATE_AF:
      /* Change the current Bank to Bank1 */
      data_ptr->current_bank = 0U;
1000312c:	683b      	ldr	r3, [r7, #0]
1000312e:	2200      	movs	r2, #0
10003130:	621a      	str	r2, [r3, #32]
    
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10003132:	2000      	movs	r0, #0
10003134:	2107      	movs	r1, #7
10003136:	2201      	movs	r2, #1
10003138:	f000 f8cc 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
1000313c:	e01d      	b.n	1000317a <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    /*
     * Interrupted after erase of Bank0 during previous recovery(FA), Next step = Bank1 marker Page program (0A)
     * Transition states : FA -> 0A -> GC PROCESS -> 02 -> F2 -> E2
     */
    case E_EEPROM_XMC1_INIT_STATE_FA:
      data_ptr->current_bank = 1U;
1000313e:	683b      	ldr	r3, [r7, #0]
10003140:	2201      	movs	r2, #1
10003142:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10003144:	2000      	movs	r0, #0
10003146:	2107      	movs	r1, #7
10003148:	2201      	movs	r2, #1
1000314a:	f000 f8c3 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
1000314e:	e014      	b.n	1000317a <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    /*
     * Interrupted after erase of Bank1 during previous recover(0F), Next step = Bank1 marker Page program (02)
     * Transition states : 0F -> 02 -> GC PROCESS -> F2 -> E2
     */
    case E_EEPROM_XMC1_INIT_STATE_0F:
      data_ptr->current_bank = 1U;
10003150:	683b      	ldr	r3, [r7, #0]
10003152:	2201      	movs	r2, #1
10003154:	621a      	str	r2, [r3, #32]
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10003156:	2020      	movs	r0, #32
10003158:	2103      	movs	r1, #3
1000315a:	2200      	movs	r2, #0
1000315c:	f000 f8ba 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
10003160:	e00b      	b.n	1000317a <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
     * Interrupted after erase of Bank1 during previous recover(F0), Next step = Bank1 marker Page program (20)
     * Transition states : F0 -> 20 -> GC PROCESS -> 2F -> 2E
     */
    case E_EEPROM_XMC1_INIT_STATE_F0:
      /* Change the current Bank to Bank0 */
      data_ptr->current_bank = 0U;
10003162:	683b      	ldr	r3, [r7, #0]
10003164:	2200      	movs	r2, #0
10003166:	621a      	str	r2, [r3, #32]
      /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10003168:	2020      	movs	r0, #32
1000316a:	2103      	movs	r1, #3
1000316c:	2200      	movs	r2, #0
1000316e:	f000 f8b1 	bl	100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
10003172:	e002      	b.n	1000317a <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    
    default:
      state_found = 0U;
10003174:	2300      	movs	r3, #0
10003176:	607b      	str	r3, [r7, #4]
      break;
10003178:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
1000317a:	687b      	ldr	r3, [r7, #4]
}
1000317c:	1c18      	adds	r0, r3, #0
1000317e:	46bd      	mov	sp, r7
10003180:	b002      	add	sp, #8
10003182:	bd80      	pop	{r7, pc}
10003184:	2000056c 	.word	0x2000056c

10003188 <E_EEPROM_XMC1_lInitGcNormalStates>:
* Return value    : void
*
* Description     : Executes normal Garbage collection state machine sub process
*/
static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process)
{
10003188:	b580      	push	{r7, lr}
1000318a:	b084      	sub	sp, #16
1000318c:	af00      	add	r7, sp, #0
1000318e:	6078      	str	r0, [r7, #4]
10003190:	6039      	str	r1, [r7, #0]
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003192:	4b14      	ldr	r3, [pc, #80]	; (100031e4 <E_EEPROM_XMC1_lInitGcNormalStates+0x5c>)
10003194:	685b      	ldr	r3, [r3, #4]
10003196:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
10003198:	f000 fd46 	bl	10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  if (next_process == E_EEPROM_XMC1_EXECUTE_PREP_FLASH)
1000319c:	683b      	ldr	r3, [r7, #0]
1000319e:	2b01      	cmp	r3, #1
100031a0:	d109      	bne.n	100031b6 <E_EEPROM_XMC1_lInitGcNormalStates+0x2e>
  {
    /* Update the GC state*/
    data_ptr->gc_state = current_state;
100031a2:	68fa      	ldr	r2, [r7, #12]
100031a4:	23ae      	movs	r3, #174	; 0xae
100031a6:	005b      	lsls	r3, r3, #1
100031a8:	6879      	ldr	r1, [r7, #4]
100031aa:	50d1      	str	r1, [r2, r3]
    /* Start Prepare DFlash routine to build FEE base  */
    E_EEPROM_XMC1_lPrepareDFlash();
100031ac:	f000 fab0 	bl	10003710 <E_EEPROM_XMC1_lPrepareDFlash>
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100031b0:	f000 fb2e 	bl	10003810 <E_EEPROM_XMC1_lUpdateCache>
100031b4:	e013      	b.n	100031de <E_EEPROM_XMC1_lInitGcNormalStates+0x56>
  }  
  else if (next_process == E_EEPROM_XMC1_EXECUTE_GC_STATE)
100031b6:	683b      	ldr	r3, [r7, #0]
100031b8:	2b02      	cmp	r3, #2
100031ba:	d109      	bne.n	100031d0 <E_EEPROM_XMC1_lInitGcNormalStates+0x48>
  {
    /* Update the GC state */
    data_ptr->gc_state = current_state;
100031bc:	68fa      	ldr	r2, [r7, #12]
100031be:	23ae      	movs	r3, #174	; 0xae
100031c0:	005b      	lsls	r3, r3, #1
100031c2:	6879      	ldr	r1, [r7, #4]
100031c4:	50d1      	str	r1, [r2, r3]
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100031c6:	f000 fb23 	bl	10003810 <E_EEPROM_XMC1_lUpdateCache>
    /* Start Garbage Collection */
    E_EEPROM_XMC1_lGarbageCollection();
100031ca:	f000 f8c3 	bl	10003354 <E_EEPROM_XMC1_lGarbageCollection>
100031ce:	e006      	b.n	100031de <E_EEPROM_XMC1_lInitGcNormalStates+0x56>
  }
  else /* if ( next_process == E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE ) */
  {
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100031d0:	f000 fb1e 	bl	10003810 <E_EEPROM_XMC1_lUpdateCache>
    /* Update the GC state as Bank-0 Erase Completed state */
    data_ptr->gc_state = current_state;
100031d4:	68fa      	ldr	r2, [r7, #12]
100031d6:	23ae      	movs	r3, #174	; 0xae
100031d8:	005b      	lsls	r3, r3, #1
100031da:	6879      	ldr	r1, [r7, #4]
100031dc:	50d1      	str	r1, [r2, r3]
  }
}
100031de:	46bd      	mov	sp, r7
100031e0:	b004      	add	sp, #16
100031e2:	bd80      	pop	{r7, pc}
100031e4:	2000056c 	.word	0x2000056c

100031e8 <E_EEPROM_XMC1_lInitGcDataCopyState>:
* Return value    : void
*
* Description     : Executes data copy state GC state machine sub process.
*/
static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset)
{
100031e8:	b580      	push	{r7, lr}
100031ea:	b084      	sub	sp, #16
100031ec:	af00      	add	r7, sp, #0
100031ee:	6078      	str	r0, [r7, #4]
100031f0:	6039      	str	r1, [r7, #0]
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100031f2:	4b1a      	ldr	r3, [pc, #104]	; (1000325c <E_EEPROM_XMC1_lInitGcDataCopyState+0x74>)
100031f4:	685b      	ldr	r3, [r3, #4]
100031f6:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
100031f8:	f000 fd16 	bl	10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Update the GC state as restart copy process */
  data_ptr->gc_state = current_state ;
100031fc:	68fa      	ldr	r2, [r7, #12]
100031fe:	23ae      	movs	r3, #174	; 0xae
10003200:	005b      	lsls	r3, r3, #1
10003202:	6879      	ldr	r1, [r7, #4]
10003204:	50d1      	str	r1, [r2, r3]
  
  /* Update the RAM Cache Table with */
  E_EEPROM_XMC1_lUpdateCache();
10003206:	f000 fb03 	bl	10003810 <E_EEPROM_XMC1_lUpdateCache>
  
  /* Erase the previous redundant bank */
  status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
1000320a:	68fb      	ldr	r3, [r7, #12]
1000320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000320e:	1c18      	adds	r0, r3, #0
10003210:	f000 fe44 	bl	10003e9c <E_EEPROM_XMC1_lEraseBank>
10003214:	1c03      	adds	r3, r0, #0
10003216:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10003218:	68bb      	ldr	r3, [r7, #8]
1000321a:	2b00      	cmp	r3, #0
1000321c:	d116      	bne.n	1000324c <E_EEPROM_XMC1_lInitGcDataCopyState+0x64>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
1000321e:	f000 fddb 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    
    /* Write formatted state to the erased bank (2E)  */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
10003222:	68fb      	ldr	r3, [r7, #12]
10003224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003226:	683b      	ldr	r3, [r7, #0]
10003228:	18d3      	adds	r3, r2, r3
1000322a:	1c18      	adds	r0, r3, #0
1000322c:	f000 fe60 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
10003230:	1c03      	adds	r3, r0, #0
10003232:	60bb      	str	r3, [r7, #8]
    
    if (status == 0U)
10003234:	68bb      	ldr	r3, [r7, #8]
10003236:	2b00      	cmp	r3, #0
10003238:	d102      	bne.n	10003240 <E_EEPROM_XMC1_lInitGcDataCopyState+0x58>
    {
      /* Start Garbage Collection */
      E_EEPROM_XMC1_lGarbageCollection();
1000323a:	f000 f88b 	bl	10003354 <E_EEPROM_XMC1_lGarbageCollection>
1000323e:	e00a      	b.n	10003256 <E_EEPROM_XMC1_lInitGcDataCopyState+0x6e>
    }
    else
    {
      data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10003240:	68fa      	ldr	r2, [r7, #12]
10003242:	23ae      	movs	r3, #174	; 0xae
10003244:	005b      	lsls	r3, r3, #1
10003246:	2109      	movs	r1, #9
10003248:	50d1      	str	r1, [r2, r3]
1000324a:	e004      	b.n	10003256 <E_EEPROM_XMC1_lInitGcDataCopyState+0x6e>
    }
    
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000324c:	68fa      	ldr	r2, [r7, #12]
1000324e:	23ae      	movs	r3, #174	; 0xae
10003250:	005b      	lsls	r3, r3, #1
10003252:	2109      	movs	r1, #9
10003254:	50d1      	str	r1, [r2, r3]
  }
  
}
10003256:	46bd      	mov	sp, r7
10003258:	b004      	add	sp, #16
1000325a:	bd80      	pop	{r7, pc}
1000325c:	2000056c 	.word	0x2000056c

10003260 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>:
 * Return value    : void
 *
 * Description     : Executes state machine sub process for erase dirty states to recover.
 */
static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset)
{
10003260:	b580      	push	{r7, lr}
10003262:	b084      	sub	sp, #16
10003264:	af00      	add	r7, sp, #0
10003266:	6078      	str	r0, [r7, #4]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003268:	4b19      	ldr	r3, [pc, #100]	; (100032d0 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x70>)
1000326a:	685b      	ldr	r3, [r3, #4]
1000326c:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
1000326e:	f000 fcdb 	bl	10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Erase the previous redundant bank */
  status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10003272:	68fb      	ldr	r3, [r7, #12]
10003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003276:	1c18      	adds	r0, r3, #0
10003278:	f000 fe10 	bl	10003e9c <E_EEPROM_XMC1_lEraseBank>
1000327c:	1c03      	adds	r3, r0, #0
1000327e:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10003280:	68bb      	ldr	r3, [r7, #8]
10003282:	2b00      	cmp	r3, #0
10003284:	d11b      	bne.n	100032be <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x5e>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10003286:	f000 fda7 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    
    /* Write formatted state to the erased bank */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
1000328a:	68fb      	ldr	r3, [r7, #12]
1000328c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000328e:	687b      	ldr	r3, [r7, #4]
10003290:	18d3      	adds	r3, r2, r3
10003292:	1c18      	adds	r0, r3, #0
10003294:	f000 fe2c 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
10003298:	1c03      	adds	r3, r0, #0
1000329a:	60bb      	str	r3, [r7, #8]
    if (status == 0U)
1000329c:	68bb      	ldr	r3, [r7, #8]
1000329e:	2b00      	cmp	r3, #0
100032a0:	d107      	bne.n	100032b2 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x52>
    {
      /* Update the RAM Cache Table with the written blocks of data.*/
      E_EEPROM_XMC1_lUpdateCache();
100032a2:	f000 fab5 	bl	10003810 <E_EEPROM_XMC1_lUpdateCache>
      
      data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
100032a6:	68fa      	ldr	r2, [r7, #12]
100032a8:	23ae      	movs	r3, #174	; 0xae
100032aa:	005b      	lsls	r3, r3, #1
100032ac:	210a      	movs	r1, #10
100032ae:	50d1      	str	r1, [r2, r3]
100032b0:	e00a      	b.n	100032c8 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x68>
    }
    else
    {
      data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100032b2:	68fa      	ldr	r2, [r7, #12]
100032b4:	23ae      	movs	r3, #174	; 0xae
100032b6:	005b      	lsls	r3, r3, #1
100032b8:	2109      	movs	r1, #9
100032ba:	50d1      	str	r1, [r2, r3]
100032bc:	e004      	b.n	100032c8 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x68>
    }
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100032be:	68fa      	ldr	r2, [r7, #12]
100032c0:	23ae      	movs	r3, #174	; 0xae
100032c2:	005b      	lsls	r3, r3, #1
100032c4:	2109      	movs	r1, #9
100032c6:	50d1      	str	r1, [r2, r3]
  }
}
100032c8:	46bd      	mov	sp, r7
100032ca:	b004      	add	sp, #16
100032cc:	bd80      	pop	{r7, pc}
100032ce:	46c0      	nop			; (mov r8, r8)
100032d0:	2000056c 	.word	0x2000056c

100032d4 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>:
 * Description     : Recovers from any copy process dirty state.
 */
static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( uint32_t current_state,
                                                          uint32_t next_state,
                                                          uint32_t page_addr_select)
{
100032d4:	b580      	push	{r7, lr}
100032d6:	b086      	sub	sp, #24
100032d8:	af00      	add	r7, sp, #0
100032da:	60f8      	str	r0, [r7, #12]
100032dc:	60b9      	str	r1, [r7, #8]
100032de:	607a      	str	r2, [r7, #4]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100032e0:	4b1b      	ldr	r3, [pc, #108]	; (10003350 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x7c>)
100032e2:	685b      	ldr	r3, [r3, #4]
100032e4:	617b      	str	r3, [r7, #20]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
100032e6:	f000 fc9f 	bl	10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Set the marker blocks with copy completed state */
  E_EEPROM_XMC1_lSetMarkerPageBuffer(current_state);
100032ea:	68fb      	ldr	r3, [r7, #12]
100032ec:	1c18      	adds	r0, r3, #0
100032ee:	f000 fd91 	bl	10003e14 <E_EEPROM_XMC1_lSetMarkerPageBuffer>
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
100032f2:	f7fd ff1d 	bl	10001130 <XMC_FLASH_ClearStatus>
  
  /* Decide the bank from page_addr_select and Erase the marker page + Program with the current state + Verify */
  if (page_addr_select == 1U)
100032f6:	687b      	ldr	r3, [r7, #4]
100032f8:	2b01      	cmp	r3, #1
100032fa:	d108      	bne.n	1000330e <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x3a>
  {
    E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_dest_addr, (uint32_t*)(void*)data_ptr->page_write_buffer);
100032fc:	697b      	ldr	r3, [r7, #20]
100032fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003300:	697b      	ldr	r3, [r7, #20]
10003302:	3358      	adds	r3, #88	; 0x58
10003304:	1c10      	adds	r0, r2, #0
10003306:	1c19      	adds	r1, r3, #0
10003308:	f001 f912 	bl	10004530 <E_EEPROM_XMC1_lWriteSinglePage>
1000330c:	e007      	b.n	1000331e <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x4a>
  }
  else
  {
    E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_src_addr, (uint32_t*)(void*)data_ptr->page_write_buffer);
1000330e:	697b      	ldr	r3, [r7, #20]
10003310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10003312:	697b      	ldr	r3, [r7, #20]
10003314:	3358      	adds	r3, #88	; 0x58
10003316:	1c10      	adds	r0, r2, #0
10003318:	1c19      	adds	r1, r3, #0
1000331a:	f001 f909 	bl	10004530 <E_EEPROM_XMC1_lWriteSinglePage>
  }
  
  status = E_EEPROM_XMC1_lGetFlashStatus();
1000331e:	f001 f921 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
10003322:	1c03      	adds	r3, r0, #0
10003324:	613b      	str	r3, [r7, #16]
  
  if (status == 0U)
10003326:	693b      	ldr	r3, [r7, #16]
10003328:	2b00      	cmp	r3, #0
1000332a:	d109      	bne.n	10003340 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x6c>
  {
    /* Update the GC state as write next bank valid */
    data_ptr->gc_state = next_state ;
1000332c:	697a      	ldr	r2, [r7, #20]
1000332e:	23ae      	movs	r3, #174	; 0xae
10003330:	005b      	lsls	r3, r3, #1
10003332:	68b9      	ldr	r1, [r7, #8]
10003334:	50d1      	str	r1, [r2, r3]
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
10003336:	f000 fa6b 	bl	10003810 <E_EEPROM_XMC1_lUpdateCache>
    /* Start Garbage Collection */
    E_EEPROM_XMC1_lGarbageCollection();
1000333a:	f000 f80b 	bl	10003354 <E_EEPROM_XMC1_lGarbageCollection>
1000333e:	e004      	b.n	1000334a <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x76>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10003340:	697a      	ldr	r2, [r7, #20]
10003342:	23ae      	movs	r3, #174	; 0xae
10003344:	005b      	lsls	r3, r3, #1
10003346:	2109      	movs	r1, #9
10003348:	50d1      	str	r1, [r2, r3]
  }
}
1000334a:	46bd      	mov	sp, r7
1000334c:	b006      	add	sp, #24
1000334e:	bd80      	pop	{r7, pc}
10003350:	2000056c 	.word	0x2000056c

10003354 <E_EEPROM_XMC1_lGarbageCollection>:
 * Return value    : void
 *
 * Description     : This function execute's the garbage collection state machine.
 */
static void E_EEPROM_XMC1_lGarbageCollection(void)
{
10003354:	b580      	push	{r7, lr}
10003356:	b082      	sub	sp, #8
10003358:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000335a:	4b24      	ldr	r3, [pc, #144]	; (100033ec <E_EEPROM_XMC1_lGarbageCollection+0x98>)
1000335c:	685b      	ldr	r3, [r3, #4]
1000335e:	607b      	str	r3, [r7, #4]
  
  do
  {
    switch (data_ptr->gc_state)
10003360:	687a      	ldr	r2, [r7, #4]
10003362:	23ae      	movs	r3, #174	; 0xae
10003364:	005b      	lsls	r3, r3, #1
10003366:	58d3      	ldr	r3, [r2, r3]
10003368:	2b08      	cmp	r3, #8
1000336a:	d82c      	bhi.n	100033c6 <E_EEPROM_XMC1_lGarbageCollection+0x72>
1000336c:	009a      	lsls	r2, r3, #2
1000336e:	4b20      	ldr	r3, [pc, #128]	; (100033f0 <E_EEPROM_XMC1_lGarbageCollection+0x9c>)
10003370:	18d3      	adds	r3, r2, r3
10003372:	681b      	ldr	r3, [r3, #0]
10003374:	469f      	mov	pc, r3
    {
      case E_EEPROM_XMC1_GC_COPY_START:
        E_EEPROM_XMC1_lHandleGcStartCopy();
10003376:	f000 f881 	bl	1000347c <E_EEPROM_XMC1_lHandleGcStartCopy>
        break;
1000337a:	e027      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_COPY_WRITE:
        E_EEPROM_XMC1_lHandleGcCopyWrite();
1000337c:	f000 f8e8 	bl	10003550 <E_EEPROM_XMC1_lHandleGcCopyWrite>
        break;
10003380:	e024      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_READ_NXTBLOCK:
        XMC_FLASH_ClearStatus();
10003382:	f7fd fed5 	bl	10001130 <XMC_FLASH_ClearStatus>
        E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr ,(uint32_t*)(void*)data_ptr->read_write_buffer);
10003386:	687b      	ldr	r3, [r7, #4]
10003388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000338a:	687b      	ldr	r3, [r7, #4]
1000338c:	3344      	adds	r3, #68	; 0x44
1000338e:	1c10      	adds	r0, r2, #0
10003390:	1c19      	adds	r1, r3, #0
10003392:	f001 f8bd 	bl	10004510 <E_EEPROM_XMC1_lReadSingleBlock>
        data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
10003396:	687a      	ldr	r2, [r7, #4]
10003398:	23ae      	movs	r3, #174	; 0xae
1000339a:	005b      	lsls	r3, r3, #1
1000339c:	2105      	movs	r1, #5
1000339e:	50d1      	str	r1, [r2, r3]
        break;
100033a0:	e014      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_COPY_END:
        E_EEPROM_XMC1_lHandleGcEndOfCopy();
100033a2:	f000 f94b 	bl	1000363c <E_EEPROM_XMC1_lHandleGcEndOfCopy>
        break;
100033a6:	e011      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_NEXT_BANK_VALID:
        E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_GC_ERASE_PREV_BANK);
100033a8:	2007      	movs	r0, #7
100033aa:	2103      	movs	r1, #3
100033ac:	f000 f972 	bl	10003694 <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
100033b0:	e00c      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_ERASE_PREV_BANK:
        E_EEPROM_XMC1_lHandleGcOtherStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_GC_MARK_END_ERASE1);
100033b2:	2003      	movs	r0, #3
100033b4:	2108      	movs	r1, #8
100033b6:	f000 f96d 	bl	10003694 <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
100033ba:	e007      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_MARK_END_ERASE1:
        E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_GC_IDLE);
100033bc:	2008      	movs	r0, #8
100033be:	210a      	movs	r1, #10
100033c0:	f000 f968 	bl	10003694 <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
100033c4:	e002      	b.n	100033cc <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      default:
        E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
100033c6:	f000 f815 	bl	100033f4 <E_EEPROM_XMC1_lHandleGcRequested>
      break;
100033ca:	46c0      	nop			; (mov r8, r8)
    }
    
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
100033cc:	687a      	ldr	r2, [r7, #4]
100033ce:	23ae      	movs	r3, #174	; 0xae
100033d0:	005b      	lsls	r3, r3, #1
100033d2:	58d3      	ldr	r3, [r2, r3]
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
100033d4:	2b0a      	cmp	r3, #10
100033d6:	d005      	beq.n	100033e4 <E_EEPROM_XMC1_lGarbageCollection+0x90>
100033d8:	687a      	ldr	r2, [r7, #4]
100033da:	23ae      	movs	r3, #174	; 0xae
100033dc:	005b      	lsls	r3, r3, #1
100033de:	58d3      	ldr	r3, [r2, r3]
      default:
        E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
      break;
    }
    
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
100033e0:	2b09      	cmp	r3, #9
100033e2:	d1bd      	bne.n	10003360 <E_EEPROM_XMC1_lGarbageCollection+0xc>
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
}
100033e4:	46bd      	mov	sp, r7
100033e6:	b002      	add	sp, #8
100033e8:	bd80      	pop	{r7, pc}
100033ea:	46c0      	nop			; (mov r8, r8)
100033ec:	2000056c 	.word	0x2000056c
100033f0:	10005dfc 	.word	0x10005dfc

100033f4 <E_EEPROM_XMC1_lHandleGcRequested>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC REQUESTED state
 */
static void E_EEPROM_XMC1_lHandleGcRequested(void)
{
100033f4:	b580      	push	{r7, lr}
100033f6:	b084      	sub	sp, #16
100033f8:	af00      	add	r7, sp, #0
  uint32_t status;
  uint32_t block_count;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100033fa:	4b1f      	ldr	r3, [pc, #124]	; (10003478 <E_EEPROM_XMC1_lHandleGcRequested+0x84>)
100033fc:	685b      	ldr	r3, [r3, #4]
100033fe:	607b      	str	r3, [r7, #4]
  
  E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10003400:	f000 fcea 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
  /* Write Copy start state to new bank  (2A) or (A2) */
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_BEGIN_OFFSET));
10003404:	687b      	ldr	r3, [r7, #4]
10003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003408:	3310      	adds	r3, #16
1000340a:	1c18      	adds	r0, r3, #0
1000340c:	f000 fd70 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
10003410:	1c03      	adds	r3, r0, #0
10003412:	603b      	str	r3, [r7, #0]
  if (status == 0U)
10003414:	683b      	ldr	r3, [r7, #0]
10003416:	2b00      	cmp	r3, #0
10003418:	d125      	bne.n	10003466 <E_EEPROM_XMC1_lHandleGcRequested+0x72>
  {
    /* Initialize the copied status for all the logical blocks */
    cache_ptr = data_ptr->block_info;
1000341a:	687b      	ldr	r3, [r7, #4]
1000341c:	60bb      	str	r3, [r7, #8]
    block_count = 0U;
1000341e:	2300      	movs	r3, #0
10003420:	60fb      	str	r3, [r7, #12]
    do
    {
      cache_ptr->status.copied = 0U;
10003422:	68bb      	ldr	r3, [r7, #8]
10003424:	791a      	ldrb	r2, [r3, #4]
10003426:	2104      	movs	r1, #4
10003428:	438a      	bics	r2, r1
1000342a:	711a      	strb	r2, [r3, #4]
      block_count++;
1000342c:	68fb      	ldr	r3, [r7, #12]
1000342e:	3301      	adds	r3, #1
10003430:	60fb      	str	r3, [r7, #12]
      cache_ptr++;
10003432:	68bb      	ldr	r3, [r7, #8]
10003434:	3308      	adds	r3, #8
10003436:	60bb      	str	r3, [r7, #8]
    } while (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count);
10003438:	4b0f      	ldr	r3, [pc, #60]	; (10003478 <E_EEPROM_XMC1_lHandleGcRequested+0x84>)
1000343a:	7a5b      	ldrb	r3, [r3, #9]
1000343c:	1e1a      	subs	r2, r3, #0
1000343e:	68fb      	ldr	r3, [r7, #12]
10003440:	429a      	cmp	r2, r3
10003442:	d1ee      	bne.n	10003422 <E_EEPROM_XMC1_lHandleGcRequested+0x2e>
    
    data_ptr->gc_log_block_count = 0U;
10003444:	687a      	ldr	r2, [r7, #4]
10003446:	23b2      	movs	r3, #178	; 0xb2
10003448:	005b      	lsls	r3, r3, #1
1000344a:	2100      	movs	r1, #0
1000344c:	50d1      	str	r1, [r2, r3]
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
1000344e:	687a      	ldr	r2, [r7, #4]
10003450:	23ae      	movs	r3, #174	; 0xae
10003452:	005b      	lsls	r3, r3, #1
10003454:	2101      	movs	r1, #1
10003456:	50d1      	str	r1, [r2, r3]
    data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10003458:	687b      	ldr	r3, [r7, #4]
1000345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000345c:	1c5a      	adds	r2, r3, #1
1000345e:	32ff      	adds	r2, #255	; 0xff
10003460:	687b      	ldr	r3, [r7, #4]
10003462:	625a      	str	r2, [r3, #36]	; 0x24
10003464:	e004      	b.n	10003470 <E_EEPROM_XMC1_lHandleGcRequested+0x7c>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10003466:	687a      	ldr	r2, [r7, #4]
10003468:	23ae      	movs	r3, #174	; 0xae
1000346a:	005b      	lsls	r3, r3, #1
1000346c:	2109      	movs	r1, #9
1000346e:	50d1      	str	r1, [r2, r3]
  }
}
10003470:	46bd      	mov	sp, r7
10003472:	b004      	add	sp, #16
10003474:	bd80      	pop	{r7, pc}
10003476:	46c0      	nop			; (mov r8, r8)
10003478:	2000056c 	.word	0x2000056c

1000347c <E_EEPROM_XMC1_lHandleGcStartCopy>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC START COPY state
 */
static void E_EEPROM_XMC1_lHandleGcStartCopy(void)
{
1000347c:	b580      	push	{r7, lr}
1000347e:	b084      	sub	sp, #16
10003480:	af00      	add	r7, sp, #0
  uint32_t state_flag;
  uint32_t block_count;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003482:	4b32      	ldr	r3, [pc, #200]	; (1000354c <E_EEPROM_XMC1_lHandleGcStartCopy+0xd0>)
10003484:	685b      	ldr	r3, [r3, #4]
10003486:	603b      	str	r3, [r7, #0]
  
  state_flag = 0U;
10003488:	2300      	movs	r3, #0
1000348a:	60fb      	str	r3, [r7, #12]
  /* initialize the copied status for all the logical blocks */
  block_count = data_ptr->gc_log_block_count;
1000348c:	683a      	ldr	r2, [r7, #0]
1000348e:	23b2      	movs	r3, #178	; 0xb2
10003490:	005b      	lsls	r3, r3, #1
10003492:	58d3      	ldr	r3, [r2, r3]
10003494:	60bb      	str	r3, [r7, #8]
  cache_ptr = data_ptr->block_info + block_count;
10003496:	68bb      	ldr	r3, [r7, #8]
10003498:	00db      	lsls	r3, r3, #3
1000349a:	683a      	ldr	r2, [r7, #0]
1000349c:	18d3      	adds	r3, r2, r3
1000349e:	607b      	str	r3, [r7, #4]
  /*
   * Check all available blocks in cache table for Copy process. Condition breaks on either the current block is
   * consistent or all blocks check for consistency is finished
   */
  while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
100034a0:	e01a      	b.n	100034d8 <E_EEPROM_XMC1_lHandleGcStartCopy+0x5c>
  {
    /* If block is consistent set state flag for copy enable*/
    if (((cache_ptr->address != 0U) && (cache_ptr->status.consistent == 1U)) && (cache_ptr->status.copied == 0U))
100034a2:	687b      	ldr	r3, [r7, #4]
100034a4:	681b      	ldr	r3, [r3, #0]
100034a6:	2b00      	cmp	r3, #0
100034a8:	d010      	beq.n	100034cc <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
100034aa:	687b      	ldr	r3, [r7, #4]
100034ac:	791b      	ldrb	r3, [r3, #4]
100034ae:	2202      	movs	r2, #2
100034b0:	4013      	ands	r3, r2
100034b2:	b2db      	uxtb	r3, r3
100034b4:	2b00      	cmp	r3, #0
100034b6:	d009      	beq.n	100034cc <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
100034b8:	687b      	ldr	r3, [r7, #4]
100034ba:	791b      	ldrb	r3, [r3, #4]
100034bc:	2204      	movs	r2, #4
100034be:	4013      	ands	r3, r2
100034c0:	b2db      	uxtb	r3, r3
100034c2:	2b00      	cmp	r3, #0
100034c4:	d102      	bne.n	100034cc <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
    {
      state_flag = 1U;
100034c6:	2301      	movs	r3, #1
100034c8:	60fb      	str	r3, [r7, #12]
100034ca:	e005      	b.n	100034d8 <E_EEPROM_XMC1_lHandleGcStartCopy+0x5c>
    }
    /* If block is inconsistent ignore the block from copy and try next block*/
    else
    {
      block_count++;
100034cc:	68bb      	ldr	r3, [r7, #8]
100034ce:	3301      	adds	r3, #1
100034d0:	60bb      	str	r3, [r7, #8]
      cache_ptr++;
100034d2:	687b      	ldr	r3, [r7, #4]
100034d4:	3308      	adds	r3, #8
100034d6:	607b      	str	r3, [r7, #4]
  cache_ptr = data_ptr->block_info + block_count;
  /*
   * Check all available blocks in cache table for Copy process. Condition breaks on either the current block is
   * consistent or all blocks check for consistency is finished
   */
  while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
100034d8:	68fb      	ldr	r3, [r7, #12]
100034da:	2b00      	cmp	r3, #0
100034dc:	d105      	bne.n	100034ea <E_EEPROM_XMC1_lHandleGcStartCopy+0x6e>
100034de:	4b1b      	ldr	r3, [pc, #108]	; (1000354c <E_EEPROM_XMC1_lHandleGcStartCopy+0xd0>)
100034e0:	7a5b      	ldrb	r3, [r3, #9]
100034e2:	1e1a      	subs	r2, r3, #0
100034e4:	68bb      	ldr	r3, [r7, #8]
100034e6:	429a      	cmp	r2, r3
100034e8:	d1db      	bne.n	100034a2 <E_EEPROM_XMC1_lHandleGcStartCopy+0x26>
      cache_ptr++;
    }
  } /* end of while */
  
  /* If block is consistent */
  if (state_flag == 1U)
100034ea:	68fb      	ldr	r3, [r7, #12]
100034ec:	2b01      	cmp	r3, #1
100034ee:	d116      	bne.n	1000351e <E_EEPROM_XMC1_lHandleGcStartCopy+0xa2>
  {
    data_ptr->gc_src_addr = cache_ptr->address;
100034f0:	687b      	ldr	r3, [r7, #4]
100034f2:	681a      	ldr	r2, [r3, #0]
100034f4:	683b      	ldr	r3, [r7, #0]
100034f6:	629a      	str	r2, [r3, #40]	; 0x28
    data_ptr->gc_block_counter = 0U;
100034f8:	683b      	ldr	r3, [r7, #0]
100034fa:	2200      	movs	r2, #0
100034fc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Clear all error status flags before flash operation*/
    XMC_FLASH_ClearStatus();
100034fe:	f7fd fe17 	bl	10001130 <XMC_FLASH_ClearStatus>
    
    E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr,(uint32_t*)(void*)data_ptr->read_write_buffer);
10003502:	683b      	ldr	r3, [r7, #0]
10003504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10003506:	683b      	ldr	r3, [r7, #0]
10003508:	3344      	adds	r3, #68	; 0x44
1000350a:	1c10      	adds	r0, r2, #0
1000350c:	1c19      	adds	r1, r3, #0
1000350e:	f000 ffff 	bl	10004510 <E_EEPROM_XMC1_lReadSingleBlock>
    
    /* Return value above is ignored as parameters passed from FEE are correct */
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
10003512:	683a      	ldr	r2, [r7, #0]
10003514:	23ae      	movs	r3, #174	; 0xae
10003516:	005b      	lsls	r3, r3, #1
10003518:	2105      	movs	r1, #5
1000351a:	50d1      	str	r1, [r2, r3]
1000351c:	e00e      	b.n	1000353c <E_EEPROM_XMC1_lHandleGcStartCopy+0xc0>
  }
  /* Finished copying all the logical blocks */
  else
  {
    /* Update the next free block pointer */
    data_ptr->next_free_block_addr = data_ptr->gc_dest_addr;
1000351e:	683b      	ldr	r3, [r7, #0]
10003520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003522:	683b      	ldr	r3, [r7, #0]
10003524:	635a      	str	r2, [r3, #52]	; 0x34
    data_ptr->gc_src_addr = data_ptr->curr_bank_src_addr;
10003526:	683b      	ldr	r3, [r7, #0]
10003528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000352a:	683b      	ldr	r3, [r7, #0]
1000352c:	629a      	str	r2, [r3, #40]	; 0x28
    E_EEPROM_XMC1_lUpdateCurrBankInfo();
1000352e:	f000 fb7b 	bl	10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_END;
10003532:	683a      	ldr	r2, [r7, #0]
10003534:	23ae      	movs	r3, #174	; 0xae
10003536:	005b      	lsls	r3, r3, #1
10003538:	2106      	movs	r1, #6
1000353a:	50d1      	str	r1, [r2, r3]
  }
  data_ptr->gc_log_block_count = block_count;
1000353c:	683a      	ldr	r2, [r7, #0]
1000353e:	23b2      	movs	r3, #178	; 0xb2
10003540:	005b      	lsls	r3, r3, #1
10003542:	68b9      	ldr	r1, [r7, #8]
10003544:	50d1      	str	r1, [r2, r3]
}
10003546:	46bd      	mov	sp, r7
10003548:	b004      	add	sp, #16
1000354a:	bd80      	pop	{r7, pc}
1000354c:	2000056c 	.word	0x2000056c

10003550 <E_EEPROM_XMC1_lHandleGcCopyWrite>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC START COPY WRITE state.
 */
static void E_EEPROM_XMC1_lHandleGcCopyWrite(void)
{
10003550:	b580      	push	{r7, lr}
10003552:	b086      	sub	sp, #24
10003554:	af00      	add	r7, sp, #0
  uint32_t block_count;
  uint32_t flash_physical_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003556:	4b38      	ldr	r3, [pc, #224]	; (10003638 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xe8>)
10003558:	685b      	ldr	r3, [r3, #4]
1000355a:	613b      	str	r3, [r7, #16]
  
  /* initialize the copied status for all the logical blocks */
  block_count = data_ptr->gc_log_block_count;
1000355c:	693a      	ldr	r2, [r7, #16]
1000355e:	23b2      	movs	r3, #178	; 0xb2
10003560:	005b      	lsls	r3, r3, #1
10003562:	58d3      	ldr	r3, [r2, r3]
10003564:	617b      	str	r3, [r7, #20]
  cache_ptr = data_ptr->block_info + block_count;
10003566:	697b      	ldr	r3, [r7, #20]
10003568:	00db      	lsls	r3, r3, #3
1000356a:	693a      	ldr	r2, [r7, #16]
1000356c:	18d3      	adds	r3, r2, r3
1000356e:	60fb      	str	r3, [r7, #12]
  
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr));
10003570:	693b      	ldr	r3, [r7, #16]
10003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003574:	1c18      	adds	r0, r3, #0
10003576:	f000 fcbb 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
1000357a:	1c03      	adds	r3, r0, #0
1000357c:	60bb      	str	r3, [r7, #8]
  if (status == 0U)
1000357e:	68bb      	ldr	r3, [r7, #8]
10003580:	2b00      	cmp	r3, #0
10003582:	d14b      	bne.n	1000361c <E_EEPROM_XMC1_lHandleGcCopyWrite+0xcc>
  {      
    (data_ptr->gc_block_counter)++;
10003584:	693b      	ldr	r3, [r7, #16]
10003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003588:	1c5a      	adds	r2, r3, #1
1000358a:	693b      	ldr	r3, [r7, #16]
1000358c:	63da      	str	r2, [r3, #60]	; 0x3c
    size = (E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_count].size);
1000358e:	4b2a      	ldr	r3, [pc, #168]	; (10003638 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xe8>)
10003590:	681a      	ldr	r2, [r3, #0]
10003592:	697b      	ldr	r3, [r7, #20]
10003594:	00db      	lsls	r3, r3, #3
10003596:	18d3      	adds	r3, r2, r3
10003598:	685b      	ldr	r3, [r3, #4]
1000359a:	607b      	str	r3, [r7, #4]
    flash_physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
1000359c:	687b      	ldr	r3, [r7, #4]
1000359e:	1c18      	adds	r0, r3, #0
100035a0:	f000 fb00 	bl	10003ba4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
100035a4:	1c03      	adds	r3, r0, #0
100035a6:	603b      	str	r3, [r7, #0]
    /* If all the blocks of the logical block are copied */
    if ((data_ptr->gc_block_counter == flash_physical_blocks) || (cache_ptr->status.valid == 0U))
100035a8:	693b      	ldr	r3, [r7, #16]
100035aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
100035ac:	683b      	ldr	r3, [r7, #0]
100035ae:	429a      	cmp	r2, r3
100035b0:	d006      	beq.n	100035c0 <E_EEPROM_XMC1_lHandleGcCopyWrite+0x70>
100035b2:	68fb      	ldr	r3, [r7, #12]
100035b4:	791b      	ldrb	r3, [r3, #4]
100035b6:	2201      	movs	r2, #1
100035b8:	4013      	ands	r3, r2
100035ba:	b2db      	uxtb	r3, r3
100035bc:	2b00      	cmp	r3, #0
100035be:	d11b      	bne.n	100035f8 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xa8>
    {
      cache_ptr->status.copied = 1U;
100035c0:	68fb      	ldr	r3, [r7, #12]
100035c2:	791a      	ldrb	r2, [r3, #4]
100035c4:	2104      	movs	r1, #4
100035c6:	430a      	orrs	r2, r1
100035c8:	711a      	strb	r2, [r3, #4]
      block_count++;
100035ca:	697b      	ldr	r3, [r7, #20]
100035cc:	3301      	adds	r3, #1
100035ce:	617b      	str	r3, [r7, #20]
      data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
100035d0:	693a      	ldr	r2, [r7, #16]
100035d2:	23ae      	movs	r3, #174	; 0xae
100035d4:	005b      	lsls	r3, r3, #1
100035d6:	2101      	movs	r1, #1
100035d8:	50d1      	str	r1, [r2, r3]
      data_ptr->gc_dest_addr += E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
100035da:	693b      	ldr	r3, [r7, #16]
100035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100035de:	3310      	adds	r3, #16
100035e0:	1c1a      	adds	r2, r3, #0
100035e2:	693b      	ldr	r3, [r7, #16]
100035e4:	625a      	str	r2, [r3, #36]	; 0x24
      cache_ptr->address = data_ptr->gc_dest_addr - (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * data_ptr->gc_block_counter);
100035e6:	693b      	ldr	r3, [r7, #16]
100035e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100035ea:	693b      	ldr	r3, [r7, #16]
100035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100035ee:	011b      	lsls	r3, r3, #4
100035f0:	1ad2      	subs	r2, r2, r3
100035f2:	68fb      	ldr	r3, [r7, #12]
100035f4:	601a      	str	r2, [r3, #0]
100035f6:	e016      	b.n	10003626 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xd6>
    }
    else
    {
      data_ptr->gc_src_addr = data_ptr->gc_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
100035f8:	693b      	ldr	r3, [r7, #16]
100035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100035fc:	3310      	adds	r3, #16
100035fe:	1c1a      	adds	r2, r3, #0
10003600:	693b      	ldr	r3, [r7, #16]
10003602:	629a      	str	r2, [r3, #40]	; 0x28
      data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10003604:	693b      	ldr	r3, [r7, #16]
10003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003608:	3310      	adds	r3, #16
1000360a:	1c1a      	adds	r2, r3, #0
1000360c:	693b      	ldr	r3, [r7, #16]
1000360e:	625a      	str	r2, [r3, #36]	; 0x24
      data_ptr->gc_state = E_EEPROM_XMC1_GC_READ_NXTBLOCK;
10003610:	693a      	ldr	r2, [r7, #16]
10003612:	23ae      	movs	r3, #174	; 0xae
10003614:	005b      	lsls	r3, r3, #1
10003616:	2102      	movs	r1, #2
10003618:	50d1      	str	r1, [r2, r3]
1000361a:	e004      	b.n	10003626 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xd6>
    }
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000361c:	693a      	ldr	r2, [r7, #16]
1000361e:	23ae      	movs	r3, #174	; 0xae
10003620:	005b      	lsls	r3, r3, #1
10003622:	2109      	movs	r1, #9
10003624:	50d1      	str	r1, [r2, r3]
  }
  data_ptr->gc_log_block_count = block_count;
10003626:	693a      	ldr	r2, [r7, #16]
10003628:	23b2      	movs	r3, #178	; 0xb2
1000362a:	005b      	lsls	r3, r3, #1
1000362c:	6979      	ldr	r1, [r7, #20]
1000362e:	50d1      	str	r1, [r2, r3]
}
10003630:	46bd      	mov	sp, r7
10003632:	b006      	add	sp, #24
10003634:	bd80      	pop	{r7, pc}
10003636:	46c0      	nop			; (mov r8, r8)
10003638:	2000056c 	.word	0x2000056c

1000363c <E_EEPROM_XMC1_lHandleGcEndOfCopy>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC END OF COPY state
 */
static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void)
{
1000363c:	b580      	push	{r7, lr}
1000363e:	b082      	sub	sp, #8
10003640:	af00      	add	r7, sp, #0
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003642:	4b13      	ldr	r3, [pc, #76]	; (10003690 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x54>)
10003644:	685b      	ldr	r3, [r3, #4]
10003646:	607b      	str	r3, [r7, #4]
  
  E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10003648:	f000 fbc6 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
  /* Write Copy completed state to old bank (0A) or (A0) */
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_END_OF_COPY_OFFSET));
1000364c:	687b      	ldr	r3, [r7, #4]
1000364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003650:	3320      	adds	r3, #32
10003652:	1c18      	adds	r0, r3, #0
10003654:	f000 fc4c 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
10003658:	1c03      	adds	r3, r0, #0
1000365a:	603b      	str	r3, [r7, #0]
  if (status == 0U)
1000365c:	683b      	ldr	r3, [r7, #0]
1000365e:	2b00      	cmp	r3, #0
10003660:	d10d      	bne.n	1000367e <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x42>
  {
    /* Update the current bank to next bank */
    data_ptr->current_bank = data_ptr->current_bank ^ 1U;
10003662:	687b      	ldr	r3, [r7, #4]
10003664:	6a1b      	ldr	r3, [r3, #32]
10003666:	2201      	movs	r2, #1
10003668:	405a      	eors	r2, r3
1000366a:	687b      	ldr	r3, [r7, #4]
1000366c:	621a      	str	r2, [r3, #32]
    
    /* Update the Bank related global variables */
    E_EEPROM_XMC1_lUpdateCurrBankInfo();
1000366e:	f000 fadb 	bl	10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
    data_ptr->gc_state = E_EEPROM_XMC1_GC_NEXT_BANK_VALID;
10003672:	687a      	ldr	r2, [r7, #4]
10003674:	23ae      	movs	r3, #174	; 0xae
10003676:	005b      	lsls	r3, r3, #1
10003678:	2107      	movs	r1, #7
1000367a:	50d1      	str	r1, [r2, r3]
1000367c:	e004      	b.n	10003688 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x4c>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000367e:	687a      	ldr	r2, [r7, #4]
10003680:	23ae      	movs	r3, #174	; 0xae
10003682:	005b      	lsls	r3, r3, #1
10003684:	2109      	movs	r1, #9
10003686:	50d1      	str	r1, [r2, r3]
  }
}
10003688:	46bd      	mov	sp, r7
1000368a:	b002      	add	sp, #8
1000368c:	bd80      	pop	{r7, pc}
1000368e:	46c0      	nop			; (mov r8, r8)
10003690:	2000056c 	.word	0x2000056c

10003694 <E_EEPROM_XMC1_lHandleGcOtherStates>:
 *
 * Description     : This function handles Garbage Collection GC NEXT BANk VALID, ERASE PREV BANK and GC COMPLETED IDLE
 *                   state
*/
static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state)
{
10003694:	b580      	push	{r7, lr}
10003696:	b084      	sub	sp, #16
10003698:	af00      	add	r7, sp, #0
1000369a:	6078      	str	r0, [r7, #4]
1000369c:	6039      	str	r1, [r7, #0]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000369e:	4b1b      	ldr	r3, [pc, #108]	; (1000370c <E_EEPROM_XMC1_lHandleGcOtherStates+0x78>)
100036a0:	685b      	ldr	r3, [r3, #4]
100036a2:	60bb      	str	r3, [r7, #8]
  
  if (current_state == E_EEPROM_XMC1_GC_NEXT_BANK_VALID)
100036a4:	687b      	ldr	r3, [r7, #4]
100036a6:	2b07      	cmp	r3, #7
100036a8:	d109      	bne.n	100036be <E_EEPROM_XMC1_lHandleGcOtherStates+0x2a>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
100036aa:	f000 fb95 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    /* Write next bank to valid state  (02) or (20) */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_NEXT_VALID_OFFSET));
100036ae:	68bb      	ldr	r3, [r7, #8]
100036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100036b2:	1c18      	adds	r0, r3, #0
100036b4:	f000 fc1c 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
100036b8:	1c03      	adds	r3, r0, #0
100036ba:	60fb      	str	r3, [r7, #12]
100036bc:	e014      	b.n	100036e8 <E_EEPROM_XMC1_lHandleGcOtherStates+0x54>
  }
  else if (current_state == E_EEPROM_XMC1_GC_ERASE_PREV_BANK)
100036be:	687b      	ldr	r3, [r7, #4]
100036c0:	2b03      	cmp	r3, #3
100036c2:	d107      	bne.n	100036d4 <E_EEPROM_XMC1_lHandleGcOtherStates+0x40>
  {
    /* Erase the previous redundant bank (F2) or (2F) */
    status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
100036c4:	68bb      	ldr	r3, [r7, #8]
100036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100036c8:	1c18      	adds	r0, r3, #0
100036ca:	f000 fbe7 	bl	10003e9c <E_EEPROM_XMC1_lEraseBank>
100036ce:	1c03      	adds	r3, r0, #0
100036d0:	60fb      	str	r3, [r7, #12]
100036d2:	e009      	b.n	100036e8 <E_EEPROM_XMC1_lHandleGcOtherStates+0x54>
  }
  else
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
100036d4:	f000 fb80 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    /* Write formatted state to the old erased bank (E2) or (2E) */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_END_ERASE_OFFSET));
100036d8:	68bb      	ldr	r3, [r7, #8]
100036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100036dc:	3330      	adds	r3, #48	; 0x30
100036de:	1c18      	adds	r0, r3, #0
100036e0:	f000 fc06 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
100036e4:	1c03      	adds	r3, r0, #0
100036e6:	60fb      	str	r3, [r7, #12]
  }
  
  if (status == 0U)
100036e8:	68fb      	ldr	r3, [r7, #12]
100036ea:	2b00      	cmp	r3, #0
100036ec:	d105      	bne.n	100036fa <E_EEPROM_XMC1_lHandleGcOtherStates+0x66>
  {
    data_ptr->gc_state = next_state;
100036ee:	68ba      	ldr	r2, [r7, #8]
100036f0:	23ae      	movs	r3, #174	; 0xae
100036f2:	005b      	lsls	r3, r3, #1
100036f4:	6839      	ldr	r1, [r7, #0]
100036f6:	50d1      	str	r1, [r2, r3]
100036f8:	e004      	b.n	10003704 <E_EEPROM_XMC1_lHandleGcOtherStates+0x70>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100036fa:	68ba      	ldr	r2, [r7, #8]
100036fc:	23ae      	movs	r3, #174	; 0xae
100036fe:	005b      	lsls	r3, r3, #1
10003700:	2109      	movs	r1, #9
10003702:	50d1      	str	r1, [r2, r3]
  }
}
10003704:	46bd      	mov	sp, r7
10003706:	b004      	add	sp, #16
10003708:	bd80      	pop	{r7, pc}
1000370a:	46c0      	nop			; (mov r8, r8)
1000370c:	2000056c 	.word	0x2000056c

10003710 <E_EEPROM_XMC1_lPrepareDFlash>:
 * Return value   : void
 *
 * Description    : This function executes the prepare data flash to bring the state machine to default state (2E).
 */
static void E_EEPROM_XMC1_lPrepareDFlash(void)
{
10003710:	b580      	push	{r7, lr}
10003712:	b082      	sub	sp, #8
10003714:	af00      	add	r7, sp, #0
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003716:	4b3b      	ldr	r3, [pc, #236]	; (10003804 <E_EEPROM_XMC1_lPrepareDFlash+0xf4>)
10003718:	685b      	ldr	r3, [r3, #4]
1000371a:	607b      	str	r3, [r7, #4]
  
  do
  {
    switch (data_ptr->gc_state)
1000371c:	687a      	ldr	r2, [r7, #4]
1000371e:	23ae      	movs	r3, #174	; 0xae
10003720:	005b      	lsls	r3, r3, #1
10003722:	58d3      	ldr	r3, [r2, r3]
10003724:	2b04      	cmp	r3, #4
10003726:	d002      	beq.n	1000372e <E_EEPROM_XMC1_lPrepareDFlash+0x1e>
10003728:	2b05      	cmp	r3, #5
1000372a:	d01f      	beq.n	1000376c <E_EEPROM_XMC1_lPrepareDFlash+0x5c>
1000372c:	e035      	b.n	1000379a <E_EEPROM_XMC1_lPrepareDFlash+0x8a>
    {
      case E_EEPROM_XMC1_PREPFLASH_2F:
      
      /* Set the marker blocks with copy completed state */
      E_EEPROM_XMC1_lSetMarkerPageBuffer(E_EEPROM_XMC1_VALID_STATE);
1000372e:	2020      	movs	r0, #32
10003730:	f000 fb70 	bl	10003e14 <E_EEPROM_XMC1_lSetMarkerPageBuffer>
      
      /* Clear all error status flags before flash operation*/
      XMC_FLASH_ClearStatus();
10003734:	f7fd fcfc 	bl	10001130 <XMC_FLASH_ClearStatus>
      
      E_EEPROM_XMC1_lWriteSinglePage(E_EEPROM_XMC1_FLASH_BANK0_BASE , (uint32_t*)(void*)data_ptr->page_write_buffer);
10003738:	687b      	ldr	r3, [r7, #4]
1000373a:	3358      	adds	r3, #88	; 0x58
1000373c:	4a32      	ldr	r2, [pc, #200]	; (10003808 <E_EEPROM_XMC1_lPrepareDFlash+0xf8>)
1000373e:	1c10      	adds	r0, r2, #0
10003740:	1c19      	adds	r1, r3, #0
10003742:	f000 fef5 	bl	10004530 <E_EEPROM_XMC1_lWriteSinglePage>
      
      status = E_EEPROM_XMC1_lGetFlashStatus();
10003746:	f000 ff0d 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
1000374a:	1c03      	adds	r3, r0, #0
1000374c:	603b      	str	r3, [r7, #0]
      
      if (status == 0U)
1000374e:	683b      	ldr	r3, [r7, #0]
10003750:	2b00      	cmp	r3, #0
10003752:	d105      	bne.n	10003760 <E_EEPROM_XMC1_lPrepareDFlash+0x50>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
10003754:	687a      	ldr	r2, [r7, #4]
10003756:	23ae      	movs	r3, #174	; 0xae
10003758:	005b      	lsls	r3, r3, #1
1000375a:	2105      	movs	r1, #5
1000375c:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
1000375e:	e042      	b.n	100037e6 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10003760:	687a      	ldr	r2, [r7, #4]
10003762:	23ae      	movs	r3, #174	; 0xae
10003764:	005b      	lsls	r3, r3, #1
10003766:	2109      	movs	r1, #9
10003768:	50d1      	str	r1, [r2, r3]
      }
      break;
1000376a:	e03c      	b.n	100037e6 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      
      case E_EEPROM_XMC1_PREPFLASH_2E:
        
      E_EEPROM_XMC1_lSetMarkerBlockBuffer();
1000376c:	f000 fb34 	bl	10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
      
      /* Write Bank1 to formatted state  (2E) */
      status = E_EEPROM_XMC1_lGCWrite((uint32_t)E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_END_ERASE_OFFSET);
10003770:	4b26      	ldr	r3, [pc, #152]	; (1000380c <E_EEPROM_XMC1_lPrepareDFlash+0xfc>)
10003772:	1c18      	adds	r0, r3, #0
10003774:	f000 fbbc 	bl	10003ef0 <E_EEPROM_XMC1_lGCWrite>
10003778:	1c03      	adds	r3, r0, #0
1000377a:	603b      	str	r3, [r7, #0]
      
      if (status == 0U)
1000377c:	683b      	ldr	r3, [r7, #0]
1000377e:	2b00      	cmp	r3, #0
10003780:	d105      	bne.n	1000378e <E_EEPROM_XMC1_lPrepareDFlash+0x7e>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
10003782:	687a      	ldr	r2, [r7, #4]
10003784:	23ae      	movs	r3, #174	; 0xae
10003786:	005b      	lsls	r3, r3, #1
10003788:	210a      	movs	r1, #10
1000378a:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
1000378c:	e02b      	b.n	100037e6 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000378e:	687a      	ldr	r2, [r7, #4]
10003790:	23ae      	movs	r3, #174	; 0xae
10003792:	005b      	lsls	r3, r3, #1
10003794:	2109      	movs	r1, #9
10003796:	50d1      	str	r1, [r2, r3]
      }
      break;
10003798:	e025      	b.n	100037e6 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      
      default:  /* gc_state : E_EEPROM_XMC1_PREPFLASH_FF*/
      
      /* Erase the previous redundant bank */
      status = E_EEPROM_XMC1_lEraseBank(data_ptr->curr_bank_end_addr);
1000379a:	687b      	ldr	r3, [r7, #4]
1000379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000379e:	1c18      	adds	r0, r3, #0
100037a0:	f000 fb7c 	bl	10003e9c <E_EEPROM_XMC1_lEraseBank>
100037a4:	1c03      	adds	r3, r0, #0
100037a6:	603b      	str	r3, [r7, #0]
      
      /* Erase the previous redundant bank */
      if (status == 0U)
100037a8:	683b      	ldr	r3, [r7, #0]
100037aa:	2b00      	cmp	r3, #0
100037ac:	d115      	bne.n	100037da <E_EEPROM_XMC1_lPrepareDFlash+0xca>
      {
        status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
100037ae:	687b      	ldr	r3, [r7, #4]
100037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100037b2:	1c18      	adds	r0, r3, #0
100037b4:	f000 fb72 	bl	10003e9c <E_EEPROM_XMC1_lEraseBank>
100037b8:	1c03      	adds	r3, r0, #0
100037ba:	603b      	str	r3, [r7, #0]
        
        if (status == 0U)
100037bc:	683b      	ldr	r3, [r7, #0]
100037be:	2b00      	cmp	r3, #0
100037c0:	d105      	bne.n	100037ce <E_EEPROM_XMC1_lPrepareDFlash+0xbe>
        {
          data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
100037c2:	687a      	ldr	r2, [r7, #4]
100037c4:	23ae      	movs	r3, #174	; 0xae
100037c6:	005b      	lsls	r3, r3, #1
100037c8:	2104      	movs	r1, #4
100037ca:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
100037cc:	e00a      	b.n	100037e4 <E_EEPROM_XMC1_lPrepareDFlash+0xd4>
        {
          data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
        }
        else
        {
          data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100037ce:	687a      	ldr	r2, [r7, #4]
100037d0:	23ae      	movs	r3, #174	; 0xae
100037d2:	005b      	lsls	r3, r3, #1
100037d4:	2109      	movs	r1, #9
100037d6:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
100037d8:	e004      	b.n	100037e4 <E_EEPROM_XMC1_lPrepareDFlash+0xd4>
          data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
        }
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100037da:	687a      	ldr	r2, [r7, #4]
100037dc:	23ae      	movs	r3, #174	; 0xae
100037de:	005b      	lsls	r3, r3, #1
100037e0:	2109      	movs	r1, #9
100037e2:	50d1      	str	r1, [r2, r3]
      }
      break;
100037e4:	46c0      	nop			; (mov r8, r8)
    }
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
100037e6:	687a      	ldr	r2, [r7, #4]
100037e8:	23ae      	movs	r3, #174	; 0xae
100037ea:	005b      	lsls	r3, r3, #1
100037ec:	58d3      	ldr	r3, [r2, r3]
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
100037ee:	2b0a      	cmp	r3, #10
100037f0:	d005      	beq.n	100037fe <E_EEPROM_XMC1_lPrepareDFlash+0xee>
100037f2:	687a      	ldr	r2, [r7, #4]
100037f4:	23ae      	movs	r3, #174	; 0xae
100037f6:	005b      	lsls	r3, r3, #1
100037f8:	58d3      	ldr	r3, [r2, r3]
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
    }
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
100037fa:	2b09      	cmp	r3, #9
100037fc:	d18e      	bne.n	1000371c <E_EEPROM_XMC1_lPrepareDFlash+0xc>
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
}
100037fe:	46bd      	mov	sp, r7
10003800:	b002      	add	sp, #8
10003802:	bd80      	pop	{r7, pc}
10003804:	2000056c 	.word	0x2000056c
10003808:	10008c00 	.word	0x10008c00
1000380c:	10008e30 	.word	0x10008e30

10003810 <E_EEPROM_XMC1_lUpdateCache>:
 *
 * Description     : This utility function update's the cache table which contains the latest information about the
 *                   FLASH contents.
 */
static void E_EEPROM_XMC1_lUpdateCache(void)
{
10003810:	b580      	push	{r7, lr}
10003812:	b084      	sub	sp, #16
10003814:	af00      	add	r7, sp, #0
  uint32_t end_addr;
  uint32_t read_status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003816:	4b39      	ldr	r3, [pc, #228]	; (100038fc <E_EEPROM_XMC1_lUpdateCache+0xec>)
10003818:	685b      	ldr	r3, [r3, #4]
1000381a:	607b      	str	r3, [r7, #4]
  
  /* Evaluate the end address of the bank to start reading blocks for cache update */
  if (data_ptr->current_bank == 0U)
1000381c:	687b      	ldr	r3, [r7, #4]
1000381e:	6a1b      	ldr	r3, [r3, #32]
10003820:	2b00      	cmp	r3, #0
10003822:	d102      	bne.n	1000382a <E_EEPROM_XMC1_lUpdateCache+0x1a>
  {
    end_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10003824:	4b36      	ldr	r3, [pc, #216]	; (10003900 <E_EEPROM_XMC1_lUpdateCache+0xf0>)
10003826:	60fb      	str	r3, [r7, #12]
10003828:	e001      	b.n	1000382e <E_EEPROM_XMC1_lUpdateCache+0x1e>
  }
  else
  {
    end_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
1000382a:	4b36      	ldr	r3, [pc, #216]	; (10003904 <E_EEPROM_XMC1_lUpdateCache+0xf4>)
1000382c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the read number of blocks count variable and reset cache update index */
  data_ptr->written_block_counter = 0U;
1000382e:	687b      	ldr	r3, [r7, #4]
10003830:	2200      	movs	r2, #0
10003832:	641a      	str	r2, [r3, #64]	; 0x40
  data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10003834:	687a      	ldr	r2, [r7, #4]
10003836:	23b6      	movs	r3, #182	; 0xb6
10003838:	005b      	lsls	r3, r3, #1
1000383a:	21ff      	movs	r1, #255	; 0xff
1000383c:	50d1      	str	r1, [r2, r3]
  
  /* Start the Cache Update state machine */
  data_ptr->cache_state = E_EEPROM_XMC1_CACHE_EMPTY_BLOCK;
1000383e:	687a      	ldr	r2, [r7, #4]
10003840:	23b4      	movs	r3, #180	; 0xb4
10003842:	005b      	lsls	r3, r3, #1
10003844:	2101      	movs	r1, #1
10003846:	50d1      	str	r1, [r2, r3]
  
  /* Point to starting address of last data block of the bank */
  data_ptr->curr_bank_src_addr += ( E_EEPROM_XMC1_FLASH_BANK_SIZE - E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10003848:	687b      	ldr	r3, [r7, #4]
1000384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000384c:	33f1      	adds	r3, #241	; 0xf1
1000384e:	33ff      	adds	r3, #255	; 0xff
10003850:	1c1a      	adds	r2, r3, #0
10003852:	687b      	ldr	r3, [r7, #4]
10003854:	639a      	str	r2, [r3, #56]	; 0x38
  /* Search for the first entry of a non empty block inside the valid bank starting from bottom */
  do{
      read_status = E_EEPROM_XMC1_lCacheEmptyBlkEval(end_addr);
10003856:	68fb      	ldr	r3, [r7, #12]
10003858:	1c18      	adds	r0, r3, #0
1000385a:	f000 f855 	bl	10003908 <E_EEPROM_XMC1_lCacheEmptyBlkEval>
1000385e:	1c03      	adds	r3, r0, #0
10003860:	60bb      	str	r3, [r7, #8]
  } while (data_ptr->cache_state == E_EEPROM_XMC1_CACHE_EMPTY_BLOCK);
10003862:	687a      	ldr	r2, [r7, #4]
10003864:	23b4      	movs	r3, #180	; 0xb4
10003866:	005b      	lsls	r3, r3, #1
10003868:	58d3      	ldr	r3, [r2, r3]
1000386a:	2b01      	cmp	r3, #1
1000386c:	d0f3      	beq.n	10003856 <E_EEPROM_XMC1_lUpdateCache+0x46>
  
   /* Update the next free block location only if it is not done by the previous function call  */
  if (data_ptr->next_free_block_addr == 0U)
1000386e:	687b      	ldr	r3, [r7, #4]
10003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003872:	2b00      	cmp	r3, #0
10003874:	d105      	bne.n	10003882 <E_EEPROM_XMC1_lUpdateCache+0x72>
  {
    data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10003876:	687b      	ldr	r3, [r7, #4]
10003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000387a:	3310      	adds	r3, #16
1000387c:	1c1a      	adds	r2, r3, #0
1000387e:	687b      	ldr	r3, [r7, #4]
10003880:	635a      	str	r2, [r3, #52]	; 0x34
  }
  
  /* Execute the Cache update state machine until the Start address of bank is reached traversing from end of bank */
  while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
10003882:	e031      	b.n	100038e8 <E_EEPROM_XMC1_lUpdateCache+0xd8>
  {
    /* Check If the previous read had an ECC error or not */
    if (!(read_status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR))
10003884:	68bb      	ldr	r3, [r7, #8]
10003886:	2220      	movs	r2, #32
10003888:	4013      	ands	r3, r2
1000388a:	d102      	bne.n	10003892 <E_EEPROM_XMC1_lUpdateCache+0x82>
    {
      /* Evaluate the Block status since no error found */
      E_EEPROM_XMC1_lEvalBlockStatus();
1000388c:	f000 f89a 	bl	100039c4 <E_EEPROM_XMC1_lEvalBlockStatus>
10003890:	e01b      	b.n	100038ca <E_EEPROM_XMC1_lUpdateCache+0xba>
    }
    else
    {
      /* If previous read block of the block had correct block number then mark the block as inconsistent */
      if ( data_ptr->updated_cache_index != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND )
10003892:	687a      	ldr	r2, [r7, #4]
10003894:	23b6      	movs	r3, #182	; 0xb6
10003896:	005b      	lsls	r3, r3, #1
10003898:	58d3      	ldr	r3, [r2, r3]
1000389a:	2bff      	cmp	r3, #255	; 0xff
1000389c:	d00d      	beq.n	100038ba <E_EEPROM_XMC1_lUpdateCache+0xaa>
      {
        /* Goto the cache table entry for the given block */
        cache_ptr = data_ptr->block_info;
1000389e:	687b      	ldr	r3, [r7, #4]
100038a0:	603b      	str	r3, [r7, #0]
        cache_ptr = cache_ptr + data_ptr->updated_cache_index;
100038a2:	687a      	ldr	r2, [r7, #4]
100038a4:	23b6      	movs	r3, #182	; 0xb6
100038a6:	005b      	lsls	r3, r3, #1
100038a8:	58d3      	ldr	r3, [r2, r3]
100038aa:	00db      	lsls	r3, r3, #3
100038ac:	683a      	ldr	r2, [r7, #0]
100038ae:	18d3      	adds	r3, r2, r3
100038b0:	603b      	str	r3, [r7, #0]
        /* Since CacheUpdateIndex contains valid block the  previous read block must belong to this block */
        cache_ptr->address = E_EEPROM_XMC1_ALL_ONES;
100038b2:	683b      	ldr	r3, [r7, #0]
100038b4:	2201      	movs	r2, #1
100038b6:	4252      	negs	r2, r2
100038b8:	601a      	str	r2, [r3, #0]
      }
      /* Prepare for the next block */
      data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
100038ba:	687a      	ldr	r2, [r7, #4]
100038bc:	23b6      	movs	r3, #182	; 0xb6
100038be:	005b      	lsls	r3, r3, #1
100038c0:	21ff      	movs	r1, #255	; 0xff
100038c2:	50d1      	str	r1, [r2, r3]
      data_ptr->written_block_counter = 0U;
100038c4:	687b      	ldr	r3, [r7, #4]
100038c6:	2200      	movs	r2, #0
100038c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Check if all blocks have been read */
    if ( data_ptr->curr_bank_src_addr == end_addr )
100038ca:	687b      	ldr	r3, [r7, #4]
100038cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
100038ce:	68fb      	ldr	r3, [r7, #12]
100038d0:	429a      	cmp	r2, r3
100038d2:	d105      	bne.n	100038e0 <E_EEPROM_XMC1_lUpdateCache+0xd0>
    {
      /* Goto the next state */
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
100038d4:	687a      	ldr	r2, [r7, #4]
100038d6:	23b4      	movs	r3, #180	; 0xb4
100038d8:	005b      	lsls	r3, r3, #1
100038da:	2104      	movs	r1, #4
100038dc:	50d1      	str	r1, [r2, r3]
100038de:	e003      	b.n	100038e8 <E_EEPROM_XMC1_lUpdateCache+0xd8>
    }
    else
    {
      read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
100038e0:	f000 f90c 	bl	10003afc <E_EEPROM_XMC1_lUpdateCacheBlockRead>
100038e4:	1c03      	adds	r3, r0, #0
100038e6:	60bb      	str	r3, [r7, #8]
  {
    data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
  }
  
  /* Execute the Cache update state machine until the Start address of bank is reached traversing from end of bank */
  while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
100038e8:	687a      	ldr	r2, [r7, #4]
100038ea:	23b4      	movs	r3, #180	; 0xb4
100038ec:	005b      	lsls	r3, r3, #1
100038ee:	58d3      	ldr	r3, [r2, r3]
100038f0:	2b04      	cmp	r3, #4
100038f2:	d1c7      	bne.n	10003884 <E_EEPROM_XMC1_lUpdateCache+0x74>
    else
    {
      read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
    }
  }
}
100038f4:	46bd      	mov	sp, r7
100038f6:	b004      	add	sp, #16
100038f8:	bd80      	pop	{r7, pc}
100038fa:	46c0      	nop			; (mov r8, r8)
100038fc:	2000056c 	.word	0x2000056c
10003900:	10008d00 	.word	0x10008d00
10003904:	10008f00 	.word	0x10008f00

10003908 <E_EEPROM_XMC1_lCacheEmptyBlkEval>:
 *
 * Description     : This utility function  will search through the FLASH from the bottom of the bank until a
 *                   readable data block is found.
 */
static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr)
{
10003908:	b580      	push	{r7, lr}
1000390a:	b086      	sub	sp, #24
1000390c:	af00      	add	r7, sp, #0
1000390e:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t *read_word_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003910:	4b2b      	ldr	r3, [pc, #172]	; (100039c0 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xb8>)
10003912:	685b      	ldr	r3, [r3, #4]
10003914:	617b      	str	r3, [r7, #20]
  
  XMC_FLASH_ClearStatus();
10003916:	f7fd fc0b 	bl	10001130 <XMC_FLASH_ClearStatus>
  
  /* Read the complete block */
  E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
1000391a:	697b      	ldr	r3, [r7, #20]
1000391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000391e:	697b      	ldr	r3, [r7, #20]
10003920:	3344      	adds	r3, #68	; 0x44
10003922:	1c10      	adds	r0, r2, #0
10003924:	1c19      	adds	r1, r3, #0
10003926:	f000 fdf3 	bl	10004510 <E_EEPROM_XMC1_lReadSingleBlock>
  
  status = E_EEPROM_XMC1_lGetFlashStatus();
1000392a:	f000 fe1b 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
1000392e:	1c03      	adds	r3, r0, #0
10003930:	613b      	str	r3, [r7, #16]
  
  /* If ECC error exists because of any previous interruptions or power failures during Flash operation in progress*/
  if (status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR)
10003932:	693b      	ldr	r3, [r7, #16]
10003934:	2220      	movs	r2, #32
10003936:	4013      	ands	r3, r2
10003938:	d01b      	beq.n	10003972 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x6a>
  {
    /* Update the free block location of the valid bank once and for ever until new write happens*/
    if (data_ptr->next_free_block_addr == 0U)
1000393a:	697b      	ldr	r3, [r7, #20]
1000393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000393e:	2b00      	cmp	r3, #0
10003940:	d105      	bne.n	1000394e <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x46>
    {
      data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
10003942:	697b      	ldr	r3, [r7, #20]
10003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003946:	3310      	adds	r3, #16
10003948:	1c1a      	adds	r2, r3, #0
1000394a:	697b      	ldr	r3, [r7, #20]
1000394c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    
    /* Check if all blocks have been read? If yes go to cache update complete state else move to the next block */
    if ( data_ptr->curr_bank_src_addr == end_addr )
1000394e:	697b      	ldr	r3, [r7, #20]
10003950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003952:	687b      	ldr	r3, [r7, #4]
10003954:	429a      	cmp	r2, r3
10003956:	d105      	bne.n	10003964 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x5c>
    {
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
10003958:	697a      	ldr	r2, [r7, #20]
1000395a:	23b4      	movs	r3, #180	; 0xb4
1000395c:	005b      	lsls	r3, r3, #1
1000395e:	2104      	movs	r1, #4
10003960:	50d1      	str	r1, [r2, r3]
10003962:	e028      	b.n	100039b6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
    else
    {
      data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10003964:	697b      	ldr	r3, [r7, #20]
10003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003968:	3b10      	subs	r3, #16
1000396a:	1c1a      	adds	r2, r3, #0
1000396c:	697b      	ldr	r3, [r7, #20]
1000396e:	639a      	str	r2, [r3, #56]	; 0x38
10003970:	e021      	b.n	100039b6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
  }
  /* No ECC Error */
  else
  {
    read_word_ptr = ((uint32_t*)(void*)data_ptr->read_write_buffer);
10003972:	697b      	ldr	r3, [r7, #20]
10003974:	3344      	adds	r3, #68	; 0x44
10003976:	60fb      	str	r3, [r7, #12]
    /* Check if the first word of the block is having some data written on it */
    if (*read_word_ptr != E_EEPROM_XMC1_ALL_ONES)
10003978:	68fb      	ldr	r3, [r7, #12]
1000397a:	681b      	ldr	r3, [r3, #0]
1000397c:	3301      	adds	r3, #1
1000397e:	d00a      	beq.n	10003996 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x8e>
    {
      /* Increment the data block count and go to the next block read state */
      data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
10003980:	697b      	ldr	r3, [r7, #20]
10003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003984:	1c5a      	adds	r2, r3, #1
10003986:	697b      	ldr	r3, [r7, #20]
10003988:	641a      	str	r2, [r3, #64]	; 0x40
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_NEXT_BLK;
1000398a:	697a      	ldr	r2, [r7, #20]
1000398c:	23b4      	movs	r3, #180	; 0xb4
1000398e:	005b      	lsls	r3, r3, #1
10003990:	2102      	movs	r1, #2
10003992:	50d1      	str	r1, [r2, r3]
10003994:	e00f      	b.n	100039b6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
    else
    {
      /* Check if all blocks have been read? If yes go to cache update complete state else move to next block */
      if ( data_ptr->curr_bank_src_addr == end_addr )
10003996:	697b      	ldr	r3, [r7, #20]
10003998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000399a:	687b      	ldr	r3, [r7, #4]
1000399c:	429a      	cmp	r2, r3
1000399e:	d104      	bne.n	100039aa <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xa2>
      {
        data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
100039a0:	697a      	ldr	r2, [r7, #20]
100039a2:	23b4      	movs	r3, #180	; 0xb4
100039a4:	005b      	lsls	r3, r3, #1
100039a6:	2104      	movs	r1, #4
100039a8:	50d1      	str	r1, [r2, r3]
      }
      data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
100039aa:	697b      	ldr	r3, [r7, #20]
100039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100039ae:	3b10      	subs	r3, #16
100039b0:	1c1a      	adds	r2, r3, #0
100039b2:	697b      	ldr	r3, [r7, #20]
100039b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  return (status);
100039b6:	693b      	ldr	r3, [r7, #16]
}
100039b8:	1c18      	adds	r0, r3, #0
100039ba:	46bd      	mov	sp, r7
100039bc:	b006      	add	sp, #24
100039be:	bd80      	pop	{r7, pc}
100039c0:	2000056c 	.word	0x2000056c

100039c4 <E_EEPROM_XMC1_lEvalBlockStatus>:
 *                    2) cache updated: inconsistent           
 *                    3) cache already updated (no actions done)   
 *                    4) cannot evaluate - requires more blocks to be read          
 */
static void E_EEPROM_XMC1_lEvalBlockStatus(void)
{
100039c4:	b580      	push	{r7, lr}
100039c6:	b088      	sub	sp, #32
100039c8:	af00      	add	r7, sp, #0
  uint32_t physical_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;
  E_EEPROM_XMC1_BLOCK_HEADER_t *Ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100039ca:	4b4b      	ldr	r3, [pc, #300]	; (10003af8 <E_EEPROM_XMC1_lEvalBlockStatus+0x134>)
100039cc:	685b      	ldr	r3, [r3, #4]
100039ce:	61fb      	str	r3, [r7, #28]
  Ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t *)(void *)data_ptr->read_write_buffer;
100039d0:	69fb      	ldr	r3, [r7, #28]
100039d2:	3344      	adds	r3, #68	; 0x44
100039d4:	61bb      	str	r3, [r7, #24]
  block_number = Ptr->block_number;
100039d6:	2317      	movs	r3, #23
100039d8:	18fb      	adds	r3, r7, r3
100039da:	69ba      	ldr	r2, [r7, #24]
100039dc:	7812      	ldrb	r2, [r2, #0]
100039de:	701a      	strb	r2, [r3, #0]
  status_byte = Ptr->status;
100039e0:	69bb      	ldr	r3, [r7, #24]
100039e2:	785b      	ldrb	r3, [r3, #1]
100039e4:	613b      	str	r3, [r7, #16]
  
  cache_ptr = data_ptr->block_info;
100039e6:	69fb      	ldr	r3, [r7, #28]
100039e8:	60fb      	str	r3, [r7, #12]
  
  /* Get the Index of the read block from the user configuration */
  indx = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
100039ea:	2317      	movs	r3, #23
100039ec:	18fb      	adds	r3, r7, r3
100039ee:	781b      	ldrb	r3, [r3, #0]
100039f0:	1c18      	adds	r0, r3, #0
100039f2:	f000 f8a7 	bl	10003b44 <E_EEPROM_XMC1_lGetUsrBlockIndex>
100039f6:	1c03      	adds	r3, r0, #0
100039f8:	60bb      	str	r3, [r7, #8]
  
  /* If the block is found */
  if ( (indx != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND) )
100039fa:	68bb      	ldr	r3, [r7, #8]
100039fc:	2bff      	cmp	r3, #255	; 0xff
100039fe:	d100      	bne.n	10003a02 <E_EEPROM_XMC1_lEvalBlockStatus+0x3e>
10003a00:	e06f      	b.n	10003ae2 <E_EEPROM_XMC1_lEvalBlockStatus+0x11e>
  {
    /* Point to the cache table entry for the block to be evaluated */
    cache_ptr = cache_ptr + indx;
10003a02:	68bb      	ldr	r3, [r7, #8]
10003a04:	00db      	lsls	r3, r3, #3
10003a06:	68fa      	ldr	r2, [r7, #12]
10003a08:	18d3      	adds	r3, r2, r3
10003a0a:	60fb      	str	r3, [r7, #12]
    
    /* Store Index of current block */
    data_ptr->updated_cache_index = indx;
10003a0c:	69fa      	ldr	r2, [r7, #28]
10003a0e:	23b6      	movs	r3, #182	; 0xb6
10003a10:	005b      	lsls	r3, r3, #1
10003a12:	68b9      	ldr	r1, [r7, #8]
10003a14:	50d1      	str	r1, [r2, r3]
    
    /* Check if cache table is updated for the given block : address = 0U => cache table not yet updated */
    if (cache_ptr->address == 0U)
10003a16:	68fb      	ldr	r3, [r7, #12]
10003a18:	681b      	ldr	r3, [r3, #0]
10003a1a:	2b00      	cmp	r3, #0
10003a1c:	d158      	bne.n	10003ad0 <E_EEPROM_XMC1_lEvalBlockStatus+0x10c>
    {
      /* If the starting block of the block found */
      if ((status_byte & E_EEPROM_XMC1_START_BIT ) != 0U)
10003a1e:	693b      	ldr	r3, [r7, #16]
10003a20:	2280      	movs	r2, #128	; 0x80
10003a22:	4013      	ands	r3, r2
10003a24:	d065      	beq.n	10003af2 <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
      {
        /* Update the cache with block address */
        cache_ptr->address = data_ptr->curr_bank_src_addr;
10003a26:	69fb      	ldr	r3, [r7, #28]
10003a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003a2a:	68fb      	ldr	r3, [r7, #12]
10003a2c:	601a      	str	r2, [r3, #0]
        
        /* if the Valid bit for the logical block is set */
        if ((status_byte & (E_EEPROM_XMC1_VALID_BIT) ) != 0U)
10003a2e:	693b      	ldr	r3, [r7, #16]
10003a30:	2240      	movs	r2, #64	; 0x40
10003a32:	4013      	ands	r3, r2
10003a34:	d014      	beq.n	10003a60 <E_EEPROM_XMC1_lEvalBlockStatus+0x9c>
        {
          cache_ptr->status.valid = 1U;
10003a36:	68fb      	ldr	r3, [r7, #12]
10003a38:	791a      	ldrb	r2, [r3, #4]
10003a3a:	2101      	movs	r1, #1
10003a3c:	430a      	orrs	r2, r1
10003a3e:	711a      	strb	r2, [r3, #4]
          
          /* if the CRC bit for the logical block is set */
          if ((status_byte & (E_EEPROM_XMC1_CRC_BIT) ) != 0U)
10003a40:	693b      	ldr	r3, [r7, #16]
10003a42:	2210      	movs	r2, #16
10003a44:	4013      	ands	r3, r2
10003a46:	d005      	beq.n	10003a54 <E_EEPROM_XMC1_lEvalBlockStatus+0x90>
          {
            cache_ptr->status.crc = 1U;
10003a48:	68fb      	ldr	r3, [r7, #12]
10003a4a:	791a      	ldrb	r2, [r3, #4]
10003a4c:	2108      	movs	r1, #8
10003a4e:	430a      	orrs	r2, r1
10003a50:	711a      	strb	r2, [r3, #4]
10003a52:	e00a      	b.n	10003a6a <E_EEPROM_XMC1_lEvalBlockStatus+0xa6>
          }
          else
          {
            cache_ptr->status.crc = 0U;
10003a54:	68fb      	ldr	r3, [r7, #12]
10003a56:	791a      	ldrb	r2, [r3, #4]
10003a58:	2108      	movs	r1, #8
10003a5a:	438a      	bics	r2, r1
10003a5c:	711a      	strb	r2, [r3, #4]
10003a5e:	e004      	b.n	10003a6a <E_EEPROM_XMC1_lEvalBlockStatus+0xa6>
          }
        }
        else
        {
          cache_ptr->status.valid = 0U;
10003a60:	68fb      	ldr	r3, [r7, #12]
10003a62:	791a      	ldrb	r2, [r3, #4]
10003a64:	2101      	movs	r1, #1
10003a66:	438a      	bics	r2, r1
10003a68:	711a      	strb	r2, [r3, #4]
        }
        
        /* Check If number of Flash blocks used for this data block is same in size */
        size = (uint32_t)(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx].size);
10003a6a:	4b23      	ldr	r3, [pc, #140]	; (10003af8 <E_EEPROM_XMC1_lEvalBlockStatus+0x134>)
10003a6c:	681a      	ldr	r2, [r3, #0]
10003a6e:	68bb      	ldr	r3, [r7, #8]
10003a70:	00db      	lsls	r3, r3, #3
10003a72:	18d3      	adds	r3, r2, r3
10003a74:	685b      	ldr	r3, [r3, #4]
10003a76:	607b      	str	r3, [r7, #4]
        physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
10003a78:	687b      	ldr	r3, [r7, #4]
10003a7a:	1c18      	adds	r0, r3, #0
10003a7c:	f000 f892 	bl	10003ba4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10003a80:	1c03      	adds	r3, r0, #0
10003a82:	603b      	str	r3, [r7, #0]
        
        if ( data_ptr->written_block_counter == physical_blocks)
10003a84:	69fb      	ldr	r3, [r7, #28]
10003a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10003a88:	683b      	ldr	r3, [r7, #0]
10003a8a:	429a      	cmp	r2, r3
10003a8c:	d105      	bne.n	10003a9a <E_EEPROM_XMC1_lEvalBlockStatus+0xd6>
        {
          cache_ptr->status.consistent = 1U;  /* EVALUATION RESULT : BLOCK CONSISTENT*/
10003a8e:	68fb      	ldr	r3, [r7, #12]
10003a90:	791a      	ldrb	r2, [r3, #4]
10003a92:	2102      	movs	r1, #2
10003a94:	430a      	orrs	r2, r1
10003a96:	711a      	strb	r2, [r3, #4]
10003a98:	e011      	b.n	10003abe <E_EEPROM_XMC1_lEvalBlockStatus+0xfa>
        }
        else
        {
          if (cache_ptr->status.valid == 1U)
10003a9a:	68fb      	ldr	r3, [r7, #12]
10003a9c:	791b      	ldrb	r3, [r3, #4]
10003a9e:	2201      	movs	r2, #1
10003aa0:	4013      	ands	r3, r2
10003aa2:	b2db      	uxtb	r3, r3
10003aa4:	2b00      	cmp	r3, #0
10003aa6:	d005      	beq.n	10003ab4 <E_EEPROM_XMC1_lEvalBlockStatus+0xf0>
          {
            cache_ptr->status.consistent = 0U;  /* EVALUATION RESULT : BLOCK INCONSISTENT */
10003aa8:	68fb      	ldr	r3, [r7, #12]
10003aaa:	791a      	ldrb	r2, [r3, #4]
10003aac:	2102      	movs	r1, #2
10003aae:	438a      	bics	r2, r1
10003ab0:	711a      	strb	r2, [r3, #4]
10003ab2:	e004      	b.n	10003abe <E_EEPROM_XMC1_lEvalBlockStatus+0xfa>
          }
          else
          {
            cache_ptr->status.consistent = 1U; /* If the block is invalid, then mark : BLOCK INCONSISTENT */
10003ab4:	68fb      	ldr	r3, [r7, #12]
10003ab6:	791a      	ldrb	r2, [r3, #4]
10003ab8:	2102      	movs	r1, #2
10003aba:	430a      	orrs	r2, r1
10003abc:	711a      	strb	r2, [r3, #4]
          }
        }
        /* Initialize the Index, block block count for the next read */
        data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10003abe:	69fa      	ldr	r2, [r7, #28]
10003ac0:	23b6      	movs	r3, #182	; 0xb6
10003ac2:	005b      	lsls	r3, r3, #1
10003ac4:	21ff      	movs	r1, #255	; 0xff
10003ac6:	50d1      	str	r1, [r2, r3]
        data_ptr->written_block_counter = 0U;
10003ac8:	69fb      	ldr	r3, [r7, #28]
10003aca:	2200      	movs	r2, #0
10003acc:	641a      	str	r2, [r3, #64]	; 0x40
10003ace:	e010      	b.n	10003af2 <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
    {
      /*
       * EVALUATION RESULT : CACHE ALREADY UPDATED
       * If cache table is already updated for the block, no need to evaluate the block
       */
      data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10003ad0:	69fa      	ldr	r2, [r7, #28]
10003ad2:	23b6      	movs	r3, #182	; 0xb6
10003ad4:	005b      	lsls	r3, r3, #1
10003ad6:	21ff      	movs	r1, #255	; 0xff
10003ad8:	50d1      	str	r1, [r2, r3]
      data_ptr->written_block_counter = 0U;
10003ada:	69fb      	ldr	r3, [r7, #28]
10003adc:	2200      	movs	r2, #0
10003ade:	641a      	str	r2, [r3, #64]	; 0x40
10003ae0:	e007      	b.n	10003af2 <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
    }
  }
  else
  {    
    data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10003ae2:	69fa      	ldr	r2, [r7, #28]
10003ae4:	23b6      	movs	r3, #182	; 0xb6
10003ae6:	005b      	lsls	r3, r3, #1
10003ae8:	21ff      	movs	r1, #255	; 0xff
10003aea:	50d1      	str	r1, [r2, r3]
    data_ptr->written_block_counter = 0U;
10003aec:	69fb      	ldr	r3, [r7, #28]
10003aee:	2200      	movs	r2, #0
10003af0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
10003af2:	46bd      	mov	sp, r7
10003af4:	b008      	add	sp, #32
10003af6:	bd80      	pop	{r7, pc}
10003af8:	2000056c 	.word	0x2000056c

10003afc <E_EEPROM_XMC1_lUpdateCacheBlockRead>:
 * Return value   : uint32_t
 *
 * Description    : Utility function to read data block from flash for cache update function.
 */
static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void)
{
10003afc:	b580      	push	{r7, lr}
10003afe:	b082      	sub	sp, #8
10003b00:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003b02:	4b0f      	ldr	r3, [pc, #60]	; (10003b40 <E_EEPROM_XMC1_lUpdateCacheBlockRead+0x44>)
10003b04:	685b      	ldr	r3, [r3, #4]
10003b06:	607b      	str	r3, [r7, #4]
  
  /* Set the Write Source pointer to the next block */
  data_ptr->curr_bank_src_addr = data_ptr->curr_bank_src_addr -  E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10003b08:	687b      	ldr	r3, [r7, #4]
10003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003b0c:	3b10      	subs	r3, #16
10003b0e:	1c1a      	adds	r2, r3, #0
10003b10:	687b      	ldr	r3, [r7, #4]
10003b12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10003b14:	f7fd fb0c 	bl	10001130 <XMC_FLASH_ClearStatus>
  
  E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr,  (uint32_t*)(void*)data_ptr->read_write_buffer);
10003b18:	687b      	ldr	r3, [r7, #4]
10003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10003b1c:	687b      	ldr	r3, [r7, #4]
10003b1e:	3344      	adds	r3, #68	; 0x44
10003b20:	1c10      	adds	r0, r2, #0
10003b22:	1c19      	adds	r1, r3, #0
10003b24:	f000 fcf4 	bl	10004510 <E_EEPROM_XMC1_lReadSingleBlock>
  
  /* Increment number of read block counter  */
  data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
10003b28:	687b      	ldr	r3, [r7, #4]
10003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003b2c:	1c5a      	adds	r2, r3, #1
10003b2e:	687b      	ldr	r3, [r7, #4]
10003b30:	641a      	str	r2, [r3, #64]	; 0x40
  
  return (E_EEPROM_XMC1_lGetFlashStatus());
10003b32:	f000 fd17 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
10003b36:	1c03      	adds	r3, r0, #0
}
10003b38:	1c18      	adds	r0, r3, #0
10003b3a:	46bd      	mov	sp, r7
10003b3c:	b002      	add	sp, #8
10003b3e:	bd80      	pop	{r7, pc}
10003b40:	2000056c 	.word	0x2000056c

10003b44 <E_EEPROM_XMC1_lGetUsrBlockIndex>:
 * Return value   : uint32_t : returns array index pointer of block configuration
 *
 * Description    : This utility function will return the Index (location) of the block in the user configuration.
 */
static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number)
{
10003b44:	b580      	push	{r7, lr}
10003b46:	b084      	sub	sp, #16
10003b48:	af00      	add	r7, sp, #0
10003b4a:	1c02      	adds	r2, r0, #0
10003b4c:	1dfb      	adds	r3, r7, #7
10003b4e:	701a      	strb	r2, [r3, #0]
  uint32_t indx;
  E_EEPROM_XMC1_BLOCK_t  *block_ptr;
  
  indx = 0U;
10003b50:	2300      	movs	r3, #0
10003b52:	60fb      	str	r3, [r7, #12]
  block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
10003b54:	4b12      	ldr	r3, [pc, #72]	; (10003ba0 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
10003b56:	681a      	ldr	r2, [r3, #0]
10003b58:	68fb      	ldr	r3, [r7, #12]
10003b5a:	00db      	lsls	r3, r3, #3
10003b5c:	18d3      	adds	r3, r2, r3
10003b5e:	60bb      	str	r3, [r7, #8]
  
  /* Check for max configured block count reached and block number is matched against the configured block numbers */
  while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_number) )
10003b60:	e005      	b.n	10003b6e <E_EEPROM_XMC1_lGetUsrBlockIndex+0x2a>
  {
    indx++;
10003b62:	68fb      	ldr	r3, [r7, #12]
10003b64:	3301      	adds	r3, #1
10003b66:	60fb      	str	r3, [r7, #12]
    block_ptr++;
10003b68:	68bb      	ldr	r3, [r7, #8]
10003b6a:	3308      	adds	r3, #8
10003b6c:	60bb      	str	r3, [r7, #8]
  
  indx = 0U;
  block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
  
  /* Check for max configured block count reached and block number is matched against the configured block numbers */
  while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_number) )
10003b6e:	4b0c      	ldr	r3, [pc, #48]	; (10003ba0 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
10003b70:	7a5b      	ldrb	r3, [r3, #9]
10003b72:	1e1a      	subs	r2, r3, #0
10003b74:	68fb      	ldr	r3, [r7, #12]
10003b76:	429a      	cmp	r2, r3
10003b78:	d905      	bls.n	10003b86 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x42>
10003b7a:	68bb      	ldr	r3, [r7, #8]
10003b7c:	781b      	ldrb	r3, [r3, #0]
10003b7e:	1dfa      	adds	r2, r7, #7
10003b80:	7812      	ldrb	r2, [r2, #0]
10003b82:	429a      	cmp	r2, r3
10003b84:	d1ed      	bne.n	10003b62 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x1e>
  {
    indx++;
    block_ptr++;
  }
  
  if ( indx == E_EEPROM_XMC1_HANDLE_PTR->block_count )
10003b86:	4b06      	ldr	r3, [pc, #24]	; (10003ba0 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
10003b88:	7a5b      	ldrb	r3, [r3, #9]
10003b8a:	1e1a      	subs	r2, r3, #0
10003b8c:	68fb      	ldr	r3, [r7, #12]
10003b8e:	429a      	cmp	r2, r3
10003b90:	d101      	bne.n	10003b96 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x52>
  {
    indx = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10003b92:	23ff      	movs	r3, #255	; 0xff
10003b94:	60fb      	str	r3, [r7, #12]
  }
  return (indx);
10003b96:	68fb      	ldr	r3, [r7, #12]
}
10003b98:	1c18      	adds	r0, r3, #0
10003b9a:	46bd      	mov	sp, r7
10003b9c:	b004      	add	sp, #16
10003b9e:	bd80      	pop	{r7, pc}
10003ba0:	2000056c 	.word	0x2000056c

10003ba4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>:
 * Return value   : uint32_t - returns maximum physical flash blocks required to store the data.
 *
 * Description    : Calculates and return the number of FLASH blocks required for a user data block size.
 */
static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size)
{
10003ba4:	b580      	push	{r7, lr}
10003ba6:	b084      	sub	sp, #16
10003ba8:	af00      	add	r7, sp, #0
10003baa:	6078      	str	r0, [r7, #4]
  uint32_t physical_blocks;

  physical_blocks = 1U;
10003bac:	2301      	movs	r3, #1
10003bae:	60fb      	str	r3, [r7, #12]
  /* If size is greater than the  */
  if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
10003bb0:	687b      	ldr	r3, [r7, #4]
10003bb2:	2b0c      	cmp	r3, #12
10003bb4:	d90f      	bls.n	10003bd6 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x32>
  {
    size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
10003bb6:	687b      	ldr	r3, [r7, #4]
10003bb8:	3b0c      	subs	r3, #12
10003bba:	607b      	str	r3, [r7, #4]
    physical_blocks++;
10003bbc:	68fb      	ldr	r3, [r7, #12]
10003bbe:	3301      	adds	r3, #1
10003bc0:	60fb      	str	r3, [r7, #12]
    
    while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
10003bc2:	e005      	b.n	10003bd0 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x2c>
    {
      physical_blocks++;
10003bc4:	68fb      	ldr	r3, [r7, #12]
10003bc6:	3301      	adds	r3, #1
10003bc8:	60fb      	str	r3, [r7, #12]
      size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
10003bca:	687b      	ldr	r3, [r7, #4]
10003bcc:	3b0e      	subs	r3, #14
10003bce:	607b      	str	r3, [r7, #4]
  if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
  {
    size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
    physical_blocks++;
    
    while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
10003bd0:	687b      	ldr	r3, [r7, #4]
10003bd2:	2b0e      	cmp	r3, #14
10003bd4:	d8f6      	bhi.n	10003bc4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x20>
    {
      physical_blocks++;
      size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
    }
  }
  return(physical_blocks);
10003bd6:	68fb      	ldr	r3, [r7, #12]
}
10003bd8:	1c18      	adds	r0, r3, #0
10003bda:	46bd      	mov	sp, r7
10003bdc:	b004      	add	sp, #16
10003bde:	bd80      	pop	{r7, pc}

10003be0 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>:
 * Return value    : uint32_t : Number of physical blocks left in the bank for writing data.
 *
 * Description     : This routine will calculate the number of empty DFLASH blocks remaining in the bank.
 */
static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void)
{
10003be0:	b580      	push	{r7, lr}
10003be2:	b084      	sub	sp, #16
10003be4:	af00      	add	r7, sp, #0
  uint32_t base_addr;
  uint32_t free_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003be6:	4b0d      	ldr	r3, [pc, #52]	; (10003c1c <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x3c>)
10003be8:	685b      	ldr	r3, [r3, #4]
10003bea:	60bb      	str	r3, [r7, #8]
  
  if (data_ptr->current_bank == 0U)
10003bec:	68bb      	ldr	r3, [r7, #8]
10003bee:	6a1b      	ldr	r3, [r3, #32]
10003bf0:	2b00      	cmp	r3, #0
10003bf2:	d102      	bne.n	10003bfa <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x1a>
  {
    base_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10003bf4:	4b0a      	ldr	r3, [pc, #40]	; (10003c20 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x40>)
10003bf6:	60fb      	str	r3, [r7, #12]
10003bf8:	e001      	b.n	10003bfe <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x1e>
  }
  else
  {
    base_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10003bfa:	4b0a      	ldr	r3, [pc, #40]	; (10003c24 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x44>)
10003bfc:	60fb      	str	r3, [r7, #12]
  }
  free_blocks = (uint32_t)( ( (base_addr + E_EEPROM_XMC1_FLASH_BANK_SIZE) - (data_ptr->next_free_block_addr)  )
10003bfe:	68bb      	ldr	r3, [r7, #8]
10003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003c02:	68fa      	ldr	r2, [r7, #12]
10003c04:	1ad3      	subs	r3, r2, r3
10003c06:	2280      	movs	r2, #128	; 0x80
10003c08:	0092      	lsls	r2, r2, #2
10003c0a:	4694      	mov	ip, r2
10003c0c:	4463      	add	r3, ip
10003c0e:	091b      	lsrs	r3, r3, #4
10003c10:	607b      	str	r3, [r7, #4]
                /  E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
  return (free_blocks);
10003c12:	687b      	ldr	r3, [r7, #4]
}
10003c14:	1c18      	adds	r0, r3, #0
10003c16:	46bd      	mov	sp, r7
10003c18:	b004      	add	sp, #16
10003c1a:	bd80      	pop	{r7, pc}
10003c1c:	2000056c 	.word	0x2000056c
10003c20:	10008c00 	.word	0x10008c00
10003c24:	10008e00 	.word	0x10008e00

10003c28 <E_EEPROM_XMC1_lUpdateCurrBankInfo>:
 * Return value    : void
 *
 * Description     : Updates global addresses to keep track of writing and reading operations respectively.
 */
static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void)
{
10003c28:	b580      	push	{r7, lr}
10003c2a:	b082      	sub	sp, #8
10003c2c:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003c2e:	4b14      	ldr	r3, [pc, #80]	; (10003c80 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x58>)
10003c30:	685b      	ldr	r3, [r3, #4]
10003c32:	607b      	str	r3, [r7, #4]
  
  if (data_ptr->current_bank == 0U)
10003c34:	687b      	ldr	r3, [r7, #4]
10003c36:	6a1b      	ldr	r3, [r3, #32]
10003c38:	2b00      	cmp	r3, #0
10003c3a:	d10f      	bne.n	10003c5c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x34>
  {
    data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10003c3c:	687b      	ldr	r3, [r7, #4]
10003c3e:	4a11      	ldr	r2, [pc, #68]	; (10003c84 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10003c40:	639a      	str	r2, [r3, #56]	; 0x38
    data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10003c42:	687b      	ldr	r3, [r7, #4]
10003c44:	4a0f      	ldr	r2, [pc, #60]	; (10003c84 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10003c46:	629a      	str	r2, [r3, #40]	; 0x28
    data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10003c48:	687b      	ldr	r3, [r7, #4]
10003c4a:	4a0f      	ldr	r2, [pc, #60]	; (10003c88 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
10003c4c:	625a      	str	r2, [r3, #36]	; 0x24
    data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
10003c4e:	687b      	ldr	r3, [r7, #4]
10003c50:	4a0e      	ldr	r2, [pc, #56]	; (10003c8c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x64>)
10003c52:	62da      	str	r2, [r3, #44]	; 0x2c
    data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
10003c54:	687b      	ldr	r3, [r7, #4]
10003c56:	4a0e      	ldr	r2, [pc, #56]	; (10003c90 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x68>)
10003c58:	631a      	str	r2, [r3, #48]	; 0x30
10003c5a:	e00e      	b.n	10003c7a <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x52>
  }
  else
  {
    data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10003c5c:	687b      	ldr	r3, [r7, #4]
10003c5e:	4a0a      	ldr	r2, [pc, #40]	; (10003c88 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
10003c60:	639a      	str	r2, [r3, #56]	; 0x38
    data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10003c62:	687b      	ldr	r3, [r7, #4]
10003c64:	4a08      	ldr	r2, [pc, #32]	; (10003c88 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
10003c66:	629a      	str	r2, [r3, #40]	; 0x28
    data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10003c68:	687b      	ldr	r3, [r7, #4]
10003c6a:	4a06      	ldr	r2, [pc, #24]	; (10003c84 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10003c6c:	625a      	str	r2, [r3, #36]	; 0x24
    data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
10003c6e:	687b      	ldr	r3, [r7, #4]
10003c70:	4a07      	ldr	r2, [pc, #28]	; (10003c90 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x68>)
10003c72:	62da      	str	r2, [r3, #44]	; 0x2c
    data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
10003c74:	687b      	ldr	r3, [r7, #4]
10003c76:	4a05      	ldr	r2, [pc, #20]	; (10003c8c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x64>)
10003c78:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
10003c7a:	46bd      	mov	sp, r7
10003c7c:	b002      	add	sp, #8
10003c7e:	bd80      	pop	{r7, pc}
10003c80:	2000056c 	.word	0x2000056c
10003c84:	10008c00 	.word	0x10008c00
10003c88:	10008e00 	.word	0x10008e00
10003c8c:	10008dff 	.word	0x10008dff
10003c90:	10008fff 	.word	0x10008fff

10003c94 <E_EEPROM_XMC1_lReadMarkerBlocks>:
 * Return value    : uint32_t : marker_dirty_state
 *
 * Description     : This function will read the Block marker contents
 */
static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void)
{
10003c94:	b580      	push	{r7, lr}
10003c96:	b088      	sub	sp, #32
10003c98:	af00      	add	r7, sp, #0
  uint32_t state_marker_cnt;
  uint32_t temp_state_marker;
  uint32_t marker_dirty_state;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003c9a:	4b20      	ldr	r3, [pc, #128]	; (10003d1c <E_EEPROM_XMC1_lReadMarkerBlocks+0x88>)
10003c9c:	685b      	ldr	r3, [r3, #4]
10003c9e:	613b      	str	r3, [r7, #16]
  
  /* Initialize Local variables */
  temp_bank_state = 0U;
10003ca0:	2300      	movs	r3, #0
10003ca2:	61fb      	str	r3, [r7, #28]
  marker_dirty_state = 0U;
10003ca4:	2300      	movs	r3, #0
10003ca6:	617b      	str	r3, [r7, #20]
  state_marker_cnt = 0U;
10003ca8:	2300      	movs	r3, #0
10003caa:	61bb      	str	r3, [r7, #24]
  do
  {
    /* Prepare the variables for state block update */
    temp_bank_state = (uint32_t)((uint32_t)temp_bank_state << (uint32_t)1U);
10003cac:	69fb      	ldr	r3, [r7, #28]
10003cae:	005b      	lsls	r3, r3, #1
10003cb0:	61fb      	str	r3, [r7, #28]
    
    bank  = (uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS;
10003cb2:	69bb      	ldr	r3, [r7, #24]
10003cb4:	089b      	lsrs	r3, r3, #2
10003cb6:	60fb      	str	r3, [r7, #12]
    block = (uint32_t)state_marker_cnt - ((uint32_t)bank << E_EEPROM_XMC1_TWO_BIT_POS);
10003cb8:	68fb      	ldr	r3, [r7, #12]
10003cba:	009b      	lsls	r3, r3, #2
10003cbc:	69ba      	ldr	r2, [r7, #24]
10003cbe:	1ad3      	subs	r3, r2, r3
10003cc0:	60bb      	str	r3, [r7, #8]
    
    /* Read the state block of bank*/
    temp_state_marker = E_EEPROM_XMC1_lReadVerifyMarker(bank , block);
10003cc2:	68fa      	ldr	r2, [r7, #12]
10003cc4:	68bb      	ldr	r3, [r7, #8]
10003cc6:	1c10      	adds	r0, r2, #0
10003cc8:	1c19      	adds	r1, r3, #0
10003cca:	f000 f829 	bl	10003d20 <E_EEPROM_XMC1_lReadVerifyMarker>
10003cce:	1c03      	adds	r3, r0, #0
10003cd0:	607b      	str	r3, [r7, #4]
    
    if (temp_state_marker == E_EEPROM_XMC1_ALL_ONES)
10003cd2:	687b      	ldr	r3, [r7, #4]
10003cd4:	3301      	adds	r3, #1
10003cd6:	d104      	bne.n	10003ce2 <E_EEPROM_XMC1_lReadMarkerBlocks+0x4e>
    {
     temp_bank_state |= 1U;
10003cd8:	69fb      	ldr	r3, [r7, #28]
10003cda:	2201      	movs	r2, #1
10003cdc:	4313      	orrs	r3, r2
10003cde:	61fb      	str	r3, [r7, #28]
10003ce0:	e00c      	b.n	10003cfc <E_EEPROM_XMC1_lReadMarkerBlocks+0x68>
    }
    else if (temp_state_marker == E_EEPROM_XMC1_ALL_ZEROS)
10003ce2:	687b      	ldr	r3, [r7, #4]
10003ce4:	2b00      	cmp	r3, #0
10003ce6:	d009      	beq.n	10003cfc <E_EEPROM_XMC1_lReadMarkerBlocks+0x68>
    {
     temp_bank_state |= 0U;
    }
    else
    {
     indx = (uint32_t)((uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS);
10003ce8:	69bb      	ldr	r3, [r7, #24]
10003cea:	089b      	lsrs	r3, r3, #2
10003cec:	603b      	str	r3, [r7, #0]
     marker_dirty_state |= (uint32_t)((uint32_t)1U << (uint32_t)indx);
10003cee:	683b      	ldr	r3, [r7, #0]
10003cf0:	2201      	movs	r2, #1
10003cf2:	409a      	lsls	r2, r3
10003cf4:	1c13      	adds	r3, r2, #0
10003cf6:	697a      	ldr	r2, [r7, #20]
10003cf8:	4313      	orrs	r3, r2
10003cfa:	617b      	str	r3, [r7, #20]
    }
    /* Update the counter "StateBlockCnt" */
    state_marker_cnt++;
10003cfc:	69bb      	ldr	r3, [r7, #24]
10003cfe:	3301      	adds	r3, #1
10003d00:	61bb      	str	r3, [r7, #24]
  } while (state_marker_cnt < E_EEPROM_XMC1_EIGHT_BYTES);
10003d02:	69bb      	ldr	r3, [r7, #24]
10003d04:	2b07      	cmp	r3, #7
10003d06:	d9d1      	bls.n	10003cac <E_EEPROM_XMC1_lReadMarkerBlocks+0x18>
  
  /* Update Global variables */
  data_ptr->init_gc_state = temp_bank_state;
10003d08:	693a      	ldr	r2, [r7, #16]
10003d0a:	23b0      	movs	r3, #176	; 0xb0
10003d0c:	005b      	lsls	r3, r3, #1
10003d0e:	69f9      	ldr	r1, [r7, #28]
10003d10:	50d1      	str	r1, [r2, r3]
  
  return (marker_dirty_state);
10003d12:	697b      	ldr	r3, [r7, #20]
}
10003d14:	1c18      	adds	r0, r3, #0
10003d16:	46bd      	mov	sp, r7
10003d18:	b008      	add	sp, #32
10003d1a:	bd80      	pop	{r7, pc}
10003d1c:	2000056c 	.word	0x2000056c

10003d20 <E_EEPROM_XMC1_lReadVerifyMarker>:
 *                    E_EEPROM_XMC1_MB_DIRTY
 *
 * Description    : This function will verify the marker contents read out from state page.
 */
static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block)
{
10003d20:	b580      	push	{r7, lr}
10003d22:	b08a      	sub	sp, #40	; 0x28
10003d24:	af00      	add	r7, sp, #0
10003d26:	6078      	str	r0, [r7, #4]
10003d28:	6039      	str	r1, [r7, #0]
  uint32_t zeros_counter;
  uint32_t marker_block_addr;
  uint32_t *marker_array_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003d2a:	4b29      	ldr	r3, [pc, #164]	; (10003dd0 <E_EEPROM_XMC1_lReadVerifyMarker+0xb0>)
10003d2c:	685b      	ldr	r3, [r3, #4]
10003d2e:	617b      	str	r3, [r7, #20]
  
  ones_counter = 0U;
10003d30:	2300      	movs	r3, #0
10003d32:	61fb      	str	r3, [r7, #28]
  zeros_counter = 0U;
10003d34:	2300      	movs	r3, #0
10003d36:	61bb      	str	r3, [r7, #24]
  marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
10003d38:	697b      	ldr	r3, [r7, #20]
10003d3a:	3344      	adds	r3, #68	; 0x44
10003d3c:	613b      	str	r3, [r7, #16]
  
  /* Calculate the Marker Block address from bank and Block size*/
  marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
                      ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
10003d3e:	687b      	ldr	r3, [r7, #4]
10003d40:	4a24      	ldr	r2, [pc, #144]	; (10003dd4 <E_EEPROM_XMC1_lReadVerifyMarker+0xb4>)
10003d42:	4694      	mov	ip, r2
10003d44:	4463      	add	r3, ip
10003d46:	015a      	lsls	r2, r3, #5
10003d48:	683b      	ldr	r3, [r7, #0]
10003d4a:	18d3      	adds	r3, r2, r3
  ones_counter = 0U;
  zeros_counter = 0U;
  marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
  
  /* Calculate the Marker Block address from bank and Block size*/
  marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
10003d4c:	011b      	lsls	r3, r3, #4
10003d4e:	60fb      	str	r3, [r7, #12]
                      ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
                      ((uint32_t)block * (uint32_t)E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10003d50:	f7fd f9ee 	bl	10001130 <XMC_FLASH_ClearStatus>
  
  /* Read one complete block of data (4 Words = 128 bit) from the targeted Marker Block */
  E_EEPROM_XMC1_lReadSingleBlock(marker_block_addr, (uint32_t*)(void*)marker_array_ptr);
10003d54:	68fa      	ldr	r2, [r7, #12]
10003d56:	693b      	ldr	r3, [r7, #16]
10003d58:	1c10      	adds	r0, r2, #0
10003d5a:	1c19      	adds	r1, r3, #0
10003d5c:	f000 fbd8 	bl	10004510 <E_EEPROM_XMC1_lReadSingleBlock>
  
  /* Check for any flash hardware errors*/
  if (E_EEPROM_XMC1_lGetFlashStatus())
10003d60:	f000 fc00 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
10003d64:	1e03      	subs	r3, r0, #0
10003d66:	d002      	beq.n	10003d6e <E_EEPROM_XMC1_lReadVerifyMarker+0x4e>
  {
    /* Any Hardware errors will result in Dirty state*/
    return_val = E_EEPROM_XMC1_MB_DIRTY;
10003d68:	23dd      	movs	r3, #221	; 0xdd
10003d6a:	623b      	str	r3, [r7, #32]
10003d6c:	e02b      	b.n	10003dc6 <E_EEPROM_XMC1_lReadVerifyMarker+0xa6>
  }
  else
  {
    for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
10003d6e:	2300      	movs	r3, #0
10003d70:	627b      	str	r3, [r7, #36]	; 0x24
10003d72:	e016      	b.n	10003da2 <E_EEPROM_XMC1_lReadVerifyMarker+0x82>
    {
      /* Check for the Marker field and verify Marker either 0 or 1*/
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ZEROS)
10003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003d76:	009b      	lsls	r3, r3, #2
10003d78:	693a      	ldr	r2, [r7, #16]
10003d7a:	18d3      	adds	r3, r2, r3
10003d7c:	681b      	ldr	r3, [r3, #0]
10003d7e:	2b00      	cmp	r3, #0
10003d80:	d102      	bne.n	10003d88 <E_EEPROM_XMC1_lReadVerifyMarker+0x68>
      {
        zeros_counter++;
10003d82:	69bb      	ldr	r3, [r7, #24]
10003d84:	3301      	adds	r3, #1
10003d86:	61bb      	str	r3, [r7, #24]
      }
      
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
10003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003d8a:	009b      	lsls	r3, r3, #2
10003d8c:	693a      	ldr	r2, [r7, #16]
10003d8e:	18d3      	adds	r3, r2, r3
10003d90:	681b      	ldr	r3, [r3, #0]
10003d92:	3301      	adds	r3, #1
10003d94:	d102      	bne.n	10003d9c <E_EEPROM_XMC1_lReadVerifyMarker+0x7c>
      {
        ones_counter++;
10003d96:	69fb      	ldr	r3, [r7, #28]
10003d98:	3301      	adds	r3, #1
10003d9a:	61fb      	str	r3, [r7, #28]
    /* Any Hardware errors will result in Dirty state*/
    return_val = E_EEPROM_XMC1_MB_DIRTY;
  }
  else
  {
    for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
10003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003d9e:	3301      	adds	r3, #1
10003da0:	627b      	str	r3, [r7, #36]	; 0x24
10003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003da4:	2b03      	cmp	r3, #3
10003da6:	d9e5      	bls.n	10003d74 <E_EEPROM_XMC1_lReadVerifyMarker+0x54>
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
      {
        ones_counter++;
      }
    }
    if (ones_counter == E_EEPROM_XMC1_FOUR_BYTES)
10003da8:	69fb      	ldr	r3, [r7, #28]
10003daa:	2b04      	cmp	r3, #4
10003dac:	d103      	bne.n	10003db6 <E_EEPROM_XMC1_lReadVerifyMarker+0x96>
    {
      return_val = E_EEPROM_XMC1_ALL_ONES;
10003dae:	2301      	movs	r3, #1
10003db0:	425b      	negs	r3, r3
10003db2:	623b      	str	r3, [r7, #32]
10003db4:	e007      	b.n	10003dc6 <E_EEPROM_XMC1_lReadVerifyMarker+0xa6>
    }
    else if (zeros_counter == E_EEPROM_XMC1_FOUR_BYTES)
10003db6:	69bb      	ldr	r3, [r7, #24]
10003db8:	2b04      	cmp	r3, #4
10003dba:	d102      	bne.n	10003dc2 <E_EEPROM_XMC1_lReadVerifyMarker+0xa2>
    {
      return_val = E_EEPROM_XMC1_ALL_ZEROS;
10003dbc:	2300      	movs	r3, #0
10003dbe:	623b      	str	r3, [r7, #32]
10003dc0:	e001      	b.n	10003dc6 <E_EEPROM_XMC1_lReadVerifyMarker+0xa6>
    }
    else
    {
      return_val = E_EEPROM_XMC1_MB_DIRTY;
10003dc2:	23dd      	movs	r3, #221	; 0xdd
10003dc4:	623b      	str	r3, [r7, #32]
    }
  }
  return (return_val);
10003dc6:	6a3b      	ldr	r3, [r7, #32]
}
10003dc8:	1c18      	adds	r0, r3, #0
10003dca:	46bd      	mov	sp, r7
10003dcc:	b00a      	add	sp, #40	; 0x28
10003dce:	bd80      	pop	{r7, pc}
10003dd0:	2000056c 	.word	0x2000056c
10003dd4:	00080046 	.word	0x00080046

10003dd8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>:
 * Return value    : void
 *
 * Description     : This function will update the write buffer for a particular bank marker state
 */
static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void)
{
10003dd8:	b580      	push	{r7, lr}
10003dda:	b084      	sub	sp, #16
10003ddc:	af00      	add	r7, sp, #0
  uint32_t *array_ptr;
  uint32_t indx;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003dde:	4b0c      	ldr	r3, [pc, #48]	; (10003e10 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x38>)
10003de0:	685b      	ldr	r3, [r3, #4]
10003de2:	60bb      	str	r3, [r7, #8]
  
  array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
10003de4:	68bb      	ldr	r3, [r7, #8]
10003de6:	3344      	adds	r3, #68	; 0x44
10003de8:	607b      	str	r3, [r7, #4]
  for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
10003dea:	2300      	movs	r3, #0
10003dec:	60fb      	str	r3, [r7, #12]
10003dee:	e008      	b.n	10003e02 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x2a>
  {
    array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
10003df0:	68fb      	ldr	r3, [r7, #12]
10003df2:	009b      	lsls	r3, r3, #2
10003df4:	687a      	ldr	r2, [r7, #4]
10003df6:	18d3      	adds	r3, r2, r3
10003df8:	2200      	movs	r2, #0
10003dfa:	601a      	str	r2, [r3, #0]
  uint32_t indx;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
  
  array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
  for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
10003dfc:	68fb      	ldr	r3, [r7, #12]
10003dfe:	3301      	adds	r3, #1
10003e00:	60fb      	str	r3, [r7, #12]
10003e02:	68fb      	ldr	r3, [r7, #12]
10003e04:	2b03      	cmp	r3, #3
10003e06:	d9f3      	bls.n	10003df0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x18>
  {
    array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
  }

}
10003e08:	46bd      	mov	sp, r7
10003e0a:	b004      	add	sp, #16
10003e0c:	bd80      	pop	{r7, pc}
10003e0e:	46c0      	nop			; (mov r8, r8)
10003e10:	2000056c 	.word	0x2000056c

10003e14 <E_EEPROM_XMC1_lSetMarkerPageBuffer>:
 *                     ----------------------------------------------------------------------
 *                     ----------------------------------------------------------------------
 *                     BLOCK16-  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
 */
static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state)
{
10003e14:	b580      	push	{r7, lr}
10003e16:	b088      	sub	sp, #32
10003e18:	af00      	add	r7, sp, #0
10003e1a:	6078      	str	r0, [r7, #4]
  uint32_t bit_mask;
  uint32_t word_data;
  uint32_t *array_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003e1c:	4b1e      	ldr	r3, [pc, #120]	; (10003e98 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x84>)
10003e1e:	685b      	ldr	r3, [r3, #4]
10003e20:	60fb      	str	r3, [r7, #12]
  
  array_ptr = (uint32_t*)(void*)data_ptr->page_write_buffer;
10003e22:	68fb      	ldr	r3, [r7, #12]
10003e24:	3358      	adds	r3, #88	; 0x58
10003e26:	613b      	str	r3, [r7, #16]
   * Depending upon the state received check the bit positions where a state marker has to be updated to
   * get the actual state. Fill the first four blocks of the page with the state marker information.
   */

  /* Fill the first rest 4 blocks of the page with marker data  */
  for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
10003e28:	2300      	movs	r3, #0
10003e2a:	61bb      	str	r3, [r7, #24]
10003e2c:	e01e      	b.n	10003e6c <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x58>
  {
    if ( (state & (E_EEPROM_XMC1_MARKER_POSITION >> bit_mask )) == 0U )
10003e2e:	69bb      	ldr	r3, [r7, #24]
10003e30:	2280      	movs	r2, #128	; 0x80
10003e32:	40da      	lsrs	r2, r3
10003e34:	1c13      	adds	r3, r2, #0
10003e36:	687a      	ldr	r2, [r7, #4]
10003e38:	4013      	ands	r3, r2
10003e3a:	d102      	bne.n	10003e42 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x2e>
    {
       word_data = E_EEPROM_XMC1_ALL_ZEROS;
10003e3c:	2300      	movs	r3, #0
10003e3e:	617b      	str	r3, [r7, #20]
10003e40:	e002      	b.n	10003e48 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x34>
    }
    else
    {
       word_data = E_EEPROM_XMC1_ALL_ONES;
10003e42:	2301      	movs	r3, #1
10003e44:	425b      	negs	r3, r3
10003e46:	617b      	str	r3, [r7, #20]
    }
    for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
10003e48:	2300      	movs	r3, #0
10003e4a:	61fb      	str	r3, [r7, #28]
10003e4c:	e008      	b.n	10003e60 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x4c>
    {
       *array_ptr = word_data;
10003e4e:	693b      	ldr	r3, [r7, #16]
10003e50:	697a      	ldr	r2, [r7, #20]
10003e52:	601a      	str	r2, [r3, #0]
       array_ptr++;
10003e54:	693b      	ldr	r3, [r7, #16]
10003e56:	3304      	adds	r3, #4
10003e58:	613b      	str	r3, [r7, #16]
    }
    else
    {
       word_data = E_EEPROM_XMC1_ALL_ONES;
    }
    for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
10003e5a:	69fb      	ldr	r3, [r7, #28]
10003e5c:	3301      	adds	r3, #1
10003e5e:	61fb      	str	r3, [r7, #28]
10003e60:	69fb      	ldr	r3, [r7, #28]
10003e62:	2b03      	cmp	r3, #3
10003e64:	d9f3      	bls.n	10003e4e <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x3a>
   * Depending upon the state received check the bit positions where a state marker has to be updated to
   * get the actual state. Fill the first four blocks of the page with the state marker information.
   */

  /* Fill the first rest 4 blocks of the page with marker data  */
  for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
10003e66:	69bb      	ldr	r3, [r7, #24]
10003e68:	3301      	adds	r3, #1
10003e6a:	61bb      	str	r3, [r7, #24]
10003e6c:	69bb      	ldr	r3, [r7, #24]
10003e6e:	2b03      	cmp	r3, #3
10003e70:	d9dd      	bls.n	10003e2e <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x1a>
       array_ptr++;
    }

  }
  /* Fill the first rest 12 blocks of the page with all ones*/
  for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
10003e72:	2300      	movs	r3, #0
10003e74:	61fb      	str	r3, [r7, #28]
10003e76:	e009      	b.n	10003e8c <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x78>
  {
    *array_ptr = E_EEPROM_XMC1_ALL_ONES;
10003e78:	693b      	ldr	r3, [r7, #16]
10003e7a:	2201      	movs	r2, #1
10003e7c:	4252      	negs	r2, r2
10003e7e:	601a      	str	r2, [r3, #0]
    array_ptr++;
10003e80:	693b      	ldr	r3, [r7, #16]
10003e82:	3304      	adds	r3, #4
10003e84:	613b      	str	r3, [r7, #16]
       array_ptr++;
    }

  }
  /* Fill the first rest 12 blocks of the page with all ones*/
  for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
10003e86:	69fb      	ldr	r3, [r7, #28]
10003e88:	3301      	adds	r3, #1
10003e8a:	61fb      	str	r3, [r7, #28]
10003e8c:	69fb      	ldr	r3, [r7, #28]
10003e8e:	2b2f      	cmp	r3, #47	; 0x2f
10003e90:	d9f2      	bls.n	10003e78 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x64>
  {
    *array_ptr = E_EEPROM_XMC1_ALL_ONES;
    array_ptr++;
  }

}
10003e92:	46bd      	mov	sp, r7
10003e94:	b008      	add	sp, #32
10003e96:	bd80      	pop	{r7, pc}
10003e98:	2000056c 	.word	0x2000056c

10003e9c <E_EEPROM_XMC1_lEraseBank>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Erases the particular bank
 */
static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address)
{
10003e9c:	b580      	push	{r7, lr}
10003e9e:	b084      	sub	sp, #16
10003ea0:	af00      	add	r7, sp, #0
10003ea2:	6078      	str	r0, [r7, #4]
  uint32_t indx;
  uint32_t status;
  /* Clear all error status flags before flash operation*/
  page_address = ((page_address) - E_EEPROM_XMC1_FLASH_PAGE_SIZE );
10003ea4:	687b      	ldr	r3, [r7, #4]
10003ea6:	3b01      	subs	r3, #1
10003ea8:	3bff      	subs	r3, #255	; 0xff
10003eaa:	607b      	str	r3, [r7, #4]
  page_address += 1U;
10003eac:	687b      	ldr	r3, [r7, #4]
10003eae:	3301      	adds	r3, #1
10003eb0:	607b      	str	r3, [r7, #4]
  indx = 0U;
10003eb2:	2300      	movs	r3, #0
10003eb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    /* Clear all error status flags before flash operation*/
    XMC_FLASH_ClearStatus();
10003eb6:	f7fd f93b 	bl	10001130 <XMC_FLASH_ClearStatus>
    
    E_EEPROM_XMC1_lEraseSinglePage(page_address);
10003eba:	687b      	ldr	r3, [r7, #4]
10003ebc:	1c18      	adds	r0, r3, #0
10003ebe:	f000 fb45 	bl	1000454c <E_EEPROM_XMC1_lEraseSinglePage>
    
    status = E_EEPROM_XMC1_lGetFlashStatus();
10003ec2:	f000 fb4f 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
10003ec6:	1c03      	adds	r3, r0, #0
10003ec8:	60bb      	str	r3, [r7, #8]
    
    page_address = page_address - (E_EEPROM_XMC1_FLASH_PAGE_SIZE );
10003eca:	687b      	ldr	r3, [r7, #4]
10003ecc:	3b01      	subs	r3, #1
10003ece:	3bff      	subs	r3, #255	; 0xff
10003ed0:	607b      	str	r3, [r7, #4]
    indx++;
10003ed2:	68fb      	ldr	r3, [r7, #12]
10003ed4:	3301      	adds	r3, #1
10003ed6:	60fb      	str	r3, [r7, #12]
  } while ((indx <E_EEPROM_XMC1_BANK_PAGES) && (status == 0U));
10003ed8:	68fb      	ldr	r3, [r7, #12]
10003eda:	2b01      	cmp	r3, #1
10003edc:	d802      	bhi.n	10003ee4 <E_EEPROM_XMC1_lEraseBank+0x48>
10003ede:	68bb      	ldr	r3, [r7, #8]
10003ee0:	2b00      	cmp	r3, #0
10003ee2:	d0e8      	beq.n	10003eb6 <E_EEPROM_XMC1_lEraseBank+0x1a>
  
  return (status);
10003ee4:	68bb      	ldr	r3, [r7, #8]
}
10003ee6:	1c18      	adds	r0, r3, #0
10003ee8:	46bd      	mov	sp, r7
10003eea:	b004      	add	sp, #16
10003eec:	bd80      	pop	{r7, pc}
10003eee:	46c0      	nop			; (mov r8, r8)

10003ef0 <E_EEPROM_XMC1_lGCWrite>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Local function to write data into specified location during GC operation
 */
static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address)
{
10003ef0:	b580      	push	{r7, lr}
10003ef2:	b084      	sub	sp, #16
10003ef4:	af00      	add	r7, sp, #0
10003ef6:	6078      	str	r0, [r7, #4]
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003ef8:	4b0a      	ldr	r3, [pc, #40]	; (10003f24 <E_EEPROM_XMC1_lGCWrite+0x34>)
10003efa:	685b      	ldr	r3, [r3, #4]
10003efc:	60fb      	str	r3, [r7, #12]
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10003efe:	f7fd f917 	bl	10001130 <XMC_FLASH_ClearStatus>
  
  /* Write a single block into flash*/
  E_EEPROM_XMC1_lWriteSingleBlock(block_address, (uint32_t*)(void*)data_ptr->read_write_buffer);
10003f02:	68fb      	ldr	r3, [r7, #12]
10003f04:	3344      	adds	r3, #68	; 0x44
10003f06:	687a      	ldr	r2, [r7, #4]
10003f08:	1c10      	adds	r0, r2, #0
10003f0a:	1c19      	adds	r1, r3, #0
10003f0c:	f000 faf0 	bl	100044f0 <E_EEPROM_XMC1_lWriteSingleBlock>
  status = E_EEPROM_XMC1_lGetFlashStatus();
10003f10:	f000 fb28 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
10003f14:	1c03      	adds	r3, r0, #0
10003f16:	60bb      	str	r3, [r7, #8]
  return (status);
10003f18:	68bb      	ldr	r3, [r7, #8]
}
10003f1a:	1c18      	adds	r0, r3, #0
10003f1c:	46bd      	mov	sp, r7
10003f1e:	b004      	add	sp, #16
10003f20:	bd80      	pop	{r7, pc}
10003f22:	46c0      	nop			; (mov r8, r8)
10003f24:	2000056c 	.word	0x2000056c

10003f28 <E_EEPROM_XMC1_lLocalWrite>:
 * Description     : Common local write function to do write block function or invalidate block.
 */
static uint32_t E_EEPROM_XMC1_lLocalWrite( uint8_t block_number,
                                           uint8_t* data_buffer_ptr,
                                           uint32_t invalidate)
{
10003f28:	b580      	push	{r7, lr}
10003f2a:	b08c      	sub	sp, #48	; 0x30
10003f2c:	af00      	add	r7, sp, #0
10003f2e:	60b9      	str	r1, [r7, #8]
10003f30:	607a      	str	r2, [r7, #4]
10003f32:	230f      	movs	r3, #15
10003f34:	18fb      	adds	r3, r7, r3
10003f36:	1c02      	adds	r2, r0, #0
10003f38:	701a      	strb	r2, [r3, #0]
  uint32_t user_block_index;
  uint32_t remaining_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_BLOCK_t *block_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10003f3a:	4b3b      	ldr	r3, [pc, #236]	; (10004028 <E_EEPROM_XMC1_lLocalWrite+0x100>)
10003f3c:	685b      	ldr	r3, [r3, #4]
10003f3e:	627b      	str	r3, [r7, #36]	; 0x24

  status = 0U;
10003f40:	2300      	movs	r3, #0
10003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  perform_write = 0U;
10003f44:	2300      	movs	r3, #0
10003f46:	62bb      	str	r3, [r7, #40]	; 0x28
  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10003f48:	230f      	movs	r3, #15
10003f4a:	18fb      	adds	r3, r7, r3
10003f4c:	781b      	ldrb	r3, [r3, #0]
10003f4e:	1c18      	adds	r0, r3, #0
10003f50:	f7ff fdf8 	bl	10003b44 <E_EEPROM_XMC1_lGetUsrBlockIndex>
10003f54:	1c03      	adds	r3, r0, #0
10003f56:	623b      	str	r3, [r7, #32]
  block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
10003f58:	4b33      	ldr	r3, [pc, #204]	; (10004028 <E_EEPROM_XMC1_lLocalWrite+0x100>)
10003f5a:	681a      	ldr	r2, [r3, #0]
10003f5c:	6a3b      	ldr	r3, [r7, #32]
10003f5e:	00db      	lsls	r3, r3, #3
10003f60:	18d3      	adds	r3, r2, r3
10003f62:	61fb      	str	r3, [r7, #28]
  
  flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
10003f64:	69fb      	ldr	r3, [r7, #28]
10003f66:	685b      	ldr	r3, [r3, #4]
10003f68:	1c18      	adds	r0, r3, #0
10003f6a:	f7ff fe1b 	bl	10003ba4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10003f6e:	1c03      	adds	r3, r0, #0
10003f70:	61bb      	str	r3, [r7, #24]
  remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
10003f72:	f7ff fe35 	bl	10003be0 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>
10003f76:	1c03      	adds	r3, r0, #0
10003f78:	617b      	str	r3, [r7, #20]
  
  if (remaining_blocks < flash_blocks)
10003f7a:	697a      	ldr	r2, [r7, #20]
10003f7c:	69bb      	ldr	r3, [r7, #24]
10003f7e:	429a      	cmp	r2, r3
10003f80:	d228      	bcs.n	10003fd4 <E_EEPROM_XMC1_lLocalWrite+0xac>
  {
    /* Doesn't do Garbage collection if, GUI option garbage collection is disabled*/
    if (E_EEPROM_XMC1_HANDLE_PTR->garbage_collection == 1U)
10003f82:	4b29      	ldr	r3, [pc, #164]	; (10004028 <E_EEPROM_XMC1_lLocalWrite+0x100>)
10003f84:	7b1b      	ldrb	r3, [r3, #12]
10003f86:	2b01      	cmp	r3, #1
10003f88:	d121      	bne.n	10003fce <E_EEPROM_XMC1_lLocalWrite+0xa6>
    {
      /* Request for Garbage Collection and continue */
      data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
10003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10003f8c:	23ae      	movs	r3, #174	; 0xae
10003f8e:	005b      	lsls	r3, r3, #1
10003f90:	2104      	movs	r1, #4
10003f92:	50d1      	str	r1, [r2, r3]
      E_EEPROM_XMC1_lGarbageCollection();
10003f94:	f7ff f9de 	bl	10003354 <E_EEPROM_XMC1_lGarbageCollection>
      
      /*Check the size of the GC requested block to check if space is available in the new bank or not.*/
      flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
10003f98:	69fb      	ldr	r3, [r7, #28]
10003f9a:	685b      	ldr	r3, [r3, #4]
10003f9c:	1c18      	adds	r0, r3, #0
10003f9e:	f7ff fe01 	bl	10003ba4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10003fa2:	1c03      	adds	r3, r0, #0
10003fa4:	61bb      	str	r3, [r7, #24]
      remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
10003fa6:	f7ff fe1b 	bl	10003be0 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>
10003faa:	1c03      	adds	r3, r0, #0
10003fac:	617b      	str	r3, [r7, #20]
      
      /* Check for GC overflows the complete space in the new bank, hence cant write the GC triggered block*/
      if ((remaining_blocks >= flash_blocks)&&(data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE))
10003fae:	697a      	ldr	r2, [r7, #20]
10003fb0:	69bb      	ldr	r3, [r7, #24]
10003fb2:	429a      	cmp	r2, r3
10003fb4:	d308      	bcc.n	10003fc8 <E_EEPROM_XMC1_lLocalWrite+0xa0>
10003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10003fb8:	23ae      	movs	r3, #174	; 0xae
10003fba:	005b      	lsls	r3, r3, #1
10003fbc:	58d3      	ldr	r3, [r2, r3]
10003fbe:	2b0a      	cmp	r3, #10
10003fc0:	d102      	bne.n	10003fc8 <E_EEPROM_XMC1_lLocalWrite+0xa0>
      {
        perform_write = 1U;
10003fc2:	2301      	movs	r3, #1
10003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
10003fc6:	e007      	b.n	10003fd8 <E_EEPROM_XMC1_lLocalWrite+0xb0>
      }
      else
      {
        status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
10003fc8:	2305      	movs	r3, #5
10003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
10003fcc:	e004      	b.n	10003fd8 <E_EEPROM_XMC1_lLocalWrite+0xb0>
      }
    }
    else
    {
      status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_MEMORY_BANK_FULL;
10003fce:	2306      	movs	r3, #6
10003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
10003fd2:	e001      	b.n	10003fd8 <E_EEPROM_XMC1_lLocalWrite+0xb0>
    }
  }
  else
  {
    perform_write = 1U;
10003fd4:	2301      	movs	r3, #1
10003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  /* Write operation Starts */
  if (perform_write == 1U)
10003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003fda:	2b01      	cmp	r3, #1
10003fdc:	d11f      	bne.n	1000401e <E_EEPROM_XMC1_lLocalWrite+0xf6>
  {
    data_ptr->written_block_counter = 0U;
10003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003fe0:	2200      	movs	r2, #0
10003fe2:	641a      	str	r2, [r3, #64]	; 0x40
    if (invalidate == 1U)
10003fe4:	687b      	ldr	r3, [r7, #4]
10003fe6:	2b01      	cmp	r3, #1
10003fe8:	d10a      	bne.n	10004000 <E_EEPROM_XMC1_lLocalWrite+0xd8>
    {
      status = E_EEPROM_XMC1_lHandleInvalidReq(block_number, user_block_index);
10003fea:	230f      	movs	r3, #15
10003fec:	18fb      	adds	r3, r7, r3
10003fee:	781a      	ldrb	r2, [r3, #0]
10003ff0:	6a3b      	ldr	r3, [r7, #32]
10003ff2:	1c10      	adds	r0, r2, #0
10003ff4:	1c19      	adds	r1, r3, #0
10003ff6:	f000 f8c9 	bl	1000418c <E_EEPROM_XMC1_lHandleInvalidReq>
10003ffa:	1c03      	adds	r3, r0, #0
10003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
10003ffe:	e009      	b.n	10004014 <E_EEPROM_XMC1_lLocalWrite+0xec>
    }
    else
    {
      status = E_EEPROM_XMC1_lHandleWriteReq(block_number, data_buffer_ptr);
10004000:	230f      	movs	r3, #15
10004002:	18fb      	adds	r3, r7, r3
10004004:	781a      	ldrb	r2, [r3, #0]
10004006:	68bb      	ldr	r3, [r7, #8]
10004008:	1c10      	adds	r0, r2, #0
1000400a:	1c19      	adds	r1, r3, #0
1000400c:	f000 f80e 	bl	1000402c <E_EEPROM_XMC1_lHandleWriteReq>
10004010:	1c03      	adds	r3, r0, #0
10004012:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (status != 0U)
10004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10004016:	2b00      	cmp	r3, #0
10004018:	d001      	beq.n	1000401e <E_EEPROM_XMC1_lLocalWrite+0xf6>
    {
       status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
1000401a:	2301      	movs	r3, #1
1000401c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  return (status);
1000401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
10004020:	1c18      	adds	r0, r3, #0
10004022:	46bd      	mov	sp, r7
10004024:	b00c      	add	sp, #48	; 0x30
10004026:	bd80      	pop	{r7, pc}
10004028:	2000056c 	.word	0x2000056c

1000402c <E_EEPROM_XMC1_lHandleWriteReq>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Handle function to write one complete data block into flash.
 */
static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr)
{
1000402c:	b580      	push	{r7, lr}
1000402e:	b088      	sub	sp, #32
10004030:	af00      	add	r7, sp, #0
10004032:	1c02      	adds	r2, r0, #0
10004034:	6039      	str	r1, [r7, #0]
10004036:	1dfb      	adds	r3, r7, #7
10004038:	701a      	strb	r2, [r3, #0]
  uint32_t user_block_index;
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_BLOCK_t *block_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000403a:	4b53      	ldr	r3, [pc, #332]	; (10004188 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
1000403c:	685b      	ldr	r3, [r3, #4]
1000403e:	61bb      	str	r3, [r7, #24]
  

  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10004040:	1dfb      	adds	r3, r7, #7
10004042:	781b      	ldrb	r3, [r3, #0]
10004044:	1c18      	adds	r0, r3, #0
10004046:	f7ff fd7d 	bl	10003b44 <E_EEPROM_XMC1_lGetUsrBlockIndex>
1000404a:	1c03      	adds	r3, r0, #0
1000404c:	617b      	str	r3, [r7, #20]
  block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
1000404e:	4b4e      	ldr	r3, [pc, #312]	; (10004188 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
10004050:	681a      	ldr	r2, [r3, #0]
10004052:	697b      	ldr	r3, [r7, #20]
10004054:	00db      	lsls	r3, r3, #3
10004056:	18d3      	adds	r3, r2, r3
10004058:	613b      	str	r3, [r7, #16]
  block_size = block_ptr->size;
1000405a:	693b      	ldr	r3, [r7, #16]
1000405c:	685b      	ldr	r3, [r3, #4]
1000405e:	60fb      	str	r3, [r7, #12]
  data_ptr->user_write_bytes_count = 0U;
10004060:	69ba      	ldr	r2, [r7, #24]
10004062:	23ac      	movs	r3, #172	; 0xac
10004064:	005b      	lsls	r3, r3, #1
10004066:	2100      	movs	r1, #0
10004068:	50d1      	str	r1, [r2, r3]
  data_ptr->user_write_state = E_EEPROM_XMC1_FIRST_BLOCK_WRITE;
1000406a:	69ba      	ldr	r2, [r7, #24]
1000406c:	23b8      	movs	r3, #184	; 0xb8
1000406e:	005b      	lsls	r3, r3, #1
10004070:	2101      	movs	r1, #1
10004072:	50d1      	str	r1, [r2, r3]
  status = 0U;
10004074:	2300      	movs	r3, #0
10004076:	61fb      	str	r3, [r7, #28]
  do
  {
    switch (data_ptr->user_write_state)
10004078:	69ba      	ldr	r2, [r7, #24]
1000407a:	23b8      	movs	r3, #184	; 0xb8
1000407c:	005b      	lsls	r3, r3, #1
1000407e:	58d3      	ldr	r3, [r2, r3]
10004080:	2b02      	cmp	r3, #2
10004082:	d002      	beq.n	1000408a <E_EEPROM_XMC1_lHandleWriteReq+0x5e>
10004084:	2b03      	cmp	r3, #3
10004086:	d012      	beq.n	100040ae <E_EEPROM_XMC1_lHandleWriteReq+0x82>
10004088:	e04a      	b.n	10004120 <E_EEPROM_XMC1_lHandleWriteReq+0xf4>
    {
      case E_EEPROM_XMC1_NEXT_BLOCK_WRITE:
      status = E_EEPROM_XMC1_lWriteDataBlock();
1000408a:	f000 f98f 	bl	100043ac <E_EEPROM_XMC1_lWriteDataBlock>
1000408e:	1c03      	adds	r3, r0, #0
10004090:	61fb      	str	r3, [r7, #28]
      if (status == (uint32_t)0U)
10004092:	69fb      	ldr	r3, [r7, #28]
10004094:	2b00      	cmp	r3, #0
10004096:	d109      	bne.n	100040ac <E_EEPROM_XMC1_lHandleWriteReq+0x80>
      {
        E_EEPROM_XMC1_lPopulateNextBlock(block_number,data_buffer_ptr,block_size);
10004098:	1dfb      	adds	r3, r7, #7
1000409a:	7819      	ldrb	r1, [r3, #0]
1000409c:	683a      	ldr	r2, [r7, #0]
1000409e:	68fb      	ldr	r3, [r7, #12]
100040a0:	1c08      	adds	r0, r1, #0
100040a2:	1c11      	adds	r1, r2, #0
100040a4:	1c1a      	adds	r2, r3, #0
100040a6:	f000 f929 	bl	100042fc <E_EEPROM_XMC1_lPopulateNextBlock>
      }
      break;
100040aa:	e043      	b.n	10004134 <E_EEPROM_XMC1_lHandleWriteReq+0x108>
100040ac:	e042      	b.n	10004134 <E_EEPROM_XMC1_lHandleWriteReq+0x108>
      
      case E_EEPROM_XMC1_LAST_BLOCK_WRITE:
      status = E_EEPROM_XMC1_lWriteDataBlock();
100040ae:	f000 f97d 	bl	100043ac <E_EEPROM_XMC1_lWriteDataBlock>
100040b2:	1c03      	adds	r3, r0, #0
100040b4:	61fb      	str	r3, [r7, #28]
      if (status == (uint32_t)0U)
100040b6:	69fb      	ldr	r3, [r7, #28]
100040b8:	2b00      	cmp	r3, #0
100040ba:	d130      	bne.n	1000411e <E_EEPROM_XMC1_lHandleWriteReq+0xf2>
      {
        /* Mark the block as inconsistent */
        data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
100040bc:	69bb      	ldr	r3, [r7, #24]
100040be:	6b59      	ldr	r1, [r3, #52]	; 0x34
100040c0:	69bb      	ldr	r3, [r7, #24]
100040c2:	697a      	ldr	r2, [r7, #20]
100040c4:	00d2      	lsls	r2, r2, #3
100040c6:	50d1      	str	r1, [r2, r3]
        data_ptr->block_info[user_block_index].status.valid = 1U;
100040c8:	69ba      	ldr	r2, [r7, #24]
100040ca:	697b      	ldr	r3, [r7, #20]
100040cc:	00db      	lsls	r3, r3, #3
100040ce:	18d3      	adds	r3, r2, r3
100040d0:	791a      	ldrb	r2, [r3, #4]
100040d2:	2101      	movs	r1, #1
100040d4:	430a      	orrs	r2, r1
100040d6:	711a      	strb	r2, [r3, #4]
        data_ptr->block_info[user_block_index].status.consistent = 1U;
100040d8:	69ba      	ldr	r2, [r7, #24]
100040da:	697b      	ldr	r3, [r7, #20]
100040dc:	00db      	lsls	r3, r3, #3
100040de:	18d3      	adds	r3, r2, r3
100040e0:	791a      	ldrb	r2, [r3, #4]
100040e2:	2102      	movs	r1, #2
100040e4:	430a      	orrs	r2, r1
100040e6:	711a      	strb	r2, [r3, #4]
        if (E_EEPROM_XMC1_HANDLE_PTR->data_block_crc ==1U)
100040e8:	4b27      	ldr	r3, [pc, #156]	; (10004188 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
100040ea:	7adb      	ldrb	r3, [r3, #11]
100040ec:	2b01      	cmp	r3, #1
100040ee:	d108      	bne.n	10004102 <E_EEPROM_XMC1_lHandleWriteReq+0xd6>
        {
          /* Updated Cache table Block Header status as CRC enabled block*/
          data_ptr->block_info[user_block_index].status.crc = 1U;
100040f0:	69ba      	ldr	r2, [r7, #24]
100040f2:	697b      	ldr	r3, [r7, #20]
100040f4:	00db      	lsls	r3, r3, #3
100040f6:	18d3      	adds	r3, r2, r3
100040f8:	791a      	ldrb	r2, [r3, #4]
100040fa:	2108      	movs	r1, #8
100040fc:	430a      	orrs	r2, r1
100040fe:	711a      	strb	r2, [r3, #4]
10004100:	e007      	b.n	10004112 <E_EEPROM_XMC1_lHandleWriteReq+0xe6>
        }
        else
        {
          /* Updated Cache table Block Header status as CRC disabled block*/
          data_ptr->block_info[user_block_index].status.crc = 0U;
10004102:	69ba      	ldr	r2, [r7, #24]
10004104:	697b      	ldr	r3, [r7, #20]
10004106:	00db      	lsls	r3, r3, #3
10004108:	18d3      	adds	r3, r2, r3
1000410a:	791a      	ldrb	r2, [r3, #4]
1000410c:	2108      	movs	r1, #8
1000410e:	438a      	bics	r2, r1
10004110:	711a      	strb	r2, [r3, #4]
        }
        
        data_ptr->user_write_state = E_EEPROM_XMC1_BLOCK_WRITE_IDLE;
10004112:	69ba      	ldr	r2, [r7, #24]
10004114:	23b8      	movs	r3, #184	; 0xb8
10004116:	005b      	lsls	r3, r3, #1
10004118:	2100      	movs	r1, #0
1000411a:	50d1      	str	r1, [r2, r3]
      }
      break;
1000411c:	e00a      	b.n	10004134 <E_EEPROM_XMC1_lHandleWriteReq+0x108>
1000411e:	e009      	b.n	10004134 <E_EEPROM_XMC1_lHandleWriteReq+0x108>
      
      default:
      E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_FIRST_BLOCK_WRITE*/
10004120:	1dfb      	adds	r3, r7, #7
10004122:	7819      	ldrb	r1, [r3, #0]
10004124:	683a      	ldr	r2, [r7, #0]
10004126:	68fb      	ldr	r3, [r7, #12]
10004128:	1c08      	adds	r0, r1, #0
1000412a:	1c11      	adds	r1, r2, #0
1000412c:	1c1a      	adds	r2, r3, #0
1000412e:	f000 f883 	bl	10004238 <E_EEPROM_XMC1_lPopulateFirstBlock>
      break;
10004132:	46c0      	nop			; (mov r8, r8)
    }
  } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
10004134:	69fb      	ldr	r3, [r7, #28]
10004136:	2b00      	cmp	r3, #0
10004138:	d105      	bne.n	10004146 <E_EEPROM_XMC1_lHandleWriteReq+0x11a>
1000413a:	69ba      	ldr	r2, [r7, #24]
1000413c:	23b8      	movs	r3, #184	; 0xb8
1000413e:	005b      	lsls	r3, r3, #1
10004140:	58d3      	ldr	r3, [r2, r3]
10004142:	2b00      	cmp	r3, #0
10004144:	d198      	bne.n	10004078 <E_EEPROM_XMC1_lHandleWriteReq+0x4c>
  
  data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
10004146:	69bb      	ldr	r3, [r7, #24]
10004148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                                   (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
1000414a:	69bb      	ldr	r3, [r7, #24]
1000414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000414e:	011b      	lsls	r3, r3, #4
      E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_FIRST_BLOCK_WRITE*/
      break;
    }
  } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
  
  data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
10004150:	18d2      	adds	r2, r2, r3
10004152:	69bb      	ldr	r3, [r7, #24]
10004154:	635a      	str	r2, [r3, #52]	; 0x34
                                   (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
  if (status != 0U)
10004156:	69fb      	ldr	r3, [r7, #28]
10004158:	2b00      	cmp	r3, #0
1000415a:	d00f      	beq.n	1000417c <E_EEPROM_XMC1_lHandleWriteReq+0x150>
  {
    data_ptr->block_info[user_block_index].status.valid = 1U;
1000415c:	69ba      	ldr	r2, [r7, #24]
1000415e:	697b      	ldr	r3, [r7, #20]
10004160:	00db      	lsls	r3, r3, #3
10004162:	18d3      	adds	r3, r2, r3
10004164:	791a      	ldrb	r2, [r3, #4]
10004166:	2101      	movs	r1, #1
10004168:	430a      	orrs	r2, r1
1000416a:	711a      	strb	r2, [r3, #4]
    data_ptr->block_info[user_block_index].status.consistent = 0U;
1000416c:	69ba      	ldr	r2, [r7, #24]
1000416e:	697b      	ldr	r3, [r7, #20]
10004170:	00db      	lsls	r3, r3, #3
10004172:	18d3      	adds	r3, r2, r3
10004174:	791a      	ldrb	r2, [r3, #4]
10004176:	2102      	movs	r1, #2
10004178:	438a      	bics	r2, r1
1000417a:	711a      	strb	r2, [r3, #4]
  }
  return (status);
1000417c:	69fb      	ldr	r3, [r7, #28]
}
1000417e:	1c18      	adds	r0, r3, #0
10004180:	46bd      	mov	sp, r7
10004182:	b008      	add	sp, #32
10004184:	bd80      	pop	{r7, pc}
10004186:	46c0      	nop			; (mov r8, r8)
10004188:	2000056c 	.word	0x2000056c

1000418c <E_EEPROM_XMC1_lHandleInvalidReq>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Write one block with all data element as 0xFF to invalidate a block.
 */
static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t  user_block_index)
{
1000418c:	b580      	push	{r7, lr}
1000418e:	b086      	sub	sp, #24
10004190:	af00      	add	r7, sp, #0
10004192:	1c02      	adds	r2, r0, #0
10004194:	6039      	str	r1, [r7, #0]
10004196:	1dfb      	adds	r3, r7, #7
10004198:	701a      	strb	r2, [r3, #0]
  uint32_t status;
  uint32_t data_byte_count;
  uint8_t* read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000419a:	4b26      	ldr	r3, [pc, #152]	; (10004234 <E_EEPROM_XMC1_lHandleInvalidReq+0xa8>)
1000419c:	685b      	ldr	r3, [r3, #4]
1000419e:	613b      	str	r3, [r7, #16]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
100041a0:	693b      	ldr	r3, [r7, #16]
100041a2:	3344      	adds	r3, #68	; 0x44
100041a4:	60fb      	str	r3, [r7, #12]
  *read_write_buffer_ptr = block_number;
100041a6:	68fb      	ldr	r3, [r7, #12]
100041a8:	1dfa      	adds	r2, r7, #7
100041aa:	7812      	ldrb	r2, [r2, #0]
100041ac:	701a      	strb	r2, [r3, #0]
  *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
100041ae:	68fb      	ldr	r3, [r7, #12]
100041b0:	3301      	adds	r3, #1
100041b2:	2280      	movs	r2, #128	; 0x80
100041b4:	701a      	strb	r2, [r3, #0]
  
  
  for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;data_byte_count++)
100041b6:	2302      	movs	r3, #2
100041b8:	617b      	str	r3, [r7, #20]
100041ba:	e007      	b.n	100041cc <E_EEPROM_XMC1_lHandleInvalidReq+0x40>
  {
    *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
100041bc:	68fa      	ldr	r2, [r7, #12]
100041be:	697b      	ldr	r3, [r7, #20]
100041c0:	18d3      	adds	r3, r2, r3
100041c2:	22ff      	movs	r2, #255	; 0xff
100041c4:	701a      	strb	r2, [r3, #0]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
  *read_write_buffer_ptr = block_number;
  *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
  
  
  for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;data_byte_count++)
100041c6:	697b      	ldr	r3, [r7, #20]
100041c8:	3301      	adds	r3, #1
100041ca:	617b      	str	r3, [r7, #20]
100041cc:	697b      	ldr	r3, [r7, #20]
100041ce:	2b0f      	cmp	r3, #15
100041d0:	d9f4      	bls.n	100041bc <E_EEPROM_XMC1_lHandleInvalidReq+0x30>
  {
    *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
  }
  
  status = E_EEPROM_XMC1_lWriteDataBlock();
100041d2:	f000 f8eb 	bl	100043ac <E_EEPROM_XMC1_lWriteDataBlock>
100041d6:	1c03      	adds	r3, r0, #0
100041d8:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
100041da:	68bb      	ldr	r3, [r7, #8]
100041dc:	2b00      	cmp	r3, #0
100041de:	d10e      	bne.n	100041fe <E_EEPROM_XMC1_lHandleInvalidReq+0x72>
  {
    data_ptr->block_info[user_block_index].status.consistent = 1U;
100041e0:	693a      	ldr	r2, [r7, #16]
100041e2:	683b      	ldr	r3, [r7, #0]
100041e4:	00db      	lsls	r3, r3, #3
100041e6:	18d3      	adds	r3, r2, r3
100041e8:	791a      	ldrb	r2, [r3, #4]
100041ea:	2102      	movs	r1, #2
100041ec:	430a      	orrs	r2, r1
100041ee:	711a      	strb	r2, [r3, #4]
    data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
100041f0:	693b      	ldr	r3, [r7, #16]
100041f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
100041f4:	693b      	ldr	r3, [r7, #16]
100041f6:	683a      	ldr	r2, [r7, #0]
100041f8:	00d2      	lsls	r2, r2, #3
100041fa:	50d1      	str	r1, [r2, r3]
100041fc:	e007      	b.n	1000420e <E_EEPROM_XMC1_lHandleInvalidReq+0x82>
  }
  else
  {
    data_ptr->block_info[user_block_index].status.consistent = 0U;
100041fe:	693a      	ldr	r2, [r7, #16]
10004200:	683b      	ldr	r3, [r7, #0]
10004202:	00db      	lsls	r3, r3, #3
10004204:	18d3      	adds	r3, r2, r3
10004206:	791a      	ldrb	r2, [r3, #4]
10004208:	2102      	movs	r1, #2
1000420a:	438a      	bics	r2, r1
1000420c:	711a      	strb	r2, [r3, #4]
  }
  
  data_ptr->block_info[user_block_index].status.valid = 0U;
1000420e:	693a      	ldr	r2, [r7, #16]
10004210:	683b      	ldr	r3, [r7, #0]
10004212:	00db      	lsls	r3, r3, #3
10004214:	18d3      	adds	r3, r2, r3
10004216:	791a      	ldrb	r2, [r3, #4]
10004218:	2101      	movs	r1, #1
1000421a:	438a      	bics	r2, r1
1000421c:	711a      	strb	r2, [r3, #4]
  data_ptr->next_free_block_addr = (E_EEPROM_XMC1_FLASH_BLOCK_SIZE + (uint32_t)(data_ptr->next_free_block_addr));
1000421e:	693b      	ldr	r3, [r7, #16]
10004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004222:	3310      	adds	r3, #16
10004224:	1c1a      	adds	r2, r3, #0
10004226:	693b      	ldr	r3, [r7, #16]
10004228:	635a      	str	r2, [r3, #52]	; 0x34
  
  return (status);
1000422a:	68bb      	ldr	r3, [r7, #8]
}
1000422c:	1c18      	adds	r0, r3, #0
1000422e:	46bd      	mov	sp, r7
10004230:	b006      	add	sp, #24
10004232:	bd80      	pop	{r7, pc}
10004234:	2000056c 	.word	0x2000056c

10004238 <E_EEPROM_XMC1_lPopulateFirstBlock>:
 * Description    : Populates the first block with data elements starting from the passed data buffer address.
 */
static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number,
                                              uint8_t* user_data_buffer_ptr,
                                              uint32_t block_size)
{
10004238:	b580      	push	{r7, lr}
1000423a:	b08a      	sub	sp, #40	; 0x28
1000423c:	af00      	add	r7, sp, #0
1000423e:	60b9      	str	r1, [r7, #8]
10004240:	607a      	str	r2, [r7, #4]
10004242:	230f      	movs	r3, #15
10004244:	18fb      	adds	r3, r7, r3
10004246:	1c02      	adds	r2, r0, #0
10004248:	701a      	strb	r2, [r3, #0]
  uint32_t crc_buffer;
  uint32_t data_byte_count;
  uint8_t* read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000424a:	4b2a      	ldr	r3, [pc, #168]	; (100042f4 <E_EEPROM_XMC1_lPopulateFirstBlock+0xbc>)
1000424c:	685b      	ldr	r3, [r3, #4]
1000424e:	623b      	str	r3, [r7, #32]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
10004250:	6a3b      	ldr	r3, [r7, #32]
10004252:	3344      	adds	r3, #68	; 0x44
10004254:	61fb      	str	r3, [r7, #28]
  data_ptr->user_write_state = E_EEPROM_XMC1_NEXT_BLOCK_WRITE;
10004256:	6a3a      	ldr	r2, [r7, #32]
10004258:	23b8      	movs	r3, #184	; 0xb8
1000425a:	005b      	lsls	r3, r3, #1
1000425c:	2102      	movs	r1, #2
1000425e:	50d1      	str	r1, [r2, r3]
    /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the data buffer*/
    CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,user_data_buffer_ptr,block_size);
    crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
    crc_bit = E_EEPROM_XMC1_CRC_BIT;
  #else
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
10004260:	4b25      	ldr	r3, [pc, #148]	; (100042f8 <E_EEPROM_XMC1_lPopulateFirstBlock+0xc0>)
10004262:	61bb      	str	r3, [r7, #24]
    crc_bit = 0U;
10004264:	2300      	movs	r3, #0
10004266:	617b      	str	r3, [r7, #20]
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10004268:	230f      	movs	r3, #15
1000426a:	18fb      	adds	r3, r7, r3
1000426c:	781a      	ldrb	r2, [r3, #0]
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
1000426e:	697b      	ldr	r3, [r7, #20]
10004270:	21c0      	movs	r1, #192	; 0xc0
10004272:	430b      	orrs	r3, r1
10004274:	021b      	lsls	r3, r3, #8
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
    crc_bit = 0U;
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10004276:	431a      	orrs	r2, r3
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
                                                   crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
                                                   (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT));
10004278:	69bb      	ldr	r3, [r7, #24]
1000427a:	041b      	lsls	r3, r3, #16
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
    crc_bit = 0U;
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
1000427c:	431a      	orrs	r2, r3
1000427e:	69fb      	ldr	r3, [r7, #28]
10004280:	601a      	str	r2, [r3, #0]
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
                                                   crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
                                                   (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT));
  data_byte_count = E_EEPROM_XMC1_FOUR_BYTES;
10004282:	2304      	movs	r3, #4
10004284:	627b      	str	r3, [r7, #36]	; 0x24
  /* Add data to the write buffer from the user specified pointer */
  do
  {
    if (data_ptr->user_write_bytes_count < block_size  )
10004286:	6a3a      	ldr	r2, [r7, #32]
10004288:	23ac      	movs	r3, #172	; 0xac
1000428a:	005b      	lsls	r3, r3, #1
1000428c:	58d2      	ldr	r2, [r2, r3]
1000428e:	687b      	ldr	r3, [r7, #4]
10004290:	429a      	cmp	r2, r3
10004292:	d214      	bcs.n	100042be <E_EEPROM_XMC1_lPopulateFirstBlock+0x86>
    {
      *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_bytes_count);
10004294:	69fa      	ldr	r2, [r7, #28]
10004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004298:	18d3      	adds	r3, r2, r3
1000429a:	6a39      	ldr	r1, [r7, #32]
1000429c:	22ac      	movs	r2, #172	; 0xac
1000429e:	0052      	lsls	r2, r2, #1
100042a0:	588a      	ldr	r2, [r1, r2]
100042a2:	68b9      	ldr	r1, [r7, #8]
100042a4:	188a      	adds	r2, r1, r2
100042a6:	7812      	ldrb	r2, [r2, #0]
100042a8:	701a      	strb	r2, [r3, #0]
       (data_ptr->user_write_bytes_count)++;
100042aa:	6a3a      	ldr	r2, [r7, #32]
100042ac:	23ac      	movs	r3, #172	; 0xac
100042ae:	005b      	lsls	r3, r3, #1
100042b0:	58d3      	ldr	r3, [r2, r3]
100042b2:	1c59      	adds	r1, r3, #1
100042b4:	6a3a      	ldr	r2, [r7, #32]
100042b6:	23ac      	movs	r3, #172	; 0xac
100042b8:	005b      	lsls	r3, r3, #1
100042ba:	50d1      	str	r1, [r2, r3]
100042bc:	e004      	b.n	100042c8 <E_EEPROM_XMC1_lPopulateFirstBlock+0x90>
    }
    else
    {
      *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
100042be:	69fa      	ldr	r2, [r7, #28]
100042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100042c2:	18d3      	adds	r3, r2, r3
100042c4:	22ff      	movs	r2, #255	; 0xff
100042c6:	701a      	strb	r2, [r3, #0]
    }
    data_byte_count++;
100042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100042ca:	3301      	adds	r3, #1
100042cc:	627b      	str	r3, [r7, #36]	; 0x24
    
  } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE); /* Check for block size overflow*/
100042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100042d0:	2b10      	cmp	r3, #16
100042d2:	d1d8      	bne.n	10004286 <E_EEPROM_XMC1_lPopulateFirstBlock+0x4e>

  if (data_ptr->user_write_bytes_count >= block_size)
100042d4:	6a3a      	ldr	r2, [r7, #32]
100042d6:	23ac      	movs	r3, #172	; 0xac
100042d8:	005b      	lsls	r3, r3, #1
100042da:	58d2      	ldr	r2, [r2, r3]
100042dc:	687b      	ldr	r3, [r7, #4]
100042de:	429a      	cmp	r2, r3
100042e0:	d304      	bcc.n	100042ec <E_EEPROM_XMC1_lPopulateFirstBlock+0xb4>
  {
    data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
100042e2:	6a3a      	ldr	r2, [r7, #32]
100042e4:	23b8      	movs	r3, #184	; 0xb8
100042e6:	005b      	lsls	r3, r3, #1
100042e8:	2103      	movs	r1, #3
100042ea:	50d1      	str	r1, [r2, r3]
  }
}
100042ec:	46bd      	mov	sp, r7
100042ee:	b00a      	add	sp, #40	; 0x28
100042f0:	bd80      	pop	{r7, pc}
100042f2:	46c0      	nop			; (mov r8, r8)
100042f4:	2000056c 	.word	0x2000056c
100042f8:	a5a50000 	.word	0xa5a50000

100042fc <E_EEPROM_XMC1_lPopulateNextBlock>:
 * Description    : Populates the successive blocks with data elements starting from the passed data buffer address.
 */
static void E_EEPROM_XMC1_lPopulateNextBlock( uint8_t block_number ,
                                              uint8_t*  const user_data_buffer_ptr ,
                                              uint32_t block_size)
{
100042fc:	b580      	push	{r7, lr}
100042fe:	b088      	sub	sp, #32
10004300:	af00      	add	r7, sp, #0
10004302:	60b9      	str	r1, [r7, #8]
10004304:	607a      	str	r2, [r7, #4]
10004306:	230f      	movs	r3, #15
10004308:	18fb      	adds	r3, r7, r3
1000430a:	1c02      	adds	r2, r0, #0
1000430c:	701a      	strb	r2, [r3, #0]
  uint32_t  data_byte_count;
  uint8_t*  read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000430e:	4b26      	ldr	r3, [pc, #152]	; (100043a8 <E_EEPROM_XMC1_lPopulateNextBlock+0xac>)
10004310:	685b      	ldr	r3, [r3, #4]
10004312:	61bb      	str	r3, [r7, #24]
  
  read_write_buffer_ptr = data_ptr->read_write_buffer;
10004314:	69bb      	ldr	r3, [r7, #24]
10004316:	3344      	adds	r3, #68	; 0x44
10004318:	617b      	str	r3, [r7, #20]
  *(read_write_buffer_ptr) = block_number;
1000431a:	697b      	ldr	r3, [r7, #20]
1000431c:	220f      	movs	r2, #15
1000431e:	18ba      	adds	r2, r7, r2
10004320:	7812      	ldrb	r2, [r2, #0]
10004322:	701a      	strb	r2, [r3, #0]
  *(read_write_buffer_ptr + 1U) = E_EEPROM_XMC1_VALID_BIT;
10004324:	697b      	ldr	r3, [r7, #20]
10004326:	3301      	adds	r3, #1
10004328:	2240      	movs	r2, #64	; 0x40
1000432a:	701a      	strb	r2, [r3, #0]
  data_byte_count = E_EEPROM_XMC1_TWO_BYTES;
1000432c:	2302      	movs	r3, #2
1000432e:	61fb      	str	r3, [r7, #28]
  
  /* Add data to the write buffer from the user specified pointer */
  do
  {
    if (data_ptr->user_write_bytes_count < block_size )
10004330:	69ba      	ldr	r2, [r7, #24]
10004332:	23ac      	movs	r3, #172	; 0xac
10004334:	005b      	lsls	r3, r3, #1
10004336:	58d2      	ldr	r2, [r2, r3]
10004338:	687b      	ldr	r3, [r7, #4]
1000433a:	429a      	cmp	r2, r3
1000433c:	d214      	bcs.n	10004368 <E_EEPROM_XMC1_lPopulateNextBlock+0x6c>
    {
      *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_bytes_count);
1000433e:	697a      	ldr	r2, [r7, #20]
10004340:	69fb      	ldr	r3, [r7, #28]
10004342:	18d3      	adds	r3, r2, r3
10004344:	69b9      	ldr	r1, [r7, #24]
10004346:	22ac      	movs	r2, #172	; 0xac
10004348:	0052      	lsls	r2, r2, #1
1000434a:	588a      	ldr	r2, [r1, r2]
1000434c:	68b9      	ldr	r1, [r7, #8]
1000434e:	188a      	adds	r2, r1, r2
10004350:	7812      	ldrb	r2, [r2, #0]
10004352:	701a      	strb	r2, [r3, #0]
      (data_ptr->user_write_bytes_count)++;
10004354:	69ba      	ldr	r2, [r7, #24]
10004356:	23ac      	movs	r3, #172	; 0xac
10004358:	005b      	lsls	r3, r3, #1
1000435a:	58d3      	ldr	r3, [r2, r3]
1000435c:	1c59      	adds	r1, r3, #1
1000435e:	69ba      	ldr	r2, [r7, #24]
10004360:	23ac      	movs	r3, #172	; 0xac
10004362:	005b      	lsls	r3, r3, #1
10004364:	50d1      	str	r1, [r2, r3]
10004366:	e009      	b.n	1000437c <E_EEPROM_XMC1_lPopulateNextBlock+0x80>
    }
    else
    {
      *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
10004368:	697a      	ldr	r2, [r7, #20]
1000436a:	69fb      	ldr	r3, [r7, #28]
1000436c:	18d3      	adds	r3, r2, r3
1000436e:	22ff      	movs	r2, #255	; 0xff
10004370:	701a      	strb	r2, [r3, #0]
      data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
10004372:	69ba      	ldr	r2, [r7, #24]
10004374:	23b8      	movs	r3, #184	; 0xb8
10004376:	005b      	lsls	r3, r3, #1
10004378:	2103      	movs	r1, #3
1000437a:	50d1      	str	r1, [r2, r3]
    }
    data_byte_count++;
1000437c:	69fb      	ldr	r3, [r7, #28]
1000437e:	3301      	adds	r3, #1
10004380:	61fb      	str	r3, [r7, #28]

  } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10004382:	69fb      	ldr	r3, [r7, #28]
10004384:	2b10      	cmp	r3, #16
10004386:	d1d3      	bne.n	10004330 <E_EEPROM_XMC1_lPopulateNextBlock+0x34>

  if (data_ptr->user_write_bytes_count >= block_size)
10004388:	69ba      	ldr	r2, [r7, #24]
1000438a:	23ac      	movs	r3, #172	; 0xac
1000438c:	005b      	lsls	r3, r3, #1
1000438e:	58d2      	ldr	r2, [r2, r3]
10004390:	687b      	ldr	r3, [r7, #4]
10004392:	429a      	cmp	r2, r3
10004394:	d304      	bcc.n	100043a0 <E_EEPROM_XMC1_lPopulateNextBlock+0xa4>
  {
    data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
10004396:	69ba      	ldr	r2, [r7, #24]
10004398:	23b8      	movs	r3, #184	; 0xb8
1000439a:	005b      	lsls	r3, r3, #1
1000439c:	2103      	movs	r1, #3
1000439e:	50d1      	str	r1, [r2, r3]
  }
}
100043a0:	46bd      	mov	sp, r7
100043a2:	b008      	add	sp, #32
100043a4:	bd80      	pop	{r7, pc}
100043a6:	46c0      	nop			; (mov r8, r8)
100043a8:	2000056c 	.word	0x2000056c

100043ac <E_EEPROM_XMC1_lWriteDataBlock>:
 * Return value   : uint32_t - NVM_STATUS register value after read operation
 *
 * Description    : Writes single data block into flash
 */
static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void)
{
100043ac:	b580      	push	{r7, lr}
100043ae:	b084      	sub	sp, #16
100043b0:	af00      	add	r7, sp, #0
  uint32_t status;
  uint32_t src_addr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100043b2:	4b10      	ldr	r3, [pc, #64]	; (100043f4 <E_EEPROM_XMC1_lWriteDataBlock+0x48>)
100043b4:	685b      	ldr	r3, [r3, #4]
100043b6:	60fb      	str	r3, [r7, #12]
  
  src_addr = (uint32_t)(data_ptr->next_free_block_addr +
100043b8:	68fb      	ldr	r3, [r7, #12]
100043ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
             (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
100043bc:	68fb      	ldr	r3, [r7, #12]
100043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100043c0:	011b      	lsls	r3, r3, #4
  uint32_t src_addr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
  
  src_addr = (uint32_t)(data_ptr->next_free_block_addr +
100043c2:	18d3      	adds	r3, r2, r3
100043c4:	60bb      	str	r3, [r7, #8]
             (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
  (data_ptr->written_block_counter)++;
100043c6:	68fb      	ldr	r3, [r7, #12]
100043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100043ca:	1c5a      	adds	r2, r3, #1
100043cc:	68fb      	ldr	r3, [r7, #12]
100043ce:	641a      	str	r2, [r3, #64]	; 0x40

  XMC_FLASH_ClearStatus();
100043d0:	f7fc feae 	bl	10001130 <XMC_FLASH_ClearStatus>
  E_EEPROM_XMC1_lWriteSingleBlock(src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
100043d4:	68fb      	ldr	r3, [r7, #12]
100043d6:	3344      	adds	r3, #68	; 0x44
100043d8:	68ba      	ldr	r2, [r7, #8]
100043da:	1c10      	adds	r0, r2, #0
100043dc:	1c19      	adds	r1, r3, #0
100043de:	f000 f887 	bl	100044f0 <E_EEPROM_XMC1_lWriteSingleBlock>
  status = E_EEPROM_XMC1_lGetFlashStatus();
100043e2:	f000 f8bf 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
100043e6:	1c03      	adds	r3, r0, #0
100043e8:	607b      	str	r3, [r7, #4]
  
  return (status);
100043ea:	687b      	ldr	r3, [r7, #4]
}
100043ec:	1c18      	adds	r0, r3, #0
100043ee:	46bd      	mov	sp, r7
100043f0:	b004      	add	sp, #16
100043f2:	bd80      	pop	{r7, pc}
100043f4:	2000056c 	.word	0x2000056c

100043f8 <E_EEPROM_XMC1_lReadBlockContents>:
 *
 * Description     : Read data bytes starting from specified address (data_buffer_ptr + offset).
 *                   Read number of bytes as specified in the length parameter.
 */
static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *const data_buffer_ptr, uint32_t length, uint32_t offset)
{
100043f8:	b580      	push	{r7, lr}
100043fa:	b08c      	sub	sp, #48	; 0x30
100043fc:	af00      	add	r7, sp, #0
100043fe:	60f8      	str	r0, [r7, #12]
10004400:	60b9      	str	r1, [r7, #8]
10004402:	607a      	str	r2, [r7, #4]
  uint32_t flash_address;
  uint32_t block_start_address;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  uint32_t remaining_bytes_in_curr_block;
  
  indx = 0U;
10004404:	2300      	movs	r3, #0
10004406:	62fb      	str	r3, [r7, #44]	; 0x2c
  status = 0U;
10004408:	2300      	movs	r3, #0
1000440a:	623b      	str	r3, [r7, #32]
  block_count = 0U;
1000440c:	2300      	movs	r3, #0
1000440e:	62bb      	str	r3, [r7, #40]	; 0x28

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10004410:	4b36      	ldr	r3, [pc, #216]	; (100044ec <E_EEPROM_XMC1_lReadBlockContents+0xf4>)
10004412:	685b      	ldr	r3, [r3, #4]
10004414:	61fb      	str	r3, [r7, #28]
  block_start_address = data_ptr->read_start_address;
10004416:	69fa      	ldr	r2, [r7, #28]
10004418:	23ba      	movs	r3, #186	; 0xba
1000441a:	005b      	lsls	r3, r3, #1
1000441c:	58d3      	ldr	r3, [r2, r3]
1000441e:	61bb      	str	r3, [r7, #24]
  
  if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first data block.  */
10004420:	687b      	ldr	r3, [r7, #4]
10004422:	2b0b      	cmp	r3, #11
10004424:	d913      	bls.n	1000444e <E_EEPROM_XMC1_lReadBlockContents+0x56>
  {
    block_count++;                        /* If not then increment block counter*/
10004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004428:	3301      	adds	r3, #1
1000442a:	62bb      	str	r3, [r7, #40]	; 0x28
    offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12 bytes)*/
1000442c:	687b      	ldr	r3, [r7, #4]
1000442e:	3b0c      	subs	r3, #12
10004430:	607b      	str	r3, [r7, #4]
    while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fit inside  */
10004432:	e005      	b.n	10004440 <E_EEPROM_XMC1_lReadBlockContents+0x48>
    {
      block_count++;                        /* If not then increment block counter*/
10004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
10004436:	3301      	adds	r3, #1
10004438:	62bb      	str	r3, [r7, #40]	; 0x28
      offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14 bytes)*/
1000443a:	687b      	ldr	r3, [r7, #4]
1000443c:	3b0e      	subs	r3, #14
1000443e:	607b      	str	r3, [r7, #4]
  
  if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first data block.  */
  {
    block_count++;                        /* If not then increment block counter*/
    offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12 bytes)*/
    while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fit inside  */
10004440:	687b      	ldr	r3, [r7, #4]
10004442:	2b0d      	cmp	r3, #13
10004444:	d8f6      	bhi.n	10004434 <E_EEPROM_XMC1_lReadBlockContents+0x3c>
    {
      block_count++;                        /* If not then increment block counter*/
      offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14 bytes)*/
    }
    offset += E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;
10004446:	687b      	ldr	r3, [r7, #4]
10004448:	3302      	adds	r3, #2
1000444a:	607b      	str	r3, [r7, #4]
1000444c:	e002      	b.n	10004454 <E_EEPROM_XMC1_lReadBlockContents+0x5c>
  }
  else
  {
    offset += E_EEPROM_XMC1_BLOCK1_DATA_OFFSET;
1000444e:	687b      	ldr	r3, [r7, #4]
10004450:	3304      	adds	r3, #4
10004452:	607b      	str	r3, [r7, #4]
  }
  /* Remaining bytes in the block where Read offset is pointing*/
  remaining_bytes_in_curr_block = E_EEPROM_XMC1_FLASH_BLOCK_SIZE - offset;
10004454:	687b      	ldr	r3, [r7, #4]
10004456:	2210      	movs	r2, #16
10004458:	1ad3      	subs	r3, r2, r3
1000445a:	627b      	str	r3, [r7, #36]	; 0x24
  
  do
  {
    /* Calculate the Flash address of the block to be read*/
    flash_address = block_start_address + ((uint32_t)block_count * E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
1000445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000445e:	011a      	lsls	r2, r3, #4
10004460:	69bb      	ldr	r3, [r7, #24]
10004462:	18d3      	adds	r3, r2, r3
10004464:	617b      	str	r3, [r7, #20]

    XMC_FLASH_ClearStatus();
10004466:	f7fc fe63 	bl	10001130 <XMC_FLASH_ClearStatus>
    E_EEPROM_XMC1_lReadSingleBlock(flash_address,(uint32_t*)(void*)data_ptr->read_write_buffer);
1000446a:	69fb      	ldr	r3, [r7, #28]
1000446c:	3344      	adds	r3, #68	; 0x44
1000446e:	697a      	ldr	r2, [r7, #20]
10004470:	1c10      	adds	r0, r2, #0
10004472:	1c19      	adds	r1, r3, #0
10004474:	f000 f84c 	bl	10004510 <E_EEPROM_XMC1_lReadSingleBlock>
    status = E_EEPROM_XMC1_lGetFlashStatus();
10004478:	f000 f874 	bl	10004564 <E_EEPROM_XMC1_lGetFlashStatus>
1000447c:	1c03      	adds	r3, r0, #0
1000447e:	623b      	str	r3, [r7, #32]
    
    if (status != 0U)
10004480:	6a3b      	ldr	r3, [r7, #32]
10004482:	2b00      	cmp	r3, #0
10004484:	d000      	beq.n	10004488 <E_EEPROM_XMC1_lReadBlockContents+0x90>
    {
      break;
10004486:	e02b      	b.n	100044e0 <E_EEPROM_XMC1_lReadBlockContents+0xe8>
    }
    /* Extract the data read from flash byte by byte and load into the user buffer*/
    do{
      
      *(data_buffer_ptr + indx) = *(data_ptr->read_write_buffer + offset);
10004488:	68fa      	ldr	r2, [r7, #12]
1000448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000448c:	18d3      	adds	r3, r2, r3
1000448e:	69f9      	ldr	r1, [r7, #28]
10004490:	2040      	movs	r0, #64	; 0x40
10004492:	687a      	ldr	r2, [r7, #4]
10004494:	188a      	adds	r2, r1, r2
10004496:	1812      	adds	r2, r2, r0
10004498:	7912      	ldrb	r2, [r2, #4]
1000449a:	701a      	strb	r2, [r3, #0]
      indx++;
1000449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000449e:	3301      	adds	r3, #1
100044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset++;
100044a2:	687b      	ldr	r3, [r7, #4]
100044a4:	3301      	adds	r3, #1
100044a6:	607b      	str	r3, [r7, #4]
      length--;
100044a8:	68bb      	ldr	r3, [r7, #8]
100044aa:	3b01      	subs	r3, #1
100044ac:	60bb      	str	r3, [r7, #8]
      remaining_bytes_in_curr_block--;
100044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100044b0:	3b01      	subs	r3, #1
100044b2:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* check any of the length parameters reaches 0 */
    } while ( (remaining_bytes_in_curr_block) && (length) );
100044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100044b6:	2b00      	cmp	r3, #0
100044b8:	d002      	beq.n	100044c0 <E_EEPROM_XMC1_lReadBlockContents+0xc8>
100044ba:	68bb      	ldr	r3, [r7, #8]
100044bc:	2b00      	cmp	r3, #0
100044be:	d1e3      	bne.n	10004488 <E_EEPROM_XMC1_lReadBlockContents+0x90>
    
    /* Check if the length of bytes pending to be read is within the range of available bytes in the block */
    if (length <= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
100044c0:	68bb      	ldr	r3, [r7, #8]
100044c2:	2b0e      	cmp	r3, #14
100044c4:	d802      	bhi.n	100044cc <E_EEPROM_XMC1_lReadBlockContents+0xd4>
    {
      /* Force remaining bytes in current block to length remaining */
      remaining_bytes_in_curr_block = length;
100044c6:	68bb      	ldr	r3, [r7, #8]
100044c8:	627b      	str	r3, [r7, #36]	; 0x24
100044ca:	e001      	b.n	100044d0 <E_EEPROM_XMC1_lReadBlockContents+0xd8>
    }
    else
    {
      /* Force remaining bytes to next block size(14)*/
      remaining_bytes_in_curr_block = E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
100044cc:	230e      	movs	r3, #14
100044ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    offset = E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;     /* Shift offset by 2 counts to avoid next block header */
100044d0:	2302      	movs	r3, #2
100044d2:	607b      	str	r3, [r7, #4]
    block_count++;                        /* Increment the block count to read next block */
100044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
100044d6:	3301      	adds	r3, #1
100044d8:	62bb      	str	r3, [r7, #40]	; 0x28
    
  } while (length != 0U);
100044da:	68bb      	ldr	r3, [r7, #8]
100044dc:	2b00      	cmp	r3, #0
100044de:	d1bd      	bne.n	1000445c <E_EEPROM_XMC1_lReadBlockContents+0x64>
  
  return (status);
100044e0:	6a3b      	ldr	r3, [r7, #32]
}
100044e2:	1c18      	adds	r0, r3, #0
100044e4:	46bd      	mov	sp, r7
100044e6:	b00c      	add	sp, #48	; 0x30
100044e8:	bd80      	pop	{r7, pc}
100044ea:	46c0      	nop			; (mov r8, r8)
100044ec:	2000056c 	.word	0x2000056c

100044f0 <E_EEPROM_XMC1_lWriteSingleBlock>:
 * Return value    : void
 *
 * Description     : Performs single flash block(16 bytes) write operation
 */
static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data)
{
100044f0:	b580      	push	{r7, lr}
100044f2:	b082      	sub	sp, #8
100044f4:	af00      	add	r7, sp, #0
100044f6:	6078      	str	r0, [r7, #4]
100044f8:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_WriteBlocks( (uint32_t*)address, (uint32_t*)data , 1U , 1U);
100044fa:	687a      	ldr	r2, [r7, #4]
100044fc:	683b      	ldr	r3, [r7, #0]
100044fe:	1c10      	adds	r0, r2, #0
10004500:	1c19      	adds	r1, r3, #0
10004502:	2201      	movs	r2, #1
10004504:	2301      	movs	r3, #1
10004506:	f7fc fe3f 	bl	10001188 <XMC_FLASH_WriteBlocks>
  }
}
1000450a:	46bd      	mov	sp, r7
1000450c:	b002      	add	sp, #8
1000450e:	bd80      	pop	{r7, pc}

10004510 <E_EEPROM_XMC1_lReadSingleBlock>:
 * Return value    : void
 *
 * Description     : Performs single flash block(16 bytes) read operation
 */
static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data)
{
10004510:	b580      	push	{r7, lr}
10004512:	b082      	sub	sp, #8
10004514:	af00      	add	r7, sp, #0
10004516:	6078      	str	r0, [r7, #4]
10004518:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_ReadBlocks( (uint32_t*)address , (uint32_t*)data , 1U);
1000451a:	687a      	ldr	r2, [r7, #4]
1000451c:	683b      	ldr	r3, [r7, #0]
1000451e:	1c10      	adds	r0, r2, #0
10004520:	1c19      	adds	r1, r3, #0
10004522:	2201      	movs	r2, #1
10004524:	f7fc feba 	bl	1000129c <XMC_FLASH_ReadBlocks>
  }
}
10004528:	46bd      	mov	sp, r7
1000452a:	b002      	add	sp, #8
1000452c:	bd80      	pop	{r7, pc}
1000452e:	46c0      	nop			; (mov r8, r8)

10004530 <E_EEPROM_XMC1_lWriteSinglePage>:
 * Return value    : void
 *
 * Description     : Performs single flash page(256 bytes) write operation
 */
static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data)
{
10004530:	b580      	push	{r7, lr}
10004532:	b082      	sub	sp, #8
10004534:	af00      	add	r7, sp, #0
10004536:	6078      	str	r0, [r7, #4]
10004538:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_ProgramPage( (uint32_t*)address , (uint32_t*)data);
1000453a:	687a      	ldr	r2, [r7, #4]
1000453c:	683b      	ldr	r3, [r7, #0]
1000453e:	1c10      	adds	r0, r2, #0
10004540:	1c19      	adds	r1, r3, #0
10004542:	f7fc fed1 	bl	100012e8 <XMC_FLASH_ProgramPage>
  }
}
10004546:	46bd      	mov	sp, r7
10004548:	b002      	add	sp, #8
1000454a:	bd80      	pop	{r7, pc}

1000454c <E_EEPROM_XMC1_lEraseSinglePage>:
 * Return value    : void
 *
 * Description     : Erases single flash page(256 bytes)
 */
static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address)
{
1000454c:	b580      	push	{r7, lr}
1000454e:	b082      	sub	sp, #8
10004550:	af00      	add	r7, sp, #0
10004552:	6078      	str	r0, [r7, #4]
    E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(address);
  }
  else
  #endif
  {
    XMC_FLASH_ErasePages( (uint32_t*)address , 1U);
10004554:	687b      	ldr	r3, [r7, #4]
10004556:	1c18      	adds	r0, r3, #0
10004558:	2101      	movs	r1, #1
1000455a:	f7fc fe73 	bl	10001244 <XMC_FLASH_ErasePages>
  }
}
1000455e:	46bd      	mov	sp, r7
10004560:	b002      	add	sp, #8
10004562:	bd80      	pop	{r7, pc}

10004564 <E_EEPROM_XMC1_lGetFlashStatus>:
 * Return value    : uint32_t  - Flash NVM_STATUS register value
 *
 * Description     : Reads the flash status from hardware to check whether any error exist or not.
 */
static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void)
{
10004564:	b580      	push	{r7, lr}
10004566:	b082      	sub	sp, #8
10004568:	af00      	add	r7, sp, #0
    status = E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus();
  }
  else
  #endif
  {
    status = XMC_FLASH_GetStatus();
1000456a:	f7fc fdf1 	bl	10001150 <XMC_FLASH_GetStatus>
1000456e:	1c03      	adds	r3, r0, #0
10004570:	607b      	str	r3, [r7, #4]
  }
  return (status);
10004572:	687b      	ldr	r3, [r7, #4]
}
10004574:	1c18      	adds	r0, r3, #0
10004576:	46bd      	mov	sp, r7
10004578:	b002      	add	sp, #8
1000457a:	bd80      	pop	{r7, pc}

1000457c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
1000457c:	b580      	push	{r7, lr}
1000457e:	b082      	sub	sp, #8
10004580:	af00      	add	r7, sp, #0
10004582:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10004584:	687b      	ldr	r3, [r7, #4]
10004586:	6819      	ldr	r1, [r3, #0]
10004588:	687b      	ldr	r3, [r7, #4]
1000458a:	7b1a      	ldrb	r2, [r3, #12]
1000458c:	687b      	ldr	r3, [r7, #4]
1000458e:	3304      	adds	r3, #4
10004590:	1c08      	adds	r0, r1, #0
10004592:	1c11      	adds	r1, r2, #0
10004594:	1c1a      	adds	r2, r3, #0
10004596:	f7fc feb7 	bl	10001308 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
1000459a:	687b      	ldr	r3, [r7, #4]
1000459c:	6819      	ldr	r1, [r3, #0]
1000459e:	687b      	ldr	r3, [r7, #4]
100045a0:	7b1a      	ldrb	r2, [r3, #12]
100045a2:	687b      	ldr	r3, [r7, #4]
100045a4:	7b5b      	ldrb	r3, [r3, #13]
100045a6:	1c08      	adds	r0, r1, #0
100045a8:	1c11      	adds	r1, r2, #0
100045aa:	1c1a      	adds	r2, r3, #0
100045ac:	f7fd fbda 	bl	10001d64 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
100045b0:	2300      	movs	r3, #0
}
100045b2:	1c18      	adds	r0, r3, #0
100045b4:	46bd      	mov	sp, r7
100045b6:	b002      	add	sp, #8
100045b8:	bd80      	pop	{r7, pc}
100045ba:	46c0      	nop			; (mov r8, r8)

100045bc <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
100045bc:	b580      	push	{r7, lr}
100045be:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
#endif
}
100045c0:	46bd      	mov	sp, r7
100045c2:	bd80      	pop	{r7, pc}

100045c4 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100045c4:	b580      	push	{r7, lr}
100045c6:	b084      	sub	sp, #16
100045c8:	af00      	add	r7, sp, #0
100045ca:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
100045cc:	230f      	movs	r3, #15
100045ce:	18fb      	adds	r3, r7, r3
100045d0:	2200      	movs	r2, #0
100045d2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100045d4:	230e      	movs	r3, #14
100045d6:	18fb      	adds	r3, r7, r3
100045d8:	2200      	movs	r2, #0
100045da:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
100045dc:	230d      	movs	r3, #13
100045de:	18fb      	adds	r3, r7, r3
100045e0:	2200      	movs	r2, #0
100045e2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100045e4:	230c      	movs	r3, #12
100045e6:	18fb      	adds	r3, r7, r3
100045e8:	2200      	movs	r2, #0
100045ea:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
100045ec:	230b      	movs	r3, #11
100045ee:	18fb      	adds	r3, r7, r3
100045f0:	2200      	movs	r2, #0
100045f2:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
100045f4:	687b      	ldr	r3, [r7, #4]
100045f6:	781b      	ldrb	r3, [r3, #0]
100045f8:	2201      	movs	r2, #1
100045fa:	4053      	eors	r3, r2
100045fc:	b2db      	uxtb	r3, r3
100045fe:	2b00      	cmp	r3, #0
10004600:	d01b      	beq.n	1000463a <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10004602:	230e      	movs	r3, #14
10004604:	18fa      	adds	r2, r7, r3
10004606:	230d      	movs	r3, #13
10004608:	18fb      	adds	r3, r7, r3
1000460a:	7812      	ldrb	r2, [r2, #0]
1000460c:	781b      	ldrb	r3, [r3, #0]
1000460e:	4313      	orrs	r3, r2
10004610:	b2da      	uxtb	r2, r3
10004612:	230c      	movs	r3, #12
10004614:	18fb      	adds	r3, r7, r3
10004616:	781b      	ldrb	r3, [r3, #0]
10004618:	4313      	orrs	r3, r2
1000461a:	b2d9      	uxtb	r1, r3
1000461c:	230f      	movs	r3, #15
1000461e:	18fb      	adds	r3, r7, r3
10004620:	220b      	movs	r2, #11
10004622:	18ba      	adds	r2, r7, r2
10004624:	7812      	ldrb	r2, [r2, #0]
10004626:	430a      	orrs	r2, r1
10004628:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
1000462a:	230f      	movs	r3, #15
1000462c:	18fb      	adds	r3, r7, r3
1000462e:	781b      	ldrb	r3, [r3, #0]
10004630:	2b00      	cmp	r3, #0
10004632:	d102      	bne.n	1000463a <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10004634:	687b      	ldr	r3, [r7, #4]
10004636:	2201      	movs	r2, #1
10004638:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
1000463a:	230f      	movs	r3, #15
1000463c:	18fb      	adds	r3, r7, r3
1000463e:	781b      	ldrb	r3, [r3, #0]
}
10004640:	1c18      	adds	r0, r3, #0
10004642:	46bd      	mov	sp, r7
10004644:	b004      	add	sp, #16
10004646:	bd80      	pop	{r7, pc}

10004648 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10004648:	b590      	push	{r4, r7, lr}
1000464a:	b085      	sub	sp, #20
1000464c:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000464e:	1d3b      	adds	r3, r7, #4
10004650:	4a04      	ldr	r2, [pc, #16]	; (10004664 <SystemCoreClockSetup+0x1c>)
10004652:	ca13      	ldmia	r2!, {r0, r1, r4}
10004654:	c313      	stmia	r3!, {r0, r1, r4}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10004656:	1d3b      	adds	r3, r7, #4
10004658:	1c18      	adds	r0, r3, #0
1000465a:	f7fc ff2d 	bl	100014b8 <XMC_SCU_CLOCK_Init>
}
1000465e:	46bd      	mov	sp, r7
10004660:	b005      	add	sp, #20
10004662:	bd90      	pop	{r4, r7, pc}
10004664:	10005ee8 	.word	0x10005ee8

10004668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004668:	b580      	push	{r7, lr}
1000466a:	b082      	sub	sp, #8
1000466c:	af00      	add	r7, sp, #0
1000466e:	1c02      	adds	r2, r0, #0
10004670:	1dfb      	adds	r3, r7, #7
10004672:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004674:	1dfb      	adds	r3, r7, #7
10004676:	781b      	ldrb	r3, [r3, #0]
10004678:	2b7f      	cmp	r3, #127	; 0x7f
1000467a:	d809      	bhi.n	10004690 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000467c:	4b06      	ldr	r3, [pc, #24]	; (10004698 <__NVIC_EnableIRQ+0x30>)
1000467e:	1dfa      	adds	r2, r7, #7
10004680:	7812      	ldrb	r2, [r2, #0]
10004682:	1c11      	adds	r1, r2, #0
10004684:	221f      	movs	r2, #31
10004686:	400a      	ands	r2, r1
10004688:	2101      	movs	r1, #1
1000468a:	4091      	lsls	r1, r2
1000468c:	1c0a      	adds	r2, r1, #0
1000468e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10004690:	46bd      	mov	sp, r7
10004692:	b002      	add	sp, #8
10004694:	bd80      	pop	{r7, pc}
10004696:	46c0      	nop			; (mov r8, r8)
10004698:	e000e100 	.word	0xe000e100

1000469c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000469c:	b5b0      	push	{r4, r5, r7, lr}
1000469e:	b082      	sub	sp, #8
100046a0:	af00      	add	r7, sp, #0
100046a2:	1c02      	adds	r2, r0, #0
100046a4:	6039      	str	r1, [r7, #0]
100046a6:	1dfb      	adds	r3, r7, #7
100046a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100046aa:	1dfb      	adds	r3, r7, #7
100046ac:	781b      	ldrb	r3, [r3, #0]
100046ae:	2b7f      	cmp	r3, #127	; 0x7f
100046b0:	d827      	bhi.n	10004702 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100046b2:	4c2d      	ldr	r4, [pc, #180]	; (10004768 <__NVIC_SetPriority+0xcc>)
100046b4:	1dfb      	adds	r3, r7, #7
100046b6:	781b      	ldrb	r3, [r3, #0]
100046b8:	b25b      	sxtb	r3, r3
100046ba:	089b      	lsrs	r3, r3, #2
100046bc:	492a      	ldr	r1, [pc, #168]	; (10004768 <__NVIC_SetPriority+0xcc>)
100046be:	1dfa      	adds	r2, r7, #7
100046c0:	7812      	ldrb	r2, [r2, #0]
100046c2:	b252      	sxtb	r2, r2
100046c4:	0892      	lsrs	r2, r2, #2
100046c6:	32c0      	adds	r2, #192	; 0xc0
100046c8:	0092      	lsls	r2, r2, #2
100046ca:	5852      	ldr	r2, [r2, r1]
100046cc:	1df9      	adds	r1, r7, #7
100046ce:	7809      	ldrb	r1, [r1, #0]
100046d0:	1c08      	adds	r0, r1, #0
100046d2:	2103      	movs	r1, #3
100046d4:	4001      	ands	r1, r0
100046d6:	00c9      	lsls	r1, r1, #3
100046d8:	1c08      	adds	r0, r1, #0
100046da:	21ff      	movs	r1, #255	; 0xff
100046dc:	4081      	lsls	r1, r0
100046de:	43c9      	mvns	r1, r1
100046e0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100046e2:	683a      	ldr	r2, [r7, #0]
100046e4:	0192      	lsls	r2, r2, #6
100046e6:	20ff      	movs	r0, #255	; 0xff
100046e8:	4002      	ands	r2, r0
100046ea:	1df8      	adds	r0, r7, #7
100046ec:	7800      	ldrb	r0, [r0, #0]
100046ee:	1c05      	adds	r5, r0, #0
100046f0:	2003      	movs	r0, #3
100046f2:	4028      	ands	r0, r5
100046f4:	00c0      	lsls	r0, r0, #3
100046f6:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100046f8:	430a      	orrs	r2, r1
100046fa:	33c0      	adds	r3, #192	; 0xc0
100046fc:	009b      	lsls	r3, r3, #2
100046fe:	511a      	str	r2, [r3, r4]
10004700:	e02e      	b.n	10004760 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004702:	4c1a      	ldr	r4, [pc, #104]	; (1000476c <__NVIC_SetPriority+0xd0>)
10004704:	1dfb      	adds	r3, r7, #7
10004706:	781b      	ldrb	r3, [r3, #0]
10004708:	1c1a      	adds	r2, r3, #0
1000470a:	230f      	movs	r3, #15
1000470c:	4013      	ands	r3, r2
1000470e:	3b08      	subs	r3, #8
10004710:	0899      	lsrs	r1, r3, #2
10004712:	4a16      	ldr	r2, [pc, #88]	; (1000476c <__NVIC_SetPriority+0xd0>)
10004714:	1dfb      	adds	r3, r7, #7
10004716:	781b      	ldrb	r3, [r3, #0]
10004718:	1c18      	adds	r0, r3, #0
1000471a:	230f      	movs	r3, #15
1000471c:	4003      	ands	r3, r0
1000471e:	3b08      	subs	r3, #8
10004720:	089b      	lsrs	r3, r3, #2
10004722:	3306      	adds	r3, #6
10004724:	009b      	lsls	r3, r3, #2
10004726:	18d3      	adds	r3, r2, r3
10004728:	685b      	ldr	r3, [r3, #4]
1000472a:	1dfa      	adds	r2, r7, #7
1000472c:	7812      	ldrb	r2, [r2, #0]
1000472e:	1c10      	adds	r0, r2, #0
10004730:	2203      	movs	r2, #3
10004732:	4002      	ands	r2, r0
10004734:	00d2      	lsls	r2, r2, #3
10004736:	1c10      	adds	r0, r2, #0
10004738:	22ff      	movs	r2, #255	; 0xff
1000473a:	4082      	lsls	r2, r0
1000473c:	43d2      	mvns	r2, r2
1000473e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004740:	683b      	ldr	r3, [r7, #0]
10004742:	019b      	lsls	r3, r3, #6
10004744:	20ff      	movs	r0, #255	; 0xff
10004746:	4003      	ands	r3, r0
10004748:	1df8      	adds	r0, r7, #7
1000474a:	7800      	ldrb	r0, [r0, #0]
1000474c:	1c05      	adds	r5, r0, #0
1000474e:	2003      	movs	r0, #3
10004750:	4028      	ands	r0, r5
10004752:	00c0      	lsls	r0, r0, #3
10004754:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004756:	431a      	orrs	r2, r3
10004758:	1d8b      	adds	r3, r1, #6
1000475a:	009b      	lsls	r3, r3, #2
1000475c:	18e3      	adds	r3, r4, r3
1000475e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004760:	46bd      	mov	sp, r7
10004762:	b002      	add	sp, #8
10004764:	bdb0      	pop	{r4, r5, r7, pc}
10004766:	46c0      	nop			; (mov r8, r8)
10004768:	e000e100 	.word	0xe000e100
1000476c:	e000ed00 	.word	0xe000ed00

10004770 <XMC_VADC_GLOBAL_ResultInit>:
 * None
 *
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_CONFIG_t *config)
{
10004770:	b580      	push	{r7, lr}
10004772:	b082      	sub	sp, #8
10004774:	af00      	add	r7, sp, #0
10004776:	6078      	str	r0, [r7, #4]
10004778:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))

  /* Configure GLOBRCR*/
  global_ptr->GLOBRCR = config->g_rcr;
1000477a:	683b      	ldr	r3, [r7, #0]
1000477c:	6819      	ldr	r1, [r3, #0]
1000477e:	687a      	ldr	r2, [r7, #4]
10004780:	23a0      	movs	r3, #160	; 0xa0
10004782:	009b      	lsls	r3, r3, #2
10004784:	50d1      	str	r1, [r2, r3]
}
10004786:	46bd      	mov	sp, r7
10004788:	b002      	add	sp, #8
1000478a:	bd80      	pop	{r7, pc}

1000478c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
1000478c:	b580      	push	{r7, lr}
1000478e:	b082      	sub	sp, #8
10004790:	af00      	add	r7, sp, #0
10004792:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
10004794:	687a      	ldr	r2, [r7, #4]
10004796:	2381      	movs	r3, #129	; 0x81
10004798:	009b      	lsls	r3, r3, #2
1000479a:	58d3      	ldr	r3, [r2, r3]
1000479c:	2280      	movs	r2, #128	; 0x80
1000479e:	0092      	lsls	r2, r2, #2
100047a0:	431a      	orrs	r2, r3
100047a2:	1c11      	adds	r1, r2, #0
100047a4:	687a      	ldr	r2, [r7, #4]
100047a6:	2381      	movs	r3, #129	; 0x81
100047a8:	009b      	lsls	r3, r3, #2
100047aa:	50d1      	str	r1, [r2, r3]
}
100047ac:	46bd      	mov	sp, r7
100047ae:	b002      	add	sp, #8
100047b0:	bd80      	pop	{r7, pc}
100047b2:	46c0      	nop			; (mov r8, r8)

100047b4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
100047b4:	b580      	push	{r7, lr}
100047b6:	b084      	sub	sp, #16
100047b8:	af00      	add	r7, sp, #0
100047ba:	60f8      	str	r0, [r7, #12]
100047bc:	60b9      	str	r1, [r7, #8]
100047be:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
100047c0:	68fb      	ldr	r3, [r7, #12]
100047c2:	68ba      	ldr	r2, [r7, #8]
100047c4:	3260      	adds	r2, #96	; 0x60
100047c6:	0092      	lsls	r2, r2, #2
100047c8:	58d2      	ldr	r2, [r2, r3]
100047ca:	687b      	ldr	r3, [r7, #4]
100047cc:	2101      	movs	r1, #1
100047ce:	4099      	lsls	r1, r3
100047d0:	1c0b      	adds	r3, r1, #0
100047d2:	431a      	orrs	r2, r3
100047d4:	1c11      	adds	r1, r2, #0
100047d6:	68fb      	ldr	r3, [r7, #12]
100047d8:	68ba      	ldr	r2, [r7, #8]
100047da:	3260      	adds	r2, #96	; 0x60
100047dc:	0092      	lsls	r2, r2, #2
100047de:	50d1      	str	r1, [r2, r3]
}
100047e0:	46bd      	mov	sp, r7
100047e2:	b004      	add	sp, #16
100047e4:	bd80      	pop	{r7, pc}
100047e6:	46c0      	nop			; (mov r8, r8)

100047e8 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
100047e8:	b590      	push	{r4, r7, lr}
100047ea:	b085      	sub	sp, #20
100047ec:	af00      	add	r7, sp, #0
100047ee:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
100047f0:	687b      	ldr	r3, [r7, #4]
100047f2:	7e1b      	ldrb	r3, [r3, #24]
100047f4:	2b02      	cmp	r3, #2
100047f6:	d000      	beq.n	100047fa <ADC_MEASUREMENT_Init+0x12>
100047f8:	e08b      	b.n	10004912 <ADC_MEASUREMENT_Init+0x12a>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
100047fa:	687b      	ldr	r3, [r7, #4]
100047fc:	68db      	ldr	r3, [r3, #12]
100047fe:	220e      	movs	r2, #14
10004800:	18bc      	adds	r4, r7, r2
10004802:	1c18      	adds	r0, r3, #0
10004804:	f7fe f990 	bl	10002b28 <GLOBAL_ADC_Init>
10004808:	1c03      	adds	r3, r0, #0
1000480a:	7023      	strb	r3, [r4, #0]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
1000480c:	687b      	ldr	r3, [r7, #4]
1000480e:	68db      	ldr	r3, [r3, #12]
10004810:	685a      	ldr	r2, [r3, #4]
10004812:	687b      	ldr	r3, [r7, #4]
10004814:	689b      	ldr	r3, [r3, #8]
10004816:	681b      	ldr	r3, [r3, #0]
10004818:	1c10      	adds	r0, r2, #0
1000481a:	1c19      	adds	r1, r3, #0
1000481c:	2200      	movs	r2, #0
1000481e:	2300      	movs	r3, #0
10004820:	f7fd fb02 	bl	10001e28 <XMC_VADC_GLOBAL_InputClassInit>
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM);
#if (UC_SERIES == XMC11)
    /*Initialize the Global Conversion class 1*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10004824:	687b      	ldr	r3, [r7, #4]
10004826:	68db      	ldr	r3, [r3, #12]
10004828:	685a      	ldr	r2, [r3, #4]
1000482a:	687b      	ldr	r3, [r7, #4]
1000482c:	689b      	ldr	r3, [r3, #8]
1000482e:	681b      	ldr	r3, [r3, #0]
10004830:	1c10      	adds	r0, r2, #0
10004832:	1c19      	adds	r1, r3, #0
10004834:	2200      	movs	r2, #0
10004836:	2301      	movs	r3, #1
10004838:	f7fd faf6 	bl	10001e28 <XMC_VADC_GLOBAL_InputClassInit>
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
1000483c:	687b      	ldr	r3, [r7, #4]
1000483e:	68db      	ldr	r3, [r3, #12]
10004840:	685a      	ldr	r2, [r3, #4]
10004842:	687b      	ldr	r3, [r7, #4]
10004844:	685b      	ldr	r3, [r3, #4]
10004846:	1c10      	adds	r0, r2, #0
10004848:	1c19      	adds	r1, r3, #0
1000484a:	f7fd fb53 	bl	10001ef4 <XMC_VADC_GLOBAL_BackgroundInit>
  
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
1000484e:	687b      	ldr	r3, [r7, #4]
10004850:	68db      	ldr	r3, [r3, #12]
10004852:	685a      	ldr	r2, [r3, #4]
10004854:	687b      	ldr	r3, [r7, #4]
10004856:	681b      	ldr	r3, [r3, #0]
10004858:	685b      	ldr	r3, [r3, #4]
1000485a:	1c10      	adds	r0, r2, #0
1000485c:	1c19      	adds	r1, r3, #0
1000485e:	f7ff ff87 	bl	10004770 <XMC_VADC_GLOBAL_ResultInit>
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10004862:	230f      	movs	r3, #15
10004864:	18fb      	adds	r3, r7, r3
10004866:	2200      	movs	r2, #0
10004868:	701a      	strb	r2, [r3, #0]
1000486a:	e01a      	b.n	100048a2 <ADC_MEASUREMENT_Init+0xba>
    {
      indexed = handle_ptr->array->channel_array[j];
1000486c:	687b      	ldr	r3, [r7, #4]
1000486e:	681b      	ldr	r3, [r3, #0]
10004870:	220f      	movs	r2, #15
10004872:	18ba      	adds	r2, r7, r2
10004874:	7812      	ldrb	r2, [r2, #0]
10004876:	0092      	lsls	r2, r2, #2
10004878:	58d3      	ldr	r3, [r2, r3]
1000487a:	60bb      	str	r3, [r7, #8]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
1000487c:	687b      	ldr	r3, [r7, #4]
1000487e:	68db      	ldr	r3, [r3, #12]
10004880:	685a      	ldr	r2, [r3, #4]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10004882:	68bb      	ldr	r3, [r7, #8]
10004884:	781b      	ldrb	r3, [r3, #0]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10004886:	1c19      	adds	r1, r3, #0
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10004888:	68bb      	ldr	r3, [r7, #8]
1000488a:	785b      	ldrb	r3, [r3, #1]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
1000488c:	1c10      	adds	r0, r2, #0
1000488e:	1c1a      	adds	r2, r3, #0
10004890:	f7ff ff90 	bl	100047b4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10004894:	230f      	movs	r3, #15
10004896:	18fb      	adds	r3, r7, r3
10004898:	781a      	ldrb	r2, [r3, #0]
1000489a:	230f      	movs	r3, #15
1000489c:	18fb      	adds	r3, r7, r3
1000489e:	3201      	adds	r2, #1
100048a0:	701a      	strb	r2, [r3, #0]
100048a2:	230f      	movs	r3, #15
100048a4:	18fb      	adds	r3, r7, r3
100048a6:	781b      	ldrb	r3, [r3, #0]
100048a8:	2b00      	cmp	r3, #0
100048aa:	d0df      	beq.n	1000486c <ADC_MEASUREMENT_Init+0x84>
  XMC_SCU_SetInterruptControl(handle_ptr->req_src_intr_handle->node_id,
                              ((handle_ptr->req_src_intr_handle->node_id << 8) | handle_ptr->req_src_intr_handle->irqctrl));
#endif
    }
#else /* Selected device is XMC11*/
    XMC_VADC_GLOBAL_SetResultEventInterruptNode(handle_ptr->global_handle->module_ptr, handle_ptr->srv_req_node );
100048ac:	687b      	ldr	r3, [r7, #4]
100048ae:	68db      	ldr	r3, [r3, #12]
100048b0:	685a      	ldr	r2, [r3, #4]
100048b2:	687b      	ldr	r3, [r7, #4]
100048b4:	7e5b      	ldrb	r3, [r3, #25]
100048b6:	1c10      	adds	r0, r2, #0
100048b8:	1c19      	adds	r1, r3, #0
100048ba:	f7fd faeb 	bl	10001e94 <XMC_VADC_GLOBAL_SetResultEventInterruptNode>
#ifdef ADC_MEASUREMENT_CPU_1X /* End of single measurement is enabled*/
    NVIC_SetPriority((IRQn_Type)handle_ptr->result_intr_handle->node_id,
100048be:	687b      	ldr	r3, [r7, #4]
100048c0:	691b      	ldr	r3, [r3, #16]
100048c2:	681b      	ldr	r3, [r3, #0]
100048c4:	b2da      	uxtb	r2, r3
                            handle_ptr->result_intr_handle->priority);
100048c6:	687b      	ldr	r3, [r7, #4]
100048c8:	691b      	ldr	r3, [r3, #16]
#endif
    }
#else /* Selected device is XMC11*/
    XMC_VADC_GLOBAL_SetResultEventInterruptNode(handle_ptr->global_handle->module_ptr, handle_ptr->srv_req_node );
#ifdef ADC_MEASUREMENT_CPU_1X /* End of single measurement is enabled*/
    NVIC_SetPriority((IRQn_Type)handle_ptr->result_intr_handle->node_id,
100048ca:	685b      	ldr	r3, [r3, #4]
100048cc:	b252      	sxtb	r2, r2
100048ce:	1c10      	adds	r0, r2, #0
100048d0:	1c19      	adds	r1, r3, #0
100048d2:	f7ff fee3 	bl	1000469c <__NVIC_SetPriority>
                            handle_ptr->result_intr_handle->priority);

    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
100048d6:	687b      	ldr	r3, [r7, #4]
100048d8:	691b      	ldr	r3, [r3, #16]
100048da:	681b      	ldr	r3, [r3, #0]
100048dc:	b2db      	uxtb	r3, r3
100048de:	b25b      	sxtb	r3, r3
100048e0:	1c18      	adds	r0, r3, #0
100048e2:	f7ff fec1 	bl	10004668 <__NVIC_EnableIRQ>
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
100048e6:	687b      	ldr	r3, [r7, #4]
100048e8:	695b      	ldr	r3, [r3, #20]
100048ea:	2b00      	cmp	r3, #0
100048ec:	d002      	beq.n	100048f4 <ADC_MEASUREMENT_Init+0x10c>
    {
      (handle_ptr->mux_config)();
100048ee:	687b      	ldr	r3, [r7, #4]
100048f0:	695b      	ldr	r3, [r3, #20]
100048f2:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
100048f4:	687b      	ldr	r3, [r7, #4]
100048f6:	7e9b      	ldrb	r3, [r3, #26]
100048f8:	2b00      	cmp	r3, #0
100048fa:	d005      	beq.n	10004908 <ADC_MEASUREMENT_Init+0x120>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
100048fc:	687b      	ldr	r3, [r7, #4]
100048fe:	68db      	ldr	r3, [r3, #12]
10004900:	685b      	ldr	r3, [r3, #4]
10004902:	1c18      	adds	r0, r3, #0
10004904:	f7ff ff42 	bl	1000478c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
10004908:	687b      	ldr	r3, [r7, #4]
1000490a:	220e      	movs	r2, #14
1000490c:	18ba      	adds	r2, r7, r2
1000490e:	7812      	ldrb	r2, [r2, #0]
10004910:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10004912:	687b      	ldr	r3, [r7, #4]
10004914:	7e1b      	ldrb	r3, [r3, #24]
}
10004916:	1c18      	adds	r0, r3, #0
10004918:	46bd      	mov	sp, r7
1000491a:	b005      	add	sp, #20
1000491c:	bd90      	pop	{r4, r7, pc}
1000491e:	46c0      	nop			; (mov r8, r8)

10004920 <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
10004920:	b580      	push	{r7, lr}
10004922:	b082      	sub	sp, #8
10004924:	af00      	add	r7, sp, #0
10004926:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL));

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10004928:	687b      	ldr	r3, [r7, #4]
1000492a:	68db      	ldr	r3, [r3, #12]
1000492c:	685b      	ldr	r3, [r3, #4]
1000492e:	1c18      	adds	r0, r3, #0
10004930:	f7ff ff2c 	bl	1000478c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
10004934:	46bd      	mov	sp, r7
10004936:	b002      	add	sp, #8
10004938:	bd80      	pop	{r7, pc}
1000493a:	46c0      	nop			; (mov r8, r8)

1000493c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
1000493c:	b590      	push	{r4, r7, lr}
1000493e:	b083      	sub	sp, #12
10004940:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10004942:	1dfb      	adds	r3, r7, #7
10004944:	2200      	movs	r2, #0
10004946:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10004948:	1dfc      	adds	r4, r7, #7
1000494a:	4b58      	ldr	r3, [pc, #352]	; (10004aac <DAVE_Init+0x170>)
1000494c:	1c18      	adds	r0, r3, #0
1000494e:	f7ff fe39 	bl	100045c4 <CLOCK_XMC1_Init>
10004952:	1c03      	adds	r3, r0, #0
10004954:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10004956:	1dfb      	adds	r3, r7, #7
10004958:	781b      	ldrb	r3, [r3, #0]
1000495a:	2b00      	cmp	r3, #0
1000495c:	d106      	bne.n	1000496c <DAVE_Init+0x30>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_SENSOR */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_SENSOR); 
1000495e:	1dfc      	adds	r4, r7, #7
10004960:	4b53      	ldr	r3, [pc, #332]	; (10004ab0 <DAVE_Init+0x174>)
10004962:	1c18      	adds	r0, r3, #0
10004964:	f7ff ff40 	bl	100047e8 <ADC_MEASUREMENT_Init>
10004968:	1c03      	adds	r3, r0, #0
1000496a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000496c:	1dfb      	adds	r3, r7, #7
1000496e:	781b      	ldrb	r3, [r3, #0]
10004970:	2b00      	cmp	r3, #0
10004972:	d106      	bne.n	10004982 <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USB_SI */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USB_SI); 
10004974:	1dfc      	adds	r4, r7, #7
10004976:	4b4f      	ldr	r3, [pc, #316]	; (10004ab4 <DAVE_Init+0x178>)
10004978:	1c18      	adds	r0, r3, #0
1000497a:	f7ff fdff 	bl	1000457c <DIGITAL_IO_Init>
1000497e:	1c03      	adds	r3, r0, #0
10004980:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004982:	1dfb      	adds	r3, r7, #7
10004984:	781b      	ldrb	r3, [r3, #0]
10004986:	2b00      	cmp	r3, #0
10004988:	d106      	bne.n	10004998 <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USB_OE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USB_OE); 
1000498a:	1dfc      	adds	r4, r7, #7
1000498c:	4b4a      	ldr	r3, [pc, #296]	; (10004ab8 <DAVE_Init+0x17c>)
1000498e:	1c18      	adds	r0, r3, #0
10004990:	f7ff fdf4 	bl	1000457c <DIGITAL_IO_Init>
10004994:	1c03      	adds	r3, r0, #0
10004996:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004998:	1dfb      	adds	r3, r7, #7
1000499a:	781b      	ldrb	r3, [r3, #0]
1000499c:	2b00      	cmp	r3, #0
1000499e:	d106      	bne.n	100049ae <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_LED_R_STATUS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_LED_R_STATUS); 
100049a0:	1dfc      	adds	r4, r7, #7
100049a2:	4b46      	ldr	r3, [pc, #280]	; (10004abc <DAVE_Init+0x180>)
100049a4:	1c18      	adds	r0, r3, #0
100049a6:	f7ff fde9 	bl	1000457c <DIGITAL_IO_Init>
100049aa:	1c03      	adds	r3, r0, #0
100049ac:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100049ae:	1dfb      	adds	r3, r7, #7
100049b0:	781b      	ldrb	r3, [r3, #0]
100049b2:	2b00      	cmp	r3, #0
100049b4:	d106      	bne.n	100049c4 <DAVE_Init+0x88>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_SW_USB */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_SW_USB); 
100049b6:	1dfc      	adds	r4, r7, #7
100049b8:	4b41      	ldr	r3, [pc, #260]	; (10004ac0 <DAVE_Init+0x184>)
100049ba:	1c18      	adds	r0, r3, #0
100049bc:	f7ff fdde 	bl	1000457c <DIGITAL_IO_Init>
100049c0:	1c03      	adds	r3, r0, #0
100049c2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100049c4:	1dfb      	adds	r3, r7, #7
100049c6:	781b      	ldrb	r3, [r3, #0]
100049c8:	2b00      	cmp	r3, #0
100049ca:	d106      	bne.n	100049da <DAVE_Init+0x9e>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_SW_UP */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_SW_UP); 
100049cc:	1dfc      	adds	r4, r7, #7
100049ce:	4b3d      	ldr	r3, [pc, #244]	; (10004ac4 <DAVE_Init+0x188>)
100049d0:	1c18      	adds	r0, r3, #0
100049d2:	f7ff fdd3 	bl	1000457c <DIGITAL_IO_Init>
100049d6:	1c03      	adds	r3, r0, #0
100049d8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100049da:	1dfb      	adds	r3, r7, #7
100049dc:	781b      	ldrb	r3, [r3, #0]
100049de:	2b00      	cmp	r3, #0
100049e0:	d106      	bne.n	100049f0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_SW_DOWN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_SW_DOWN); 
100049e2:	1dfc      	adds	r4, r7, #7
100049e4:	4b38      	ldr	r3, [pc, #224]	; (10004ac8 <DAVE_Init+0x18c>)
100049e6:	1c18      	adds	r0, r3, #0
100049e8:	f7ff fdc8 	bl	1000457c <DIGITAL_IO_Init>
100049ec:	1c03      	adds	r3, r0, #0
100049ee:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100049f0:	1dfb      	adds	r3, r7, #7
100049f2:	781b      	ldrb	r3, [r3, #0]
100049f4:	2b00      	cmp	r3, #0
100049f6:	d106      	bne.n	10004a06 <DAVE_Init+0xca>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USBPWR_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USBPWR_2); 
100049f8:	1dfc      	adds	r4, r7, #7
100049fa:	4b34      	ldr	r3, [pc, #208]	; (10004acc <DAVE_Init+0x190>)
100049fc:	1c18      	adds	r0, r3, #0
100049fe:	f7ff fdbd 	bl	1000457c <DIGITAL_IO_Init>
10004a02:	1c03      	adds	r3, r0, #0
10004a04:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a06:	1dfb      	adds	r3, r7, #7
10004a08:	781b      	ldrb	r3, [r3, #0]
10004a0a:	2b00      	cmp	r3, #0
10004a0c:	d106      	bne.n	10004a1c <DAVE_Init+0xe0>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_USBPWR_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_USBPWR_1); 
10004a0e:	1dfc      	adds	r4, r7, #7
10004a10:	4b2f      	ldr	r3, [pc, #188]	; (10004ad0 <DAVE_Init+0x194>)
10004a12:	1c18      	adds	r0, r3, #0
10004a14:	f7ff fdb2 	bl	1000457c <DIGITAL_IO_Init>
10004a18:	1c03      	adds	r3, r0, #0
10004a1a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a1c:	1dfb      	adds	r3, r7, #7
10004a1e:	781b      	ldrb	r3, [r3, #0]
10004a20:	2b00      	cmp	r3, #0
10004a22:	d106      	bne.n	10004a32 <DAVE_Init+0xf6>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_RELAY */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_RELAY); 
10004a24:	1dfc      	adds	r4, r7, #7
10004a26:	4b2b      	ldr	r3, [pc, #172]	; (10004ad4 <DAVE_Init+0x198>)
10004a28:	1c18      	adds	r0, r3, #0
10004a2a:	f7ff fda7 	bl	1000457c <DIGITAL_IO_Init>
10004a2e:	1c03      	adds	r3, r0, #0
10004a30:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a32:	1dfb      	adds	r3, r7, #7
10004a34:	781b      	ldrb	r3, [r3, #0]
10004a36:	2b00      	cmp	r3, #0
10004a38:	d106      	bne.n	10004a48 <DAVE_Init+0x10c>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_LED_USB2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_LED_USB2); 
10004a3a:	1dfc      	adds	r4, r7, #7
10004a3c:	4b26      	ldr	r3, [pc, #152]	; (10004ad8 <DAVE_Init+0x19c>)
10004a3e:	1c18      	adds	r0, r3, #0
10004a40:	f7ff fd9c 	bl	1000457c <DIGITAL_IO_Init>
10004a44:	1c03      	adds	r3, r0, #0
10004a46:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a48:	1dfb      	adds	r3, r7, #7
10004a4a:	781b      	ldrb	r3, [r3, #0]
10004a4c:	2b00      	cmp	r3, #0
10004a4e:	d106      	bne.n	10004a5e <DAVE_Init+0x122>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_LED_USB1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_LED_USB1); 
10004a50:	1dfc      	adds	r4, r7, #7
10004a52:	4b22      	ldr	r3, [pc, #136]	; (10004adc <DAVE_Init+0x1a0>)
10004a54:	1c18      	adds	r0, r3, #0
10004a56:	f7ff fd91 	bl	1000457c <DIGITAL_IO_Init>
10004a5a:	1c03      	adds	r3, r0, #0
10004a5c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a5e:	1dfb      	adds	r3, r7, #7
10004a60:	781b      	ldrb	r3, [r3, #0]
10004a62:	2b00      	cmp	r3, #0
10004a64:	d106      	bne.n	10004a74 <DAVE_Init+0x138>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
10004a66:	1dfc      	adds	r4, r7, #7
10004a68:	4b1d      	ldr	r3, [pc, #116]	; (10004ae0 <DAVE_Init+0x1a4>)
10004a6a:	1c18      	adds	r0, r3, #0
10004a6c:	f7fd fcbc 	bl	100023e8 <SYSTIMER_Init>
10004a70:	1c03      	adds	r3, r0, #0
10004a72:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a74:	1dfb      	adds	r3, r7, #7
10004a76:	781b      	ldrb	r3, [r3, #0]
10004a78:	2b00      	cmp	r3, #0
10004a7a:	d106      	bne.n	10004a8a <DAVE_Init+0x14e>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_CCU4_LED_STATUS */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_CCU4_LED_STATUS); 
10004a7c:	1dfc      	adds	r4, r7, #7
10004a7e:	4b19      	ldr	r3, [pc, #100]	; (10004ae4 <DAVE_Init+0x1a8>)
10004a80:	1c18      	adds	r0, r3, #0
10004a82:	f7fd fd6b 	bl	1000255c <PWM_CCU4_Init>
10004a86:	1c03      	adds	r3, r0, #0
10004a88:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004a8a:	1dfb      	adds	r3, r7, #7
10004a8c:	781b      	ldrb	r3, [r3, #0]
10004a8e:	2b00      	cmp	r3, #0
10004a90:	d106      	bne.n	10004aa0 <DAVE_Init+0x164>
  {
	 /**  Initialization of E_EEPROM_XMC1 APP instance E_EEPROM_XMC1_0 */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC1_Init(&E_EEPROM_XMC1_0); 
10004a92:	1dfc      	adds	r4, r7, #7
10004a94:	4b14      	ldr	r3, [pc, #80]	; (10004ae8 <DAVE_Init+0x1ac>)
10004a96:	1c18      	adds	r0, r3, #0
10004a98:	f7fe f88e 	bl	10002bb8 <E_EEPROM_XMC1_Init>
10004a9c:	1c03      	adds	r3, r0, #0
10004a9e:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10004aa0:	1dfb      	adds	r3, r7, #7
10004aa2:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10004aa4:	1c18      	adds	r0, r3, #0
10004aa6:	46bd      	mov	sp, r7
10004aa8:	b003      	add	sp, #12
10004aaa:	bd90      	pop	{r4, r7, pc}
10004aac:	200005d0 	.word	0x200005d0
10004ab0:	20000588 	.word	0x20000588
10004ab4:	10005e38 	.word	0x10005e38
10004ab8:	10005e48 	.word	0x10005e48
10004abc:	10005e58 	.word	0x10005e58
10004ac0:	10005e68 	.word	0x10005e68
10004ac4:	10005e78 	.word	0x10005e78
10004ac8:	10005e88 	.word	0x10005e88
10004acc:	10005e98 	.word	0x10005e98
10004ad0:	10005ea8 	.word	0x10005ea8
10004ad4:	10005eb8 	.word	0x10005eb8
10004ad8:	10005ec8 	.word	0x10005ec8
10004adc:	10005ed8 	.word	0x10005ed8
10004ae0:	200005cc 	.word	0x200005cc
10004ae4:	20000520 	.word	0x20000520
10004ae8:	2000056c 	.word	0x2000056c

10004aec <XMC_VADC_GLOBAL_GetDetailedResult>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GLOBAL_GetResult()
 */
__STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
{
10004aec:	b580      	push	{r7, lr}
10004aee:	b082      	sub	sp, #8
10004af0:	af00      	add	r7, sp, #0
10004af2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))

  return (global_ptr->GLOBRES);
10004af4:	687a      	ldr	r2, [r7, #4]
10004af6:	23c0      	movs	r3, #192	; 0xc0
10004af8:	009b      	lsls	r3, r3, #2
10004afa:	58d3      	ldr	r3, [r2, r3]
}
10004afc:	1c18      	adds	r0, r3, #0
10004afe:	46bd      	mov	sp, r7
10004b00:	b002      	add	sp, #8
10004b02:	bd80      	pop	{r7, pc}

10004b04 <ADC_MEASUREMENT_GetGlobalDetailedResult>:
    return 0;
  }
 @endcode
 */
__STATIC_INLINE uint32_t ADC_MEASUREMENT_GetGlobalDetailedResult(void)
{
10004b04:	b580      	push	{r7, lr}
10004b06:	b082      	sub	sp, #8
10004b08:	af00      	add	r7, sp, #0
  uint32_t result;
  result = XMC_VADC_GLOBAL_GetDetailedResult(ADC_MEASUREMENT_MODULE_PTR);
10004b0a:	4b05      	ldr	r3, [pc, #20]	; (10004b20 <ADC_MEASUREMENT_GetGlobalDetailedResult+0x1c>)
10004b0c:	1c18      	adds	r0, r3, #0
10004b0e:	f7ff ffed 	bl	10004aec <XMC_VADC_GLOBAL_GetDetailedResult>
10004b12:	1c03      	adds	r3, r0, #0
10004b14:	607b      	str	r3, [r7, #4]

  return (result);
10004b16:	687b      	ldr	r3, [r7, #4]
}
10004b18:	1c18      	adds	r0, r3, #0
10004b1a:	46bd      	mov	sp, r7
10004b1c:	b002      	add	sp, #8
10004b1e:	bd80      	pop	{r7, pc}
10004b20:	48030000 	.word	0x48030000

10004b24 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004b24:	b580      	push	{r7, lr}
10004b26:	b082      	sub	sp, #8
10004b28:	af00      	add	r7, sp, #0
10004b2a:	6078      	str	r0, [r7, #4]
10004b2c:	1c0a      	adds	r2, r1, #0
10004b2e:	1cfb      	adds	r3, r7, #3
10004b30:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10004b32:	1cfb      	adds	r3, r7, #3
10004b34:	781b      	ldrb	r3, [r3, #0]
10004b36:	2201      	movs	r2, #1
10004b38:	409a      	lsls	r2, r3
10004b3a:	687b      	ldr	r3, [r7, #4]
10004b3c:	605a      	str	r2, [r3, #4]
}
10004b3e:	46bd      	mov	sp, r7
10004b40:	b002      	add	sp, #8
10004b42:	bd80      	pop	{r7, pc}

10004b44 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004b44:	b580      	push	{r7, lr}
10004b46:	b082      	sub	sp, #8
10004b48:	af00      	add	r7, sp, #0
10004b4a:	6078      	str	r0, [r7, #4]
10004b4c:	1c0a      	adds	r2, r1, #0
10004b4e:	1cfb      	adds	r3, r7, #3
10004b50:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10004b52:	1cfb      	adds	r3, r7, #3
10004b54:	781b      	ldrb	r3, [r3, #0]
10004b56:	2280      	movs	r2, #128	; 0x80
10004b58:	0252      	lsls	r2, r2, #9
10004b5a:	409a      	lsls	r2, r3
10004b5c:	687b      	ldr	r3, [r7, #4]
10004b5e:	605a      	str	r2, [r3, #4]
}
10004b60:	46bd      	mov	sp, r7
10004b62:	b002      	add	sp, #8
10004b64:	bd80      	pop	{r7, pc}
10004b66:	46c0      	nop			; (mov r8, r8)

10004b68 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004b68:	b580      	push	{r7, lr}
10004b6a:	b082      	sub	sp, #8
10004b6c:	af00      	add	r7, sp, #0
10004b6e:	6078      	str	r0, [r7, #4]
10004b70:	1c0a      	adds	r2, r1, #0
10004b72:	1cfb      	adds	r3, r7, #3
10004b74:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10004b7a:	1cfb      	adds	r3, r7, #3
10004b7c:	781b      	ldrb	r3, [r3, #0]
10004b7e:	40da      	lsrs	r2, r3
10004b80:	1c13      	adds	r3, r2, #0
10004b82:	2201      	movs	r2, #1
10004b84:	4013      	ands	r3, r2
}
10004b86:	1c18      	adds	r0, r3, #0
10004b88:	46bd      	mov	sp, r7
10004b8a:	b002      	add	sp, #8
10004b8c:	bd80      	pop	{r7, pc}
10004b8e:	46c0      	nop			; (mov r8, r8)

10004b90 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10004b90:	b580      	push	{r7, lr}
10004b92:	b082      	sub	sp, #8
10004b94:	af00      	add	r7, sp, #0
10004b96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10004b98:	687b      	ldr	r3, [r7, #4]
10004b9a:	681a      	ldr	r2, [r3, #0]
10004b9c:	687b      	ldr	r3, [r7, #4]
10004b9e:	7b1b      	ldrb	r3, [r3, #12]
10004ba0:	1c10      	adds	r0, r2, #0
10004ba2:	1c19      	adds	r1, r3, #0
10004ba4:	f7ff ffbe 	bl	10004b24 <XMC_GPIO_SetOutputHigh>
}
10004ba8:	46bd      	mov	sp, r7
10004baa:	b002      	add	sp, #8
10004bac:	bd80      	pop	{r7, pc}
10004bae:	46c0      	nop			; (mov r8, r8)

10004bb0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10004bb0:	b580      	push	{r7, lr}
10004bb2:	b082      	sub	sp, #8
10004bb4:	af00      	add	r7, sp, #0
10004bb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10004bb8:	687b      	ldr	r3, [r7, #4]
10004bba:	681a      	ldr	r2, [r3, #0]
10004bbc:	687b      	ldr	r3, [r7, #4]
10004bbe:	7b1b      	ldrb	r3, [r3, #12]
10004bc0:	1c10      	adds	r0, r2, #0
10004bc2:	1c19      	adds	r1, r3, #0
10004bc4:	f7ff ffbe 	bl	10004b44 <XMC_GPIO_SetOutputLow>
}
10004bc8:	46bd      	mov	sp, r7
10004bca:	b002      	add	sp, #8
10004bcc:	bd80      	pop	{r7, pc}
10004bce:	46c0      	nop			; (mov r8, r8)

10004bd0 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10004bd0:	b580      	push	{r7, lr}
10004bd2:	b082      	sub	sp, #8
10004bd4:	af00      	add	r7, sp, #0
10004bd6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
10004bd8:	687b      	ldr	r3, [r7, #4]
10004bda:	681a      	ldr	r2, [r3, #0]
10004bdc:	687b      	ldr	r3, [r7, #4]
10004bde:	7b1b      	ldrb	r3, [r3, #12]
10004be0:	1c10      	adds	r0, r2, #0
10004be2:	1c19      	adds	r1, r3, #0
10004be4:	f7ff ffc0 	bl	10004b68 <XMC_GPIO_GetInput>
10004be8:	1c03      	adds	r3, r0, #0
}
10004bea:	1c18      	adds	r0, r3, #0
10004bec:	46bd      	mov	sp, r7
10004bee:	b002      	add	sp, #8
10004bf0:	bd80      	pop	{r7, pc}
10004bf2:	46c0      	nop			; (mov r8, r8)

10004bf4 <delay_ms>:


//****************************************************************************
// delay_ms - millisecond delay function
//****************************************************************************
void delay_ms(uint32_t ms){
10004bf4:	b580      	push	{r7, lr}
10004bf6:	b084      	sub	sp, #16
10004bf8:	af00      	add	r7, sp, #0
10004bfa:	6078      	str	r0, [r7, #4]
	uint32_t targetMicroSec = SYSTIMER_GetTime() + (ms*1000);
10004bfc:	f7fd fc30 	bl	10002460 <SYSTIMER_GetTime>
10004c00:	1c01      	adds	r1, r0, #0
10004c02:	687b      	ldr	r3, [r7, #4]
10004c04:	22fa      	movs	r2, #250	; 0xfa
10004c06:	0092      	lsls	r2, r2, #2
10004c08:	4353      	muls	r3, r2
10004c0a:	18cb      	adds	r3, r1, r3
10004c0c:	60fb      	str	r3, [r7, #12]
	while(targetMicroSec > SYSTIMER_GetTime())
10004c0e:	e000      	b.n	10004c12 <delay_ms+0x1e>
		__NOP(); // do nothing
10004c10:	46c0      	nop			; (mov r8, r8)
//****************************************************************************
// delay_ms - millisecond delay function
//****************************************************************************
void delay_ms(uint32_t ms){
	uint32_t targetMicroSec = SYSTIMER_GetTime() + (ms*1000);
	while(targetMicroSec > SYSTIMER_GetTime())
10004c12:	f7fd fc25 	bl	10002460 <SYSTIMER_GetTime>
10004c16:	1e02      	subs	r2, r0, #0
10004c18:	68fb      	ldr	r3, [r7, #12]
10004c1a:	429a      	cmp	r2, r3
10004c1c:	d3f8      	bcc.n	10004c10 <delay_ms+0x1c>
		__NOP(); // do nothing
}
10004c1e:	46bd      	mov	sp, r7
10004c20:	b004      	add	sp, #16
10004c22:	bd80      	pop	{r7, pc}

10004c24 <reset_status_led_to_relay_state>:

//****************************************************************************
// reset_status_led_to_relay_state - gets state of relay and sets relay led according
//****************************************************************************
void reset_status_led_to_relay_state(){
10004c24:	b580      	push	{r7, lr}
10004c26:	b082      	sub	sp, #8
10004c28:	af00      	add	r7, sp, #0
	uint32_t state = DIGITAL_IO_GetInput(&IO_RELAY);
10004c2a:	4b0f      	ldr	r3, [pc, #60]	; (10004c68 <reset_status_led_to_relay_state+0x44>)
10004c2c:	1c18      	adds	r0, r3, #0
10004c2e:	f7ff ffcf 	bl	10004bd0 <DIGITAL_IO_GetInput>
10004c32:	1c03      	adds	r3, r0, #0
10004c34:	607b      	str	r3, [r7, #4]
	if(state == 0){
10004c36:	687b      	ldr	r3, [r7, #4]
10004c38:	2b00      	cmp	r3, #0
10004c3a:	d109      	bne.n	10004c50 <reset_status_led_to_relay_state+0x2c>
		led_status_pattern = LED_OFF;
10004c3c:	4b0b      	ldr	r3, [pc, #44]	; (10004c6c <reset_status_led_to_relay_state+0x48>)
10004c3e:	2200      	movs	r2, #0
10004c40:	701a      	strb	r2, [r3, #0]
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10004c42:	4b0b      	ldr	r3, [pc, #44]	; (10004c70 <reset_status_led_to_relay_state+0x4c>)
10004c44:	4a0b      	ldr	r2, [pc, #44]	; (10004c74 <reset_status_led_to_relay_state+0x50>)
10004c46:	1c18      	adds	r0, r3, #0
10004c48:	1c11      	adds	r1, r2, #0
10004c4a:	f7fd fee5 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
10004c4e:	e007      	b.n	10004c60 <reset_status_led_to_relay_state+0x3c>
	}
	else{
		led_status_pattern = LED_ON;
10004c50:	4b06      	ldr	r3, [pc, #24]	; (10004c6c <reset_status_led_to_relay_state+0x48>)
10004c52:	2201      	movs	r2, #1
10004c54:	701a      	strb	r2, [r3, #0]
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10004c56:	4b06      	ldr	r3, [pc, #24]	; (10004c70 <reset_status_led_to_relay_state+0x4c>)
10004c58:	1c18      	adds	r0, r3, #0
10004c5a:	2100      	movs	r1, #0
10004c5c:	f7fd fedc 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
	}
}
10004c60:	46bd      	mov	sp, r7
10004c62:	b002      	add	sp, #8
10004c64:	bd80      	pop	{r7, pc}
10004c66:	46c0      	nop			; (mov r8, r8)
10004c68:	10005eb8 	.word	0x10005eb8
10004c6c:	200005da 	.word	0x200005da
10004c70:	20000520 	.word	0x20000520
10004c74:	00002710 	.word	0x00002710

10004c78 <manage_status_led>:

//****************************************************************************
// manage_status_led - blink the status led according to the given pattern and (user interface)
//****************************************************************************
void manage_status_led(){
10004c78:	b580      	push	{r7, lr}
10004c7a:	b082      	sub	sp, #8
10004c7c:	af00      	add	r7, sp, #0
	static uint16_t led_pattern_state_length;

	static uint16_t fade_duty_step;

	// Check target pattern an initiate
	if(led_status_pattern != led_status_pattern_last){
10004c7e:	4bb6      	ldr	r3, [pc, #728]	; (10004f58 <manage_status_led+0x2e0>)
10004c80:	781a      	ldrb	r2, [r3, #0]
10004c82:	4bb6      	ldr	r3, [pc, #728]	; (10004f5c <manage_status_led+0x2e4>)
10004c84:	781b      	ldrb	r3, [r3, #0]
10004c86:	429a      	cmp	r2, r3
10004c88:	d100      	bne.n	10004c8c <manage_status_led+0x14>
10004c8a:	e093      	b.n	10004db4 <manage_status_led+0x13c>
		switch (led_status_pattern){
10004c8c:	4bb2      	ldr	r3, [pc, #712]	; (10004f58 <manage_status_led+0x2e0>)
10004c8e:	781b      	ldrb	r3, [r3, #0]
10004c90:	2b05      	cmp	r3, #5
10004c92:	d900      	bls.n	10004c96 <manage_status_led+0x1e>
10004c94:	e08a      	b.n	10004dac <manage_status_led+0x134>
10004c96:	009a      	lsls	r2, r3, #2
10004c98:	4bb1      	ldr	r3, [pc, #708]	; (10004f60 <manage_status_led+0x2e8>)
10004c9a:	18d3      	adds	r3, r2, r3
10004c9c:	681b      	ldr	r3, [r3, #0]
10004c9e:	469f      	mov	pc, r3
			case LED_OFF:
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10004ca0:	4bb0      	ldr	r3, [pc, #704]	; (10004f64 <manage_status_led+0x2ec>)
10004ca2:	4ab1      	ldr	r2, [pc, #708]	; (10004f68 <manage_status_led+0x2f0>)
10004ca4:	1c18      	adds	r0, r3, #0
10004ca6:	1c11      	adds	r1, r2, #0
10004ca8:	f7fd feb6 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
				break;
10004cac:	e07e      	b.n	10004dac <manage_status_led+0x134>
			case LED_ON:
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10004cae:	4bad      	ldr	r3, [pc, #692]	; (10004f64 <manage_status_led+0x2ec>)
10004cb0:	1c18      	adds	r0, r3, #0
10004cb2:	2100      	movs	r1, #0
10004cb4:	f7fd feb0 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
				break;
10004cb8:	e078      	b.n	10004dac <manage_status_led+0x134>
			case LED_NUMBER:
				if((led_number_continuous >= 1 && led_pattern_mode == LED_PATTERN_CONTINUOUS) || (led_number_single >= 1 && led_pattern_mode == LED_PATTERN_SINGLE)){
10004cba:	4bac      	ldr	r3, [pc, #688]	; (10004f6c <manage_status_led+0x2f4>)
10004cbc:	881b      	ldrh	r3, [r3, #0]
10004cbe:	2b00      	cmp	r3, #0
10004cc0:	d003      	beq.n	10004cca <manage_status_led+0x52>
10004cc2:	4bab      	ldr	r3, [pc, #684]	; (10004f70 <manage_status_led+0x2f8>)
10004cc4:	781b      	ldrb	r3, [r3, #0]
10004cc6:	2b00      	cmp	r3, #0
10004cc8:	d007      	beq.n	10004cda <manage_status_led+0x62>
10004cca:	4baa      	ldr	r3, [pc, #680]	; (10004f74 <manage_status_led+0x2fc>)
10004ccc:	881b      	ldrh	r3, [r3, #0]
10004cce:	2b00      	cmp	r3, #0
10004cd0:	d015      	beq.n	10004cfe <manage_status_led+0x86>
10004cd2:	4ba7      	ldr	r3, [pc, #668]	; (10004f70 <manage_status_led+0x2f8>)
10004cd4:	781b      	ldrb	r3, [r3, #0]
10004cd6:	2b01      	cmp	r3, #1
10004cd8:	d111      	bne.n	10004cfe <manage_status_led+0x86>
					led_pattern_state_timestamp = SYSTIMER_GetTime();
10004cda:	f7fd fbc1 	bl	10002460 <SYSTIMER_GetTime>
10004cde:	1c02      	adds	r2, r0, #0
10004ce0:	4ba5      	ldr	r3, [pc, #660]	; (10004f78 <manage_status_led+0x300>)
10004ce2:	601a      	str	r2, [r3, #0]
					led_pattern_state_length = LED_PULSE_SHORT;
10004ce4:	4ba5      	ldr	r3, [pc, #660]	; (10004f7c <manage_status_led+0x304>)
10004ce6:	22c8      	movs	r2, #200	; 0xc8
10004ce8:	801a      	strh	r2, [r3, #0]
					PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10004cea:	4b9e      	ldr	r3, [pc, #632]	; (10004f64 <manage_status_led+0x2ec>)
10004cec:	4a9e      	ldr	r2, [pc, #632]	; (10004f68 <manage_status_led+0x2f0>)
10004cee:	1c18      	adds	r0, r3, #0
10004cf0:	1c11      	adds	r1, r2, #0
10004cf2:	f7fd fe91 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
					led_pattern_state = 0;
10004cf6:	4ba2      	ldr	r3, [pc, #648]	; (10004f80 <manage_status_led+0x308>)
10004cf8:	2200      	movs	r2, #0
10004cfa:	801a      	strh	r2, [r3, #0]
				}
				break;
10004cfc:	e056      	b.n	10004dac <manage_status_led+0x134>
10004cfe:	e055      	b.n	10004dac <manage_status_led+0x134>
			case LED_FADE_DOWN:
				if(led_fadetime > 0){
10004d00:	4ba0      	ldr	r3, [pc, #640]	; (10004f84 <manage_status_led+0x30c>)
10004d02:	881b      	ldrh	r3, [r3, #0]
10004d04:	2b00      	cmp	r3, #0
10004d06:	d023      	beq.n	10004d50 <manage_status_led+0xd8>
					led_pattern_state_timestamp = SYSTIMER_GetTime();
10004d08:	f7fd fbaa 	bl	10002460 <SYSTIMER_GetTime>
10004d0c:	1c02      	adds	r2, r0, #0
10004d0e:	4b9a      	ldr	r3, [pc, #616]	; (10004f78 <manage_status_led+0x300>)
10004d10:	601a      	str	r2, [r3, #0]
					led_pattern_state_length = led_fadetime/led_fadesteps;
10004d12:	4b9c      	ldr	r3, [pc, #624]	; (10004f84 <manage_status_led+0x30c>)
10004d14:	881a      	ldrh	r2, [r3, #0]
10004d16:	4b9c      	ldr	r3, [pc, #624]	; (10004f88 <manage_status_led+0x310>)
10004d18:	881b      	ldrh	r3, [r3, #0]
10004d1a:	1c10      	adds	r0, r2, #0
10004d1c:	1c19      	adds	r1, r3, #0
10004d1e:	f000 ff61 	bl	10005be4 <__aeabi_uidiv>
10004d22:	1c03      	adds	r3, r0, #0
10004d24:	b29a      	uxth	r2, r3
10004d26:	4b95      	ldr	r3, [pc, #596]	; (10004f7c <manage_status_led+0x304>)
10004d28:	801a      	strh	r2, [r3, #0]
					fade_duty_step = PWM_FULL_OFF/led_fadesteps;
10004d2a:	4b97      	ldr	r3, [pc, #604]	; (10004f88 <manage_status_led+0x310>)
10004d2c:	881b      	ldrh	r3, [r3, #0]
10004d2e:	488e      	ldr	r0, [pc, #568]	; (10004f68 <manage_status_led+0x2f0>)
10004d30:	1c19      	adds	r1, r3, #0
10004d32:	f000 ff57 	bl	10005be4 <__aeabi_uidiv>
10004d36:	1c03      	adds	r3, r0, #0
10004d38:	b29a      	uxth	r2, r3
10004d3a:	4b94      	ldr	r3, [pc, #592]	; (10004f8c <manage_status_led+0x314>)
10004d3c:	801a      	strh	r2, [r3, #0]
					PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10004d3e:	4b89      	ldr	r3, [pc, #548]	; (10004f64 <manage_status_led+0x2ec>)
10004d40:	1c18      	adds	r0, r3, #0
10004d42:	2100      	movs	r1, #0
10004d44:	f7fd fe68 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
					led_pattern_state = 0;
10004d48:	4b8d      	ldr	r3, [pc, #564]	; (10004f80 <manage_status_led+0x308>)
10004d4a:	2200      	movs	r2, #0
10004d4c:	801a      	strh	r2, [r3, #0]
				}
				break;
10004d4e:	e02d      	b.n	10004dac <manage_status_led+0x134>
10004d50:	e02c      	b.n	10004dac <manage_status_led+0x134>
			case LED_FADE_UP:
				if(led_fadetime > 0){
10004d52:	4b8c      	ldr	r3, [pc, #560]	; (10004f84 <manage_status_led+0x30c>)
10004d54:	881b      	ldrh	r3, [r3, #0]
10004d56:	2b00      	cmp	r3, #0
10004d58:	d024      	beq.n	10004da4 <manage_status_led+0x12c>
					led_pattern_state_timestamp = SYSTIMER_GetTime();
10004d5a:	f7fd fb81 	bl	10002460 <SYSTIMER_GetTime>
10004d5e:	1c02      	adds	r2, r0, #0
10004d60:	4b85      	ldr	r3, [pc, #532]	; (10004f78 <manage_status_led+0x300>)
10004d62:	601a      	str	r2, [r3, #0]
					led_pattern_state_length = led_fadetime/led_fadesteps;
10004d64:	4b87      	ldr	r3, [pc, #540]	; (10004f84 <manage_status_led+0x30c>)
10004d66:	881a      	ldrh	r2, [r3, #0]
10004d68:	4b87      	ldr	r3, [pc, #540]	; (10004f88 <manage_status_led+0x310>)
10004d6a:	881b      	ldrh	r3, [r3, #0]
10004d6c:	1c10      	adds	r0, r2, #0
10004d6e:	1c19      	adds	r1, r3, #0
10004d70:	f000 ff38 	bl	10005be4 <__aeabi_uidiv>
10004d74:	1c03      	adds	r3, r0, #0
10004d76:	b29a      	uxth	r2, r3
10004d78:	4b80      	ldr	r3, [pc, #512]	; (10004f7c <manage_status_led+0x304>)
10004d7a:	801a      	strh	r2, [r3, #0]
					fade_duty_step = PWM_FULL_OFF/led_fadesteps;
10004d7c:	4b82      	ldr	r3, [pc, #520]	; (10004f88 <manage_status_led+0x310>)
10004d7e:	881b      	ldrh	r3, [r3, #0]
10004d80:	4879      	ldr	r0, [pc, #484]	; (10004f68 <manage_status_led+0x2f0>)
10004d82:	1c19      	adds	r1, r3, #0
10004d84:	f000 ff2e 	bl	10005be4 <__aeabi_uidiv>
10004d88:	1c03      	adds	r3, r0, #0
10004d8a:	b29a      	uxth	r2, r3
10004d8c:	4b7f      	ldr	r3, [pc, #508]	; (10004f8c <manage_status_led+0x314>)
10004d8e:	801a      	strh	r2, [r3, #0]
					PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10004d90:	4b74      	ldr	r3, [pc, #464]	; (10004f64 <manage_status_led+0x2ec>)
10004d92:	4a75      	ldr	r2, [pc, #468]	; (10004f68 <manage_status_led+0x2f0>)
10004d94:	1c18      	adds	r0, r3, #0
10004d96:	1c11      	adds	r1, r2, #0
10004d98:	f7fd fe3e 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
					led_pattern_state = 0;
10004d9c:	4b78      	ldr	r3, [pc, #480]	; (10004f80 <manage_status_led+0x308>)
10004d9e:	2200      	movs	r2, #0
10004da0:	801a      	strh	r2, [r3, #0]
				}
				break;
10004da2:	e003      	b.n	10004dac <manage_status_led+0x134>
10004da4:	e002      	b.n	10004dac <manage_status_led+0x134>
			case LED_MATCH_RELAY_STATE:
				reset_status_led_to_relay_state();
10004da6:	f7ff ff3d 	bl	10004c24 <reset_status_led_to_relay_state>
				break;
10004daa:	46c0      	nop			; (mov r8, r8)
		}
		led_status_pattern_last = led_status_pattern;
10004dac:	4b6a      	ldr	r3, [pc, #424]	; (10004f58 <manage_status_led+0x2e0>)
10004dae:	781a      	ldrb	r2, [r3, #0]
10004db0:	4b6a      	ldr	r3, [pc, #424]	; (10004f5c <manage_status_led+0x2e4>)
10004db2:	701a      	strb	r2, [r3, #0]
	}

	// Handle LED_NUMBER pattern
	if(led_status_pattern == LED_NUMBER){
10004db4:	4b68      	ldr	r3, [pc, #416]	; (10004f58 <manage_status_led+0x2e0>)
10004db6:	781b      	ldrb	r3, [r3, #0]
10004db8:	2b02      	cmp	r3, #2
10004dba:	d000      	beq.n	10004dbe <manage_status_led+0x146>
10004dbc:	e06b      	b.n	10004e96 <manage_status_led+0x21e>
		if((SYSTIMER_GetTime() - led_pattern_state_timestamp) / 1000 >= led_pattern_state_length){
10004dbe:	f7fd fb4f 	bl	10002460 <SYSTIMER_GetTime>
10004dc2:	1c02      	adds	r2, r0, #0
10004dc4:	4b6c      	ldr	r3, [pc, #432]	; (10004f78 <manage_status_led+0x300>)
10004dc6:	681b      	ldr	r3, [r3, #0]
10004dc8:	1ad3      	subs	r3, r2, r3
10004dca:	1c18      	adds	r0, r3, #0
10004dcc:	23fa      	movs	r3, #250	; 0xfa
10004dce:	0099      	lsls	r1, r3, #2
10004dd0:	f000 ff08 	bl	10005be4 <__aeabi_uidiv>
10004dd4:	1c03      	adds	r3, r0, #0
10004dd6:	1c1a      	adds	r2, r3, #0
10004dd8:	4b68      	ldr	r3, [pc, #416]	; (10004f7c <manage_status_led+0x304>)
10004dda:	881b      	ldrh	r3, [r3, #0]
10004ddc:	429a      	cmp	r2, r3
10004dde:	d359      	bcc.n	10004e94 <manage_status_led+0x21c>
			// Next state
			led_pattern_state++;
10004de0:	4b67      	ldr	r3, [pc, #412]	; (10004f80 <manage_status_led+0x308>)
10004de2:	881b      	ldrh	r3, [r3, #0]
10004de4:	3301      	adds	r3, #1
10004de6:	b29a      	uxth	r2, r3
10004de8:	4b65      	ldr	r3, [pc, #404]	; (10004f80 <manage_status_led+0x308>)
10004dea:	801a      	strh	r2, [r3, #0]

			// Use right pulse number based on current pattern mode
			uint16_t led_number;
			if(led_pattern_mode == LED_PATTERN_CONTINUOUS)
10004dec:	4b60      	ldr	r3, [pc, #384]	; (10004f70 <manage_status_led+0x2f8>)
10004dee:	781b      	ldrb	r3, [r3, #0]
10004df0:	2b00      	cmp	r3, #0
10004df2:	d104      	bne.n	10004dfe <manage_status_led+0x186>
				led_number = led_number_continuous;
10004df4:	1dbb      	adds	r3, r7, #6
10004df6:	4a5d      	ldr	r2, [pc, #372]	; (10004f6c <manage_status_led+0x2f4>)
10004df8:	8812      	ldrh	r2, [r2, #0]
10004dfa:	801a      	strh	r2, [r3, #0]
10004dfc:	e003      	b.n	10004e06 <manage_status_led+0x18e>
			else
				led_number = led_number_single;
10004dfe:	1dbb      	adds	r3, r7, #6
10004e00:	4a5c      	ldr	r2, [pc, #368]	; (10004f74 <manage_status_led+0x2fc>)
10004e02:	8812      	ldrh	r2, [r2, #0]
10004e04:	801a      	strh	r2, [r3, #0]

			// Check if LED must be powered on or off for this state
			if(led_pattern_state % 2)
10004e06:	4b5e      	ldr	r3, [pc, #376]	; (10004f80 <manage_status_led+0x308>)
10004e08:	881b      	ldrh	r3, [r3, #0]
10004e0a:	2201      	movs	r2, #1
10004e0c:	4013      	ands	r3, r2
10004e0e:	b29b      	uxth	r3, r3
10004e10:	2b00      	cmp	r3, #0
10004e12:	d005      	beq.n	10004e20 <manage_status_led+0x1a8>
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10004e14:	4b53      	ldr	r3, [pc, #332]	; (10004f64 <manage_status_led+0x2ec>)
10004e16:	1c18      	adds	r0, r3, #0
10004e18:	2100      	movs	r1, #0
10004e1a:	f7fd fdfd 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
10004e1e:	e005      	b.n	10004e2c <manage_status_led+0x1b4>
			else
				PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10004e20:	4b50      	ldr	r3, [pc, #320]	; (10004f64 <manage_status_led+0x2ec>)
10004e22:	4a51      	ldr	r2, [pc, #324]	; (10004f68 <manage_status_led+0x2f0>)
10004e24:	1c18      	adds	r0, r3, #0
10004e26:	1c11      	adds	r1, r2, #0
10004e28:	f7fd fdf6 	bl	10002a18 <PWM_CCU4_SetDutyCycle>

			// Detect last low phase and make it longer
			if(led_pattern_state == (led_number*2) && led_pattern_mode == LED_PATTERN_CONTINUOUS)
10004e2c:	4b54      	ldr	r3, [pc, #336]	; (10004f80 <manage_status_led+0x308>)
10004e2e:	881b      	ldrh	r3, [r3, #0]
10004e30:	1c1a      	adds	r2, r3, #0
10004e32:	1dbb      	adds	r3, r7, #6
10004e34:	881b      	ldrh	r3, [r3, #0]
10004e36:	005b      	lsls	r3, r3, #1
10004e38:	429a      	cmp	r2, r3
10004e3a:	d107      	bne.n	10004e4c <manage_status_led+0x1d4>
10004e3c:	4b4c      	ldr	r3, [pc, #304]	; (10004f70 <manage_status_led+0x2f8>)
10004e3e:	781b      	ldrb	r3, [r3, #0]
10004e40:	2b00      	cmp	r3, #0
10004e42:	d103      	bne.n	10004e4c <manage_status_led+0x1d4>
				led_pattern_state_length = LED_PULSE_LONG;
10004e44:	4b4d      	ldr	r3, [pc, #308]	; (10004f7c <manage_status_led+0x304>)
10004e46:	4a52      	ldr	r2, [pc, #328]	; (10004f90 <manage_status_led+0x318>)
10004e48:	801a      	strh	r2, [r3, #0]
10004e4a:	e002      	b.n	10004e52 <manage_status_led+0x1da>
			else
				led_pattern_state_length = LED_PULSE_SHORT;
10004e4c:	4b4b      	ldr	r3, [pc, #300]	; (10004f7c <manage_status_led+0x304>)
10004e4e:	22c8      	movs	r2, #200	; 0xc8
10004e50:	801a      	strh	r2, [r3, #0]

			// Store current time
			led_pattern_state_timestamp = SYSTIMER_GetTime();
10004e52:	f7fd fb05 	bl	10002460 <SYSTIMER_GetTime>
10004e56:	1c02      	adds	r2, r0, #0
10004e58:	4b47      	ldr	r3, [pc, #284]	; (10004f78 <manage_status_led+0x300>)
10004e5a:	601a      	str	r2, [r3, #0]

			// Check if LED pattern is finished
			if(led_pattern_state > led_number*2){
10004e5c:	4b48      	ldr	r3, [pc, #288]	; (10004f80 <manage_status_led+0x308>)
10004e5e:	881b      	ldrh	r3, [r3, #0]
10004e60:	1c1a      	adds	r2, r3, #0
10004e62:	1dbb      	adds	r3, r7, #6
10004e64:	881b      	ldrh	r3, [r3, #0]
10004e66:	005b      	lsls	r3, r3, #1
10004e68:	429a      	cmp	r2, r3
10004e6a:	dd13      	ble.n	10004e94 <manage_status_led+0x21c>
				if(led_pattern_mode == LED_PATTERN_CONTINUOUS) // Repeat pattern
10004e6c:	4b40      	ldr	r3, [pc, #256]	; (10004f70 <manage_status_led+0x2f8>)
10004e6e:	781b      	ldrb	r3, [r3, #0]
10004e70:	2b00      	cmp	r3, #0
10004e72:	d103      	bne.n	10004e7c <manage_status_led+0x204>
					led_pattern_state = 1;
10004e74:	4b42      	ldr	r3, [pc, #264]	; (10004f80 <manage_status_led+0x308>)
10004e76:	2201      	movs	r2, #1
10004e78:	801a      	strh	r2, [r3, #0]
10004e7a:	e00b      	b.n	10004e94 <manage_status_led+0x21c>
				else if(led_pattern_mode == LED_PATTERN_SINGLE){ // Reset led and pattern mode
10004e7c:	4b3c      	ldr	r3, [pc, #240]	; (10004f70 <manage_status_led+0x2f8>)
10004e7e:	781b      	ldrb	r3, [r3, #0]
10004e80:	2b01      	cmp	r3, #1
10004e82:	d107      	bne.n	10004e94 <manage_status_led+0x21c>
					led_pattern_mode = LED_PATTERN_CONTINUOUS;
10004e84:	4b3a      	ldr	r3, [pc, #232]	; (10004f70 <manage_status_led+0x2f8>)
10004e86:	2200      	movs	r2, #0
10004e88:	701a      	strb	r2, [r3, #0]
					led_status_pattern = led_status_pattern_after_single;
10004e8a:	4b42      	ldr	r3, [pc, #264]	; (10004f94 <manage_status_led+0x31c>)
10004e8c:	781a      	ldrb	r2, [r3, #0]
10004e8e:	4b32      	ldr	r3, [pc, #200]	; (10004f58 <manage_status_led+0x2e0>)
10004e90:	701a      	strb	r2, [r3, #0]
10004e92:	e0de      	b.n	10005052 <manage_status_led+0x3da>
10004e94:	e0dd      	b.n	10005052 <manage_status_led+0x3da>
			}
		}
	}

	// Handle LED_FADE_UP pattern
	else if(led_status_pattern == LED_FADE_DOWN){
10004e96:	4b30      	ldr	r3, [pc, #192]	; (10004f58 <manage_status_led+0x2e0>)
10004e98:	781b      	ldrb	r3, [r3, #0]
10004e9a:	2b03      	cmp	r3, #3
10004e9c:	d000      	beq.n	10004ea0 <manage_status_led+0x228>
10004e9e:	e07b      	b.n	10004f98 <manage_status_led+0x320>
		if((SYSTIMER_GetTime() - led_pattern_state_timestamp) / 1000 >= led_pattern_state_length){
10004ea0:	f7fd fade 	bl	10002460 <SYSTIMER_GetTime>
10004ea4:	1c02      	adds	r2, r0, #0
10004ea6:	4b34      	ldr	r3, [pc, #208]	; (10004f78 <manage_status_led+0x300>)
10004ea8:	681b      	ldr	r3, [r3, #0]
10004eaa:	1ad3      	subs	r3, r2, r3
10004eac:	1c18      	adds	r0, r3, #0
10004eae:	23fa      	movs	r3, #250	; 0xfa
10004eb0:	0099      	lsls	r1, r3, #2
10004eb2:	f000 fe97 	bl	10005be4 <__aeabi_uidiv>
10004eb6:	1c03      	adds	r3, r0, #0
10004eb8:	1c1a      	adds	r2, r3, #0
10004eba:	4b30      	ldr	r3, [pc, #192]	; (10004f7c <manage_status_led+0x304>)
10004ebc:	881b      	ldrh	r3, [r3, #0]
10004ebe:	429a      	cmp	r2, r3
10004ec0:	d200      	bcs.n	10004ec4 <manage_status_led+0x24c>
10004ec2:	e0c6      	b.n	10005052 <manage_status_led+0x3da>
			// Set intensity of led to a level based on maximum value and current step
			PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, (led_pattern_state*fade_duty_step) + PWM_FULL_ON);
10004ec4:	4b2e      	ldr	r3, [pc, #184]	; (10004f80 <manage_status_led+0x308>)
10004ec6:	881b      	ldrh	r3, [r3, #0]
10004ec8:	1c1a      	adds	r2, r3, #0
10004eca:	4b30      	ldr	r3, [pc, #192]	; (10004f8c <manage_status_led+0x314>)
10004ecc:	881b      	ldrh	r3, [r3, #0]
10004ece:	4353      	muls	r3, r2
10004ed0:	1c1a      	adds	r2, r3, #0
10004ed2:	4b24      	ldr	r3, [pc, #144]	; (10004f64 <manage_status_led+0x2ec>)
10004ed4:	1c18      	adds	r0, r3, #0
10004ed6:	1c11      	adds	r1, r2, #0
10004ed8:	f7fd fd9e 	bl	10002a18 <PWM_CCU4_SetDutyCycle>

			// Store current time
			led_pattern_state_timestamp = SYSTIMER_GetTime();
10004edc:	f7fd fac0 	bl	10002460 <SYSTIMER_GetTime>
10004ee0:	1c02      	adds	r2, r0, #0
10004ee2:	4b25      	ldr	r3, [pc, #148]	; (10004f78 <manage_status_led+0x300>)
10004ee4:	601a      	str	r2, [r3, #0]

			// Next state
			led_pattern_state++;
10004ee6:	4b26      	ldr	r3, [pc, #152]	; (10004f80 <manage_status_led+0x308>)
10004ee8:	881b      	ldrh	r3, [r3, #0]
10004eea:	3301      	adds	r3, #1
10004eec:	b29a      	uxth	r2, r3
10004eee:	4b24      	ldr	r3, [pc, #144]	; (10004f80 <manage_status_led+0x308>)
10004ef0:	801a      	strh	r2, [r3, #0]

			// Make last state longer
			if(led_pattern_state == led_fadesteps-1)
10004ef2:	4b23      	ldr	r3, [pc, #140]	; (10004f80 <manage_status_led+0x308>)
10004ef4:	881b      	ldrh	r3, [r3, #0]
10004ef6:	1c1a      	adds	r2, r3, #0
10004ef8:	4b23      	ldr	r3, [pc, #140]	; (10004f88 <manage_status_led+0x310>)
10004efa:	881b      	ldrh	r3, [r3, #0]
10004efc:	3b01      	subs	r3, #1
10004efe:	429a      	cmp	r2, r3
10004f00:	d106      	bne.n	10004f10 <manage_status_led+0x298>
				led_pattern_state_length = led_pattern_state_length + 400;
10004f02:	4b1e      	ldr	r3, [pc, #120]	; (10004f7c <manage_status_led+0x304>)
10004f04:	881b      	ldrh	r3, [r3, #0]
10004f06:	3391      	adds	r3, #145	; 0x91
10004f08:	33ff      	adds	r3, #255	; 0xff
10004f0a:	b29a      	uxth	r2, r3
10004f0c:	4b1b      	ldr	r3, [pc, #108]	; (10004f7c <manage_status_led+0x304>)
10004f0e:	801a      	strh	r2, [r3, #0]

			// Check if LED pattern is finished
			if(led_pattern_state >= led_fadesteps){
10004f10:	4b1b      	ldr	r3, [pc, #108]	; (10004f80 <manage_status_led+0x308>)
10004f12:	881a      	ldrh	r2, [r3, #0]
10004f14:	4b1c      	ldr	r3, [pc, #112]	; (10004f88 <manage_status_led+0x310>)
10004f16:	881b      	ldrh	r3, [r3, #0]
10004f18:	429a      	cmp	r2, r3
10004f1a:	d200      	bcs.n	10004f1e <manage_status_led+0x2a6>
10004f1c:	e099      	b.n	10005052 <manage_status_led+0x3da>
				if(led_pattern_mode == LED_PATTERN_CONTINUOUS){ // Repeat pattern
10004f1e:	4b14      	ldr	r3, [pc, #80]	; (10004f70 <manage_status_led+0x2f8>)
10004f20:	781b      	ldrb	r3, [r3, #0]
10004f22:	2b00      	cmp	r3, #0
10004f24:	d10a      	bne.n	10004f3c <manage_status_led+0x2c4>
					led_pattern_state_length = led_pattern_state_length - 400;
10004f26:	4b15      	ldr	r3, [pc, #84]	; (10004f7c <manage_status_led+0x304>)
10004f28:	881b      	ldrh	r3, [r3, #0]
10004f2a:	3b91      	subs	r3, #145	; 0x91
10004f2c:	3bff      	subs	r3, #255	; 0xff
10004f2e:	b29a      	uxth	r2, r3
10004f30:	4b12      	ldr	r3, [pc, #72]	; (10004f7c <manage_status_led+0x304>)
10004f32:	801a      	strh	r2, [r3, #0]
					led_pattern_state = 0;
10004f34:	4b12      	ldr	r3, [pc, #72]	; (10004f80 <manage_status_led+0x308>)
10004f36:	2200      	movs	r2, #0
10004f38:	801a      	strh	r2, [r3, #0]
10004f3a:	e08a      	b.n	10005052 <manage_status_led+0x3da>
				}
				else if(led_pattern_mode == LED_PATTERN_SINGLE){ // Reset led and pattern mode
10004f3c:	4b0c      	ldr	r3, [pc, #48]	; (10004f70 <manage_status_led+0x2f8>)
10004f3e:	781b      	ldrb	r3, [r3, #0]
10004f40:	2b01      	cmp	r3, #1
10004f42:	d000      	beq.n	10004f46 <manage_status_led+0x2ce>
10004f44:	e085      	b.n	10005052 <manage_status_led+0x3da>
					led_pattern_mode = LED_PATTERN_CONTINUOUS;
10004f46:	4b0a      	ldr	r3, [pc, #40]	; (10004f70 <manage_status_led+0x2f8>)
10004f48:	2200      	movs	r2, #0
10004f4a:	701a      	strb	r2, [r3, #0]
					led_status_pattern = led_status_pattern_after_single;
10004f4c:	4b11      	ldr	r3, [pc, #68]	; (10004f94 <manage_status_led+0x31c>)
10004f4e:	781a      	ldrb	r2, [r3, #0]
10004f50:	4b01      	ldr	r3, [pc, #4]	; (10004f58 <manage_status_led+0x2e0>)
10004f52:	701a      	strb	r2, [r3, #0]
10004f54:	e07d      	b.n	10005052 <manage_status_led+0x3da>
10004f56:	46c0      	nop			; (mov r8, r8)
10004f58:	200005da 	.word	0x200005da
10004f5c:	200005db 	.word	0x200005db
10004f60:	10005f0c 	.word	0x10005f0c
10004f64:	20000520 	.word	0x20000520
10004f68:	00002710 	.word	0x00002710
10004f6c:	200005de 	.word	0x200005de
10004f70:	200005dc 	.word	0x200005dc
10004f74:	200005e0 	.word	0x200005e0
10004f78:	2000061c 	.word	0x2000061c
10004f7c:	20000620 	.word	0x20000620
10004f80:	20000622 	.word	0x20000622
10004f84:	200005b2 	.word	0x200005b2
10004f88:	200005b4 	.word	0x200005b4
10004f8c:	20000624 	.word	0x20000624
10004f90:	0000044c 	.word	0x0000044c
10004f94:	200005dd 	.word	0x200005dd
			}
		}
	}

	// Handle LED_FADE_DOWN pattern
	else if(led_status_pattern == LED_FADE_UP){
10004f98:	4b2f      	ldr	r3, [pc, #188]	; (10005058 <manage_status_led+0x3e0>)
10004f9a:	781b      	ldrb	r3, [r3, #0]
10004f9c:	2b04      	cmp	r3, #4
10004f9e:	d158      	bne.n	10005052 <manage_status_led+0x3da>
		if((SYSTIMER_GetTime() - led_pattern_state_timestamp) / 1000 >= led_pattern_state_length){
10004fa0:	f7fd fa5e 	bl	10002460 <SYSTIMER_GetTime>
10004fa4:	1c02      	adds	r2, r0, #0
10004fa6:	4b2d      	ldr	r3, [pc, #180]	; (1000505c <manage_status_led+0x3e4>)
10004fa8:	681b      	ldr	r3, [r3, #0]
10004faa:	1ad3      	subs	r3, r2, r3
10004fac:	1c18      	adds	r0, r3, #0
10004fae:	23fa      	movs	r3, #250	; 0xfa
10004fb0:	0099      	lsls	r1, r3, #2
10004fb2:	f000 fe17 	bl	10005be4 <__aeabi_uidiv>
10004fb6:	1c03      	adds	r3, r0, #0
10004fb8:	1c1a      	adds	r2, r3, #0
10004fba:	4b29      	ldr	r3, [pc, #164]	; (10005060 <manage_status_led+0x3e8>)
10004fbc:	881b      	ldrh	r3, [r3, #0]
10004fbe:	429a      	cmp	r2, r3
10004fc0:	d347      	bcc.n	10005052 <manage_status_led+0x3da>
			// Set intensity of led to a level based on maximum value and current step
			PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF - (led_pattern_state*fade_duty_step) );
10004fc2:	4b28      	ldr	r3, [pc, #160]	; (10005064 <manage_status_led+0x3ec>)
10004fc4:	881b      	ldrh	r3, [r3, #0]
10004fc6:	1c1a      	adds	r2, r3, #0
10004fc8:	4b27      	ldr	r3, [pc, #156]	; (10005068 <manage_status_led+0x3f0>)
10004fca:	881b      	ldrh	r3, [r3, #0]
10004fcc:	4353      	muls	r3, r2
10004fce:	1c1a      	adds	r2, r3, #0
10004fd0:	4b26      	ldr	r3, [pc, #152]	; (1000506c <manage_status_led+0x3f4>)
10004fd2:	1a9b      	subs	r3, r3, r2
10004fd4:	4a26      	ldr	r2, [pc, #152]	; (10005070 <manage_status_led+0x3f8>)
10004fd6:	1c10      	adds	r0, r2, #0
10004fd8:	1c19      	adds	r1, r3, #0
10004fda:	f7fd fd1d 	bl	10002a18 <PWM_CCU4_SetDutyCycle>

			// Store current time
			led_pattern_state_timestamp = SYSTIMER_GetTime();
10004fde:	f7fd fa3f 	bl	10002460 <SYSTIMER_GetTime>
10004fe2:	1c02      	adds	r2, r0, #0
10004fe4:	4b1d      	ldr	r3, [pc, #116]	; (1000505c <manage_status_led+0x3e4>)
10004fe6:	601a      	str	r2, [r3, #0]

			// Next state
			led_pattern_state++;
10004fe8:	4b1e      	ldr	r3, [pc, #120]	; (10005064 <manage_status_led+0x3ec>)
10004fea:	881b      	ldrh	r3, [r3, #0]
10004fec:	3301      	adds	r3, #1
10004fee:	b29a      	uxth	r2, r3
10004ff0:	4b1c      	ldr	r3, [pc, #112]	; (10005064 <manage_status_led+0x3ec>)
10004ff2:	801a      	strh	r2, [r3, #0]

			// Make last state longer
			if(led_pattern_state == led_fadesteps-1)
10004ff4:	4b1b      	ldr	r3, [pc, #108]	; (10005064 <manage_status_led+0x3ec>)
10004ff6:	881b      	ldrh	r3, [r3, #0]
10004ff8:	1c1a      	adds	r2, r3, #0
10004ffa:	4b1e      	ldr	r3, [pc, #120]	; (10005074 <manage_status_led+0x3fc>)
10004ffc:	881b      	ldrh	r3, [r3, #0]
10004ffe:	3b01      	subs	r3, #1
10005000:	429a      	cmp	r2, r3
10005002:	d106      	bne.n	10005012 <manage_status_led+0x39a>
				led_pattern_state_length = led_pattern_state_length + 400;
10005004:	4b16      	ldr	r3, [pc, #88]	; (10005060 <manage_status_led+0x3e8>)
10005006:	881b      	ldrh	r3, [r3, #0]
10005008:	3391      	adds	r3, #145	; 0x91
1000500a:	33ff      	adds	r3, #255	; 0xff
1000500c:	b29a      	uxth	r2, r3
1000500e:	4b14      	ldr	r3, [pc, #80]	; (10005060 <manage_status_led+0x3e8>)
10005010:	801a      	strh	r2, [r3, #0]

			// Check if LED pattern is finished
			if(led_pattern_state >= led_fadesteps){
10005012:	4b14      	ldr	r3, [pc, #80]	; (10005064 <manage_status_led+0x3ec>)
10005014:	881a      	ldrh	r2, [r3, #0]
10005016:	4b17      	ldr	r3, [pc, #92]	; (10005074 <manage_status_led+0x3fc>)
10005018:	881b      	ldrh	r3, [r3, #0]
1000501a:	429a      	cmp	r2, r3
1000501c:	d319      	bcc.n	10005052 <manage_status_led+0x3da>
				if(led_pattern_mode == LED_PATTERN_CONTINUOUS){ // Repeat pattern
1000501e:	4b16      	ldr	r3, [pc, #88]	; (10005078 <manage_status_led+0x400>)
10005020:	781b      	ldrb	r3, [r3, #0]
10005022:	2b00      	cmp	r3, #0
10005024:	d10a      	bne.n	1000503c <manage_status_led+0x3c4>
					led_pattern_state_length = led_pattern_state_length - 400;
10005026:	4b0e      	ldr	r3, [pc, #56]	; (10005060 <manage_status_led+0x3e8>)
10005028:	881b      	ldrh	r3, [r3, #0]
1000502a:	3b91      	subs	r3, #145	; 0x91
1000502c:	3bff      	subs	r3, #255	; 0xff
1000502e:	b29a      	uxth	r2, r3
10005030:	4b0b      	ldr	r3, [pc, #44]	; (10005060 <manage_status_led+0x3e8>)
10005032:	801a      	strh	r2, [r3, #0]
					led_pattern_state = 0;
10005034:	4b0b      	ldr	r3, [pc, #44]	; (10005064 <manage_status_led+0x3ec>)
10005036:	2200      	movs	r2, #0
10005038:	801a      	strh	r2, [r3, #0]
1000503a:	e00a      	b.n	10005052 <manage_status_led+0x3da>
				}
				else if(led_pattern_mode == LED_PATTERN_SINGLE){ // Reset led and pattern mode
1000503c:	4b0e      	ldr	r3, [pc, #56]	; (10005078 <manage_status_led+0x400>)
1000503e:	781b      	ldrb	r3, [r3, #0]
10005040:	2b01      	cmp	r3, #1
10005042:	d106      	bne.n	10005052 <manage_status_led+0x3da>
					led_pattern_mode = LED_PATTERN_CONTINUOUS;
10005044:	4b0c      	ldr	r3, [pc, #48]	; (10005078 <manage_status_led+0x400>)
10005046:	2200      	movs	r2, #0
10005048:	701a      	strb	r2, [r3, #0]
					led_status_pattern = led_status_pattern_after_single;
1000504a:	4b0c      	ldr	r3, [pc, #48]	; (1000507c <manage_status_led+0x404>)
1000504c:	781a      	ldrb	r2, [r3, #0]
1000504e:	4b02      	ldr	r3, [pc, #8]	; (10005058 <manage_status_led+0x3e0>)
10005050:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
10005052:	46bd      	mov	sp, r7
10005054:	b002      	add	sp, #8
10005056:	bd80      	pop	{r7, pc}
10005058:	200005da 	.word	0x200005da
1000505c:	2000061c 	.word	0x2000061c
10005060:	20000620 	.word	0x20000620
10005064:	20000622 	.word	0x20000622
10005068:	20000624 	.word	0x20000624
1000506c:	00002710 	.word	0x00002710
10005070:	20000520 	.word	0x20000520
10005074:	200005b4 	.word	0x200005b4
10005078:	200005dc 	.word	0x200005dc
1000507c:	200005dd 	.word	0x200005dd

10005080 <read_eeprom_setup>:
uint8_t ReadBuffer_LTH[4];
uint8_t ReadBuffer_UTH[4];
uint8_t ReadBuffer_LT[4];

uint8_t EEPROM_WriteBuffer[4];
void read_eeprom_setup(void){
10005080:	b580      	push	{r7, lr}
10005082:	af00      	add	r7, sp, #0
	// Read from EEPROM and interpret value
	E_EEPROM_XMC1_Read(EEPROM_LOWER_TH, 0, ReadBuffer_LTH, 4U);
10005084:	4b74      	ldr	r3, [pc, #464]	; (10005258 <read_eeprom_setup+0x1d8>)
10005086:	2001      	movs	r0, #1
10005088:	2100      	movs	r1, #0
1000508a:	1c1a      	adds	r2, r3, #0
1000508c:	2304      	movs	r3, #4
1000508e:	f7fd fe51 	bl	10002d34 <E_EEPROM_XMC1_Read>
	E_EEPROM_XMC1_Read(EEPROM_UPPER_TH, 0U, ReadBuffer_UTH, 4U);
10005092:	4b72      	ldr	r3, [pc, #456]	; (1000525c <read_eeprom_setup+0x1dc>)
10005094:	2002      	movs	r0, #2
10005096:	2100      	movs	r1, #0
10005098:	1c1a      	adds	r2, r3, #0
1000509a:	2304      	movs	r3, #4
1000509c:	f7fd fe4a 	bl	10002d34 <E_EEPROM_XMC1_Read>
	E_EEPROM_XMC1_Read(EEPROM_LATCHTIME, 0U, ReadBuffer_LT, 4U);
100050a0:	4b6f      	ldr	r3, [pc, #444]	; (10005260 <read_eeprom_setup+0x1e0>)
100050a2:	2003      	movs	r0, #3
100050a4:	2100      	movs	r1, #0
100050a6:	1c1a      	adds	r2, r3, #0
100050a8:	2304      	movs	r3, #4
100050aa:	f7fd fe43 	bl	10002d34 <E_EEPROM_XMC1_Read>
	eeprom_lower = ReadBuffer_LTH[0] + (ReadBuffer_LTH[1] << 8) + (ReadBuffer_LTH[2] << 16) + (ReadBuffer_LTH[3] << 24);
100050ae:	4b6a      	ldr	r3, [pc, #424]	; (10005258 <read_eeprom_setup+0x1d8>)
100050b0:	781b      	ldrb	r3, [r3, #0]
100050b2:	1c1a      	adds	r2, r3, #0
100050b4:	4b68      	ldr	r3, [pc, #416]	; (10005258 <read_eeprom_setup+0x1d8>)
100050b6:	785b      	ldrb	r3, [r3, #1]
100050b8:	021b      	lsls	r3, r3, #8
100050ba:	18d2      	adds	r2, r2, r3
100050bc:	4b66      	ldr	r3, [pc, #408]	; (10005258 <read_eeprom_setup+0x1d8>)
100050be:	789b      	ldrb	r3, [r3, #2]
100050c0:	041b      	lsls	r3, r3, #16
100050c2:	18d2      	adds	r2, r2, r3
100050c4:	4b64      	ldr	r3, [pc, #400]	; (10005258 <read_eeprom_setup+0x1d8>)
100050c6:	78db      	ldrb	r3, [r3, #3]
100050c8:	061b      	lsls	r3, r3, #24
100050ca:	18d2      	adds	r2, r2, r3
100050cc:	4b65      	ldr	r3, [pc, #404]	; (10005264 <read_eeprom_setup+0x1e4>)
100050ce:	601a      	str	r2, [r3, #0]
	eeprom_upper = ReadBuffer_UTH[0] + (ReadBuffer_UTH[1] << 8) + (ReadBuffer_UTH[2] << 16) + (ReadBuffer_UTH[3] << 24);
100050d0:	4b62      	ldr	r3, [pc, #392]	; (1000525c <read_eeprom_setup+0x1dc>)
100050d2:	781b      	ldrb	r3, [r3, #0]
100050d4:	1c1a      	adds	r2, r3, #0
100050d6:	4b61      	ldr	r3, [pc, #388]	; (1000525c <read_eeprom_setup+0x1dc>)
100050d8:	785b      	ldrb	r3, [r3, #1]
100050da:	021b      	lsls	r3, r3, #8
100050dc:	18d2      	adds	r2, r2, r3
100050de:	4b5f      	ldr	r3, [pc, #380]	; (1000525c <read_eeprom_setup+0x1dc>)
100050e0:	789b      	ldrb	r3, [r3, #2]
100050e2:	041b      	lsls	r3, r3, #16
100050e4:	18d2      	adds	r2, r2, r3
100050e6:	4b5d      	ldr	r3, [pc, #372]	; (1000525c <read_eeprom_setup+0x1dc>)
100050e8:	78db      	ldrb	r3, [r3, #3]
100050ea:	061b      	lsls	r3, r3, #24
100050ec:	18d2      	adds	r2, r2, r3
100050ee:	4b5e      	ldr	r3, [pc, #376]	; (10005268 <read_eeprom_setup+0x1e8>)
100050f0:	601a      	str	r2, [r3, #0]
	eeprom_latchtime = ReadBuffer_LT[0] + (ReadBuffer_LT[1] << 8) + (ReadBuffer_LT[2] << 16) + (ReadBuffer_LT[3] << 24);
100050f2:	4b5b      	ldr	r3, [pc, #364]	; (10005260 <read_eeprom_setup+0x1e0>)
100050f4:	781b      	ldrb	r3, [r3, #0]
100050f6:	1c1a      	adds	r2, r3, #0
100050f8:	4b59      	ldr	r3, [pc, #356]	; (10005260 <read_eeprom_setup+0x1e0>)
100050fa:	785b      	ldrb	r3, [r3, #1]
100050fc:	021b      	lsls	r3, r3, #8
100050fe:	18d2      	adds	r2, r2, r3
10005100:	4b57      	ldr	r3, [pc, #348]	; (10005260 <read_eeprom_setup+0x1e0>)
10005102:	789b      	ldrb	r3, [r3, #2]
10005104:	041b      	lsls	r3, r3, #16
10005106:	18d2      	adds	r2, r2, r3
10005108:	4b55      	ldr	r3, [pc, #340]	; (10005260 <read_eeprom_setup+0x1e0>)
1000510a:	78db      	ldrb	r3, [r3, #3]
1000510c:	061b      	lsls	r3, r3, #24
1000510e:	18d2      	adds	r2, r2, r3
10005110:	4b56      	ldr	r3, [pc, #344]	; (1000526c <read_eeprom_setup+0x1ec>)
10005112:	601a      	str	r2, [r3, #0]

	// Check if values make sense, else return to default
	if(eeprom_upper < 0 || eeprom_upper > ADC_THRESHOLD_MAX){
10005114:	4b54      	ldr	r3, [pc, #336]	; (10005268 <read_eeprom_setup+0x1e8>)
10005116:	681b      	ldr	r3, [r3, #0]
10005118:	2b00      	cmp	r3, #0
1000511a:	db04      	blt.n	10005126 <read_eeprom_setup+0xa6>
1000511c:	4b52      	ldr	r3, [pc, #328]	; (10005268 <read_eeprom_setup+0x1e8>)
1000511e:	681b      	ldr	r3, [r3, #0]
10005120:	4a53      	ldr	r2, [pc, #332]	; (10005270 <read_eeprom_setup+0x1f0>)
10005122:	4293      	cmp	r3, r2
10005124:	dd27      	ble.n	10005176 <read_eeprom_setup+0xf6>
		ADC_upper_threshold = ADC_TH_UPPER_DEFAULT;
10005126:	4b53      	ldr	r3, [pc, #332]	; (10005274 <read_eeprom_setup+0x1f4>)
10005128:	4a53      	ldr	r2, [pc, #332]	; (10005278 <read_eeprom_setup+0x1f8>)
1000512a:	601a      	str	r2, [r3, #0]
		// Blink LED for error indication
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
1000512c:	4b53      	ldr	r3, [pc, #332]	; (1000527c <read_eeprom_setup+0x1fc>)
1000512e:	1c18      	adds	r0, r3, #0
10005130:	2100      	movs	r1, #0
10005132:	f7fd fc71 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
10005136:	20c8      	movs	r0, #200	; 0xc8
10005138:	f7ff fd5c 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
1000513c:	4b4f      	ldr	r3, [pc, #316]	; (1000527c <read_eeprom_setup+0x1fc>)
1000513e:	4a50      	ldr	r2, [pc, #320]	; (10005280 <read_eeprom_setup+0x200>)
10005140:	1c18      	adds	r0, r3, #0
10005142:	1c11      	adds	r1, r2, #0
10005144:	f7fd fc68 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
10005148:	20c8      	movs	r0, #200	; 0xc8
1000514a:	f7ff fd53 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
1000514e:	4b4b      	ldr	r3, [pc, #300]	; (1000527c <read_eeprom_setup+0x1fc>)
10005150:	1c18      	adds	r0, r3, #0
10005152:	2100      	movs	r1, #0
10005154:	f7fd fc60 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
10005158:	20c8      	movs	r0, #200	; 0xc8
1000515a:	f7ff fd4b 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
1000515e:	4b47      	ldr	r3, [pc, #284]	; (1000527c <read_eeprom_setup+0x1fc>)
10005160:	4a47      	ldr	r2, [pc, #284]	; (10005280 <read_eeprom_setup+0x200>)
10005162:	1c18      	adds	r0, r3, #0
10005164:	1c11      	adds	r1, r2, #0
10005166:	f7fd fc57 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(600);
1000516a:	2396      	movs	r3, #150	; 0x96
1000516c:	009b      	lsls	r3, r3, #2
1000516e:	1c18      	adds	r0, r3, #0
10005170:	f7ff fd40 	bl	10004bf4 <delay_ms>
10005174:	e003      	b.n	1000517e <read_eeprom_setup+0xfe>
	}
	else{
		ADC_upper_threshold = eeprom_upper;
10005176:	4b3c      	ldr	r3, [pc, #240]	; (10005268 <read_eeprom_setup+0x1e8>)
10005178:	681a      	ldr	r2, [r3, #0]
1000517a:	4b3e      	ldr	r3, [pc, #248]	; (10005274 <read_eeprom_setup+0x1f4>)
1000517c:	601a      	str	r2, [r3, #0]
	}
	if(eeprom_lower < 0 || eeprom_lower > ADC_THRESHOLD_MAX){
1000517e:	4b39      	ldr	r3, [pc, #228]	; (10005264 <read_eeprom_setup+0x1e4>)
10005180:	681b      	ldr	r3, [r3, #0]
10005182:	2b00      	cmp	r3, #0
10005184:	db04      	blt.n	10005190 <read_eeprom_setup+0x110>
10005186:	4b37      	ldr	r3, [pc, #220]	; (10005264 <read_eeprom_setup+0x1e4>)
10005188:	681b      	ldr	r3, [r3, #0]
1000518a:	4a39      	ldr	r2, [pc, #228]	; (10005270 <read_eeprom_setup+0x1f0>)
1000518c:	4293      	cmp	r3, r2
1000518e:	dd27      	ble.n	100051e0 <read_eeprom_setup+0x160>
		ADC_lower_threshold = ADC_TH_LOWER_DEFAULT;
10005190:	4b3c      	ldr	r3, [pc, #240]	; (10005284 <read_eeprom_setup+0x204>)
10005192:	4a3d      	ldr	r2, [pc, #244]	; (10005288 <read_eeprom_setup+0x208>)
10005194:	601a      	str	r2, [r3, #0]
		// Blink LED for error indication
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10005196:	4b39      	ldr	r3, [pc, #228]	; (1000527c <read_eeprom_setup+0x1fc>)
10005198:	1c18      	adds	r0, r3, #0
1000519a:	2100      	movs	r1, #0
1000519c:	f7fd fc3c 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
100051a0:	20c8      	movs	r0, #200	; 0xc8
100051a2:	f7ff fd27 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
100051a6:	4b35      	ldr	r3, [pc, #212]	; (1000527c <read_eeprom_setup+0x1fc>)
100051a8:	4a35      	ldr	r2, [pc, #212]	; (10005280 <read_eeprom_setup+0x200>)
100051aa:	1c18      	adds	r0, r3, #0
100051ac:	1c11      	adds	r1, r2, #0
100051ae:	f7fd fc33 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
100051b2:	20c8      	movs	r0, #200	; 0xc8
100051b4:	f7ff fd1e 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
100051b8:	4b30      	ldr	r3, [pc, #192]	; (1000527c <read_eeprom_setup+0x1fc>)
100051ba:	1c18      	adds	r0, r3, #0
100051bc:	2100      	movs	r1, #0
100051be:	f7fd fc2b 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
100051c2:	20c8      	movs	r0, #200	; 0xc8
100051c4:	f7ff fd16 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
100051c8:	4b2c      	ldr	r3, [pc, #176]	; (1000527c <read_eeprom_setup+0x1fc>)
100051ca:	4a2d      	ldr	r2, [pc, #180]	; (10005280 <read_eeprom_setup+0x200>)
100051cc:	1c18      	adds	r0, r3, #0
100051ce:	1c11      	adds	r1, r2, #0
100051d0:	f7fd fc22 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(600);
100051d4:	2396      	movs	r3, #150	; 0x96
100051d6:	009b      	lsls	r3, r3, #2
100051d8:	1c18      	adds	r0, r3, #0
100051da:	f7ff fd0b 	bl	10004bf4 <delay_ms>
100051de:	e003      	b.n	100051e8 <read_eeprom_setup+0x168>
	}
	else{
		ADC_lower_threshold = eeprom_lower;
100051e0:	4b20      	ldr	r3, [pc, #128]	; (10005264 <read_eeprom_setup+0x1e4>)
100051e2:	681a      	ldr	r2, [r3, #0]
100051e4:	4b27      	ldr	r3, [pc, #156]	; (10005284 <read_eeprom_setup+0x204>)
100051e6:	601a      	str	r2, [r3, #0]
	}
	if(eeprom_latchtime < 0 || eeprom_latchtime > ADC_THRESHOLD_MAX){
100051e8:	4b20      	ldr	r3, [pc, #128]	; (1000526c <read_eeprom_setup+0x1ec>)
100051ea:	681b      	ldr	r3, [r3, #0]
100051ec:	2b00      	cmp	r3, #0
100051ee:	db04      	blt.n	100051fa <read_eeprom_setup+0x17a>
100051f0:	4b1e      	ldr	r3, [pc, #120]	; (1000526c <read_eeprom_setup+0x1ec>)
100051f2:	681b      	ldr	r3, [r3, #0]
100051f4:	4a1e      	ldr	r2, [pc, #120]	; (10005270 <read_eeprom_setup+0x1f0>)
100051f6:	4293      	cmp	r3, r2
100051f8:	dd28      	ble.n	1000524c <read_eeprom_setup+0x1cc>
		relay_threshold_latchtime = RELAY_LATCHTIME_DEFAULT;
100051fa:	4b24      	ldr	r3, [pc, #144]	; (1000528c <read_eeprom_setup+0x20c>)
100051fc:	22fa      	movs	r2, #250	; 0xfa
100051fe:	0052      	lsls	r2, r2, #1
10005200:	601a      	str	r2, [r3, #0]
		// Blink LED for error indication
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10005202:	4b1e      	ldr	r3, [pc, #120]	; (1000527c <read_eeprom_setup+0x1fc>)
10005204:	1c18      	adds	r0, r3, #0
10005206:	2100      	movs	r1, #0
10005208:	f7fd fc06 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
1000520c:	20c8      	movs	r0, #200	; 0xc8
1000520e:	f7ff fcf1 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10005212:	4b1a      	ldr	r3, [pc, #104]	; (1000527c <read_eeprom_setup+0x1fc>)
10005214:	4a1a      	ldr	r2, [pc, #104]	; (10005280 <read_eeprom_setup+0x200>)
10005216:	1c18      	adds	r0, r3, #0
10005218:	1c11      	adds	r1, r2, #0
1000521a:	f7fd fbfd 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
1000521e:	20c8      	movs	r0, #200	; 0xc8
10005220:	f7ff fce8 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10005224:	4b15      	ldr	r3, [pc, #84]	; (1000527c <read_eeprom_setup+0x1fc>)
10005226:	1c18      	adds	r0, r3, #0
10005228:	2100      	movs	r1, #0
1000522a:	f7fd fbf5 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(200);
1000522e:	20c8      	movs	r0, #200	; 0xc8
10005230:	f7ff fce0 	bl	10004bf4 <delay_ms>
		PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
10005234:	4b11      	ldr	r3, [pc, #68]	; (1000527c <read_eeprom_setup+0x1fc>)
10005236:	4a12      	ldr	r2, [pc, #72]	; (10005280 <read_eeprom_setup+0x200>)
10005238:	1c18      	adds	r0, r3, #0
1000523a:	1c11      	adds	r1, r2, #0
1000523c:	f7fd fbec 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
		delay_ms(300);
10005240:	2396      	movs	r3, #150	; 0x96
10005242:	005b      	lsls	r3, r3, #1
10005244:	1c18      	adds	r0, r3, #0
10005246:	f7ff fcd5 	bl	10004bf4 <delay_ms>
1000524a:	e003      	b.n	10005254 <read_eeprom_setup+0x1d4>
	}
	else{
		relay_threshold_latchtime = eeprom_latchtime;
1000524c:	4b07      	ldr	r3, [pc, #28]	; (1000526c <read_eeprom_setup+0x1ec>)
1000524e:	681a      	ldr	r2, [r3, #0]
10005250:	4b0e      	ldr	r3, [pc, #56]	; (1000528c <read_eeprom_setup+0x20c>)
10005252:	601a      	str	r2, [r3, #0]
	//
	//uint16_t temp16 = 1015;
	//EEPROM_WriteBuffer[0] = (uint8_t)temp16;
	//EEPROM_WriteBuffer[1] = (uint8_t)(temp16 >> 8);
	//E_EEPROM_XMC1_Write(EEPROM_LATCHTIME, EEPROM_WriteBuffer);
}
10005254:	46bd      	mov	sp, r7
10005256:	bd80      	pop	{r7, pc}
10005258:	200008c0 	.word	0x200008c0
1000525c:	200008c8 	.word	0x200008c8
10005260:	200008c4 	.word	0x200008c4
10005264:	20000614 	.word	0x20000614
10005268:	20000610 	.word	0x20000610
1000526c:	2000060c 	.word	0x2000060c
10005270:	00000fff 	.word	0x00000fff
10005274:	200005a8 	.word	0x200005a8
10005278:	00000db6 	.word	0x00000db6
1000527c:	20000520 	.word	0x20000520
10005280:	00002710 	.word	0x00002710
10005284:	200005ac 	.word	0x200005ac
10005288:	00000249 	.word	0x00000249
1000528c:	200005a4 	.word	0x200005a4

10005290 <write_eeprom_setup>:

void write_eeprom_setup(uint8_t block_number, int32_t value){
10005290:	b580      	push	{r7, lr}
10005292:	b082      	sub	sp, #8
10005294:	af00      	add	r7, sp, #0
10005296:	1c02      	adds	r2, r0, #0
10005298:	6039      	str	r1, [r7, #0]
1000529a:	1dfb      	adds	r3, r7, #7
1000529c:	701a      	strb	r2, [r3, #0]
	EEPROM_WriteBuffer[0] = (uint8_t)value;
1000529e:	683b      	ldr	r3, [r7, #0]
100052a0:	b2da      	uxtb	r2, r3
100052a2:	4b0d      	ldr	r3, [pc, #52]	; (100052d8 <write_eeprom_setup+0x48>)
100052a4:	701a      	strb	r2, [r3, #0]
	EEPROM_WriteBuffer[1] = (uint8_t)(value >> 8);
100052a6:	683b      	ldr	r3, [r7, #0]
100052a8:	121b      	asrs	r3, r3, #8
100052aa:	b2da      	uxtb	r2, r3
100052ac:	4b0a      	ldr	r3, [pc, #40]	; (100052d8 <write_eeprom_setup+0x48>)
100052ae:	705a      	strb	r2, [r3, #1]
	EEPROM_WriteBuffer[2] = (uint8_t)(value >> 16);
100052b0:	683b      	ldr	r3, [r7, #0]
100052b2:	141b      	asrs	r3, r3, #16
100052b4:	b2da      	uxtb	r2, r3
100052b6:	4b08      	ldr	r3, [pc, #32]	; (100052d8 <write_eeprom_setup+0x48>)
100052b8:	709a      	strb	r2, [r3, #2]
	EEPROM_WriteBuffer[3] = (uint8_t)(value >> 24);
100052ba:	683b      	ldr	r3, [r7, #0]
100052bc:	161b      	asrs	r3, r3, #24
100052be:	b2da      	uxtb	r2, r3
100052c0:	4b05      	ldr	r3, [pc, #20]	; (100052d8 <write_eeprom_setup+0x48>)
100052c2:	70da      	strb	r2, [r3, #3]
	E_EEPROM_XMC1_Write(block_number, EEPROM_WriteBuffer);
100052c4:	1dfb      	adds	r3, r7, #7
100052c6:	781a      	ldrb	r2, [r3, #0]
100052c8:	4b03      	ldr	r3, [pc, #12]	; (100052d8 <write_eeprom_setup+0x48>)
100052ca:	1c10      	adds	r0, r2, #0
100052cc:	1c19      	adds	r1, r3, #0
100052ce:	f7fd fd07 	bl	10002ce0 <E_EEPROM_XMC1_Write>

}
100052d2:	46bd      	mov	sp, r7
100052d4:	b002      	add	sp, #8
100052d6:	bd80      	pop	{r7, pc}
100052d8:	200008cc 	.word	0x200008cc

100052dc <manage_buttons>:

//****************************************************************************
// manage_buttons - function to manage, debounce and interpret button presses
//****************************************************************************
void manage_buttons(void)
{
100052dc:	b580      	push	{r7, lr}
100052de:	af00      	add	r7, sp, #0
	/// Detect start of press and save current system time
	if(button_usb_pressed_timestamp == 0 && DIGITAL_IO_GetInput(&IO_SW_USB) == SW_ON)
100052e0:	4b8f      	ldr	r3, [pc, #572]	; (10005520 <manage_buttons+0x244>)
100052e2:	681b      	ldr	r3, [r3, #0]
100052e4:	2b00      	cmp	r3, #0
100052e6:	d10a      	bne.n	100052fe <manage_buttons+0x22>
100052e8:	4b8e      	ldr	r3, [pc, #568]	; (10005524 <manage_buttons+0x248>)
100052ea:	1c18      	adds	r0, r3, #0
100052ec:	f7ff fc70 	bl	10004bd0 <DIGITAL_IO_GetInput>
100052f0:	1e03      	subs	r3, r0, #0
100052f2:	d104      	bne.n	100052fe <manage_buttons+0x22>
		button_usb_pressed_timestamp = SYSTIMER_GetTime();
100052f4:	f7fd f8b4 	bl	10002460 <SYSTIMER_GetTime>
100052f8:	1c02      	adds	r2, r0, #0
100052fa:	4b89      	ldr	r3, [pc, #548]	; (10005520 <manage_buttons+0x244>)
100052fc:	601a      	str	r2, [r3, #0]
	if(button_up_pressed_timestamp == 0 && DIGITAL_IO_GetInput(&IO_SW_UP) == SW_ON)
100052fe:	4b8a      	ldr	r3, [pc, #552]	; (10005528 <manage_buttons+0x24c>)
10005300:	681b      	ldr	r3, [r3, #0]
10005302:	2b00      	cmp	r3, #0
10005304:	d10a      	bne.n	1000531c <manage_buttons+0x40>
10005306:	4b89      	ldr	r3, [pc, #548]	; (1000552c <manage_buttons+0x250>)
10005308:	1c18      	adds	r0, r3, #0
1000530a:	f7ff fc61 	bl	10004bd0 <DIGITAL_IO_GetInput>
1000530e:	1e03      	subs	r3, r0, #0
10005310:	d104      	bne.n	1000531c <manage_buttons+0x40>
		button_up_pressed_timestamp = SYSTIMER_GetTime();
10005312:	f7fd f8a5 	bl	10002460 <SYSTIMER_GetTime>
10005316:	1c02      	adds	r2, r0, #0
10005318:	4b83      	ldr	r3, [pc, #524]	; (10005528 <manage_buttons+0x24c>)
1000531a:	601a      	str	r2, [r3, #0]
	if(button_down_pressed_timestamp == 0 && DIGITAL_IO_GetInput(&IO_SW_DOWN) == SW_ON)
1000531c:	4b84      	ldr	r3, [pc, #528]	; (10005530 <manage_buttons+0x254>)
1000531e:	681b      	ldr	r3, [r3, #0]
10005320:	2b00      	cmp	r3, #0
10005322:	d10a      	bne.n	1000533a <manage_buttons+0x5e>
10005324:	4b83      	ldr	r3, [pc, #524]	; (10005534 <manage_buttons+0x258>)
10005326:	1c18      	adds	r0, r3, #0
10005328:	f7ff fc52 	bl	10004bd0 <DIGITAL_IO_GetInput>
1000532c:	1e03      	subs	r3, r0, #0
1000532e:	d104      	bne.n	1000533a <manage_buttons+0x5e>
		button_down_pressed_timestamp = SYSTIMER_GetTime();
10005330:	f7fd f896 	bl	10002460 <SYSTIMER_GetTime>
10005334:	1c02      	adds	r2, r0, #0
10005336:	4b7e      	ldr	r3, [pc, #504]	; (10005530 <manage_buttons+0x254>)
10005338:	601a      	str	r2, [r3, #0]

	// USB BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_usb_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_USB) == SW_OFF){
1000533a:	4b79      	ldr	r3, [pc, #484]	; (10005520 <manage_buttons+0x244>)
1000533c:	681b      	ldr	r3, [r3, #0]
1000533e:	2b00      	cmp	r3, #0
10005340:	d033      	beq.n	100053aa <manage_buttons+0xce>
10005342:	4b78      	ldr	r3, [pc, #480]	; (10005524 <manage_buttons+0x248>)
10005344:	1c18      	adds	r0, r3, #0
10005346:	f7ff fc43 	bl	10004bd0 <DIGITAL_IO_GetInput>
1000534a:	1e03      	subs	r3, r0, #0
1000534c:	2b01      	cmp	r3, #1
1000534e:	d12c      	bne.n	100053aa <manage_buttons+0xce>
		button_usb_pressed_duration = (SYSTIMER_GetTime() - button_usb_pressed_timestamp) / 1000; // convert us to ms
10005350:	f7fd f886 	bl	10002460 <SYSTIMER_GetTime>
10005354:	1c02      	adds	r2, r0, #0
10005356:	4b72      	ldr	r3, [pc, #456]	; (10005520 <manage_buttons+0x244>)
10005358:	681b      	ldr	r3, [r3, #0]
1000535a:	1ad3      	subs	r3, r2, r3
1000535c:	1c18      	adds	r0, r3, #0
1000535e:	23fa      	movs	r3, #250	; 0xfa
10005360:	0099      	lsls	r1, r3, #2
10005362:	f000 fc3f 	bl	10005be4 <__aeabi_uidiv>
10005366:	1c03      	adds	r3, r0, #0
10005368:	b29a      	uxth	r2, r3
1000536a:	4b73      	ldr	r3, [pc, #460]	; (10005538 <manage_buttons+0x25c>)
1000536c:	801a      	strh	r2, [r3, #0]
		button_usb_pressed_timestamp = 0;
1000536e:	4b6c      	ldr	r3, [pc, #432]	; (10005520 <manage_buttons+0x244>)
10005370:	2200      	movs	r2, #0
10005372:	601a      	str	r2, [r3, #0]
		// Interpret button press and activate "button pressed" marker
		if(button_usb_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
10005374:	4b70      	ldr	r3, [pc, #448]	; (10005538 <manage_buttons+0x25c>)
10005376:	881b      	ldrh	r3, [r3, #0]
10005378:	4a70      	ldr	r2, [pc, #448]	; (1000553c <manage_buttons+0x260>)
1000537a:	4293      	cmp	r3, r2
1000537c:	d903      	bls.n	10005386 <manage_buttons+0xaa>
			buttonpress_usb = BTNPRESS_NOT; // In this case the press is already handled
1000537e:	4b70      	ldr	r3, [pc, #448]	; (10005540 <manage_buttons+0x264>)
10005380:	2200      	movs	r2, #0
10005382:	701a      	strb	r2, [r3, #0]
10005384:	e010      	b.n	100053a8 <manage_buttons+0xcc>
		else if(button_usb_pressed_duration >= BTN_LONG_PRESS_DURATION)
10005386:	4b6c      	ldr	r3, [pc, #432]	; (10005538 <manage_buttons+0x25c>)
10005388:	881b      	ldrh	r3, [r3, #0]
1000538a:	4a6e      	ldr	r2, [pc, #440]	; (10005544 <manage_buttons+0x268>)
1000538c:	4293      	cmp	r3, r2
1000538e:	d903      	bls.n	10005398 <manage_buttons+0xbc>
			buttonpress_usb = BTNPRESS_LONG;
10005390:	4b6b      	ldr	r3, [pc, #428]	; (10005540 <manage_buttons+0x264>)
10005392:	2202      	movs	r2, #2
10005394:	701a      	strb	r2, [r3, #0]
10005396:	e007      	b.n	100053a8 <manage_buttons+0xcc>
		else if(button_usb_pressed_duration >= BTN_STD_PRESS_DURATION)
10005398:	4b67      	ldr	r3, [pc, #412]	; (10005538 <manage_buttons+0x25c>)
1000539a:	881b      	ldrh	r3, [r3, #0]
1000539c:	2b3b      	cmp	r3, #59	; 0x3b
1000539e:	d903      	bls.n	100053a8 <manage_buttons+0xcc>
			buttonpress_usb = BTNPRESS_STD;
100053a0:	4b67      	ldr	r3, [pc, #412]	; (10005540 <manage_buttons+0x264>)
100053a2:	2201      	movs	r2, #1
100053a4:	701a      	strb	r2, [r3, #0]
	// USB BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_usb_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_USB) == SW_OFF){
		button_usb_pressed_duration = (SYSTIMER_GetTime() - button_usb_pressed_timestamp) / 1000; // convert us to ms
		button_usb_pressed_timestamp = 0;
		// Interpret button press and activate "button pressed" marker
		if(button_usb_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
100053a6:	e018      	b.n	100053da <manage_buttons+0xfe>
100053a8:	e017      	b.n	100053da <manage_buttons+0xfe>
			buttonpress_usb = BTNPRESS_LONG;
		else if(button_usb_pressed_duration >= BTN_STD_PRESS_DURATION)
			buttonpress_usb = BTNPRESS_STD;
	}
	// USB BUTTON: If press is to long reset (simulate that press ended)
	else if(button_usb_pressed_timestamp != 0 && button_usb_pressed_timestamp != TIMESTAMP_DEACTIVATED && ((SYSTIMER_GetTime() - button_usb_pressed_timestamp) / 1000) > BTN_LONGEST_PRESS_DURATION){
100053aa:	4b5d      	ldr	r3, [pc, #372]	; (10005520 <manage_buttons+0x244>)
100053ac:	681b      	ldr	r3, [r3, #0]
100053ae:	2b00      	cmp	r3, #0
100053b0:	d013      	beq.n	100053da <manage_buttons+0xfe>
100053b2:	4b5b      	ldr	r3, [pc, #364]	; (10005520 <manage_buttons+0x244>)
100053b4:	681b      	ldr	r3, [r3, #0]
100053b6:	3301      	adds	r3, #1
100053b8:	d00f      	beq.n	100053da <manage_buttons+0xfe>
100053ba:	f7fd f851 	bl	10002460 <SYSTIMER_GetTime>
100053be:	1c02      	adds	r2, r0, #0
100053c0:	4b57      	ldr	r3, [pc, #348]	; (10005520 <manage_buttons+0x244>)
100053c2:	681b      	ldr	r3, [r3, #0]
100053c4:	1ad3      	subs	r3, r2, r3
100053c6:	4a60      	ldr	r2, [pc, #384]	; (10005548 <manage_buttons+0x26c>)
100053c8:	4293      	cmp	r3, r2
100053ca:	d906      	bls.n	100053da <manage_buttons+0xfe>
		button_usb_pressed_timestamp = TIMESTAMP_DEACTIVATED; // deactivate timestamp till button is released
100053cc:	4b54      	ldr	r3, [pc, #336]	; (10005520 <manage_buttons+0x244>)
100053ce:	2201      	movs	r2, #1
100053d0:	4252      	negs	r2, r2
100053d2:	601a      	str	r2, [r3, #0]
		buttonpress_usb = BTNPRESS_LONGEST;
100053d4:	4b5a      	ldr	r3, [pc, #360]	; (10005540 <manage_buttons+0x264>)
100053d6:	2203      	movs	r2, #3
100053d8:	701a      	strb	r2, [r3, #0]
	}

	// UP BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_up_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_UP) == SW_OFF){
100053da:	4b53      	ldr	r3, [pc, #332]	; (10005528 <manage_buttons+0x24c>)
100053dc:	681b      	ldr	r3, [r3, #0]
100053de:	2b00      	cmp	r3, #0
100053e0:	d033      	beq.n	1000544a <manage_buttons+0x16e>
100053e2:	4b52      	ldr	r3, [pc, #328]	; (1000552c <manage_buttons+0x250>)
100053e4:	1c18      	adds	r0, r3, #0
100053e6:	f7ff fbf3 	bl	10004bd0 <DIGITAL_IO_GetInput>
100053ea:	1e03      	subs	r3, r0, #0
100053ec:	2b01      	cmp	r3, #1
100053ee:	d12c      	bne.n	1000544a <manage_buttons+0x16e>
		button_up_pressed_duration = (SYSTIMER_GetTime() - button_up_pressed_timestamp) / 1000; // convert us to ms
100053f0:	f7fd f836 	bl	10002460 <SYSTIMER_GetTime>
100053f4:	1c02      	adds	r2, r0, #0
100053f6:	4b4c      	ldr	r3, [pc, #304]	; (10005528 <manage_buttons+0x24c>)
100053f8:	681b      	ldr	r3, [r3, #0]
100053fa:	1ad3      	subs	r3, r2, r3
100053fc:	1c18      	adds	r0, r3, #0
100053fe:	23fa      	movs	r3, #250	; 0xfa
10005400:	0099      	lsls	r1, r3, #2
10005402:	f000 fbef 	bl	10005be4 <__aeabi_uidiv>
10005406:	1c03      	adds	r3, r0, #0
10005408:	b29a      	uxth	r2, r3
1000540a:	4b50      	ldr	r3, [pc, #320]	; (1000554c <manage_buttons+0x270>)
1000540c:	801a      	strh	r2, [r3, #0]
		button_up_pressed_timestamp = 0;
1000540e:	4b46      	ldr	r3, [pc, #280]	; (10005528 <manage_buttons+0x24c>)
10005410:	2200      	movs	r2, #0
10005412:	601a      	str	r2, [r3, #0]
		// Interpret button press and activate "button pressed" marker
		if(button_up_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
10005414:	4b4d      	ldr	r3, [pc, #308]	; (1000554c <manage_buttons+0x270>)
10005416:	881b      	ldrh	r3, [r3, #0]
10005418:	4a48      	ldr	r2, [pc, #288]	; (1000553c <manage_buttons+0x260>)
1000541a:	4293      	cmp	r3, r2
1000541c:	d903      	bls.n	10005426 <manage_buttons+0x14a>
			buttonpress_up = BTNPRESS_NOT; // In this case the press is already handled
1000541e:	4b4c      	ldr	r3, [pc, #304]	; (10005550 <manage_buttons+0x274>)
10005420:	2200      	movs	r2, #0
10005422:	701a      	strb	r2, [r3, #0]
10005424:	e010      	b.n	10005448 <manage_buttons+0x16c>
		else if(button_up_pressed_duration >= BTN_LONG_PRESS_DURATION)
10005426:	4b49      	ldr	r3, [pc, #292]	; (1000554c <manage_buttons+0x270>)
10005428:	881b      	ldrh	r3, [r3, #0]
1000542a:	4a46      	ldr	r2, [pc, #280]	; (10005544 <manage_buttons+0x268>)
1000542c:	4293      	cmp	r3, r2
1000542e:	d903      	bls.n	10005438 <manage_buttons+0x15c>
			buttonpress_up = BTNPRESS_LONG;
10005430:	4b47      	ldr	r3, [pc, #284]	; (10005550 <manage_buttons+0x274>)
10005432:	2202      	movs	r2, #2
10005434:	701a      	strb	r2, [r3, #0]
10005436:	e007      	b.n	10005448 <manage_buttons+0x16c>
		else if(button_up_pressed_duration >= BTN_STD_PRESS_DURATION)
10005438:	4b44      	ldr	r3, [pc, #272]	; (1000554c <manage_buttons+0x270>)
1000543a:	881b      	ldrh	r3, [r3, #0]
1000543c:	2b3b      	cmp	r3, #59	; 0x3b
1000543e:	d903      	bls.n	10005448 <manage_buttons+0x16c>
			buttonpress_up = BTNPRESS_STD;
10005440:	4b43      	ldr	r3, [pc, #268]	; (10005550 <manage_buttons+0x274>)
10005442:	2201      	movs	r2, #1
10005444:	701a      	strb	r2, [r3, #0]
	// UP BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_up_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_UP) == SW_OFF){
		button_up_pressed_duration = (SYSTIMER_GetTime() - button_up_pressed_timestamp) / 1000; // convert us to ms
		button_up_pressed_timestamp = 0;
		// Interpret button press and activate "button pressed" marker
		if(button_up_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
10005446:	e018      	b.n	1000547a <manage_buttons+0x19e>
10005448:	e017      	b.n	1000547a <manage_buttons+0x19e>
		else if(button_up_pressed_duration >= BTN_STD_PRESS_DURATION)
			buttonpress_up = BTNPRESS_STD;

	}
	// UP BUTTON: If press is to long reset (simulate that press ended)
	else if(button_up_pressed_timestamp != 0 && button_up_pressed_timestamp != TIMESTAMP_DEACTIVATED && ((SYSTIMER_GetTime() - button_up_pressed_timestamp) / 1000) > BTN_LONGEST_PRESS_DURATION){
1000544a:	4b37      	ldr	r3, [pc, #220]	; (10005528 <manage_buttons+0x24c>)
1000544c:	681b      	ldr	r3, [r3, #0]
1000544e:	2b00      	cmp	r3, #0
10005450:	d013      	beq.n	1000547a <manage_buttons+0x19e>
10005452:	4b35      	ldr	r3, [pc, #212]	; (10005528 <manage_buttons+0x24c>)
10005454:	681b      	ldr	r3, [r3, #0]
10005456:	3301      	adds	r3, #1
10005458:	d00f      	beq.n	1000547a <manage_buttons+0x19e>
1000545a:	f7fd f801 	bl	10002460 <SYSTIMER_GetTime>
1000545e:	1c02      	adds	r2, r0, #0
10005460:	4b31      	ldr	r3, [pc, #196]	; (10005528 <manage_buttons+0x24c>)
10005462:	681b      	ldr	r3, [r3, #0]
10005464:	1ad3      	subs	r3, r2, r3
10005466:	4a38      	ldr	r2, [pc, #224]	; (10005548 <manage_buttons+0x26c>)
10005468:	4293      	cmp	r3, r2
1000546a:	d906      	bls.n	1000547a <manage_buttons+0x19e>
		button_up_pressed_timestamp = TIMESTAMP_DEACTIVATED;
1000546c:	4b2e      	ldr	r3, [pc, #184]	; (10005528 <manage_buttons+0x24c>)
1000546e:	2201      	movs	r2, #1
10005470:	4252      	negs	r2, r2
10005472:	601a      	str	r2, [r3, #0]
		buttonpress_up = BTNPRESS_LONGEST;
10005474:	4b36      	ldr	r3, [pc, #216]	; (10005550 <manage_buttons+0x274>)
10005476:	2203      	movs	r2, #3
10005478:	701a      	strb	r2, [r3, #0]
	}

	// DOWN BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_down_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_DOWN) == SW_OFF){
1000547a:	4b2d      	ldr	r3, [pc, #180]	; (10005530 <manage_buttons+0x254>)
1000547c:	681b      	ldr	r3, [r3, #0]
1000547e:	2b00      	cmp	r3, #0
10005480:	d033      	beq.n	100054ea <manage_buttons+0x20e>
10005482:	4b2c      	ldr	r3, [pc, #176]	; (10005534 <manage_buttons+0x258>)
10005484:	1c18      	adds	r0, r3, #0
10005486:	f7ff fba3 	bl	10004bd0 <DIGITAL_IO_GetInput>
1000548a:	1e03      	subs	r3, r0, #0
1000548c:	2b01      	cmp	r3, #1
1000548e:	d12c      	bne.n	100054ea <manage_buttons+0x20e>
		button_down_pressed_duration = (SYSTIMER_GetTime() - button_down_pressed_timestamp) / 1000; // convert us to ms
10005490:	f7fc ffe6 	bl	10002460 <SYSTIMER_GetTime>
10005494:	1c02      	adds	r2, r0, #0
10005496:	4b26      	ldr	r3, [pc, #152]	; (10005530 <manage_buttons+0x254>)
10005498:	681b      	ldr	r3, [r3, #0]
1000549a:	1ad3      	subs	r3, r2, r3
1000549c:	1c18      	adds	r0, r3, #0
1000549e:	23fa      	movs	r3, #250	; 0xfa
100054a0:	0099      	lsls	r1, r3, #2
100054a2:	f000 fb9f 	bl	10005be4 <__aeabi_uidiv>
100054a6:	1c03      	adds	r3, r0, #0
100054a8:	b29a      	uxth	r2, r3
100054aa:	4b2a      	ldr	r3, [pc, #168]	; (10005554 <manage_buttons+0x278>)
100054ac:	801a      	strh	r2, [r3, #0]
		button_down_pressed_timestamp = 0;
100054ae:	4b20      	ldr	r3, [pc, #128]	; (10005530 <manage_buttons+0x254>)
100054b0:	2200      	movs	r2, #0
100054b2:	601a      	str	r2, [r3, #0]
		// Interpret button press and activate "button pressed" marker. The code that is reacting to it must reset it afterwards!
		if(button_down_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
100054b4:	4b27      	ldr	r3, [pc, #156]	; (10005554 <manage_buttons+0x278>)
100054b6:	881b      	ldrh	r3, [r3, #0]
100054b8:	4a20      	ldr	r2, [pc, #128]	; (1000553c <manage_buttons+0x260>)
100054ba:	4293      	cmp	r3, r2
100054bc:	d903      	bls.n	100054c6 <manage_buttons+0x1ea>
			buttonpress_down = BTNPRESS_NOT; // In this case the press is already handled
100054be:	4b26      	ldr	r3, [pc, #152]	; (10005558 <manage_buttons+0x27c>)
100054c0:	2200      	movs	r2, #0
100054c2:	701a      	strb	r2, [r3, #0]
100054c4:	e010      	b.n	100054e8 <manage_buttons+0x20c>
		else if(button_down_pressed_duration >= BTN_LONG_PRESS_DURATION)
100054c6:	4b23      	ldr	r3, [pc, #140]	; (10005554 <manage_buttons+0x278>)
100054c8:	881b      	ldrh	r3, [r3, #0]
100054ca:	4a1e      	ldr	r2, [pc, #120]	; (10005544 <manage_buttons+0x268>)
100054cc:	4293      	cmp	r3, r2
100054ce:	d903      	bls.n	100054d8 <manage_buttons+0x1fc>
			buttonpress_down = BTNPRESS_LONG;
100054d0:	4b21      	ldr	r3, [pc, #132]	; (10005558 <manage_buttons+0x27c>)
100054d2:	2202      	movs	r2, #2
100054d4:	701a      	strb	r2, [r3, #0]
100054d6:	e007      	b.n	100054e8 <manage_buttons+0x20c>
		else if(button_down_pressed_duration >= BTN_STD_PRESS_DURATION)
100054d8:	4b1e      	ldr	r3, [pc, #120]	; (10005554 <manage_buttons+0x278>)
100054da:	881b      	ldrh	r3, [r3, #0]
100054dc:	2b3b      	cmp	r3, #59	; 0x3b
100054de:	d903      	bls.n	100054e8 <manage_buttons+0x20c>
			buttonpress_down = BTNPRESS_STD;
100054e0:	4b1d      	ldr	r3, [pc, #116]	; (10005558 <manage_buttons+0x27c>)
100054e2:	2201      	movs	r2, #1
100054e4:	701a      	strb	r2, [r3, #0]
	// DOWN BUTTON: If a press in ongoing and release is detected, calculate time difference
	if(button_down_pressed_timestamp != 0 && DIGITAL_IO_GetInput(&IO_SW_DOWN) == SW_OFF){
		button_down_pressed_duration = (SYSTIMER_GetTime() - button_down_pressed_timestamp) / 1000; // convert us to ms
		button_down_pressed_timestamp = 0;
		// Interpret button press and activate "button pressed" marker. The code that is reacting to it must reset it afterwards!
		if(button_down_pressed_duration >= BTN_LONGEST_PRESS_DURATION)
100054e6:	e018      	b.n	1000551a <manage_buttons+0x23e>
100054e8:	e017      	b.n	1000551a <manage_buttons+0x23e>
			buttonpress_down = BTNPRESS_LONG;
		else if(button_down_pressed_duration >= BTN_STD_PRESS_DURATION)
			buttonpress_down = BTNPRESS_STD;
	}
	// DOWN BUTTON: If press is to long reset (simulate that press ended)
	else if(button_down_pressed_timestamp != 0 && button_down_pressed_timestamp != TIMESTAMP_DEACTIVATED && ((SYSTIMER_GetTime() - button_down_pressed_timestamp) / 1000) > BTN_LONGEST_PRESS_DURATION){
100054ea:	4b11      	ldr	r3, [pc, #68]	; (10005530 <manage_buttons+0x254>)
100054ec:	681b      	ldr	r3, [r3, #0]
100054ee:	2b00      	cmp	r3, #0
100054f0:	d013      	beq.n	1000551a <manage_buttons+0x23e>
100054f2:	4b0f      	ldr	r3, [pc, #60]	; (10005530 <manage_buttons+0x254>)
100054f4:	681b      	ldr	r3, [r3, #0]
100054f6:	3301      	adds	r3, #1
100054f8:	d00f      	beq.n	1000551a <manage_buttons+0x23e>
100054fa:	f7fc ffb1 	bl	10002460 <SYSTIMER_GetTime>
100054fe:	1c02      	adds	r2, r0, #0
10005500:	4b0b      	ldr	r3, [pc, #44]	; (10005530 <manage_buttons+0x254>)
10005502:	681b      	ldr	r3, [r3, #0]
10005504:	1ad3      	subs	r3, r2, r3
10005506:	4a10      	ldr	r2, [pc, #64]	; (10005548 <manage_buttons+0x26c>)
10005508:	4293      	cmp	r3, r2
1000550a:	d906      	bls.n	1000551a <manage_buttons+0x23e>
		button_down_pressed_timestamp = TIMESTAMP_DEACTIVATED;
1000550c:	4b08      	ldr	r3, [pc, #32]	; (10005530 <manage_buttons+0x254>)
1000550e:	2201      	movs	r2, #1
10005510:	4252      	negs	r2, r2
10005512:	601a      	str	r2, [r3, #0]
		buttonpress_down = BTNPRESS_LONGEST;
10005514:	4b10      	ldr	r3, [pc, #64]	; (10005558 <manage_buttons+0x27c>)
10005516:	2203      	movs	r2, #3
10005518:	701a      	strb	r2, [r3, #0]
	}
}
1000551a:	46bd      	mov	sp, r7
1000551c:	bd80      	pop	{r7, pc}
1000551e:	46c0      	nop			; (mov r8, r8)
10005520:	200005e8 	.word	0x200005e8
10005524:	10005e68 	.word	0x10005e68
10005528:	200005ec 	.word	0x200005ec
1000552c:	10005e78 	.word	0x10005e78
10005530:	200005f0 	.word	0x200005f0
10005534:	10005e88 	.word	0x10005e88
10005538:	200005f4 	.word	0x200005f4
1000553c:	00000f9f 	.word	0x00000f9f
10005540:	200005e2 	.word	0x200005e2
10005544:	000003e7 	.word	0x000003e7
10005548:	003d0ce7 	.word	0x003d0ce7
1000554c:	200005f6 	.word	0x200005f6
10005550:	200005e3 	.word	0x200005e3
10005554:	200005f8 	.word	0x200005f8
10005558:	200005e4 	.word	0x200005e4

1000555c <main>:

//****************************************************************************
// main - primary loop function
//****************************************************************************
int main(void)
{
1000555c:	b590      	push	{r4, r7, lr}
1000555e:	b085      	sub	sp, #20
10005560:	af00      	add	r7, sp, #0
	// Initialization of DAVE APPs
	DAVE_STATUS_t status;
	status = DAVE_Init();
10005562:	230b      	movs	r3, #11
10005564:	18fc      	adds	r4, r7, r3
10005566:	f7ff f9e9 	bl	1000493c <DAVE_Init>
1000556a:	1c03      	adds	r3, r0, #0
1000556c:	7023      	strb	r3, [r4, #0]

	// Error routine
	if (status != DAVE_STATUS_SUCCESS) {
1000556e:	230b      	movs	r3, #11
10005570:	18fb      	adds	r3, r7, r3
10005572:	781b      	ldrb	r3, [r3, #0]
10005574:	2b00      	cmp	r3, #0
10005576:	d025      	beq.n	100055c4 <main+0x68>
		while(1U){
			DIGITAL_IO_SetOutputLow(&IO_LED_USB1);
10005578:	4bc9      	ldr	r3, [pc, #804]	; (100058a0 <main+0x344>)
1000557a:	1c18      	adds	r0, r3, #0
1000557c:	f7ff fb18 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
			DIGITAL_IO_SetOutputLow(&IO_LED_USB2);
10005580:	4bc8      	ldr	r3, [pc, #800]	; (100058a4 <main+0x348>)
10005582:	1c18      	adds	r0, r3, #0
10005584:	f7ff fb14 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
			PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_ON);
10005588:	4bc7      	ldr	r3, [pc, #796]	; (100058a8 <main+0x34c>)
1000558a:	1c18      	adds	r0, r3, #0
1000558c:	2100      	movs	r1, #0
1000558e:	f7fd fa43 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
			delay_ms(500);
10005592:	23fa      	movs	r3, #250	; 0xfa
10005594:	005b      	lsls	r3, r3, #1
10005596:	1c18      	adds	r0, r3, #0
10005598:	f7ff fb2c 	bl	10004bf4 <delay_ms>
			DIGITAL_IO_SetOutputHigh(&IO_LED_USB1);
1000559c:	4bc0      	ldr	r3, [pc, #768]	; (100058a0 <main+0x344>)
1000559e:	1c18      	adds	r0, r3, #0
100055a0:	f7ff faf6 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
			DIGITAL_IO_SetOutputHigh(&IO_LED_USB2);
100055a4:	4bbf      	ldr	r3, [pc, #764]	; (100058a4 <main+0x348>)
100055a6:	1c18      	adds	r0, r3, #0
100055a8:	f7ff faf2 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
			PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
100055ac:	4bbe      	ldr	r3, [pc, #760]	; (100058a8 <main+0x34c>)
100055ae:	4abf      	ldr	r2, [pc, #764]	; (100058ac <main+0x350>)
100055b0:	1c18      	adds	r0, r3, #0
100055b2:	1c11      	adds	r1, r2, #0
100055b4:	f7fd fa30 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
			delay_ms(500);
100055b8:	23fa      	movs	r3, #250	; 0xfa
100055ba:	005b      	lsls	r3, r3, #1
100055bc:	1c18      	adds	r0, r3, #0
100055be:	f7ff fb19 	bl	10004bf4 <delay_ms>
		}
100055c2:	e7d9      	b.n	10005578 <main+0x1c>
	}

	/// - Set initial state -
	// Enable USB chip and switch to USB1
	DIGITAL_IO_SetOutputLow(&IO_USB_SI);
100055c4:	4bba      	ldr	r3, [pc, #744]	; (100058b0 <main+0x354>)
100055c6:	1c18      	adds	r0, r3, #0
100055c8:	f7ff faf2 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&IO_USB_OE);
100055cc:	4bb9      	ldr	r3, [pc, #740]	; (100058b4 <main+0x358>)
100055ce:	1c18      	adds	r0, r3, #0
100055d0:	f7ff faee 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
	// Enable USB1
	DIGITAL_IO_SetOutputHigh(&IO_USBPWR_1);
100055d4:	4bb8      	ldr	r3, [pc, #736]	; (100058b8 <main+0x35c>)
100055d6:	1c18      	adds	r0, r3, #0
100055d8:	f7ff fada 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&IO_LED_USB1);
100055dc:	4bb0      	ldr	r3, [pc, #704]	; (100058a0 <main+0x344>)
100055de:	1c18      	adds	r0, r3, #0
100055e0:	f7ff fae6 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
	// Disable USB2
	DIGITAL_IO_SetOutputLow(&IO_USBPWR_2);
100055e4:	4bb5      	ldr	r3, [pc, #724]	; (100058bc <main+0x360>)
100055e6:	1c18      	adds	r0, r3, #0
100055e8:	f7ff fae2 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&IO_LED_USB2);
100055ec:	4bad      	ldr	r3, [pc, #692]	; (100058a4 <main+0x348>)
100055ee:	1c18      	adds	r0, r3, #0
100055f0:	f7ff face 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
	// Disable Relay and set LED off
	DIGITAL_IO_SetOutputLow(&IO_RELAY);
100055f4:	4bb2      	ldr	r3, [pc, #712]	; (100058c0 <main+0x364>)
100055f6:	1c18      	adds	r0, r3, #0
100055f8:	f7ff fada 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
	PWM_CCU4_SetDutyCycle(&PWM_CCU4_LED_STATUS, PWM_FULL_OFF);
100055fc:	4baa      	ldr	r3, [pc, #680]	; (100058a8 <main+0x34c>)
100055fe:	4aab      	ldr	r2, [pc, #684]	; (100058ac <main+0x350>)
10005600:	1c18      	adds	r0, r3, #0
10005602:	1c11      	adds	r1, r2, #0
10005604:	f7fd fa08 	bl	10002a18 <PWM_CCU4_SetDutyCycle>
	// Initialize next value conversion
	ADC_MEASUREMENT_StartConversion(&ADC_SENSOR);
10005608:	4bae      	ldr	r3, [pc, #696]	; (100058c4 <main+0x368>)
1000560a:	1c18      	adds	r0, r3, #0
1000560c:	f7ff f988 	bl	10004920 <ADC_MEASUREMENT_StartConversion>

	/// - Read setup from emulated EEPROM
	read_eeprom_setup();
10005610:	f7ff fd36 	bl	10005080 <read_eeprom_setup>

	int main_loop_count = 0;
10005614:	2300      	movs	r3, #0
10005616:	60fb      	str	r3, [r7, #12]

	// Main loop
	while(1U)
	{
		// - Status LED handling -
		manage_status_led();
10005618:	f7ff fb2e 	bl	10004c78 <manage_status_led>
		main_loop_count++;
1000561c:	68fb      	ldr	r3, [r7, #12]
1000561e:	3301      	adds	r3, #1
10005620:	60fb      	str	r3, [r7, #12]
		systime_debug = SYSTIMER_GetTime();
10005622:	f7fc ff1d 	bl	10002460 <SYSTIMER_GetTime>
10005626:	1c03      	adds	r3, r0, #0
10005628:	1c1a      	adds	r2, r3, #0
1000562a:	4ba7      	ldr	r3, [pc, #668]	; (100058c8 <main+0x36c>)
1000562c:	601a      	str	r2, [r3, #0]

		//// - Button handling -
		manage_buttons();
1000562e:	f7ff fe55 	bl	100052dc <manage_buttons>

		/// - USB Channel handling -
		switch (USB_state){
10005632:	4ba6      	ldr	r3, [pc, #664]	; (100058cc <main+0x370>)
10005634:	781b      	ldrb	r3, [r3, #0]
10005636:	2b01      	cmp	r3, #1
10005638:	d023      	beq.n	10005682 <main+0x126>
1000563a:	2b02      	cmp	r3, #2
1000563c:	d041      	beq.n	100056c2 <main+0x166>
1000563e:	2b00      	cmp	r3, #0
10005640:	d140      	bne.n	100056c4 <main+0x168>
			case USB_1_active:
				// State code - none atm

				// Transition statement
				if(buttonpress_usb == BTNPRESS_STD){
10005642:	4ba3      	ldr	r3, [pc, #652]	; (100058d0 <main+0x374>)
10005644:	781b      	ldrb	r3, [r3, #0]
10005646:	2b01      	cmp	r3, #1
10005648:	d11a      	bne.n	10005680 <main+0x124>
					DIGITAL_IO_SetOutputLow(&IO_USBPWR_1);
1000564a:	4b9b      	ldr	r3, [pc, #620]	; (100058b8 <main+0x35c>)
1000564c:	1c18      	adds	r0, r3, #0
1000564e:	f7ff faaf 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputHigh(&IO_USB_SI);
10005652:	4b97      	ldr	r3, [pc, #604]	; (100058b0 <main+0x354>)
10005654:	1c18      	adds	r0, r3, #0
10005656:	f7ff fa9b 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputLow(&IO_LED_USB2);
1000565a:	4b92      	ldr	r3, [pc, #584]	; (100058a4 <main+0x348>)
1000565c:	1c18      	adds	r0, r3, #0
1000565e:	f7ff faa7 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputHigh(&IO_LED_USB1);
10005662:	4b8f      	ldr	r3, [pc, #572]	; (100058a0 <main+0x344>)
10005664:	1c18      	adds	r0, r3, #0
10005666:	f7ff fa93 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputHigh(&IO_USBPWR_2);
1000566a:	4b94      	ldr	r3, [pc, #592]	; (100058bc <main+0x360>)
1000566c:	1c18      	adds	r0, r3, #0
1000566e:	f7ff fa8f 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
					buttonpress_usb = BTNPRESS_NOT;
10005672:	4b97      	ldr	r3, [pc, #604]	; (100058d0 <main+0x374>)
10005674:	2200      	movs	r2, #0
10005676:	701a      	strb	r2, [r3, #0]

					USB_state = USB_2_active;
10005678:	4b94      	ldr	r3, [pc, #592]	; (100058cc <main+0x370>)
1000567a:	2201      	movs	r2, #1
1000567c:	701a      	strb	r2, [r3, #0]
				}
				break;
1000567e:	e021      	b.n	100056c4 <main+0x168>
10005680:	e020      	b.n	100056c4 <main+0x168>
			case USB_2_active:
				// State code - none atm

				// Transition statement
				if(buttonpress_usb == BTNPRESS_STD){
10005682:	4b93      	ldr	r3, [pc, #588]	; (100058d0 <main+0x374>)
10005684:	781b      	ldrb	r3, [r3, #0]
10005686:	2b01      	cmp	r3, #1
10005688:	d11a      	bne.n	100056c0 <main+0x164>
					DIGITAL_IO_SetOutputLow(&IO_USBPWR_2);
1000568a:	4b8c      	ldr	r3, [pc, #560]	; (100058bc <main+0x360>)
1000568c:	1c18      	adds	r0, r3, #0
1000568e:	f7ff fa8f 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputLow(&IO_USB_SI);
10005692:	4b87      	ldr	r3, [pc, #540]	; (100058b0 <main+0x354>)
10005694:	1c18      	adds	r0, r3, #0
10005696:	f7ff fa8b 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputLow(&IO_LED_USB1);
1000569a:	4b81      	ldr	r3, [pc, #516]	; (100058a0 <main+0x344>)
1000569c:	1c18      	adds	r0, r3, #0
1000569e:	f7ff fa87 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputHigh(&IO_LED_USB2);
100056a2:	4b80      	ldr	r3, [pc, #512]	; (100058a4 <main+0x348>)
100056a4:	1c18      	adds	r0, r3, #0
100056a6:	f7ff fa73 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputHigh(&IO_USBPWR_1);
100056aa:	4b83      	ldr	r3, [pc, #524]	; (100058b8 <main+0x35c>)
100056ac:	1c18      	adds	r0, r3, #0
100056ae:	f7ff fa6f 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
					buttonpress_usb = BTNPRESS_NOT;
100056b2:	4b87      	ldr	r3, [pc, #540]	; (100058d0 <main+0x374>)
100056b4:	2200      	movs	r2, #0
100056b6:	701a      	strb	r2, [r3, #0]

					USB_state = USB_1_active;
100056b8:	4b84      	ldr	r3, [pc, #528]	; (100058cc <main+0x370>)
100056ba:	2200      	movs	r2, #0
100056bc:	701a      	strb	r2, [r3, #0]
				}
				break;
100056be:	e001      	b.n	100056c4 <main+0x168>
100056c0:	e000      	b.n	100056c4 <main+0x168>
			case USB_inactive:
				// Currently not implemented!
				break;
100056c2:	46c0      	nop			; (mov r8, r8)
		}

		/// - Relay handling -
		// Check for state change triggers based on current state
		switch (relay_state){
100056c4:	4b83      	ldr	r3, [pc, #524]	; (100058d4 <main+0x378>)
100056c6:	781b      	ldrb	r3, [r3, #0]
100056c8:	2b00      	cmp	r3, #0
100056ca:	d04e      	beq.n	1000576a <main+0x20e>
100056cc:	2b01      	cmp	r3, #1
100056ce:	d000      	beq.n	100056d2 <main+0x176>
100056d0:	e095      	b.n	100057fe <main+0x2a2>
			case RELAY_LOW:
				// State code
				// Check if upper threshold is exceeded. If it is and timestamp is not already set - save timestamp. If timestamp is already saved and threshold is not exceeded anymore reset timestamp
				if     (ADC_val_upper_thres_exceed_timestamp == 0 && ADC_val_current > ADC_upper_threshold){
100056d2:	4b81      	ldr	r3, [pc, #516]	; (100058d8 <main+0x37c>)
100056d4:	681b      	ldr	r3, [r3, #0]
100056d6:	2b00      	cmp	r3, #0
100056d8:	d10c      	bne.n	100056f4 <main+0x198>
100056da:	4b80      	ldr	r3, [pc, #512]	; (100058dc <main+0x380>)
100056dc:	681b      	ldr	r3, [r3, #0]
100056de:	1e1a      	subs	r2, r3, #0
100056e0:	4b7f      	ldr	r3, [pc, #508]	; (100058e0 <main+0x384>)
100056e2:	681b      	ldr	r3, [r3, #0]
100056e4:	429a      	cmp	r2, r3
100056e6:	d205      	bcs.n	100056f4 <main+0x198>
					ADC_val_upper_thres_exceed_timestamp = SYSTIMER_GetTime();
100056e8:	f7fc feba 	bl	10002460 <SYSTIMER_GetTime>
100056ec:	1c02      	adds	r2, r0, #0
100056ee:	4b7a      	ldr	r3, [pc, #488]	; (100058d8 <main+0x37c>)
100056f0:	601a      	str	r2, [r3, #0]
100056f2:	e00d      	b.n	10005710 <main+0x1b4>
				}
				else if(ADC_val_upper_thres_exceed_timestamp != 0 && ADC_val_current < ADC_upper_threshold){
100056f4:	4b78      	ldr	r3, [pc, #480]	; (100058d8 <main+0x37c>)
100056f6:	681b      	ldr	r3, [r3, #0]
100056f8:	2b00      	cmp	r3, #0
100056fa:	d009      	beq.n	10005710 <main+0x1b4>
100056fc:	4b77      	ldr	r3, [pc, #476]	; (100058dc <main+0x380>)
100056fe:	681b      	ldr	r3, [r3, #0]
10005700:	1e1a      	subs	r2, r3, #0
10005702:	4b77      	ldr	r3, [pc, #476]	; (100058e0 <main+0x384>)
10005704:	681b      	ldr	r3, [r3, #0]
10005706:	429a      	cmp	r2, r3
10005708:	d902      	bls.n	10005710 <main+0x1b4>
					ADC_val_upper_thres_exceed_timestamp = 0;
1000570a:	4b73      	ldr	r3, [pc, #460]	; (100058d8 <main+0x37c>)
1000570c:	2200      	movs	r2, #0
1000570e:	601a      	str	r2, [r3, #0]
				}

				// Transition statement
				// Check if threshold are exceeded long enough to trigger a switch
				if(ADC_val_upper_thres_exceed_timestamp != 0){
10005710:	4b71      	ldr	r3, [pc, #452]	; (100058d8 <main+0x37c>)
10005712:	681b      	ldr	r3, [r3, #0]
10005714:	2b00      	cmp	r3, #0
10005716:	d027      	beq.n	10005768 <main+0x20c>
					uint16_t upperThresholdExceedDuration = (SYSTIMER_GetTime() - ADC_val_upper_thres_exceed_timestamp)/1000;
10005718:	f7fc fea2 	bl	10002460 <SYSTIMER_GetTime>
1000571c:	1c02      	adds	r2, r0, #0
1000571e:	4b6e      	ldr	r3, [pc, #440]	; (100058d8 <main+0x37c>)
10005720:	681b      	ldr	r3, [r3, #0]
10005722:	1ad3      	subs	r3, r2, r3
10005724:	1c18      	adds	r0, r3, #0
10005726:	23fa      	movs	r3, #250	; 0xfa
10005728:	0099      	lsls	r1, r3, #2
1000572a:	f000 fa5b 	bl	10005be4 <__aeabi_uidiv>
1000572e:	1c03      	adds	r3, r0, #0
10005730:	1c1a      	adds	r2, r3, #0
10005732:	2308      	movs	r3, #8
10005734:	18fb      	adds	r3, r7, r3
10005736:	801a      	strh	r2, [r3, #0]
					if(upperThresholdExceedDuration > relay_threshold_latchtime){
10005738:	2308      	movs	r3, #8
1000573a:	18fb      	adds	r3, r7, r3
1000573c:	881a      	ldrh	r2, [r3, #0]
1000573e:	4b69      	ldr	r3, [pc, #420]	; (100058e4 <main+0x388>)
10005740:	681b      	ldr	r3, [r3, #0]
10005742:	429a      	cmp	r2, r3
10005744:	dd10      	ble.n	10005768 <main+0x20c>
						relay_state = RELAY_HIGH;
10005746:	4b63      	ldr	r3, [pc, #396]	; (100058d4 <main+0x378>)
10005748:	2200      	movs	r2, #0
1000574a:	701a      	strb	r2, [r3, #0]
						DIGITAL_IO_SetOutputHigh(&IO_RELAY);
1000574c:	4b5c      	ldr	r3, [pc, #368]	; (100058c0 <main+0x364>)
1000574e:	1c18      	adds	r0, r3, #0
10005750:	f7ff fa1e 	bl	10004b90 <DIGITAL_IO_SetOutputHigh>
						ADC_val_upper_thres_exceed_timestamp = 0;
10005754:	4b60      	ldr	r3, [pc, #384]	; (100058d8 <main+0x37c>)
10005756:	2200      	movs	r2, #0
10005758:	601a      	str	r2, [r3, #0]
						if(setup_state == SETUP_IDLE)
1000575a:	4b63      	ldr	r3, [pc, #396]	; (100058e8 <main+0x38c>)
1000575c:	781b      	ldrb	r3, [r3, #0]
1000575e:	2b00      	cmp	r3, #0
10005760:	d102      	bne.n	10005768 <main+0x20c>
							reset_status_led_to_relay_state();
10005762:	f7ff fa5f 	bl	10004c24 <reset_status_led_to_relay_state>
					}
				}
				break;
10005766:	e04a      	b.n	100057fe <main+0x2a2>
10005768:	e049      	b.n	100057fe <main+0x2a2>
			case RELAY_HIGH:
				// State code
				// Check if lower threshold is exceeded. If it is and timestamp is not already set - save timestamp. If timestamp is already saved and threshold is not exceeded anymore reset timestamp
				if(ADC_val_lower_thres_exceed_timestamp == 0 && ADC_val_current < ADC_lower_threshold){
1000576a:	4b60      	ldr	r3, [pc, #384]	; (100058ec <main+0x390>)
1000576c:	681b      	ldr	r3, [r3, #0]
1000576e:	2b00      	cmp	r3, #0
10005770:	d10c      	bne.n	1000578c <main+0x230>
10005772:	4b5f      	ldr	r3, [pc, #380]	; (100058f0 <main+0x394>)
10005774:	681b      	ldr	r3, [r3, #0]
10005776:	1e1a      	subs	r2, r3, #0
10005778:	4b59      	ldr	r3, [pc, #356]	; (100058e0 <main+0x384>)
1000577a:	681b      	ldr	r3, [r3, #0]
1000577c:	429a      	cmp	r2, r3
1000577e:	d905      	bls.n	1000578c <main+0x230>
					ADC_val_lower_thres_exceed_timestamp = SYSTIMER_GetTime();
10005780:	f7fc fe6e 	bl	10002460 <SYSTIMER_GetTime>
10005784:	1c02      	adds	r2, r0, #0
10005786:	4b59      	ldr	r3, [pc, #356]	; (100058ec <main+0x390>)
10005788:	601a      	str	r2, [r3, #0]
1000578a:	e00d      	b.n	100057a8 <main+0x24c>
				}
				else if(ADC_val_lower_thres_exceed_timestamp != 0 && ADC_val_current > ADC_lower_threshold){
1000578c:	4b57      	ldr	r3, [pc, #348]	; (100058ec <main+0x390>)
1000578e:	681b      	ldr	r3, [r3, #0]
10005790:	2b00      	cmp	r3, #0
10005792:	d009      	beq.n	100057a8 <main+0x24c>
10005794:	4b56      	ldr	r3, [pc, #344]	; (100058f0 <main+0x394>)
10005796:	681b      	ldr	r3, [r3, #0]
10005798:	1e1a      	subs	r2, r3, #0
1000579a:	4b51      	ldr	r3, [pc, #324]	; (100058e0 <main+0x384>)
1000579c:	681b      	ldr	r3, [r3, #0]
1000579e:	429a      	cmp	r2, r3
100057a0:	d202      	bcs.n	100057a8 <main+0x24c>
					ADC_val_lower_thres_exceed_timestamp = 0;
100057a2:	4b52      	ldr	r3, [pc, #328]	; (100058ec <main+0x390>)
100057a4:	2200      	movs	r2, #0
100057a6:	601a      	str	r2, [r3, #0]
				}

				// Transition statement
				// Check if threshold are exceeded long enough to trigger a switch
				if(ADC_val_lower_thres_exceed_timestamp != 0){
100057a8:	4b50      	ldr	r3, [pc, #320]	; (100058ec <main+0x390>)
100057aa:	681b      	ldr	r3, [r3, #0]
100057ac:	2b00      	cmp	r3, #0
100057ae:	d025      	beq.n	100057fc <main+0x2a0>
					uint16_t lowerThresholdExceedDuration = (SYSTIMER_GetTime() - ADC_val_lower_thres_exceed_timestamp)/1000;
100057b0:	f7fc fe56 	bl	10002460 <SYSTIMER_GetTime>
100057b4:	1c02      	adds	r2, r0, #0
100057b6:	4b4d      	ldr	r3, [pc, #308]	; (100058ec <main+0x390>)
100057b8:	681b      	ldr	r3, [r3, #0]
100057ba:	1ad3      	subs	r3, r2, r3
100057bc:	1c18      	adds	r0, r3, #0
100057be:	23fa      	movs	r3, #250	; 0xfa
100057c0:	0099      	lsls	r1, r3, #2
100057c2:	f000 fa0f 	bl	10005be4 <__aeabi_uidiv>
100057c6:	1c03      	adds	r3, r0, #0
100057c8:	1c1a      	adds	r2, r3, #0
100057ca:	1dbb      	adds	r3, r7, #6
100057cc:	801a      	strh	r2, [r3, #0]
					if(lowerThresholdExceedDuration > relay_threshold_latchtime){
100057ce:	1dbb      	adds	r3, r7, #6
100057d0:	881a      	ldrh	r2, [r3, #0]
100057d2:	4b44      	ldr	r3, [pc, #272]	; (100058e4 <main+0x388>)
100057d4:	681b      	ldr	r3, [r3, #0]
100057d6:	429a      	cmp	r2, r3
100057d8:	dd10      	ble.n	100057fc <main+0x2a0>
						relay_state = RELAY_LOW;
100057da:	4b3e      	ldr	r3, [pc, #248]	; (100058d4 <main+0x378>)
100057dc:	2201      	movs	r2, #1
100057de:	701a      	strb	r2, [r3, #0]
						DIGITAL_IO_SetOutputLow(&IO_RELAY);
100057e0:	4b37      	ldr	r3, [pc, #220]	; (100058c0 <main+0x364>)
100057e2:	1c18      	adds	r0, r3, #0
100057e4:	f7ff f9e4 	bl	10004bb0 <DIGITAL_IO_SetOutputLow>
						ADC_val_lower_thres_exceed_timestamp = 0;
100057e8:	4b40      	ldr	r3, [pc, #256]	; (100058ec <main+0x390>)
100057ea:	2200      	movs	r2, #0
100057ec:	601a      	str	r2, [r3, #0]
						if(setup_state == SETUP_IDLE)
100057ee:	4b3e      	ldr	r3, [pc, #248]	; (100058e8 <main+0x38c>)
100057f0:	781b      	ldrb	r3, [r3, #0]
100057f2:	2b00      	cmp	r3, #0
100057f4:	d102      	bne.n	100057fc <main+0x2a0>
							reset_status_led_to_relay_state();
100057f6:	f7ff fa15 	bl	10004c24 <reset_status_led_to_relay_state>
					}
				}
				break;
100057fa:	e7ff      	b.n	100057fc <main+0x2a0>
100057fc:	46c0      	nop			; (mov r8, r8)
		}
		// Init next value conversion
		ADC_MEASUREMENT_StartConversion(&ADC_SENSOR);
100057fe:	4b31      	ldr	r3, [pc, #196]	; (100058c4 <main+0x368>)
10005800:	1c18      	adds	r0, r3, #0
10005802:	f7ff f88d 	bl	10004920 <ADC_MEASUREMENT_StartConversion>

		/// - Relay settings handling - Todo auto exit menus after time?, led signal when reaching max?, upper threshold cant be lower than lower threshold?
		switch(setup_state){
10005806:	4b38      	ldr	r3, [pc, #224]	; (100058e8 <main+0x38c>)
10005808:	781b      	ldrb	r3, [r3, #0]
1000580a:	2b01      	cmp	r3, #1
1000580c:	d033      	beq.n	10005876 <main+0x31a>
1000580e:	dc02      	bgt.n	10005816 <main+0x2ba>
10005810:	2b00      	cmp	r3, #0
10005812:	d007      	beq.n	10005824 <main+0x2c8>
10005814:	e19a      	b.n	10005b4c <main+0x5f0>
10005816:	2b02      	cmp	r3, #2
10005818:	d100      	bne.n	1000581c <main+0x2c0>
1000581a:	e0d0      	b.n	100059be <main+0x462>
1000581c:	2b03      	cmp	r3, #3
1000581e:	d100      	bne.n	10005822 <main+0x2c6>
10005820:	e13f      	b.n	10005aa2 <main+0x546>
10005822:	e193      	b.n	10005b4c <main+0x5f0>
			case SETUP_IDLE:
				/// Interpret button press and change to according setup sub-menu (state)
				// A long  press of up or down brings system in time setup menu
				// A short press of up         brings system in upper threshold setup menu
				// A short press of down       brings system in lower threshold setup menu
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
10005824:	4b33      	ldr	r3, [pc, #204]	; (100058f4 <main+0x398>)
10005826:	781b      	ldrb	r3, [r3, #0]
10005828:	2b02      	cmp	r3, #2
1000582a:	d003      	beq.n	10005834 <main+0x2d8>
1000582c:	4b32      	ldr	r3, [pc, #200]	; (100058f8 <main+0x39c>)
1000582e:	781b      	ldrb	r3, [r3, #0]
10005830:	2b02      	cmp	r3, #2
10005832:	d109      	bne.n	10005848 <main+0x2ec>
					setup_state = SETUP_TIME_TH;
10005834:	4b2c      	ldr	r3, [pc, #176]	; (100058e8 <main+0x38c>)
10005836:	2203      	movs	r2, #3
10005838:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
1000583a:	4b30      	ldr	r3, [pc, #192]	; (100058fc <main+0x3a0>)
1000583c:	2202      	movs	r2, #2
1000583e:	701a      	strb	r2, [r3, #0]
					led_number_continuous = 1;
10005840:	4b2f      	ldr	r3, [pc, #188]	; (10005900 <main+0x3a4>)
10005842:	2201      	movs	r2, #1
10005844:	801a      	strh	r2, [r3, #0]
10005846:	e015      	b.n	10005874 <main+0x318>
				}
				else if(buttonpress_up == BTNPRESS_STD){
10005848:	4b2a      	ldr	r3, [pc, #168]	; (100058f4 <main+0x398>)
1000584a:	781b      	ldrb	r3, [r3, #0]
1000584c:	2b01      	cmp	r3, #1
1000584e:	d106      	bne.n	1000585e <main+0x302>
					setup_state = SETUP_UPPER_TH;
10005850:	4b25      	ldr	r3, [pc, #148]	; (100058e8 <main+0x38c>)
10005852:	2201      	movs	r2, #1
10005854:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_FADE_UP;
10005856:	4b29      	ldr	r3, [pc, #164]	; (100058fc <main+0x3a0>)
10005858:	2204      	movs	r2, #4
1000585a:	701a      	strb	r2, [r3, #0]
1000585c:	e00a      	b.n	10005874 <main+0x318>
					//led_status_pattern = LED_NUMBER;
					//led_number_continuous = 5;
				}
				else if(buttonpress_down == BTNPRESS_STD){
1000585e:	4b26      	ldr	r3, [pc, #152]	; (100058f8 <main+0x39c>)
10005860:	781b      	ldrb	r3, [r3, #0]
10005862:	2b01      	cmp	r3, #1
10005864:	d106      	bne.n	10005874 <main+0x318>
					setup_state = SETUP_LOWER_TH;
10005866:	4b20      	ldr	r3, [pc, #128]	; (100058e8 <main+0x38c>)
10005868:	2202      	movs	r2, #2
1000586a:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_FADE_DOWN;
1000586c:	4b23      	ldr	r3, [pc, #140]	; (100058fc <main+0x3a0>)
1000586e:	2203      	movs	r2, #3
10005870:	701a      	strb	r2, [r3, #0]
					//led_status_pattern = LED_NUMBER;
					//led_number_continuous = 3;
				}
				break;
10005872:	e16b      	b.n	10005b4c <main+0x5f0>
10005874:	e16a      	b.n	10005b4c <main+0x5f0>
				/// Interpret button press:
				// A long  press of up or down brings system back to setup idle
				// A short press of up         increases the upper threshold value
				// A short press of down       decreases the upper threshold value
				// A longest press of up saves the current ADC value as threshold
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
10005876:	4b1f      	ldr	r3, [pc, #124]	; (100058f4 <main+0x398>)
10005878:	781b      	ldrb	r3, [r3, #0]
1000587a:	2b02      	cmp	r3, #2
1000587c:	d003      	beq.n	10005886 <main+0x32a>
1000587e:	4b1e      	ldr	r3, [pc, #120]	; (100058f8 <main+0x39c>)
10005880:	781b      	ldrb	r3, [r3, #0]
10005882:	2b02      	cmp	r3, #2
10005884:	d13e      	bne.n	10005904 <main+0x3a8>
					write_eeprom_setup(EEPROM_UPPER_TH, ADC_upper_threshold);
10005886:	4b15      	ldr	r3, [pc, #84]	; (100058dc <main+0x380>)
10005888:	681b      	ldr	r3, [r3, #0]
1000588a:	2002      	movs	r0, #2
1000588c:	1c19      	adds	r1, r3, #0
1000588e:	f7ff fcff 	bl	10005290 <write_eeprom_setup>
					setup_state = SETUP_IDLE;
10005892:	4b15      	ldr	r3, [pc, #84]	; (100058e8 <main+0x38c>)
10005894:	2200      	movs	r2, #0
10005896:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_MATCH_RELAY_STATE;
10005898:	4b18      	ldr	r3, [pc, #96]	; (100058fc <main+0x3a0>)
1000589a:	2205      	movs	r2, #5
1000589c:	701a      	strb	r2, [r3, #0]
1000589e:	e08d      	b.n	100059bc <main+0x460>
100058a0:	10005ed8 	.word	0x10005ed8
100058a4:	10005ec8 	.word	0x10005ec8
100058a8:	20000520 	.word	0x20000520
100058ac:	00002710 	.word	0x00002710
100058b0:	10005e38 	.word	0x10005e38
100058b4:	10005e48 	.word	0x10005e48
100058b8:	10005ea8 	.word	0x10005ea8
100058bc:	10005e98 	.word	0x10005e98
100058c0:	10005eb8 	.word	0x10005eb8
100058c4:	20000588 	.word	0x20000588
100058c8:	20000608 	.word	0x20000608
100058cc:	200005d8 	.word	0x200005d8
100058d0:	200005e2 	.word	0x200005e2
100058d4:	200005b0 	.word	0x200005b0
100058d8:	20000600 	.word	0x20000600
100058dc:	200005a8 	.word	0x200005a8
100058e0:	200005fc 	.word	0x200005fc
100058e4:	200005a4 	.word	0x200005a4
100058e8:	200005d9 	.word	0x200005d9
100058ec:	20000604 	.word	0x20000604
100058f0:	200005ac 	.word	0x200005ac
100058f4:	200005e3 	.word	0x200005e3
100058f8:	200005e4 	.word	0x200005e4
100058fc:	200005da 	.word	0x200005da
10005900:	200005de 	.word	0x200005de
				}
				else if(buttonpress_up == BTNPRESS_STD){ // Increase
10005904:	4b96      	ldr	r3, [pc, #600]	; (10005b60 <main+0x604>)
10005906:	781b      	ldrb	r3, [r3, #0]
10005908:	2b01      	cmp	r3, #1
1000590a:	d11a      	bne.n	10005942 <main+0x3e6>
					ADC_upper_threshold += ADC_THRESHOLD_INCREMENT;
1000590c:	4b95      	ldr	r3, [pc, #596]	; (10005b64 <main+0x608>)
1000590e:	681b      	ldr	r3, [r3, #0]
10005910:	3375      	adds	r3, #117	; 0x75
10005912:	1c1a      	adds	r2, r3, #0
10005914:	4b93      	ldr	r3, [pc, #588]	; (10005b64 <main+0x608>)
10005916:	601a      	str	r2, [r3, #0]
					// If maximum is reached blink led 2 times, then continue fading
					if(ADC_upper_threshold > ADC_THRESHOLD_MAX){
10005918:	4b92      	ldr	r3, [pc, #584]	; (10005b64 <main+0x608>)
1000591a:	681b      	ldr	r3, [r3, #0]
1000591c:	4a92      	ldr	r2, [pc, #584]	; (10005b68 <main+0x60c>)
1000591e:	4293      	cmp	r3, r2
10005920:	dd4c      	ble.n	100059bc <main+0x460>
						ADC_upper_threshold = ADC_THRESHOLD_MAX;
10005922:	4b90      	ldr	r3, [pc, #576]	; (10005b64 <main+0x608>)
10005924:	4a90      	ldr	r2, [pc, #576]	; (10005b68 <main+0x60c>)
10005926:	601a      	str	r2, [r3, #0]
						led_number_single = 2;
10005928:	4b90      	ldr	r3, [pc, #576]	; (10005b6c <main+0x610>)
1000592a:	2202      	movs	r2, #2
1000592c:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
1000592e:	4b90      	ldr	r3, [pc, #576]	; (10005b70 <main+0x614>)
10005930:	2202      	movs	r2, #2
10005932:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10005934:	4b8f      	ldr	r3, [pc, #572]	; (10005b74 <main+0x618>)
10005936:	2201      	movs	r2, #1
10005938:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_UP;
1000593a:	4b8f      	ldr	r3, [pc, #572]	; (10005b78 <main+0x61c>)
1000593c:	2204      	movs	r2, #4
1000593e:	701a      	strb	r2, [r3, #0]
					led_number_single = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10005940:	e104      	b.n	10005b4c <main+0x5f0>
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_FADE_UP;
					}
				}
				else if(buttonpress_down == BTNPRESS_STD){ // Decrease
10005942:	4b8e      	ldr	r3, [pc, #568]	; (10005b7c <main+0x620>)
10005944:	781b      	ldrb	r3, [r3, #0]
10005946:	2b01      	cmp	r3, #1
10005948:	d119      	bne.n	1000597e <main+0x422>
					ADC_upper_threshold -= ADC_THRESHOLD_INCREMENT;
1000594a:	4b86      	ldr	r3, [pc, #536]	; (10005b64 <main+0x608>)
1000594c:	681b      	ldr	r3, [r3, #0]
1000594e:	3b75      	subs	r3, #117	; 0x75
10005950:	1c1a      	adds	r2, r3, #0
10005952:	4b84      	ldr	r3, [pc, #528]	; (10005b64 <main+0x608>)
10005954:	601a      	str	r2, [r3, #0]
					// If minimum is reached blink led 2 times, then continue fading
					if(ADC_upper_threshold <= 0){
10005956:	4b83      	ldr	r3, [pc, #524]	; (10005b64 <main+0x608>)
10005958:	681b      	ldr	r3, [r3, #0]
1000595a:	2b00      	cmp	r3, #0
1000595c:	dc2e      	bgt.n	100059bc <main+0x460>
						ADC_upper_threshold = 0;
1000595e:	4b81      	ldr	r3, [pc, #516]	; (10005b64 <main+0x608>)
10005960:	2200      	movs	r2, #0
10005962:	601a      	str	r2, [r3, #0]
						led_number_single = 2;
10005964:	4b81      	ldr	r3, [pc, #516]	; (10005b6c <main+0x610>)
10005966:	2202      	movs	r2, #2
10005968:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
1000596a:	4b81      	ldr	r3, [pc, #516]	; (10005b70 <main+0x614>)
1000596c:	2202      	movs	r2, #2
1000596e:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10005970:	4b80      	ldr	r3, [pc, #512]	; (10005b74 <main+0x618>)
10005972:	2201      	movs	r2, #1
10005974:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_UP;
10005976:	4b80      	ldr	r3, [pc, #512]	; (10005b78 <main+0x61c>)
10005978:	2204      	movs	r2, #4
1000597a:	701a      	strb	r2, [r3, #0]
					led_number_single = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
1000597c:	e0e6      	b.n	10005b4c <main+0x5f0>
						led_status_pattern_after_single = LED_FADE_UP;
					}
					//if(ADC_upper_threshold <= ADC_lower_threshold)
						//ADC_upper_threshold = ADC_lower_threshold;
				}
				else if(buttonpress_up == BTNPRESS_LONGEST){
1000597e:	4b78      	ldr	r3, [pc, #480]	; (10005b60 <main+0x604>)
10005980:	781b      	ldrb	r3, [r3, #0]
10005982:	2b03      	cmp	r3, #3
10005984:	d11a      	bne.n	100059bc <main+0x460>
					// Save current ADC value as threshold and exit setup menu
					ADC_upper_threshold = ADC_val_current;
10005986:	4b7e      	ldr	r3, [pc, #504]	; (10005b80 <main+0x624>)
10005988:	681b      	ldr	r3, [r3, #0]
1000598a:	1c1a      	adds	r2, r3, #0
1000598c:	4b75      	ldr	r3, [pc, #468]	; (10005b64 <main+0x608>)
1000598e:	601a      	str	r2, [r3, #0]
					write_eeprom_setup(EEPROM_UPPER_TH, ADC_upper_threshold);
10005990:	4b74      	ldr	r3, [pc, #464]	; (10005b64 <main+0x608>)
10005992:	681b      	ldr	r3, [r3, #0]
10005994:	2002      	movs	r0, #2
10005996:	1c19      	adds	r1, r3, #0
10005998:	f7ff fc7a 	bl	10005290 <write_eeprom_setup>
					setup_state = SETUP_IDLE;
1000599c:	4b79      	ldr	r3, [pc, #484]	; (10005b84 <main+0x628>)
1000599e:	2200      	movs	r2, #0
100059a0:	701a      	strb	r2, [r3, #0]
					// Blink LED 3 times (user info) and return to operation where led matches the state of the relay
					led_number_single = 3;
100059a2:	4b72      	ldr	r3, [pc, #456]	; (10005b6c <main+0x610>)
100059a4:	2203      	movs	r2, #3
100059a6:	801a      	strh	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
100059a8:	4b71      	ldr	r3, [pc, #452]	; (10005b70 <main+0x614>)
100059aa:	2202      	movs	r2, #2
100059ac:	701a      	strb	r2, [r3, #0]
					led_pattern_mode = LED_PATTERN_SINGLE;
100059ae:	4b71      	ldr	r3, [pc, #452]	; (10005b74 <main+0x618>)
100059b0:	2201      	movs	r2, #1
100059b2:	701a      	strb	r2, [r3, #0]
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
100059b4:	4b70      	ldr	r3, [pc, #448]	; (10005b78 <main+0x61c>)
100059b6:	2205      	movs	r2, #5
100059b8:	701a      	strb	r2, [r3, #0]
				}
				break;
100059ba:	e0c7      	b.n	10005b4c <main+0x5f0>
100059bc:	e0c6      	b.n	10005b4c <main+0x5f0>
				/// Interpret button press:
				// A long  press of up or down brings system back to setup idle
				// A short press of up         increases the lower threshold value
				// A short press of down       decreases the lower threshold value
				// A longest press of down saves the current ADC value as threshold
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
100059be:	4b68      	ldr	r3, [pc, #416]	; (10005b60 <main+0x604>)
100059c0:	781b      	ldrb	r3, [r3, #0]
100059c2:	2b02      	cmp	r3, #2
100059c4:	d003      	beq.n	100059ce <main+0x472>
100059c6:	4b6d      	ldr	r3, [pc, #436]	; (10005b7c <main+0x620>)
100059c8:	781b      	ldrb	r3, [r3, #0]
100059ca:	2b02      	cmp	r3, #2
100059cc:	d10c      	bne.n	100059e8 <main+0x48c>
					write_eeprom_setup(EEPROM_LOWER_TH, ADC_lower_threshold);
100059ce:	4b6e      	ldr	r3, [pc, #440]	; (10005b88 <main+0x62c>)
100059d0:	681b      	ldr	r3, [r3, #0]
100059d2:	2001      	movs	r0, #1
100059d4:	1c19      	adds	r1, r3, #0
100059d6:	f7ff fc5b 	bl	10005290 <write_eeprom_setup>
					setup_state = SETUP_IDLE;
100059da:	4b6a      	ldr	r3, [pc, #424]	; (10005b84 <main+0x628>)
100059dc:	2200      	movs	r2, #0
100059de:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_MATCH_RELAY_STATE;
100059e0:	4b63      	ldr	r3, [pc, #396]	; (10005b70 <main+0x614>)
100059e2:	2205      	movs	r2, #5
100059e4:	701a      	strb	r2, [r3, #0]
100059e6:	e05b      	b.n	10005aa0 <main+0x544>
				}
				else if(buttonpress_up == BTNPRESS_STD){ // Increase
100059e8:	4b5d      	ldr	r3, [pc, #372]	; (10005b60 <main+0x604>)
100059ea:	781b      	ldrb	r3, [r3, #0]
100059ec:	2b01      	cmp	r3, #1
100059ee:	d11a      	bne.n	10005a26 <main+0x4ca>
					ADC_lower_threshold += ADC_THRESHOLD_INCREMENT;
100059f0:	4b65      	ldr	r3, [pc, #404]	; (10005b88 <main+0x62c>)
100059f2:	681b      	ldr	r3, [r3, #0]
100059f4:	3375      	adds	r3, #117	; 0x75
100059f6:	1c1a      	adds	r2, r3, #0
100059f8:	4b63      	ldr	r3, [pc, #396]	; (10005b88 <main+0x62c>)
100059fa:	601a      	str	r2, [r3, #0]
					// If maximum is reached blink led 2 times, then continue fading
					if(ADC_lower_threshold > ADC_THRESHOLD_MAX){
100059fc:	4b62      	ldr	r3, [pc, #392]	; (10005b88 <main+0x62c>)
100059fe:	681b      	ldr	r3, [r3, #0]
10005a00:	4a59      	ldr	r2, [pc, #356]	; (10005b68 <main+0x60c>)
10005a02:	4293      	cmp	r3, r2
10005a04:	dd4c      	ble.n	10005aa0 <main+0x544>
						ADC_lower_threshold = ADC_THRESHOLD_MAX;
10005a06:	4b60      	ldr	r3, [pc, #384]	; (10005b88 <main+0x62c>)
10005a08:	4a57      	ldr	r2, [pc, #348]	; (10005b68 <main+0x60c>)
10005a0a:	601a      	str	r2, [r3, #0]
						led_number_single = 2;
10005a0c:	4b57      	ldr	r3, [pc, #348]	; (10005b6c <main+0x610>)
10005a0e:	2202      	movs	r2, #2
10005a10:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10005a12:	4b57      	ldr	r3, [pc, #348]	; (10005b70 <main+0x614>)
10005a14:	2202      	movs	r2, #2
10005a16:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10005a18:	4b56      	ldr	r3, [pc, #344]	; (10005b74 <main+0x618>)
10005a1a:	2201      	movs	r2, #1
10005a1c:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_DOWN;
10005a1e:	4b56      	ldr	r3, [pc, #344]	; (10005b78 <main+0x61c>)
10005a20:	2203      	movs	r2, #3
10005a22:	701a      	strb	r2, [r3, #0]
					led_number_single = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10005a24:	e092      	b.n	10005b4c <main+0x5f0>
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_FADE_DOWN;
					}
				}
				else if(buttonpress_down == BTNPRESS_STD){ // Decrease
10005a26:	4b55      	ldr	r3, [pc, #340]	; (10005b7c <main+0x620>)
10005a28:	781b      	ldrb	r3, [r3, #0]
10005a2a:	2b01      	cmp	r3, #1
10005a2c:	d119      	bne.n	10005a62 <main+0x506>
					ADC_lower_threshold -= ADC_THRESHOLD_INCREMENT;
10005a2e:	4b56      	ldr	r3, [pc, #344]	; (10005b88 <main+0x62c>)
10005a30:	681b      	ldr	r3, [r3, #0]
10005a32:	3b75      	subs	r3, #117	; 0x75
10005a34:	1c1a      	adds	r2, r3, #0
10005a36:	4b54      	ldr	r3, [pc, #336]	; (10005b88 <main+0x62c>)
10005a38:	601a      	str	r2, [r3, #0]
					// If minimum is reached blink led 2 times, then continue fading
					if(ADC_lower_threshold <= 0){
10005a3a:	4b53      	ldr	r3, [pc, #332]	; (10005b88 <main+0x62c>)
10005a3c:	681b      	ldr	r3, [r3, #0]
10005a3e:	2b00      	cmp	r3, #0
10005a40:	dc2e      	bgt.n	10005aa0 <main+0x544>
						ADC_lower_threshold = 0;
10005a42:	4b51      	ldr	r3, [pc, #324]	; (10005b88 <main+0x62c>)
10005a44:	2200      	movs	r2, #0
10005a46:	601a      	str	r2, [r3, #0]
						led_number_single = 2;
10005a48:	4b48      	ldr	r3, [pc, #288]	; (10005b6c <main+0x610>)
10005a4a:	2202      	movs	r2, #2
10005a4c:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10005a4e:	4b48      	ldr	r3, [pc, #288]	; (10005b70 <main+0x614>)
10005a50:	2202      	movs	r2, #2
10005a52:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10005a54:	4b47      	ldr	r3, [pc, #284]	; (10005b74 <main+0x618>)
10005a56:	2201      	movs	r2, #1
10005a58:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_FADE_DOWN;
10005a5a:	4b47      	ldr	r3, [pc, #284]	; (10005b78 <main+0x61c>)
10005a5c:	2203      	movs	r2, #3
10005a5e:	701a      	strb	r2, [r3, #0]
					led_number_single = 3;
					led_status_pattern = LED_NUMBER;
					led_pattern_mode = LED_PATTERN_SINGLE;
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
				}
				break;
10005a60:	e074      	b.n	10005b4c <main+0x5f0>
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_FADE_DOWN;
					}
				}
				else if(buttonpress_down == BTNPRESS_LONGEST){
10005a62:	4b46      	ldr	r3, [pc, #280]	; (10005b7c <main+0x620>)
10005a64:	781b      	ldrb	r3, [r3, #0]
10005a66:	2b03      	cmp	r3, #3
10005a68:	d11a      	bne.n	10005aa0 <main+0x544>
					// Save current ADC value as threshold
					ADC_lower_threshold = ADC_val_current;
10005a6a:	4b45      	ldr	r3, [pc, #276]	; (10005b80 <main+0x624>)
10005a6c:	681b      	ldr	r3, [r3, #0]
10005a6e:	1c1a      	adds	r2, r3, #0
10005a70:	4b45      	ldr	r3, [pc, #276]	; (10005b88 <main+0x62c>)
10005a72:	601a      	str	r2, [r3, #0]
					write_eeprom_setup(EEPROM_LOWER_TH, ADC_lower_threshold);
10005a74:	4b44      	ldr	r3, [pc, #272]	; (10005b88 <main+0x62c>)
10005a76:	681b      	ldr	r3, [r3, #0]
10005a78:	2001      	movs	r0, #1
10005a7a:	1c19      	adds	r1, r3, #0
10005a7c:	f7ff fc08 	bl	10005290 <write_eeprom_setup>
					setup_state = SETUP_IDLE;
10005a80:	4b40      	ldr	r3, [pc, #256]	; (10005b84 <main+0x628>)
10005a82:	2200      	movs	r2, #0
10005a84:	701a      	strb	r2, [r3, #0]
					// Blink LED 3 times (user info) and return to operation where led matches the state of the relay
					led_number_single = 3;
10005a86:	4b39      	ldr	r3, [pc, #228]	; (10005b6c <main+0x610>)
10005a88:	2203      	movs	r2, #3
10005a8a:	801a      	strh	r2, [r3, #0]
					led_status_pattern = LED_NUMBER;
10005a8c:	4b38      	ldr	r3, [pc, #224]	; (10005b70 <main+0x614>)
10005a8e:	2202      	movs	r2, #2
10005a90:	701a      	strb	r2, [r3, #0]
					led_pattern_mode = LED_PATTERN_SINGLE;
10005a92:	4b38      	ldr	r3, [pc, #224]	; (10005b74 <main+0x618>)
10005a94:	2201      	movs	r2, #1
10005a96:	701a      	strb	r2, [r3, #0]
					led_status_pattern_after_single = LED_MATCH_RELAY_STATE;
10005a98:	4b37      	ldr	r3, [pc, #220]	; (10005b78 <main+0x61c>)
10005a9a:	2205      	movs	r2, #5
10005a9c:	701a      	strb	r2, [r3, #0]
				}
				break;
10005a9e:	e055      	b.n	10005b4c <main+0x5f0>
10005aa0:	e054      	b.n	10005b4c <main+0x5f0>
			case SETUP_TIME_TH:
				/// Interpret button press:
				// A long  press of up or down brings system back to setup idle
				// A short press of up         increases the threshold exceed time
				// A short press of down       decreases the threshold exceed time
				if(buttonpress_up == BTNPRESS_LONG || buttonpress_down == BTNPRESS_LONG){
10005aa2:	4b2f      	ldr	r3, [pc, #188]	; (10005b60 <main+0x604>)
10005aa4:	781b      	ldrb	r3, [r3, #0]
10005aa6:	2b02      	cmp	r3, #2
10005aa8:	d003      	beq.n	10005ab2 <main+0x556>
10005aaa:	4b34      	ldr	r3, [pc, #208]	; (10005b7c <main+0x620>)
10005aac:	781b      	ldrb	r3, [r3, #0]
10005aae:	2b02      	cmp	r3, #2
10005ab0:	d10c      	bne.n	10005acc <main+0x570>
					write_eeprom_setup(EEPROM_LATCHTIME, relay_threshold_latchtime);
10005ab2:	4b36      	ldr	r3, [pc, #216]	; (10005b8c <main+0x630>)
10005ab4:	681b      	ldr	r3, [r3, #0]
10005ab6:	2003      	movs	r0, #3
10005ab8:	1c19      	adds	r1, r3, #0
10005aba:	f7ff fbe9 	bl	10005290 <write_eeprom_setup>
					setup_state = SETUP_IDLE;
10005abe:	4b31      	ldr	r3, [pc, #196]	; (10005b84 <main+0x628>)
10005ac0:	2200      	movs	r2, #0
10005ac2:	701a      	strb	r2, [r3, #0]
					led_status_pattern = LED_MATCH_RELAY_STATE;
10005ac4:	4b2a      	ldr	r3, [pc, #168]	; (10005b70 <main+0x614>)
10005ac6:	2205      	movs	r2, #5
10005ac8:	701a      	strb	r2, [r3, #0]
10005aca:	e03e      	b.n	10005b4a <main+0x5ee>
				}
				else if(buttonpress_up == BTNPRESS_STD){
10005acc:	4b24      	ldr	r3, [pc, #144]	; (10005b60 <main+0x604>)
10005ace:	781b      	ldrb	r3, [r3, #0]
10005ad0:	2b01      	cmp	r3, #1
10005ad2:	d11b      	bne.n	10005b0c <main+0x5b0>
					relay_threshold_latchtime += RELAY_LATCHTIME_INCREMENT;
10005ad4:	4b2d      	ldr	r3, [pc, #180]	; (10005b8c <main+0x630>)
10005ad6:	681b      	ldr	r3, [r3, #0]
10005ad8:	33f5      	adds	r3, #245	; 0xf5
10005ada:	33ff      	adds	r3, #255	; 0xff
10005adc:	1c1a      	adds	r2, r3, #0
10005ade:	4b2b      	ldr	r3, [pc, #172]	; (10005b8c <main+0x630>)
10005ae0:	601a      	str	r2, [r3, #0]
					if(relay_threshold_latchtime > RELAY_LATCHTIME_MAX){
10005ae2:	4b2a      	ldr	r3, [pc, #168]	; (10005b8c <main+0x630>)
10005ae4:	681b      	ldr	r3, [r3, #0]
10005ae6:	4a2a      	ldr	r2, [pc, #168]	; (10005b90 <main+0x634>)
10005ae8:	4293      	cmp	r3, r2
10005aea:	dd2e      	ble.n	10005b4a <main+0x5ee>
						relay_threshold_latchtime = RELAY_LATCHTIME_MAX;
10005aec:	4b27      	ldr	r3, [pc, #156]	; (10005b8c <main+0x630>)
10005aee:	4a28      	ldr	r2, [pc, #160]	; (10005b90 <main+0x634>)
10005af0:	601a      	str	r2, [r3, #0]
						led_number_single = 2;
10005af2:	4b1e      	ldr	r3, [pc, #120]	; (10005b6c <main+0x610>)
10005af4:	2202      	movs	r2, #2
10005af6:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10005af8:	4b1d      	ldr	r3, [pc, #116]	; (10005b70 <main+0x614>)
10005afa:	2202      	movs	r2, #2
10005afc:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10005afe:	4b1d      	ldr	r3, [pc, #116]	; (10005b74 <main+0x618>)
10005b00:	2201      	movs	r2, #1
10005b02:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_NUMBER;
10005b04:	4b1c      	ldr	r3, [pc, #112]	; (10005b78 <main+0x61c>)
10005b06:	2202      	movs	r2, #2
10005b08:	701a      	strb	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_NUMBER;
					}
				}
				break;
10005b0a:	e01e      	b.n	10005b4a <main+0x5ee>
						led_status_pattern = LED_NUMBER;
						led_pattern_mode = LED_PATTERN_SINGLE;
						led_status_pattern_after_single = LED_NUMBER;
					}
				}
				else if(buttonpress_down == BTNPRESS_STD){
10005b0c:	4b1b      	ldr	r3, [pc, #108]	; (10005b7c <main+0x620>)
10005b0e:	781b      	ldrb	r3, [r3, #0]
10005b10:	2b01      	cmp	r3, #1
10005b12:	d11a      	bne.n	10005b4a <main+0x5ee>
					relay_threshold_latchtime -= RELAY_LATCHTIME_INCREMENT;
10005b14:	4b1d      	ldr	r3, [pc, #116]	; (10005b8c <main+0x630>)
10005b16:	681b      	ldr	r3, [r3, #0]
10005b18:	3bf5      	subs	r3, #245	; 0xf5
10005b1a:	3bff      	subs	r3, #255	; 0xff
10005b1c:	1c1a      	adds	r2, r3, #0
10005b1e:	4b1b      	ldr	r3, [pc, #108]	; (10005b8c <main+0x630>)
10005b20:	601a      	str	r2, [r3, #0]
					if(relay_threshold_latchtime <= 0){
10005b22:	4b1a      	ldr	r3, [pc, #104]	; (10005b8c <main+0x630>)
10005b24:	681b      	ldr	r3, [r3, #0]
10005b26:	2b00      	cmp	r3, #0
10005b28:	dc0f      	bgt.n	10005b4a <main+0x5ee>
						relay_threshold_latchtime = 0;
10005b2a:	4b18      	ldr	r3, [pc, #96]	; (10005b8c <main+0x630>)
10005b2c:	2200      	movs	r2, #0
10005b2e:	601a      	str	r2, [r3, #0]
						led_number_single = 2;
10005b30:	4b0e      	ldr	r3, [pc, #56]	; (10005b6c <main+0x610>)
10005b32:	2202      	movs	r2, #2
10005b34:	801a      	strh	r2, [r3, #0]
						led_status_pattern = LED_NUMBER;
10005b36:	4b0e      	ldr	r3, [pc, #56]	; (10005b70 <main+0x614>)
10005b38:	2202      	movs	r2, #2
10005b3a:	701a      	strb	r2, [r3, #0]
						led_pattern_mode = LED_PATTERN_SINGLE;
10005b3c:	4b0d      	ldr	r3, [pc, #52]	; (10005b74 <main+0x618>)
10005b3e:	2201      	movs	r2, #1
10005b40:	701a      	strb	r2, [r3, #0]
						led_status_pattern_after_single = LED_NUMBER;
10005b42:	4b0d      	ldr	r3, [pc, #52]	; (10005b78 <main+0x61c>)
10005b44:	2202      	movs	r2, #2
10005b46:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
10005b48:	e7ff      	b.n	10005b4a <main+0x5ee>
10005b4a:	46c0      	nop			; (mov r8, r8)
		}

		// Reset all button presses
		buttonpress_usb = BTNPRESS_NOT;
10005b4c:	4b11      	ldr	r3, [pc, #68]	; (10005b94 <main+0x638>)
10005b4e:	2200      	movs	r2, #0
10005b50:	701a      	strb	r2, [r3, #0]
		buttonpress_up = BTNPRESS_NOT;
10005b52:	4b03      	ldr	r3, [pc, #12]	; (10005b60 <main+0x604>)
10005b54:	2200      	movs	r2, #0
10005b56:	701a      	strb	r2, [r3, #0]
		buttonpress_down = BTNPRESS_NOT;
10005b58:	4b08      	ldr	r3, [pc, #32]	; (10005b7c <main+0x620>)
10005b5a:	2200      	movs	r2, #0
10005b5c:	701a      	strb	r2, [r3, #0]
	}
10005b5e:	e55b      	b.n	10005618 <main+0xbc>
10005b60:	200005e3 	.word	0x200005e3
10005b64:	200005a8 	.word	0x200005a8
10005b68:	00000fff 	.word	0x00000fff
10005b6c:	200005e0 	.word	0x200005e0
10005b70:	200005da 	.word	0x200005da
10005b74:	200005dc 	.word	0x200005dc
10005b78:	200005dd 	.word	0x200005dd
10005b7c:	200005e4 	.word	0x200005e4
10005b80:	200005fc 	.word	0x200005fc
10005b84:	200005d9 	.word	0x200005d9
10005b88:	200005ac 	.word	0x200005ac
10005b8c:	200005a4 	.word	0x200005a4
10005b90:	0000ea60 	.word	0x0000ea60
10005b94:	200005e2 	.word	0x200005e2

10005b98 <VADC0_C0_0_IRQHandler>:
}

int meas_invalid_count = 0;

void Adc_Measurement_Handler()
{
10005b98:	b580      	push	{r7, lr}
10005b9a:	b082      	sub	sp, #8
10005b9c:	af00      	add	r7, sp, #0
	//uint8_t channel_num;
	//uint8_t group_num;
	uint32_t adc_register;

	#if(UC_SERIES == XMC11)
	adc_register = ADC_MEASUREMENT_GetGlobalDetailedResult();
10005b9e:	f7fe ffb1 	bl	10004b04 <ADC_MEASUREMENT_GetGlobalDetailedResult>
10005ba2:	1c03      	adds	r3, r0, #0
10005ba4:	607b      	str	r3, [r7, #4]
	#endif

	if((bool)(adc_register >> VADC_GLOBRES_VF_Pos))
10005ba6:	687b      	ldr	r3, [r7, #4]
10005ba8:	2b00      	cmp	r3, #0
10005baa:	da0d      	bge.n	10005bc8 <VADC0_C0_0_IRQHandler+0x30>
	{
		//channel_num = (adc_register & VADC_GLOBRES_CHNR_Msk) >> VADC_GLOBRES_CHNR_Pos;
		//group_num = ADC_MEASUREMENT_Channel_A.group_index;
		ADC_val_current = (adc_register & VADC_GLOBRES_RESULT_Msk) >> ((uint32_t)(ADC_SENSOR.iclass_config_handle->conversion_mode_standard) * (uint32_t)2);
10005bac:	687b      	ldr	r3, [r7, #4]
10005bae:	041b      	lsls	r3, r3, #16
10005bb0:	0c1a      	lsrs	r2, r3, #16
10005bb2:	4b09      	ldr	r3, [pc, #36]	; (10005bd8 <VADC0_C0_0_IRQHandler+0x40>)
10005bb4:	689b      	ldr	r3, [r3, #8]
10005bb6:	785b      	ldrb	r3, [r3, #1]
10005bb8:	075b      	lsls	r3, r3, #29
10005bba:	0f5b      	lsrs	r3, r3, #29
10005bbc:	b2db      	uxtb	r3, r3
10005bbe:	005b      	lsls	r3, r3, #1
10005bc0:	40da      	lsrs	r2, r3
10005bc2:	4b06      	ldr	r3, [pc, #24]	; (10005bdc <VADC0_C0_0_IRQHandler+0x44>)
10005bc4:	601a      	str	r2, [r3, #0]
10005bc6:	e004      	b.n	10005bd2 <VADC0_C0_0_IRQHandler+0x3a>
	}
	else{
		meas_invalid_count++;
10005bc8:	4b05      	ldr	r3, [pc, #20]	; (10005be0 <VADC0_C0_0_IRQHandler+0x48>)
10005bca:	681b      	ldr	r3, [r3, #0]
10005bcc:	1c5a      	adds	r2, r3, #1
10005bce:	4b04      	ldr	r3, [pc, #16]	; (10005be0 <VADC0_C0_0_IRQHandler+0x48>)
10005bd0:	601a      	str	r2, [r3, #0]
	}

	//	ADC_val_current = ADC_MEASUREMENT_GetGlobalResult();
	//	ADC_val_current = ADC_val_current >> ((uint32_t)ADC_SENSOR.iclass_config_handle->conversion_mode_standard * (uint32_t)2);
}
10005bd2:	46bd      	mov	sp, r7
10005bd4:	b002      	add	sp, #8
10005bd6:	bd80      	pop	{r7, pc}
10005bd8:	20000588 	.word	0x20000588
10005bdc:	200005fc 	.word	0x200005fc
10005be0:	20000618 	.word	0x20000618

10005be4 <__aeabi_uidiv>:
10005be4:	2200      	movs	r2, #0
10005be6:	0843      	lsrs	r3, r0, #1
10005be8:	428b      	cmp	r3, r1
10005bea:	d374      	bcc.n	10005cd6 <__aeabi_uidiv+0xf2>
10005bec:	0903      	lsrs	r3, r0, #4
10005bee:	428b      	cmp	r3, r1
10005bf0:	d35f      	bcc.n	10005cb2 <__aeabi_uidiv+0xce>
10005bf2:	0a03      	lsrs	r3, r0, #8
10005bf4:	428b      	cmp	r3, r1
10005bf6:	d344      	bcc.n	10005c82 <__aeabi_uidiv+0x9e>
10005bf8:	0b03      	lsrs	r3, r0, #12
10005bfa:	428b      	cmp	r3, r1
10005bfc:	d328      	bcc.n	10005c50 <__aeabi_uidiv+0x6c>
10005bfe:	0c03      	lsrs	r3, r0, #16
10005c00:	428b      	cmp	r3, r1
10005c02:	d30d      	bcc.n	10005c20 <__aeabi_uidiv+0x3c>
10005c04:	22ff      	movs	r2, #255	; 0xff
10005c06:	0209      	lsls	r1, r1, #8
10005c08:	ba12      	rev	r2, r2
10005c0a:	0c03      	lsrs	r3, r0, #16
10005c0c:	428b      	cmp	r3, r1
10005c0e:	d302      	bcc.n	10005c16 <__aeabi_uidiv+0x32>
10005c10:	1212      	asrs	r2, r2, #8
10005c12:	0209      	lsls	r1, r1, #8
10005c14:	d065      	beq.n	10005ce2 <__aeabi_uidiv+0xfe>
10005c16:	0b03      	lsrs	r3, r0, #12
10005c18:	428b      	cmp	r3, r1
10005c1a:	d319      	bcc.n	10005c50 <__aeabi_uidiv+0x6c>
10005c1c:	e000      	b.n	10005c20 <__aeabi_uidiv+0x3c>
10005c1e:	0a09      	lsrs	r1, r1, #8
10005c20:	0bc3      	lsrs	r3, r0, #15
10005c22:	428b      	cmp	r3, r1
10005c24:	d301      	bcc.n	10005c2a <__aeabi_uidiv+0x46>
10005c26:	03cb      	lsls	r3, r1, #15
10005c28:	1ac0      	subs	r0, r0, r3
10005c2a:	4152      	adcs	r2, r2
10005c2c:	0b83      	lsrs	r3, r0, #14
10005c2e:	428b      	cmp	r3, r1
10005c30:	d301      	bcc.n	10005c36 <__aeabi_uidiv+0x52>
10005c32:	038b      	lsls	r3, r1, #14
10005c34:	1ac0      	subs	r0, r0, r3
10005c36:	4152      	adcs	r2, r2
10005c38:	0b43      	lsrs	r3, r0, #13
10005c3a:	428b      	cmp	r3, r1
10005c3c:	d301      	bcc.n	10005c42 <__aeabi_uidiv+0x5e>
10005c3e:	034b      	lsls	r3, r1, #13
10005c40:	1ac0      	subs	r0, r0, r3
10005c42:	4152      	adcs	r2, r2
10005c44:	0b03      	lsrs	r3, r0, #12
10005c46:	428b      	cmp	r3, r1
10005c48:	d301      	bcc.n	10005c4e <__aeabi_uidiv+0x6a>
10005c4a:	030b      	lsls	r3, r1, #12
10005c4c:	1ac0      	subs	r0, r0, r3
10005c4e:	4152      	adcs	r2, r2
10005c50:	0ac3      	lsrs	r3, r0, #11
10005c52:	428b      	cmp	r3, r1
10005c54:	d301      	bcc.n	10005c5a <__aeabi_uidiv+0x76>
10005c56:	02cb      	lsls	r3, r1, #11
10005c58:	1ac0      	subs	r0, r0, r3
10005c5a:	4152      	adcs	r2, r2
10005c5c:	0a83      	lsrs	r3, r0, #10
10005c5e:	428b      	cmp	r3, r1
10005c60:	d301      	bcc.n	10005c66 <__aeabi_uidiv+0x82>
10005c62:	028b      	lsls	r3, r1, #10
10005c64:	1ac0      	subs	r0, r0, r3
10005c66:	4152      	adcs	r2, r2
10005c68:	0a43      	lsrs	r3, r0, #9
10005c6a:	428b      	cmp	r3, r1
10005c6c:	d301      	bcc.n	10005c72 <__aeabi_uidiv+0x8e>
10005c6e:	024b      	lsls	r3, r1, #9
10005c70:	1ac0      	subs	r0, r0, r3
10005c72:	4152      	adcs	r2, r2
10005c74:	0a03      	lsrs	r3, r0, #8
10005c76:	428b      	cmp	r3, r1
10005c78:	d301      	bcc.n	10005c7e <__aeabi_uidiv+0x9a>
10005c7a:	020b      	lsls	r3, r1, #8
10005c7c:	1ac0      	subs	r0, r0, r3
10005c7e:	4152      	adcs	r2, r2
10005c80:	d2cd      	bcs.n	10005c1e <__aeabi_uidiv+0x3a>
10005c82:	09c3      	lsrs	r3, r0, #7
10005c84:	428b      	cmp	r3, r1
10005c86:	d301      	bcc.n	10005c8c <__aeabi_uidiv+0xa8>
10005c88:	01cb      	lsls	r3, r1, #7
10005c8a:	1ac0      	subs	r0, r0, r3
10005c8c:	4152      	adcs	r2, r2
10005c8e:	0983      	lsrs	r3, r0, #6
10005c90:	428b      	cmp	r3, r1
10005c92:	d301      	bcc.n	10005c98 <__aeabi_uidiv+0xb4>
10005c94:	018b      	lsls	r3, r1, #6
10005c96:	1ac0      	subs	r0, r0, r3
10005c98:	4152      	adcs	r2, r2
10005c9a:	0943      	lsrs	r3, r0, #5
10005c9c:	428b      	cmp	r3, r1
10005c9e:	d301      	bcc.n	10005ca4 <__aeabi_uidiv+0xc0>
10005ca0:	014b      	lsls	r3, r1, #5
10005ca2:	1ac0      	subs	r0, r0, r3
10005ca4:	4152      	adcs	r2, r2
10005ca6:	0903      	lsrs	r3, r0, #4
10005ca8:	428b      	cmp	r3, r1
10005caa:	d301      	bcc.n	10005cb0 <__aeabi_uidiv+0xcc>
10005cac:	010b      	lsls	r3, r1, #4
10005cae:	1ac0      	subs	r0, r0, r3
10005cb0:	4152      	adcs	r2, r2
10005cb2:	08c3      	lsrs	r3, r0, #3
10005cb4:	428b      	cmp	r3, r1
10005cb6:	d301      	bcc.n	10005cbc <__aeabi_uidiv+0xd8>
10005cb8:	00cb      	lsls	r3, r1, #3
10005cba:	1ac0      	subs	r0, r0, r3
10005cbc:	4152      	adcs	r2, r2
10005cbe:	0883      	lsrs	r3, r0, #2
10005cc0:	428b      	cmp	r3, r1
10005cc2:	d301      	bcc.n	10005cc8 <__aeabi_uidiv+0xe4>
10005cc4:	008b      	lsls	r3, r1, #2
10005cc6:	1ac0      	subs	r0, r0, r3
10005cc8:	4152      	adcs	r2, r2
10005cca:	0843      	lsrs	r3, r0, #1
10005ccc:	428b      	cmp	r3, r1
10005cce:	d301      	bcc.n	10005cd4 <__aeabi_uidiv+0xf0>
10005cd0:	004b      	lsls	r3, r1, #1
10005cd2:	1ac0      	subs	r0, r0, r3
10005cd4:	4152      	adcs	r2, r2
10005cd6:	1a41      	subs	r1, r0, r1
10005cd8:	d200      	bcs.n	10005cdc <__aeabi_uidiv+0xf8>
10005cda:	4601      	mov	r1, r0
10005cdc:	4152      	adcs	r2, r2
10005cde:	4610      	mov	r0, r2
10005ce0:	4770      	bx	lr
10005ce2:	e7ff      	b.n	10005ce4 <__aeabi_uidiv+0x100>
10005ce4:	b501      	push	{r0, lr}
10005ce6:	2000      	movs	r0, #0
10005ce8:	f000 f80c 	bl	10005d04 <__aeabi_idiv0>
10005cec:	bd02      	pop	{r1, pc}
10005cee:	46c0      	nop			; (mov r8, r8)

10005cf0 <__aeabi_uidivmod>:
10005cf0:	2900      	cmp	r1, #0
10005cf2:	d0f7      	beq.n	10005ce4 <__aeabi_uidiv+0x100>
10005cf4:	b503      	push	{r0, r1, lr}
10005cf6:	f7ff ff75 	bl	10005be4 <__aeabi_uidiv>
10005cfa:	bc0e      	pop	{r1, r2, r3}
10005cfc:	4342      	muls	r2, r0
10005cfe:	1a89      	subs	r1, r1, r2
10005d00:	4718      	bx	r3
10005d02:	46c0      	nop			; (mov r8, r8)

10005d04 <__aeabi_idiv0>:
10005d04:	4770      	bx	lr
10005d06:	46c0      	nop			; (mov r8, r8)

10005d08 <__libc_init_array>:
10005d08:	4b0e      	ldr	r3, [pc, #56]	; (10005d44 <__libc_init_array+0x3c>)
10005d0a:	b570      	push	{r4, r5, r6, lr}
10005d0c:	2500      	movs	r5, #0
10005d0e:	1c1e      	adds	r6, r3, #0
10005d10:	4c0d      	ldr	r4, [pc, #52]	; (10005d48 <__libc_init_array+0x40>)
10005d12:	1ae4      	subs	r4, r4, r3
10005d14:	10a4      	asrs	r4, r4, #2
10005d16:	42a5      	cmp	r5, r4
10005d18:	d004      	beq.n	10005d24 <__libc_init_array+0x1c>
10005d1a:	00ab      	lsls	r3, r5, #2
10005d1c:	58f3      	ldr	r3, [r6, r3]
10005d1e:	4798      	blx	r3
10005d20:	3501      	adds	r5, #1
10005d22:	e7f8      	b.n	10005d16 <__libc_init_array+0xe>
10005d24:	f7fc f902 	bl	10001f2c <_init>
10005d28:	4b08      	ldr	r3, [pc, #32]	; (10005d4c <__libc_init_array+0x44>)
10005d2a:	2500      	movs	r5, #0
10005d2c:	1c1e      	adds	r6, r3, #0
10005d2e:	4c08      	ldr	r4, [pc, #32]	; (10005d50 <__libc_init_array+0x48>)
10005d30:	1ae4      	subs	r4, r4, r3
10005d32:	10a4      	asrs	r4, r4, #2
10005d34:	42a5      	cmp	r5, r4
10005d36:	d004      	beq.n	10005d42 <__libc_init_array+0x3a>
10005d38:	00ab      	lsls	r3, r5, #2
10005d3a:	58f3      	ldr	r3, [r6, r3]
10005d3c:	4798      	blx	r3
10005d3e:	3501      	adds	r5, #1
10005d40:	e7f8      	b.n	10005d34 <__libc_init_array+0x2c>
10005d42:	bd70      	pop	{r4, r5, r6, pc}
10005d44:	200005b8 	.word	0x200005b8
10005d48:	200005b8 	.word	0x200005b8
10005d4c:	200005b8 	.word	0x200005b8
10005d50:	200005b8 	.word	0x200005b8
10005d54:	10001ce6 	.word	0x10001ce6
10005d58:	10001ce6 	.word	0x10001ce6
10005d5c:	10001cf0 	.word	0x10001cf0
10005d60:	10001cf0 	.word	0x10001cf0
10005d64:	10001d1e 	.word	0x10001d1e
10005d68:	10001d1e 	.word	0x10001d1e
10005d6c:	10001d1e 	.word	0x10001d1e
10005d70:	10001d1e 	.word	0x10001d1e
10005d74:	10001cfa 	.word	0x10001cfa
10005d78:	10001d06 	.word	0x10001d06
10005d7c:	10001d12 	.word	0x10001d12
10005d80:	10001d12 	.word	0x10001d12

10005d84 <PWM_CCU4_LED_STATUS_timer_handle>:
	...

10005d8c <PWM_CCU4_LED_STATUS_event0_config>:
10005d8c:	00010000                                ....

10005d90 <PWM_CCU4_LED_STATUS_event1_config>:
10005d90:	00010000                                ....

10005d94 <PWM_CCU4_LED_STATUS_event2_config>:
10005d94:	00010000                                ....

10005d98 <PWM_CCU4_LED_STATUS_config_handle>:
10005d98:	f9ff0001 00000000 00000000 00000000     ................
10005da8:	00000000 10005d8c 10005d90 10005d94     .....]...]...]..
	...
10005dc4:	01000000 00000000 04000000 10005d84     .............]..
	...
10005de4:	20000548                                H.. 

10005de8 <global_config>:
	...
10005dfc:	100033c6 10003376 10003382 100033b2     .3..v3...3...3..
10005e0c:	100033c6 1000337c 100033a2 100033a8     .3..|3...3...3..
10005e1c:	100033bc                                .3..

10005e20 <E_EEPROM_XMC1_block_Config>:
10005e20:	00000001 00000004 00000002 00000004     ................
10005e30:	00000003 00000004                       ........

10005e38 <IO_USB_SI>:
10005e38:	40040200 00000080 00010000 00000000     ...@............

10005e48 <IO_USB_OE>:
10005e48:	40040000 00000080 00010000 00000009     ...@............

10005e58 <IO_LED_R_STATUS>:
10005e58:	40040000 000000a0 00000001 00000006     ...@............

10005e68 <IO_SW_USB>:
10005e68:	40040000 00000010 00000000 00000008     ...@............

10005e78 <IO_SW_UP>:
10005e78:	40040200 00000010 00000000 00000007     ...@............

10005e88 <IO_SW_DOWN>:
10005e88:	40040200 00000010 00000000 00000009     ...@............

10005e98 <IO_USBPWR_2>:
10005e98:	40040000 00000080 00010000 00000005     ...@............

10005ea8 <IO_USBPWR_1>:
10005ea8:	40040200 00000080 00010000 0000000a     ...@............

10005eb8 <IO_RELAY>:
10005eb8:	40040000 00000080 00010000 00000007     ...@............

10005ec8 <IO_LED_USB2>:
10005ec8:	40040000 00000080 00010000 00000000     ...@............

10005ed8 <IO_LED_USB1>:
10005ed8:	40040200 00000080 00010000 0000000b     ...@............
10005ee8:	00000100 00010000 00000000              ............

10005ef4 <global_iclass_config>:
10005ef4:	0000001f                                ....

10005ef8 <global_result_intr_handle>:
10005ef8:	0000000f 00000003                       ........

10005f00 <backgnd_config>:
10005f00:	00000005 00000000 00000000 10004ca0     .............L..
10005f10:	10004cae 10004cba 10004d00 10004d52     .L...L...M..RM..
10005f20:	10004da6                                .M..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100023a1 	.word	0x100023a1
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10005b99 	.word	0x10005b99
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10001099 	.word	0x10001099
